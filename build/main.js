//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){var n=this,t=n._,r={},e=Array.prototype,u=Object.prototype,i=Function.prototype,a=e.push,o=e.slice,c=e.concat,l=u.toString,f=u.hasOwnProperty,s=e.forEach,p=e.map,h=e.reduce,v=e.reduceRight,g=e.filter,d=e.every,m=e.some,y=e.indexOf,b=e.lastIndexOf,x=Array.isArray,w=Object.keys,_=i.bind,j=function(n){return n instanceof j?n:this instanceof j?void(this._wrapped=n):new j(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=j),exports._=j):n._=j,j.VERSION="1.6.0";var A=j.each=j.forEach=function(n,t,e){if(null==n)return n;if(s&&n.forEach===s)n.forEach(t,e);else if(n.length===+n.length){for(var u=0,i=n.length;i>u;u++)if(t.call(e,n[u],u,n)===r)return}else for(var a=j.keys(n),u=0,i=a.length;i>u;u++)if(t.call(e,n[a[u]],a[u],n)===r)return;return n};j.map=j.collect=function(n,t,r){var e=[];return null==n?e:p&&n.map===p?n.map(t,r):(A(n,function(n,u,i){e.push(t.call(r,n,u,i))}),e)};var O="Reduce of empty array with no initial value";j.reduce=j.foldl=j.inject=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),h&&n.reduce===h)return e&&(t=j.bind(t,e)),u?n.reduce(t,r):n.reduce(t);if(A(n,function(n,i,a){u?r=t.call(e,r,n,i,a):(r=n,u=!0)}),!u)throw new TypeError(O);return r},j.reduceRight=j.foldr=function(n,t,r,e){var u=arguments.length>2;if(null==n&&(n=[]),v&&n.reduceRight===v)return e&&(t=j.bind(t,e)),u?n.reduceRight(t,r):n.reduceRight(t);var i=n.length;if(i!==+i){var a=j.keys(n);i=a.length}if(A(n,function(o,c,l){c=a?a[--i]:--i,u?r=t.call(e,r,n[c],c,l):(r=n[c],u=!0)}),!u)throw new TypeError(O);return r},j.find=j.detect=function(n,t,r){var e;return k(n,function(n,u,i){return t.call(r,n,u,i)?(e=n,!0):void 0}),e},j.filter=j.select=function(n,t,r){var e=[];return null==n?e:g&&n.filter===g?n.filter(t,r):(A(n,function(n,u,i){t.call(r,n,u,i)&&e.push(n)}),e)},j.reject=function(n,t,r){return j.filter(n,function(n,e,u){return!t.call(r,n,e,u)},r)},j.every=j.all=function(n,t,e){t||(t=j.identity);var u=!0;return null==n?u:d&&n.every===d?n.every(t,e):(A(n,function(n,i,a){return(u=u&&t.call(e,n,i,a))?void 0:r}),!!u)};var k=j.some=j.any=function(n,t,e){t||(t=j.identity);var u=!1;return null==n?u:m&&n.some===m?n.some(t,e):(A(n,function(n,i,a){return u||(u=t.call(e,n,i,a))?r:void 0}),!!u)};j.contains=j.include=function(n,t){return null==n?!1:y&&n.indexOf===y?n.indexOf(t)!=-1:k(n,function(n){return n===t})},j.invoke=function(n,t){var r=o.call(arguments,2),e=j.isFunction(t);return j.map(n,function(n){return(e?t:n[t]).apply(n,r)})},j.pluck=function(n,t){return j.map(n,j.property(t))},j.where=function(n,t){return j.filter(n,j.matches(t))},j.findWhere=function(n,t){return j.find(n,j.matches(t))},j.max=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.max.apply(Math,n);var e=-1/0,u=-1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;o>u&&(e=n,u=o)}),e},j.min=function(n,t,r){if(!t&&j.isArray(n)&&n[0]===+n[0]&&n.length<65535)return Math.min.apply(Math,n);var e=1/0,u=1/0;return A(n,function(n,i,a){var o=t?t.call(r,n,i,a):n;u>o&&(e=n,u=o)}),e},j.shuffle=function(n){var t,r=0,e=[];return A(n,function(n){t=j.random(r++),e[r-1]=e[t],e[t]=n}),e},j.sample=function(n,t,r){return null==t||r?(n.length!==+n.length&&(n=j.values(n)),n[j.random(n.length-1)]):j.shuffle(n).slice(0,Math.max(0,t))};var E=function(n){return null==n?j.identity:j.isFunction(n)?n:j.property(n)};j.sortBy=function(n,t,r){return t=E(t),j.pluck(j.map(n,function(n,e,u){return{value:n,index:e,criteria:t.call(r,n,e,u)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=E(r),A(t,function(i,a){var o=r.call(e,i,a,t);n(u,o,i)}),u}};j.groupBy=F(function(n,t,r){j.has(n,t)?n[t].push(r):n[t]=[r]}),j.indexBy=F(function(n,t,r){n[t]=r}),j.countBy=F(function(n,t){j.has(n,t)?n[t]++:n[t]=1}),j.sortedIndex=function(n,t,r,e){r=E(r);for(var u=r.call(e,t),i=0,a=n.length;a>i;){var o=i+a>>>1;r.call(e,n[o])<u?i=o+1:a=o}return i},j.toArray=function(n){return n?j.isArray(n)?o.call(n):n.length===+n.length?j.map(n,j.identity):j.values(n):[]},j.size=function(n){return null==n?0:n.length===+n.length?n.length:j.keys(n).length},j.first=j.head=j.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:0>t?[]:o.call(n,0,t)},j.initial=function(n,t,r){return o.call(n,0,n.length-(null==t||r?1:t))},j.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:o.call(n,Math.max(n.length-t,0))},j.rest=j.tail=j.drop=function(n,t,r){return o.call(n,null==t||r?1:t)},j.compact=function(n){return j.filter(n,j.identity)};var M=function(n,t,r){return t&&j.every(n,j.isArray)?c.apply(r,n):(A(n,function(n){j.isArray(n)||j.isArguments(n)?t?a.apply(r,n):M(n,t,r):r.push(n)}),r)};j.flatten=function(n,t){return M(n,t,[])},j.without=function(n){return j.difference(n,o.call(arguments,1))},j.partition=function(n,t){var r=[],e=[];return A(n,function(n){(t(n)?r:e).push(n)}),[r,e]},j.uniq=j.unique=function(n,t,r,e){j.isFunction(t)&&(e=r,r=t,t=!1);var u=r?j.map(n,r,e):n,i=[],a=[];return A(u,function(r,e){(t?e&&a[a.length-1]===r:j.contains(a,r))||(a.push(r),i.push(n[e]))}),i},j.union=function(){return j.uniq(j.flatten(arguments,!0))},j.intersection=function(n){var t=o.call(arguments,1);return j.filter(j.uniq(n),function(n){return j.every(t,function(t){return j.contains(t,n)})})},j.difference=function(n){var t=c.apply(e,o.call(arguments,1));return j.filter(n,function(n){return!j.contains(t,n)})},j.zip=function(){for(var n=j.max(j.pluck(arguments,"length").concat(0)),t=new Array(n),r=0;n>r;r++)t[r]=j.pluck(arguments,""+r);return t},j.object=function(n,t){if(null==n)return{};for(var r={},e=0,u=n.length;u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},j.indexOf=function(n,t,r){if(null==n)return-1;var e=0,u=n.length;if(r){if("number"!=typeof r)return e=j.sortedIndex(n,t),n[e]===t?e:-1;e=0>r?Math.max(0,u+r):r}if(y&&n.indexOf===y)return n.indexOf(t,r);for(;u>e;e++)if(n[e]===t)return e;return-1},j.lastIndexOf=function(n,t,r){if(null==n)return-1;var e=null!=r;if(b&&n.lastIndexOf===b)return e?n.lastIndexOf(t,r):n.lastIndexOf(t);for(var u=e?r:n.length;u--;)if(n[u]===t)return u;return-1},j.range=function(n,t,r){arguments.length<=1&&(t=n||0,n=0),r=arguments[2]||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=0,i=new Array(e);e>u;)i[u++]=n,n+=r;return i};var R=function(){};j.bind=function(n,t){var r,e;if(_&&n.bind===_)return _.apply(n,o.call(arguments,1));if(!j.isFunction(n))throw new TypeError;return r=o.call(arguments,2),e=function(){if(!(this instanceof e))return n.apply(t,r.concat(o.call(arguments)));R.prototype=n.prototype;var u=new R;R.prototype=null;var i=n.apply(u,r.concat(o.call(arguments)));return Object(i)===i?i:u}},j.partial=function(n){var t=o.call(arguments,1);return function(){for(var r=0,e=t.slice(),u=0,i=e.length;i>u;u++)e[u]===j&&(e[u]=arguments[r++]);for(;r<arguments.length;)e.push(arguments[r++]);return n.apply(this,e)}},j.bindAll=function(n){var t=o.call(arguments,1);if(0===t.length)throw new Error("bindAll must be passed function names");return A(t,function(t){n[t]=j.bind(n[t],n)}),n},j.memoize=function(n,t){var r={};return t||(t=j.identity),function(){var e=t.apply(this,arguments);return j.has(r,e)?r[e]:r[e]=n.apply(this,arguments)}},j.delay=function(n,t){var r=o.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},j.defer=function(n){return j.delay.apply(j,[n,1].concat(o.call(arguments,1)))},j.throttle=function(n,t,r){var e,u,i,a=null,o=0;r||(r={});var c=function(){o=r.leading===!1?0:j.now(),a=null,i=n.apply(e,u),e=u=null};return function(){var l=j.now();o||r.leading!==!1||(o=l);var f=t-(l-o);return e=this,u=arguments,0>=f?(clearTimeout(a),a=null,o=l,i=n.apply(e,u),e=u=null):a||r.trailing===!1||(a=setTimeout(c,f)),i}},j.debounce=function(n,t,r){var e,u,i,a,o,c=function(){var l=j.now()-a;t>l?e=setTimeout(c,t-l):(e=null,r||(o=n.apply(i,u),i=u=null))};return function(){i=this,u=arguments,a=j.now();var l=r&&!e;return e||(e=setTimeout(c,t)),l&&(o=n.apply(i,u),i=u=null),o}},j.once=function(n){var t,r=!1;return function(){return r?t:(r=!0,t=n.apply(this,arguments),n=null,t)}},j.wrap=function(n,t){return j.partial(t,n)},j.compose=function(){var n=arguments;return function(){for(var t=arguments,r=n.length-1;r>=0;r--)t=[n[r].apply(this,t)];return t[0]}},j.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},j.keys=function(n){if(!j.isObject(n))return[];if(w)return w(n);var t=[];for(var r in n)j.has(n,r)&&t.push(r);return t},j.values=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},j.pairs=function(n){for(var t=j.keys(n),r=t.length,e=new Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},j.invert=function(n){for(var t={},r=j.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},j.functions=j.methods=function(n){var t=[];for(var r in n)j.isFunction(n[r])&&t.push(r);return t.sort()},j.extend=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]=t[r]}),n},j.pick=function(n){var t={},r=c.apply(e,o.call(arguments,1));return A(r,function(r){r in n&&(t[r]=n[r])}),t},j.omit=function(n){var t={},r=c.apply(e,o.call(arguments,1));for(var u in n)j.contains(r,u)||(t[u]=n[u]);return t},j.defaults=function(n){return A(o.call(arguments,1),function(t){if(t)for(var r in t)n[r]===void 0&&(n[r]=t[r])}),n},j.clone=function(n){return j.isObject(n)?j.isArray(n)?n.slice():j.extend({},n):n},j.tap=function(n,t){return t(n),n};var S=function(n,t,r,e){if(n===t)return 0!==n||1/n==1/t;if(null==n||null==t)return n===t;n instanceof j&&(n=n._wrapped),t instanceof j&&(t=t._wrapped);var u=l.call(n);if(u!=l.call(t))return!1;switch(u){case"[object String]":return n==String(t);case"[object Number]":return n!=+n?t!=+t:0==n?1/n==1/t:n==+t;case"[object Date]":case"[object Boolean]":return+n==+t;case"[object RegExp]":return n.source==t.source&&n.global==t.global&&n.multiline==t.multiline&&n.ignoreCase==t.ignoreCase}if("object"!=typeof n||"object"!=typeof t)return!1;for(var i=r.length;i--;)if(r[i]==n)return e[i]==t;var a=n.constructor,o=t.constructor;if(a!==o&&!(j.isFunction(a)&&a instanceof a&&j.isFunction(o)&&o instanceof o)&&"constructor"in n&&"constructor"in t)return!1;r.push(n),e.push(t);var c=0,f=!0;if("[object Array]"==u){if(c=n.length,f=c==t.length)for(;c--&&(f=S(n[c],t[c],r,e)););}else{for(var s in n)if(j.has(n,s)&&(c++,!(f=j.has(t,s)&&S(n[s],t[s],r,e))))break;if(f){for(s in t)if(j.has(t,s)&&!c--)break;f=!c}}return r.pop(),e.pop(),f};j.isEqual=function(n,t){return S(n,t,[],[])},j.isEmpty=function(n){if(null==n)return!0;if(j.isArray(n)||j.isString(n))return 0===n.length;for(var t in n)if(j.has(n,t))return!1;return!0},j.isElement=function(n){return!(!n||1!==n.nodeType)},j.isArray=x||function(n){return"[object Array]"==l.call(n)},j.isObject=function(n){return n===Object(n)},A(["Arguments","Function","String","Number","Date","RegExp"],function(n){j["is"+n]=function(t){return l.call(t)=="[object "+n+"]"}}),j.isArguments(arguments)||(j.isArguments=function(n){return!(!n||!j.has(n,"callee"))}),"function"!=typeof/./&&(j.isFunction=function(n){return"function"==typeof n}),j.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},j.isNaN=function(n){return j.isNumber(n)&&n!=+n},j.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"==l.call(n)},j.isNull=function(n){return null===n},j.isUndefined=function(n){return n===void 0},j.has=function(n,t){return f.call(n,t)},j.noConflict=function(){return n._=t,this},j.identity=function(n){return n},j.constant=function(n){return function(){return n}},j.property=function(n){return function(t){return t[n]}},j.matches=function(n){return function(t){if(t===n)return!0;for(var r in n)if(n[r]!==t[r])return!1;return!0}},j.times=function(n,t,r){for(var e=Array(Math.max(0,n)),u=0;n>u;u++)e[u]=t.call(r,u);return e},j.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},j.now=Date.now||function(){return(new Date).getTime()};var T={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};T.unescape=j.invert(T.escape);var I={escape:new RegExp("["+j.keys(T.escape).join("")+"]","g"),unescape:new RegExp("("+j.keys(T.unescape).join("|")+")","g")};j.each(["escape","unescape"],function(n){j[n]=function(t){return null==t?"":(""+t).replace(I[n],function(t){return T[n][t]})}}),j.result=function(n,t){if(null==n)return void 0;var r=n[t];return j.isFunction(r)?r.call(n):r},j.mixin=function(n){A(j.functions(n),function(t){var r=j[t]=n[t];j.prototype[t]=function(){var n=[this._wrapped];return a.apply(n,arguments),z.call(this,r.apply(j,n))}})};var N=0;j.uniqueId=function(n){var t=++N+"";return n?n+t:t},j.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var q=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","	":"t","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\t|\u2028|\u2029/g;j.template=function(n,t,r){var e;r=j.defaults({},r,j.templateSettings);var u=new RegExp([(r.escape||q).source,(r.interpolate||q).source,(r.evaluate||q).source].join("|")+"|$","g"),i=0,a="__p+='";n.replace(u,function(t,r,e,u,o){return a+=n.slice(i,o).replace(D,function(n){return"\\"+B[n]}),r&&(a+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'"),e&&(a+="'+\n((__t=("+e+"))==null?'':__t)+\n'"),u&&(a+="';\n"+u+"\n__p+='"),i=o+t.length,t}),a+="';\n",r.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{e=new Function(r.variable||"obj","_",a)}catch(o){throw o.source=a,o}if(t)return e(t,j);var c=function(n){return e.call(this,n,j)};return c.source="function("+(r.variable||"obj")+"){\n"+a+"}",c},j.chain=function(n){return j(n).chain()};var z=function(n){return this._chain?j(n).chain():n};j.mixin(j),A(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=e[n];j.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!=n&&"splice"!=n||0!==r.length||delete r[0],z.call(this,r)}}),A(["concat","join","slice"],function(n){var t=e[n];j.prototype[n]=function(){return z.call(this,t.apply(this._wrapped,arguments))}}),j.extend(j.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),"function"==typeof define&&define.amd&&define("underscore",[],function(){return j})}).call(this);

(function(t,e){if(typeof define==="function"&&define.amd){define('backbone',["underscore","jquery","exports"],function(i,r,s){t.Backbone=e(t,s,i,r)})}else if(typeof exports!=="undefined"){var i=require("underscore");e(t,exports,i)}else{t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}})(this,function(t,e,i,r){var s=t.Backbone;var n=[];var a=n.push;var o=n.slice;var h=n.splice;e.VERSION="1.1.2";e.$=r;e.noConflict=function(){t.Backbone=s;return this};e.emulateHTTP=false;e.emulateJSON=false;var u=e.Events={on:function(t,e,i){if(!c(this,"on",t,[e,i])||!e)return this;this._events||(this._events={});var r=this._events[t]||(this._events[t]=[]);r.push({callback:e,context:i,ctx:i||this});return this},once:function(t,e,r){if(!c(this,"once",t,[e,r])||!e)return this;var s=this;var n=i.once(function(){s.off(t,n);e.apply(this,arguments)});n._callback=e;return this.on(t,n,r)},off:function(t,e,r){var s,n,a,o,h,u,l,f;if(!this._events||!c(this,"off",t,[e,r]))return this;if(!t&&!e&&!r){this._events=void 0;return this}o=t?[t]:i.keys(this._events);for(h=0,u=o.length;h<u;h++){t=o[h];if(a=this._events[t]){this._events[t]=s=[];if(e||r){for(l=0,f=a.length;l<f;l++){n=a[l];if(e&&e!==n.callback&&e!==n.callback._callback||r&&r!==n.context){s.push(n)}}}if(!s.length)delete this._events[t]}}return this},trigger:function(t){if(!this._events)return this;var e=o.call(arguments,1);if(!c(this,"trigger",t,e))return this;var i=this._events[t];var r=this._events.all;if(i)f(i,e);if(r)f(r,arguments);return this},stopListening:function(t,e,r){var s=this._listeningTo;if(!s)return this;var n=!e&&!r;if(!r&&typeof e==="object")r=this;if(t)(s={})[t._listenId]=t;for(var a in s){t=s[a];t.off(e,r,this);if(n||i.isEmpty(t._events))delete this._listeningTo[a]}return this}};var l=/\s+/;var c=function(t,e,i,r){if(!i)return true;if(typeof i==="object"){for(var s in i){t[e].apply(t,[s,i[s]].concat(r))}return false}if(l.test(i)){var n=i.split(l);for(var a=0,o=n.length;a<o;a++){t[e].apply(t,[n[a]].concat(r))}return false}return true};var f=function(t,e){var i,r=-1,s=t.length,n=e[0],a=e[1],o=e[2];switch(e.length){case 0:while(++r<s)(i=t[r]).callback.call(i.ctx);return;case 1:while(++r<s)(i=t[r]).callback.call(i.ctx,n);return;case 2:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a);return;case 3:while(++r<s)(i=t[r]).callback.call(i.ctx,n,a,o);return;default:while(++r<s)(i=t[r]).callback.apply(i.ctx,e);return}};var d={listenTo:"on",listenToOnce:"once"};i.each(d,function(t,e){u[e]=function(e,r,s){var n=this._listeningTo||(this._listeningTo={});var a=e._listenId||(e._listenId=i.uniqueId("l"));n[a]=e;if(!s&&typeof r==="object")s=this;e[t](r,s,this);return this}});u.bind=u.on;u.unbind=u.off;i.extend(e,u);var p=e.Model=function(t,e){var r=t||{};e||(e={});this.cid=i.uniqueId("c");this.attributes={};if(e.collection)this.collection=e.collection;if(e.parse)r=this.parse(r,e)||{};r=i.defaults({},r,i.result(this,"defaults"));this.set(r,e);this.changed={};this.initialize.apply(this,arguments)};i.extend(p.prototype,u,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return this.get(t)!=null},set:function(t,e,r){var s,n,a,o,h,u,l,c;if(t==null)return this;if(typeof t==="object"){n=t;r=e}else{(n={})[t]=e}r||(r={});if(!this._validate(n,r))return false;a=r.unset;h=r.silent;o=[];u=this._changing;this._changing=true;if(!u){this._previousAttributes=i.clone(this.attributes);this.changed={}}c=this.attributes,l=this._previousAttributes;if(this.idAttribute in n)this.id=n[this.idAttribute];for(s in n){e=n[s];if(!i.isEqual(c[s],e))o.push(s);if(!i.isEqual(l[s],e)){this.changed[s]=e}else{delete this.changed[s]}a?delete c[s]:c[s]=e}if(!h){if(o.length)this._pending=r;for(var f=0,d=o.length;f<d;f++){this.trigger("change:"+o[f],this,c[o[f]],r)}}if(u)return this;if(!h){while(this._pending){r=this._pending;this._pending=false;this.trigger("change",this,r)}}this._pending=false;this._changing=false;return this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:true}))},clear:function(t){var e={};for(var r in this.attributes)e[r]=void 0;return this.set(e,i.extend({},t,{unset:true}))},hasChanged:function(t){if(t==null)return!i.isEmpty(this.changed);return i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):false;var e,r=false;var s=this._changing?this._previousAttributes:this.attributes;for(var n in t){if(i.isEqual(s[n],e=t[n]))continue;(r||(r={}))[n]=e}return r},previous:function(t){if(t==null||!this._previousAttributes)return null;return this._previousAttributes[t]},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{};if(t.parse===void 0)t.parse=true;var e=this;var r=t.success;t.success=function(i){if(!e.set(e.parse(i,t),t))return false;if(r)r(e,i,t);e.trigger("sync",e,i,t)};q(this,t);return this.sync("read",this,t)},save:function(t,e,r){var s,n,a,o=this.attributes;if(t==null||typeof t==="object"){s=t;r=e}else{(s={})[t]=e}r=i.extend({validate:true},r);if(s&&!r.wait){if(!this.set(s,r))return false}else{if(!this._validate(s,r))return false}if(s&&r.wait){this.attributes=i.extend({},o,s)}if(r.parse===void 0)r.parse=true;var h=this;var u=r.success;r.success=function(t){h.attributes=o;var e=h.parse(t,r);if(r.wait)e=i.extend(s||{},e);if(i.isObject(e)&&!h.set(e,r)){return false}if(u)u(h,t,r);h.trigger("sync",h,t,r)};q(this,r);n=this.isNew()?"create":r.patch?"patch":"update";if(n==="patch")r.attrs=s;a=this.sync(n,this,r);if(s&&r.wait)this.attributes=o;return a},destroy:function(t){t=t?i.clone(t):{};var e=this;var r=t.success;var s=function(){e.trigger("destroy",e,e.collection,t)};t.success=function(i){if(t.wait||e.isNew())s();if(r)r(e,i,t);if(!e.isNew())e.trigger("sync",e,i,t)};if(this.isNew()){t.success();return false}q(this,t);var n=this.sync("delete",this,t);if(!t.wait)s();return n},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||M();if(this.isNew())return t;return t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:true}))},_validate:function(t,e){if(!e.validate||!this.validate)return true;t=i.extend({},this.attributes,t);var r=this.validationError=this.validate(t,e)||null;if(!r)return true;this.trigger("invalid",this,r,i.extend(e,{validationError:r}));return false}});var v=["keys","values","pairs","invert","pick","omit"];i.each(v,function(t){p.prototype[t]=function(){var e=o.call(arguments);e.unshift(this.attributes);return i[t].apply(i,e)}});var g=e.Collection=function(t,e){e||(e={});if(e.model)this.model=e.model;if(e.comparator!==void 0)this.comparator=e.comparator;this._reset();this.initialize.apply(this,arguments);if(t)this.reset(t,i.extend({silent:true},e))};var m={add:true,remove:true,merge:true};var y={add:true,remove:false};i.extend(g.prototype,u,{model:p,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:false},e,y))},remove:function(t,e){var r=!i.isArray(t);t=r?[t]:i.clone(t);e||(e={});var s,n,a,o;for(s=0,n=t.length;s<n;s++){o=t[s]=this.get(t[s]);if(!o)continue;delete this._byId[o.id];delete this._byId[o.cid];a=this.indexOf(o);this.models.splice(a,1);this.length--;if(!e.silent){e.index=a;o.trigger("remove",o,this,e)}this._removeReference(o,e)}return r?t[0]:t},set:function(t,e){e=i.defaults({},e,m);if(e.parse)t=this.parse(t,e);var r=!i.isArray(t);t=r?t?[t]:[]:i.clone(t);var s,n,a,o,h,u,l;var c=e.at;var f=this.model;var d=this.comparator&&c==null&&e.sort!==false;var v=i.isString(this.comparator)?this.comparator:null;var g=[],y=[],_={};var b=e.add,w=e.merge,x=e.remove;var E=!d&&b&&x?[]:false;for(s=0,n=t.length;s<n;s++){h=t[s]||{};if(h instanceof p){a=o=h}else{a=h[f.prototype.idAttribute||"id"]}if(u=this.get(a)){if(x)_[u.cid]=true;if(w){h=h===o?o.attributes:h;if(e.parse)h=u.parse(h,e);u.set(h,e);if(d&&!l&&u.hasChanged(v))l=true}t[s]=u}else if(b){o=t[s]=this._prepareModel(h,e);if(!o)continue;g.push(o);this._addReference(o,e)}o=u||o;if(E&&(o.isNew()||!_[o.id]))E.push(o);_[o.id]=true}if(x){for(s=0,n=this.length;s<n;++s){if(!_[(o=this.models[s]).cid])y.push(o)}if(y.length)this.remove(y,e)}if(g.length||E&&E.length){if(d)l=true;this.length+=g.length;if(c!=null){for(s=0,n=g.length;s<n;s++){this.models.splice(c+s,0,g[s])}}else{if(E)this.models.length=0;var k=E||g;for(s=0,n=k.length;s<n;s++){this.models.push(k[s])}}}if(l)this.sort({silent:true});if(!e.silent){for(s=0,n=g.length;s<n;s++){(o=g[s]).trigger("add",o,this,e)}if(l||E&&E.length)this.trigger("sort",this,e)}return r?t[0]:t},reset:function(t,e){e||(e={});for(var r=0,s=this.models.length;r<s;r++){this._removeReference(this.models[r],e)}e.previousModels=this.models;this._reset();t=this.add(t,i.extend({silent:true},e));if(!e.silent)this.trigger("reset",this,e);return t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);this.remove(e,t);return e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);this.remove(e,t);return e},slice:function(){return o.apply(this.models,arguments)},get:function(t){if(t==null)return void 0;return this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){if(i.isEmpty(t))return e?void 0:[];return this[e?"find":"filter"](function(e){for(var i in t){if(t[i]!==e.get(i))return false}return true})},findWhere:function(t){return this.where(t,true)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");t||(t={});if(i.isString(this.comparator)||this.comparator.length===1){this.models=this.sortBy(this.comparator,this)}else{this.models.sort(i.bind(this.comparator,this))}if(!t.silent)this.trigger("sort",this,t);return this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){t=t?i.clone(t):{};if(t.parse===void 0)t.parse=true;var e=t.success;var r=this;t.success=function(i){var s=t.reset?"reset":"set";r[s](i,t);if(e)e(r,i,t);r.trigger("sync",r,i,t)};q(this,t);return this.sync("read",this,t)},create:function(t,e){e=e?i.clone(e):{};if(!(t=this._prepareModel(t,e)))return false;if(!e.wait)this.add(t,e);var r=this;var s=e.success;e.success=function(t,i){if(e.wait)r.add(t,e);if(s)s(t,i,e)};t.save(null,e);return t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0;this.models=[];this._byId={}},_prepareModel:function(t,e){if(t instanceof p)return t;e=e?i.clone(e):{};e.collection=this;var r=new this.model(t,e);if(!r.validationError)return r;this.trigger("invalid",this,r.validationError,e);return false},_addReference:function(t,e){this._byId[t.cid]=t;if(t.id!=null)this._byId[t.id]=t;if(!t.collection)t.collection=this;t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){if(this===t.collection)delete t.collection;t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,r){if((t==="add"||t==="remove")&&i!==this)return;if(t==="destroy")this.remove(e,r);if(e&&t==="change:"+e.idAttribute){delete this._byId[e.previous(e.idAttribute)];if(e.id!=null)this._byId[e.id]=e}this.trigger.apply(this,arguments)}});var _=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"];i.each(_,function(t){g.prototype[t]=function(){var e=o.call(arguments);e.unshift(this.models);return i[t].apply(i,e)}});var b=["groupBy","countBy","sortBy","indexBy"];i.each(b,function(t){g.prototype[t]=function(e,r){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,r)}});var w=e.View=function(t){this.cid=i.uniqueId("view");t||(t={});i.extend(this,i.pick(t,E));this._ensureElement();this.initialize.apply(this,arguments);this.delegateEvents()};var x=/^(\S+)\s*(.*)$/;var E=["model","collection","el","id","attributes","className","tagName","events"];i.extend(w.prototype,u,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){this.$el.remove();this.stopListening();return this},setElement:function(t,i){if(this.$el)this.undelegateEvents();this.$el=t instanceof e.$?t:e.$(t);this.el=this.$el[0];if(i!==false)this.delegateEvents();return this},delegateEvents:function(t){if(!(t||(t=i.result(this,"events"))))return this;this.undelegateEvents();for(var e in t){var r=t[e];if(!i.isFunction(r))r=this[t[e]];if(!r)continue;var s=e.match(x);var n=s[1],a=s[2];r=i.bind(r,this);n+=".delegateEvents"+this.cid;if(a===""){this.$el.on(n,r)}else{this.$el.on(n,a,r)}}return this},undelegateEvents:function(){this.$el.off(".delegateEvents"+this.cid);return this},_ensureElement:function(){if(!this.el){var t=i.extend({},i.result(this,"attributes"));if(this.id)t.id=i.result(this,"id");if(this.className)t["class"]=i.result(this,"className");var r=e.$("<"+i.result(this,"tagName")+">").attr(t);this.setElement(r,false)}else{this.setElement(i.result(this,"el"),false)}}});e.sync=function(t,r,s){var n=T[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var a={type:n,dataType:"json"};if(!s.url){a.url=i.result(r,"url")||M()}if(s.data==null&&r&&(t==="create"||t==="update"||t==="patch")){a.contentType="application/json";a.data=JSON.stringify(s.attrs||r.toJSON(s))}if(s.emulateJSON){a.contentType="application/x-www-form-urlencoded";a.data=a.data?{model:a.data}:{}}if(s.emulateHTTP&&(n==="PUT"||n==="DELETE"||n==="PATCH")){a.type="POST";if(s.emulateJSON)a.data._method=n;var o=s.beforeSend;s.beforeSend=function(t){t.setRequestHeader("X-HTTP-Method-Override",n);if(o)return o.apply(this,arguments)}}if(a.type!=="GET"&&!s.emulateJSON){a.processData=false}if(a.type==="PATCH"&&k){a.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")}}var h=s.xhr=e.ajax(i.extend(a,s));r.trigger("request",r,h,s);return h};var k=typeof window!=="undefined"&&!!window.ActiveXObject&&!(window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent);var T={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var $=e.Router=function(t){t||(t={});if(t.routes)this.routes=t.routes;this._bindRoutes();this.initialize.apply(this,arguments)};var S=/\((.*?)\)/g;var H=/(\(\?)?:\w+/g;var A=/\*\w+/g;var I=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend($.prototype,u,{initialize:function(){},route:function(t,r,s){if(!i.isRegExp(t))t=this._routeToRegExp(t);if(i.isFunction(r)){s=r;r=""}if(!s)s=this[r];var n=this;e.history.route(t,function(i){var a=n._extractParameters(t,i);n.execute(s,a);n.trigger.apply(n,["route:"+r].concat(a));n.trigger("route",r,a);e.history.trigger("route",n,r,a)});return this},execute:function(t,e){if(t)t.apply(this,e)},navigate:function(t,i){e.history.navigate(t,i);return this},_bindRoutes:function(){if(!this.routes)return;this.routes=i.result(this,"routes");var t,e=i.keys(this.routes);while((t=e.pop())!=null){this.route(t,this.routes[t])}},_routeToRegExp:function(t){t=t.replace(I,"\\$&").replace(S,"(?:$1)?").replace(H,function(t,e){return e?t:"([^/?]+)"}).replace(A,"([^?]*?)");return new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var r=t.exec(e).slice(1);return i.map(r,function(t,e){if(e===r.length-1)return t||null;return t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[];i.bindAll(this,"checkUrl");if(typeof window!=="undefined"){this.location=window.location;this.history=window.history}};var R=/^[#\/]|\s+$/g;var O=/^\/+|\/+$/g;var P=/msie [\w.]+/;var C=/\/$/;var j=/#.*$/;N.started=false;i.extend(N.prototype,u,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(t==null){if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(C,"");if(!t.indexOf(i))t=t.slice(i.length)}else{t=this.getHash()}}return t.replace(R,"")},start:function(t){if(N.started)throw new Error("Backbone.history has already been started");N.started=true;this.options=i.extend({root:"/"},this.options,t);this.root=this.options.root;this._wantsHashChange=this.options.hashChange!==false;this._wantsPushState=!!this.options.pushState;this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var r=this.getFragment();var s=document.documentMode;var n=P.exec(navigator.userAgent.toLowerCase())&&(!s||s<=7);this.root=("/"+this.root+"/").replace(O,"/");if(n&&this._wantsHashChange){var a=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=a.hide().appendTo("body")[0].contentWindow;this.navigate(r)}if(this._hasPushState){e.$(window).on("popstate",this.checkUrl)}else if(this._wantsHashChange&&"onhashchange"in window&&!n){e.$(window).on("hashchange",this.checkUrl)}else if(this._wantsHashChange){this._checkUrlInterval=setInterval(this.checkUrl,this.interval)}this.fragment=r;var o=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){this.fragment=this.getFragment(null,true);this.location.replace(this.root+"#"+this.fragment);return true}else if(this._hasPushState&&this.atRoot()&&o.hash){this.fragment=this.getHash().replace(R,"");this.history.replaceState({},document.title,this.root+this.fragment)}}if(!this.options.silent)return this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl);if(this._checkUrlInterval)clearInterval(this._checkUrlInterval);N.started=false},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();if(e===this.fragment&&this.iframe){e=this.getFragment(this.getHash(this.iframe))}if(e===this.fragment)return false;if(this.iframe)this.navigate(e);this.loadUrl()},loadUrl:function(t){t=this.fragment=this.getFragment(t);return i.any(this.handlers,function(e){if(e.route.test(t)){e.callback(t);return true}})},navigate:function(t,e){if(!N.started)return false;if(!e||e===true)e={trigger:!!e};var i=this.root+(t=this.getFragment(t||""));t=t.replace(j,"");if(this.fragment===t)return;this.fragment=t;if(t===""&&i!=="/")i=i.slice(0,-1);if(this._hasPushState){this.history[e.replace?"replaceState":"pushState"]({},document.title,i)}else if(this._wantsHashChange){this._updateHash(this.location,t,e.replace);if(this.iframe&&t!==this.getFragment(this.getHash(this.iframe))){if(!e.replace)this.iframe.document.open().close();this._updateHash(this.iframe.location,t,e.replace)}}else{return this.location.assign(i)}if(e.trigger)return this.loadUrl(t)},_updateHash:function(t,e,i){if(i){var r=t.href.replace(/(javascript:|#).*$/,"");t.replace(r+"#"+e)}else{t.hash="#"+e}}});e.history=new N;var U=function(t,e){var r=this;var s;if(t&&i.has(t,"constructor")){s=t.constructor}else{s=function(){return r.apply(this,arguments)}}i.extend(s,r,e);var n=function(){this.constructor=s};n.prototype=r.prototype;s.prototype=new n;if(t)i.extend(s.prototype,t);s.__super__=r.prototype;return s};p.extend=g.extend=$.extend=w.extend=N.extend=U;var M=function(){throw new Error('A "url" property or function must be specified')};var q=function(t,e){var i=e.error;e.error=function(r){if(i)i(t,r,e);t.trigger("error",t,r,e)}};return e});

(function ($) {

define('models',['backbone'], function(Backbone) {

Upfront.Events = _.isEmpty(Upfront.Events) ? _.extend(Upfront.Events, Backbone.Events) : Upfront.Events;
var _alpha = "alpha",

/* ----- Logic mixins ----- */

	_Upfront_ModelMixin = {

	},

/* ----- Core model definitions ----- */

	// Basic behavior/appearance dataset building block
	Property = Backbone.Model.extend({
		"defaults": {
			"name": "",
			"value": ""
		},
		idAttribute: 'name'
	}),

	// Basic behavior/appearance dataset
	Properties = Backbone.Collection.extend({
		"model": Property
	}),

	// Basic interface dataset container
	ObjectModel = Backbone.Model.extend({
		"defaults": {
			"name": "",
			"element_id": "",
			"properties":  new Properties()
		},
		initialize: function () {
			var args = arguments;
			if (args && args[0] && args[0]["properties"]) {
				args[0]["properties"] = args[0]["properties"] instanceof Properties
					? args[0]["properties"]
					: new Properties(args[0]["properties"])
				;
				this.set("properties", args[0].properties);
			} else this.set("properties", new Properties([]));
			if (this.init) this.init();

			// Take care of old preset API
			if (this.get_property_value_by_name('currentpreset')) {
			// Unset currentpreset property and set preset to correct value
				this.set_property('preset', this.get_property_value_by_name('currentpreset'), true);
				this.set_property('currentpreset', false, true);
			}
		},
	// ----- Object interface ----- */
		get_view_class: function () {
			return Upfront.Views.ObjectView;
		},
		get_property_by_name: function (name) {
			var prop = this.get("properties").where({"name": name});
			return prop.length ? prop[0] : false;
		},
		get_property_value_by_name: function (name) {
			var prop = this.get_property_by_name(name);
			return prop && prop.get ? prop.get("value") : false;
		},
		has_property: function (name) {
			return !!this.get_property_value_by_name(name);
		},
		has_property_value: function (property, value) {
			return (value == this.get_property_value_by_name(property));
		},

		/**
		 * Resolve the preset value from wherever we might be having it stored
		 *
		 * Resolves the preset and, as a side-effect, sets the `preset` property
		 * to the resolved value.
		 * This way the `preset` property is now more of a transient, contextyally
		 * dependent value - not fixed and given once by the mighty hand of god.
		 *
		 *  The value is resolved by first checking the passed breakpoint ID
		 *  (which will default to currently active one) and, if that fails,
		 *  will default to whatever the `preset` property says it should be.
		 *  Failing all of that, it'll fall back to "default"
		 *
		 * @param {String} breakpoint_id Breakpoint ID used to resolve the preset from storage
		 * *                               - will default to current one
		 *
		 * @return {String} Decoded preset ID
		 */
		decode_preset: function (breakpoint_id) {
			breakpoint_id = breakpoint_id || (Upfront.Views.breakpoints_storage.get_breakpoints().get_active() || {}).id;
			var current = this.get_property_value_by_name('preset') || 'default',
				model = this.get_property_value_by_name("breakpoint_presets") || {},
				breakpoint_preset = (model[breakpoint_id] || {}).preset,
				actual = breakpoint_preset || current
			;
			this.set_property('preset', actual, false); // Do *not* be silent here, we do want repaint
			return actual;
		},

		/**
		 * Pack up the breakpoint preset values.
		 *
		 * The packed values will be decoded later on using the `decode_preset` method.
		 * As a side-effect, we also update the model `breakpoint_presets` property.
		 * As a side-effect #2, we also set whatever the current preset is (or default) as 
		 * default breakpoint preset, if it's not already set.
		 *
		 * @param {String} preset_id Preset ID to pack
		 * @param {String} breakpoint_id Breakpoint ID used to resolve the preset in storage 
		 *                               - will default to current one
		 *
		 * @return {Object} Packed breakpoint presets
		 */
		encode_preset: function (preset_id, breakpoint_id) {
			breakpoint_id = breakpoint_id || (Upfront.Views.breakpoints_storage.get_breakpoints().get_active() || {}).id;
			var	data = this.get_property_value_by_name("breakpoint_presets") || {};
				current = (this.get_property_by_name('preset').previousAttributes() || {value: 'default'}).value,
				default_bp_id = (Upfront.Views.breakpoints_storage.get_breakpoints().findWhere({'default': true}) || {}).id
			;
			
			data[breakpoint_id] = {preset: preset_id};
			if (!data[default_bp_id]) data[default_bp_id] = {preset: current};

			this.set_property("breakpoint_presets", data, true);

			return data;
		},

		add_property: function (name, value, silent) {
			if (!silent) silent = false;
			this.get("properties").add(new Upfront.Models.Property({"name": name, "value": value}), {"silent": silent});
			Upfront.Events.trigger("model:property:add", name, value, silent);
		},
		set_property: function (name, value, silent) {
			if (!name) return false;
			if (!silent) silent = false;
			var prop = this.get_property_by_name(name);
			if (!prop || !prop.set) return this.add_property(name, value, silent);
			prop.set({"value": value}, {"silent": silent});
			Upfront.Events.trigger("model:property:set", name, value, silent);
		},
		remove_property: function (name, silent) {
			if (!name) return false;
			if (!silent) silent = false;
			var prop = this.get_property_by_name(name);
			if (!prop || !prop.set) return;
			this.get("properties").remove(prop, {"silent": silent});
			Upfront.Events.trigger("model:property:remove", name, silent);
		},
		init_property: function (name, value) {
			if (!this.has_property(name)) this.add_property(name, value);
		},
		init_properties: function (hash) {
			var me = this;
			_(hash).each(function (value, name) {
				me.init_property(name, value);
			});
		},
	// ----- Magic properties manipulation ----- */
		get_content: function () {
			return this.get_property_value_by_name("content");
		},
		set_content: function (content, options) {
			var prop = this.get_property_by_name("content");
			var options = typeof options != 'undefined' ? options: {};
			if (prop) return prop.set("value", content, options);
			return this.get("properties").add(new Upfront.Models.Property({"name": "content", "value": content}));
		},
		get_element_id: function () {
			return this.get_property_value_by_name("element_id");
		},
		get_wrapper_id: function () {
			return this.get_property_value_by_name("wrapper_id");
		},
		replace_class: function (value) {
			var prop = this.get_property_by_name("class"),
				old = prop ? prop.get("value") : false
			;
			if (prop && old){
				 // Have class
				var values = value.split(" "),
					new_val = old;
				for ( var i = 0; i < values.length; i++ ){
					var val_esc = values[i].replace(/-?\d+/, '-?\\d+'),
						val_rx = new RegExp(val_esc);
					if ( new_val.match(val_rx) )
						new_val = new_val.replace(val_rx, values[i]);
					else
						new_val += " " + values[i];
				}
				return prop.set("value", new_val);
			}
			else if (!prop) this.get("properties").add(new Property({"name": "class", "value": value})); // No class property
			return false;
		},
		add_class: function (value) {
			var val_rx = new RegExp(value),
				prop = this.get_property_by_name("class"),
				old = prop ? prop.get("value") : false;
			if (prop && !old.match(val_rx)) return prop.set("value", old + " " + value);
			else if (!prop) this.get("properties").add(new Property({"name": "class", "value": value}));
			return false;
		},
		remove_class: function (value) {
			var val_rx = new RegExp(value),
				prop = this.get_property_by_name("class"),
				old = prop ? prop.get("value") : false;
			if (prop && old.match(val_rx)) return prop.set("value", old.replace(val_rx, ""));
			return false;
		},
		is_visible: function () {
			return this.get_property_value_by_name("visibility");
		},
		get_breakpoint_property_value: function (property, return_default, default_value) {
			var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
			default_value = typeof default_value === "undefined" ? false : default_value;

			if ( !breakpoint || breakpoint.default )
				return this.get_property_value_by_name(property);
			var data = this.get_property_value_by_name('breakpoint');
			if ( _.isObject(data) && _.isObject(data[breakpoint.id]) && property in data[breakpoint.id] )
				return data[breakpoint.id][property];
			if ( return_default )
				return this.get_property_value_by_name(property);
			return default_value;
		},
		set_breakpoint_property: function (property, value, silent) {
			var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
			if ( !breakpoint || breakpoint.default ) {
				this.set_property(property, value, silent);
			}
			else {
				var data = Upfront.Util.clone(this.get_property_value_by_name('breakpoint') || {});
				if ( !_.isObject(data[breakpoint.id]) )
					data[breakpoint.id] = {};
				data[breakpoint.id][property] = value;
				data.current_property = property;
				this.set_property('breakpoint', data, silent);
			}
		},
		add_to: function (collection, index, options) {
			var me = this,
				models = [],
				added = false,
				options = _.isObject(options) ? options : {};
			collection.each(function(each, i){
				if ( i == index ){
					models.push(me);
					added = true;
				}
				models.push(each);
			});
			if ( added ){
				collection.reset(models, {silent: true});
				collection.trigger('add', this, collection, _.extend(options, {index: index}));
			}
			else {
				collection.add(this, _.extend(options, {index: index}));
			}
		}
	}),

		// Basic interface dataset
	Objects = Backbone.Collection.extend({
		/*"model": ObjectModel,
		initialize: function (raw_models) {
			var models = [];
			if (!raw_models || !raw_models.length) return false;
			_(raw_models).each(function (model) {
				var type_prop = model["properties"] ? _(model["properties"]).where({"name": "type"}) : model.get("properties").where({"name": "type"}),
					type = type_prop.length ? type_prop[0].value : "ObjectModel",
					instance = Upfront.Models[type] ? new Upfront.Models[type](model) : false
				;
				if (Upfront.Models[type] && instance) models.push(instance);
			});
			this.reset(models);
		},*/
		model: function (attrs, options) {
			var type_prop = attrs["properties"] ? _(attrs["properties"]).where({"name": "type"}) : attrs.get("properties").where({"name": "type"}),
				type = type_prop.length ? type_prop[0].value : '';
			if (Upfront.Models[type]) return new Upfront.Models[type](attrs, options);
			return new ObjectModel(attrs, options);
		},
		get_by_element_id: function (element_id) {
			var found = false;
			this.each(function (model) {
				if (model.get_element_id() == element_id) found = model;
			});
			return found;
		}
	}),

	// Module interface dataset container
	Module = ObjectModel.extend({
		"defaults": {
			"name": "",
			"objects": new Objects(),
			"properties": new Properties()
		},
		initialize: function () {
			var args = arguments;
			if (args && args[0] && args[0]["objects"]) {
				args[0]["objects"] = args[0]["objects"] instanceof Objects
					? args[0]["objects"]
					: new Objects(args[0]["objects"])
				;
				this.set("objects", args[0].objects);
			} else this.set("objects", new Objects([]));
			if (args && args[0] && args[0]["properties"]) {
				args[0]["properties"] = args[0]["properties"] instanceof Properties
					? args[0]["properties"]
					: new Properties(args[0]["properties"])
				;
				this.set("properties", args[0]["properties"]);
			} else this.set("properties", new Properties([]));
			if (this.init) this.init();
		}
	}),

	ModuleGroup = ObjectModel.extend({
		"defaults": function(){
			return {
				"name": "",
				"modules": new Modules(),
				"wrappers": new Wrappers(),
				"properties": new Properties()
			};
		},
		initialize: function () {
			var args = arguments;
			if (args && args[0] && args[0]["modules"]) {
				args[0]["modules"] = args[0]["modules"] instanceof Modules
					? args[0]["modules"]
					: new Modules(args[0]["modules"])
				;
				this.set("modules", args[0]["modules"]);
			} else this.set("modules", new Modules([]));
			if (args && args[0] && args[0]["wrappers"]) {
				args[0]["wrappers"] = args[0]["wrappers"] instanceof Wrappers
					? args[0]["wrappers"]
					: new Wrappers(args[0]["wrappers"])
				;
				this.set("wrappers", args[0].wrappers)
			} else this.set("wrappers", new Wrappers([]));
			if (args && args[0] && args[0]["properties"]) {
				args[0]["properties"] = args[0]["properties"] instanceof Properties
					? args[0]["properties"]
					: new Properties(args[0]["properties"])
				;
				this.set("properties", args[0]["properties"]);
			} else this.set("properties", new Properties([]));

			this.init_property('has_settings', 1);
			this.init_property('type', 'ModuleGroup');
			if (this.init) this.init();
		}
	}),

	Modules = Backbone.Collection.extend({
		/*
		"model": Module,
		initialize: function () {
			if (!arguments.length) return false;
			var _modules = [],
				me = this,
				args = arguments[0]
			;
			_(args).each(function (arg) {
				var self_class = _(arg.properties).where({"name": "type"}),
					self_instance =  (self_class.length && self_class[0].value && Upfront.Models[self_class[0].value])
						? new Upfront.Models[self_class[0].value](arg)
						: new Upfront.Models.Module(arg)
				;
				me.add(self_instance);
				//_modules.push(self_instance);
			});
			//this.reset(_modules);
			//console.log(this);
		},
		*/

		model: function (attrs, options) {
			if ( attrs.modules )
				return new ModuleGroup(attrs, options);
			return new Module(attrs, options);
		},

		get_by_element_id: function (element_id) {
			var found = false;
			this.each(function (model) {
				if (model.get_element_id() == element_id) found = model;
			});
			return found;
		}
	}),

	Region = ObjectModel.extend({
		defaults: function(){
			return {
				"name": "",
				"properties": new Properties(),
				"wrappers": new Wrappers(),
				"modules": new Modules()
			};
		},
		initialize: function () {
			var args = arguments;
			if (args && args[0] && args[0]["modules"]) {
				args[0]["modules"] = args[0]["modules"] instanceof Modules
					? args[0]["modules"]
					: new Modules(args[0]["modules"])
				;
				this.set("modules", args[0].modules)
			} else this.set("modules", new Modules([]));
			if (args && args[0] && args[0]["wrappers"]) {
				args[0]["wrappers"] = args[0]["wrappers"] instanceof Wrappers
					? args[0]["wrappers"]
					: new Wrappers(args[0]["wrappers"])
				;
				this.set("wrappers", args[0].wrappers)
			} else this.set("wrappers", new Wrappers([]));
			if (args && args[0] && args[0]["properties"]) {
				args[0]["properties"] = args[0]["properties"] instanceof Properties
					? args[0]["properties"]
					: new Properties(args[0]["properties"])
				;
				this.set("properties", args[0].properties);
			} else this.set("properties", new Properties([]));
		},
		is_main: function () {
			var container = this.get('container'),
				name = this.get('name');
			return ( !container || container == name );
		},
		get_sub_regions: function () {
			if ( ! this.collection )
				return false;
			var collection = this.collection,
				index = collection.indexOf(this),
				total = collection.size()-1, // total minus shadow region
				container = this.get('container') || this.get('name'),
				ref_models = collection.filter(function(model){ return model.get('container') == container || model.get('name') == container; }),
				ref_models2 = [],
				ret = {
					fixed: [],
					lightbox: [],
					top: false,
					left: false,
					right: false,
					bottom: false
				};
			if ( ref_models.length > 1 ){
				_.each(ref_models, function(model, index){
					var sub = model.get('sub');
					if ( sub == 'fixed' )
						ret.fixed.push(model);
					else if ( sub == 'lightbox' )
						ret.lightbox.push(model);
					else if ( sub && sub.match(/^(top|left|bottom|right)$/) )
						ret[sub] = model;
					else
						ref_models2.push(model);
				});
			}
			if ( ref_models2.length > 1 ){
				var index = _.indexOf(ref_models2, this);
				if ( index == 0 )
					ret.right = ref_models2[1];
				else if ( index == 1 ){
					ret.left = ref_models2[0];
					ret.right = ref_models2.length > 2 ? ref_models2[2] : false;
				}
			}
			return ret;
		},
		get_sub_region: function (sub) {
			return this.get_sub_regions()[sub];
		},
		has_sub_region: function () {
			return _.find( this.get_sub_regions(), function(each){ return ( each !== false ); } );
		},
		get_side_region: function (right) {
			return this.get_sub_region( right ? 'right' : 'left' );
		},
		has_side_region: function () {
			var sub = this.get_sub_regions();
			return ( sub.left || sub.right );
		}
	}),

	Regions = Backbone.Collection.extend({
		"model": Region,

		get_by_name: function (name) {
			var found = false,
				name = name.toLowerCase();
			this.each(function (model) {
				if (model.get("name").toLowerCase() == name) found = model;
			});
			return found;
		},

		at_container: function (index) {
			var i = 0;
			return this.find(function(m){
				if ( m.is_main() ){
					if ( i == index )
						return true;
					else
						i++;
				}
				return false;
			});
		},

		index_container: function (model, excludes) {
			var excludes = _.isArray(excludes) ? excludes : [excludes],
				collection = this.filter(function(m){
					return m.is_main() && ! _.contains(excludes, m.get('name'));
				}),
				index = collection.indexOf(model);
			return index;
		},

		total_container: function (excludes) {
			var excludes = _.isArray(excludes) ? excludes : [excludes],
				collection = this.filter(function(m){
					return m.is_main() && ! _.contains(excludes, m.get('name'));
				});
			return collection.length;
		},

		get_new_title: function (prefix, start) {
			var title = (prefix + start).replace(/[^A-Za-z0-9\s_-]/g, ''),
				name = title.toLowerCase().replace(/\s/g, '-');
			if ( this.get_by_name(name) )
				return this.get_new_title(prefix, start+1);
			return {
				title: title,
				name: name
			};
		}
	}),

	Wrapper = ObjectModel.extend({
		"defaults": {
			"name": "",
			"properties": new Properties()
		},
		initialize: function () {
			var args = arguments;
			if (args && args[0] && args[0]["properties"]) {
				args[0]["properties"] = args[0]["properties"] instanceof Properties
					? args[0]["properties"]
					: new Properties(args[0]["properties"])
				;
				this.set("properties", args[0].properties)
			} else this.set("properties", new Properties([]));
		},
	}),

	Wrappers = Backbone.Collection.extend({
		"model": Wrapper,

		get_by_wrapper_id: function (wrapper_id) {
			var found = false;
			this.each(function (model) {
				if (model.get_wrapper_id() == wrapper_id) found = model;
			});
			return found;
		}
	}),


	Layout = ObjectModel.extend({
		"defaults": {
			"name": "",
			"properties": new Properties(),
			"regions": new Regions(),
			"wrappers": new Wrappers()
		},
		initialize: function () {
			var typography;
			var args = arguments;
			if (args && args[0] && args[0]["regions"]) {
				args[0]["regions"] = args[0]["regions"] instanceof Regions
					? args[0]["regions"]
					: new Regions(args[0]["regions"])
				;
				this.set("regions", args[0].regions)
			}
			if (args && args[0] && args[0]["properties"]) {
				args[0]["properties"] = args[0]["properties"] instanceof Properties
					? args[0]["properties"]
					: new Properties(args[0]["properties"])
				;
				this.set("properties", args[0].properties)
			}
			if (args && args[0] && args[0]["wrappers"]) {
				args[0]["wrappers"] = args[0]["wrappers"] instanceof Wrappers
					? args[0]["wrappers"]
					: new Wrappers(args[0]["wrappers"])
				;
				this.set("wrappers", args[0].wrappers)
			}
		},
		get_current_state: function () {
			return Upfront.PreviewUpdate.get_revision();
		},
		has_undo_states: function () {
			return !!Upfront.Util.Transient.length("undo");
		},
		has_redo_states: function () {
			return !!Upfront.Util.Transient.length("redo");
		},
		store_undo_state: function () {
			var state = this.get_current_state(),
				all = Upfront.Util.Transient.get_all()
			;
			if (all.indexOf(state) >= 0) return false;

			Upfront.Util.Transient.push("undo", state);

			Upfront.Events.trigger("upfront:undo:state_stored");
		},
		restore_undo_state: function () {
			if (!this.has_undo_states()) return false;
			return this.restore_state_from_stack("undo");
		},
		restore_redo_state: function () {
			if (!this.has_redo_states()) return false;
			return this.restore_state_from_stack("redo");
		},
		restore_state_from_stack: function (stack) {
			var other = ("undo" == stack ? "redo" : "undo"),
				revision = Upfront.Util.Transient.pop(stack)
			;
			if (!revision) {
				Upfront.Util.log("Invalid " + revision + " state");
				return false;
			}
			Upfront.Util.Transient.push(other, this.get_current_state());
			// ... 1. get the state that corresponds to this revision
			var me = this,
				dfr = new $.Deferred()
			;
			Upfront.Util.post({
				action: 'upfront_get_revision',
				revision: revision
			}).done(function (response) {
				if ("revision" in response.data) {
					// ... 2. do this:
					me.get("regions").reset(Upfront.Util.model_to_json(response.data.revision.regions));
					dfr.resolve();
				}
			});

			return dfr.promise();
		}
	}),

	Taxonomy = Backbone.Model.extend({
		initialize: function () {
			var args = arguments,
				data = args[0] || {}
			;
			this.taxonomy = data.taxonomy ? new Backbone.Model(data.taxonomy) : Backbone.Model({});
			this.all_terms = data.all_terms ? new Backbone.Collection(data.all_terms) : new Backbone.Collection([]);
			this.post_terms = data.post_terms ? new Backbone.Collection(data.post_terms) : new Backbone.Collection([]);

		}
	}),

	/**
	 * Represents a WP object. Extending WPModel it is easy to communicate with the server
	 * to fetch a Post, User or Comment, and let the user update them easily.
	 */
	WPModel = Backbone.Model.extend({
		action: 'upfront-wp-model',
		fetchAttributes: [],
		saveAttributes: [],

		/**
		 * Loads the model from the db data. Uses the attribute modelName, implemented in a children class, to
		 * know what to fecth. When finished it trigger the change event if there have been any change in the Model.
		 * @param  {Object} data Aditional data to be sent with the fetch request.
		 * @return {jQuery.Deferred}	A promise for the fetching. The server response will be passed as argument to the done function.
		 */
		fetch: function(data) {
			var me = this;
				postdata = {
					action: 'fetch_' + this.modelName,
					id: this.id
				}
			;

			_.each(this.fetchAttributes, function(attr){
				postdata[attr] = me[attr];
			});

			postdata = _.extend(postdata, data);

			return this.post(postdata)
				.done(function(response){
					me.set(response.data);
				}
			);
		},

		/**
		 * Update, or create if no model id given, the model in the database.
		 * Uses the attribute modelName, implemented in a children class, to
		 * know what to save.
		 * @return {jQuery.Deferred}	A promise for the saving. The server response will be passed as argument to the done function.
		 */
		save: function(){
			var me = this,
				data = this.toJSON()
			;

			_.each(this.saveAttributes, function(attr){
				data[attr] = me[attr];
			});

			data.action = 'save_' + this.modelName;
			return this.post(data)
				.done(function(response){
					me.changed = {};
				}
			);
		},

		/**
		 * Send a POST request to the server setting all the parameters needed to communicate with
		 * the models endpoint.
		 * @param  {Object} data Data to be sent with the request.
		 * @return {jQuery.Deferred}	A promise for the response. The server response will be passed as argument to the done function.
		 */
		post: function(data){
			data = _.isObject(data) ? _.clone(data) : {};
			data.model_action = data.action;
			data.action = this.action;

			return Upfront.Util.post(data);
		},
		/**
		 * Overrides Backbone.Model.get to convert the PHP dates in javascript ones.
		 * @param  {String} attr The attribute name to get.
		 * @return {Mixed}      The attribute value or false if not found.
		 */
		get: function(attr){
			var value = this.attributes[attr],
                dates = [
                    "post_date",
                    "post_date_gmt",
                    'post_modified',
                    "post_modified_gmt"
                ];
//			if(_.isString(value) && value.match(/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/)) {
//				return new Date(Date.parse(value.replace(/ /, 'T')));
//			}

            if( _.indexOf(dates, attr) !== -1 ){
                //return new Date( value  ); // <-- Breaks in FF
                var raw_offset = (new Date()).getTimezoneOffset(), 
                	tz_offset = raw_offset / 60,
                	offset = tz_offset > 0 ? '-' : '+', // Reversed because Date.getTimezoneOffset() returns reversed values...
                	hours = parseInt(Math.abs(tz_offset), 10),
                	mins = parseInt((Math.abs(tz_offset) - hours) * 60, 10),
                	timestamp = value.replace(/ /, 'T')
                ;
                hours = hours >= 10 ? '' + hours : '0' + hours;
                mins = mins >= 10 ? '' + mins : '0' + mins;
                if (timestamp && hours.length && mins.length) timestamp += offset + hours + mins;

				
				//return new Date(Date.parse(timestamp)); // <-- We need this to instantiate Date object in Firefox. @See "batman bug" in Asana.
				
				/** Have to do this in order to satisfy safari as well.
				 * This works with Firefox and chrome too.
				*/

				var a = timestamp.split(/[^0-9]/);
				return new Date (a[0],a[1]-1,a[2],a[3],a[4],a[5]); 
                
            }
			return this.attributes[attr];
		},
		/**
		 * Overrides Backbone.Model.set to convert javascript dates in PHP format.
		 * @param  {String} key     Attribute name
		 * @param  {Mixed} val     The value for the attribute
		 * @param  {Object} options Extended options for set. See http://backbonejs.org/#Model-set
		 * @return {WPModel}         This object
		 */
		set: function(key, val, options){
			var newval = val,
				parsedAttrs = {};

			if(_.isObject(key)){
				for(var attr in key){
					var value = key[attr];
					if(val instanceof Date)
						parsedAttrs[attr] = Upfront.Util.format_date(value, true, true).replace(/\//g, '-');
					else
						parsedAttrs[attr] = value;
				}
				Backbone.Model.prototype.set.call(this, parsedAttrs, options);
			}
			else{
				if(val instanceof Date)
					newval = Upfront.Util.format_date(val, true, true).replace(/\//g, '-');

				Backbone.Model.prototype.set.call(this, key, newval, options);
			}

			return this;
		}
	}),


	/**
	 * Represent a collection of WPModels, to fetch and save Posts, Comments or metadata list.
	 * It handle pagination, sorting and hierarchical lists out of the box.
	 */
	WPCollection = Backbone.Collection.extend({
		//WP ajax action
		action: 'upfront-wp-model',
		// Collection's attributes to be sent with their values in every fetch request.
		fetchAttributes: [],
		// Collection's attributes to be sent with their values in every save request.
		saveAttributes: [],

		// These are used to know what has changed since the last save.
		changedModels: [],
		addedModels: [],
		removedModels: [],
		isNew: true,

		// Model attribute where the parent id is stored.
		parentAttribute: false,
		// Attribute to store the collection of children.
		childrenAttribute: false,

		// Used to store the store the models without parents. (Only when parentAttribute and childrenAttribute are set)
		orphans: {},

		// Attribute to sort the collection. Use the reSort methods to change it properly.
		orderby: false,
		order: 'desc',

		// Pagination default parameters. Set pageSize to -1 to deactivate pagination.
		pagination: {
			pages: 1,
			pageSize: 10,
			currentPage:1,
			totalElements: 0,
			loaded: {}
		},

		// Used to keep the last fetch options and be able to fetch more pages.
		lastFetchOptions: {},

		/**
		 * Loads the Collection with models from the database. Uses the collectionName attribute to know what to fetch.
		 * @param  {Object} data Extra data to be sent with the fetch request
		 * @return {jQuery.Deferred}      Promise for the fetch request. The server response will be passed as argument to the done function.
		 */
		fetch: function(data) {
			var me = this,
				postdata = {
					action: 'fetch_' + this.collectionName,
					id: this.id
				}
			;

			if(this.orderby){
				postdata['orderby'] = this.orderby;
				postdata['order'] = this.order;
			}

			_.each(this.fetchAttributes, function(attr){
				postdata[attr] = me[attr];
			});

			postdata = this.checkPostFlush(_.extend(postdata, data));




			// Set change observers here, so we leave the initialize method
			// easily overridable.
			this.changedModels = [];
			this.addedModels = [];
			this.removedModels = [];
			this.off('change', this.updateChanged, this);
			this.on('change', this.updateChanged, this);
			this.off('add', this.updateAdded, this);
			this.on('add', this.updateAdded, this);
			this.off('remove', this.updateRemoved, this);
			this.on('remove', this.updateRemoved, this);

			this.isNew = false;

			return this.post(postdata)
				.done(function(response){
					if(response.data.pagination){
						var pagination = response.data.pagination,
							models = [];
						if(postdata.flush || me.pagination.totalElements != pagination.total){
							me.pagination = {
								totalElements: pagination.total,
								pageSize: pagination.page_size,
								pages: Math.ceil(pagination.total / pagination.page_size),
								currentPage: pagination.page,
								loaded: postdata.flush ? {} : me.pagination.loaded
							}
							me.pagination.loaded[pagination.page] = true;
							_.each(response.data.results, function(modelData){
								var model = new me.model(modelData);
								model.belongsToPage = pagination.page;
								models.push(model);
							});
							me.reset(models);
						}
						else {
							me.pagination.currentPage = pagination.page;
							me.pagination.loaded[pagination.page] = true;
							_.each(response.data.results, function(modelData){
								var model = new me.model(modelData);
								model.belongsToPage = pagination.page;
								me.add(model, {silent: true, merge: true});
							});
							me.trigger('reset', me);
						}
					}
					else
						me.reset(response.data.results);
				}
			);
		},

		/**
		 * Send a POST request to the server setting all the parameters needed to communicate with
		 * the models endpoint.
		 * @param  {Object} data Data to be sent with the request.
		 * @return {jQuery.Deferred}	A promise for the response. The server response will be passed as argument to the done function.
		 */
		post: function(data){
			data = _.isObject(data) ? _.clone(data) : {};
			data.model_action = data.action;
			data.action = this.action;

			return Upfront.Util.post(data);
		},

		/**
		 * Store the data base. Different lists are sent to the server with all, added, changed and removed models
		 * for making easy to store the changes.
		 * @return {jQuery.Deferred} A promise for the response. The server response will be passed as argument to the done function.
		 */
		save: function(){
			var me = this,
				data = {
					all: this.toJSON(),
					added: [],
					changed: [],
					removed: [],
					action: 'save_' + this.collectionName
				}
			;
			if(this.isNew){
				data.added = data.all;
			}
			else{
				this.each(function(model){
					if(me.addedModels.indexOf(model.id) != -1)
						data.added.push(model.toJSON());

					if(me.changedModels.indexOf(model.id) != -1)
						data.changed.push(model.toJSON());

					if(me.removedModels.indexOf(model.id) != -1)
						data.removed.push(model.toJSON());
				});
			}

			this.isNew = false;

			_.each(this.saveAttributes, function(attr){
				data[attr] = me[attr];
			});

			return this.post(data)
				.done(function(response){
					me.reset(response.data);
					me.addedModels = [];
					me.changedModels = [];
					me.removedModels = [];
				});
		},
		/**
		 * Used to synchro the changed model list.
		 * @param  {WPModel} model The model to add to the changed list.
		 * @return {null}
		 */
		updateChanged: function(model){
			var id = model.id,
				addedIndex = _.indexOf(this.addedModels, id)
			;
			if(addedIndex != -1)
				this.addedModels[addedIndex] = id;

			else if(!_.contains(this.changedModels, id))
				this.changedModels.push(id);
		},

		/**
		 * Used to synchro the added model list.
		 * @param  {WPModel} model The model to add to the added list.
		 * @return {null}
		 */
		updateAdded: function(model){
			var id = model.id,
				removedIndex = _.indexOf(this.removedModels, id)
			;
			if(removedIndex != -1){
				this.removedModels.splice(removedIndex, 1);
				this.changedModels.push(id);
			}
			else if(!_.contains(this.addedModels, id))
				this.addedModels.push(id);
		},

		/**
		 * Used to synchro the removed model list.
		 * @param  {WPModel} model The model to add to the removed list.
		 * @return {null}
		 */
		updateRemoved: function(model){
			var id = model.id,
				addedIndex = _.indexOf(this.addedModels, id),
				changedIndex = _.indexOf(this.changedModels, id)
			;
			if(addedIndex != -1)
				this.addedModels.splice(addedIndex, 1);
			else if(!_.contains(this.removedModels, id))
				this.removedModels.push(id);

			if(changedIndex != -1)
				this.changedModels.splice(changedIndex, 1);
		},

		/**
		 * Override the Backbone.Collection function to handle hierarchical data when the
		 * parentAttribute and childrenAttribute are set for the collection.
		 * @param  {Array} models  Array of data for the new models
		 * @param  {Object} options Options for the adding. See http://backbonejs.org/#Collection-add
		 */
		add: function(models, options){
			//Check for hierarchy
			if(!this.parentAttribute || !this.childrenAttribute)
				return Backbone.Collection.prototype.add.call(this, models, options);

			var me = this;
			if(_.isArray(models)){
				_.each(models, function(model){
					me.add(model, options);
				});
			}
			else {
				var parent_id = 0,
					model = models;
				if(this.model && model instanceof this.model){
					parent_id = model.get(this.parentAttribute);
				}
				else if(_.isObject(model)){
					parent_id = model[this.parentAttribute];
					if(this.model)
						model = new this.model(models);
				}
				else
					return Backbone.Collection.prototype.add.call(this, model, options);

				// We got the model to add
				// Add the children
				if(this.orphans[model.id]){
					if(!model[this.childrenAttribute])
						model[this.childrenAttribute] = new this.constructor(this.orphans[model.id], options);
					else
						model[this.childrenAttribute].add(this.orphans[model.id], options);
					delete this.orphans[model.id];
				}
				else if(!model[this.childrenAttribute])
					model[this.childrenAttribute] = new this.constructor([], options);



				if(parent_id){
					// Is it a child?
					var parent = this.get(parent_id);
					if(parent){
						parent[this.childrenAttribute].add(model, options);
					}
					else{ //An orphan
						var parentOrphans = this.orphans[parent_id];
						if(parentOrphans)
							parentOrphans.push(model);
						else
							this.orphans[parent_id] = [model];
					}
				}
				// Add the model to the collection
				return Backbone.Collection.prototype.add.call(this, model, options);
			}
		},

		/**
		 * Overrides Backbone.Collection.remove to handle hierarchical data when the
		 * parentAttribute and childrenAttribute are set for the collection.
		 *
		 * @param  {Array|Model} models  Models to remove.
		 * @param  {Object} options Options for removing elements. See http://backbonejs.org/#Collection-remove
		 * @return {WPCollection}        this
		 */
		remove: function(models, options){
			//Check for hierarchy
			if(!this.parentAttribute || !this.childrenAttribute)
				return Backbone.Collection.prototype.remove.call(this, models, options);

			var me = this;

			models = _.isArray(models) ? models.slice() : [models];

			// Delete the children
			for (i = 0, l = models.length; i < l; i++) {
				var model = this.get(models[i]);
				if(model){
					model[this.childrenAttribute].each(function(child){
						me.remove(child, options);
					});
				}
			}
			return Backbone.Collection.prototype.remove.call(this, models, options);
		},
		/**
		 * Get a page from the collection using the pagination parameters. The model must be fetched before
		 * using this function. A page is known to be loaded checking the WPCollection.pagination.loaded[pageNumber]
		 * attribute.
		 *
		 * @param  {Number} pageNumber The page number
		 * @return {Array}            Models that belongs to the requested paged
		 */
		getPage: function(pageNumber){
			var me = this;

			return this.filter(function(model){
				return model.belongsToPage == pageNumber;
			});
		},

		/**
		 * Load the models of the given page from the database.
		 * @param  {Number} pageNumber The number of the page to fetch.
		 * @return {jQuery.Deferred} A promise for the fetching. The server response will be passed as arguments for the done function.
		 */
		fetchPage: function(pageNumber, options){
			if(!options)
				options = {};

			if(!options.flush && this.pagination.loaded[pageNumber]){
				this.pagination.currentPage = pageNumber;
				/*
				//All elements loaded, return them following the current order (sorting without fetch)
				if(this.pagination.totalElements == this.length){
					var start = this.pagination.currentPage * this.pagination.pageSize,
						end = start + this.pagination.pageSize
						results = []
					;

					this.each(function(result, idx){
						if(idx >= start && idx < end)
							results.push(result);
					});

					return jQuery.Deferred().resolve({results: results});
				}
				*/

				var models = this.getPage(pageNumber),
					results = [];
				_.each(models, function(model){
					results.push(model.toJSON());
				});
				this.pagination.currentPage = pageNumber;
				return jQuery.Deferred().resolve({results: results});
			}



			return this.fetch(_.extend({page: pageNumber, limit: this.pagination.pageSize}, options));
		},

		/**
		 * Re-Sort the collection based on the model attribute. This always flush the collection elements.
		 * @param  {String} attribute Model attribute for using to sort.
		 * @param  {String} asc       asc|desc Order of the sorting.
		 * @return {[type]}           [description]
		 */
		reSort: function(attribute, asc){
			var direction = asc == 'asc' ? 'asc' : 'desc';

			this.orderby = attribute;
			this.order = direction;

			return this.fetch({page: 0, sort: attribute, direction: direction});


			/* // Possible changes to not reload when fetched all elements
			if(this.pagination.totalElements > this.length)
				return this.fetch({page: 0, sort: attribute, direction: direction});

			this.comparator = function(a, b){
				var factor = asc ? 1 : -1;
				return a.get(attribute) < b.get(attribute) ? 1 * factor : -1 * factor;
			}

			this.sort();

			return jQuery.Deferred().resolve(this.toJSON());
			*/
		},

		/**
		 * Check if the fetch options must be flushed.
		 */
		checkPostFlush: function(fetchOptions){
			var me = this,
				flush = false,
				newOptions = _.clone(fetchOptions)
			;

			if(fetchOptions.flush){
				delete newOptions.flush;
				this.lastFetchOptions = newOptions;
				return fetchOptions;
			}

			_.each(fetchOptions, function(value, key){
				if(['limit', 'page'].indexOf(key) == -1)
					flush = flush || me.lastFetchOptions[key] != value;
			});


			if(flush){
				me.lastFetchOptions = _.clone(fetchOptions);
				newOptions.flush = true;
			}
			else
				newOptions = _.extend(this.lastFetchOptions, newOptions);

			return newOptions;
		}
	}),

	Post = WPModel.extend({
		modelName: 'post',
		defaults: {
			ID: 0,
			post_author: 0,
			post_date: new Date(),
			post_date_gmt: new Date(),
			post_content: '',
			post_title: '',
			post_excerpt: '',
			post_status: '',
			comment_status: '',
			ping_status: '',
			post_password: '',
			post_name: '',
			to_ping: [], // To do initialize
			pinged: [], // To do initialize
			post_modified: new Date(),
			post_modified_gmt: new Date(),
			post_content_filtered: '',
			post_parent: 0,
			guid: '',
			menu_order: 0,
			post_type: 'post',
			post_mime_type: '',
			comment_count: 0,
			permalink: ''
		},

		saveAttributes: ['sticky'],

		author: false,
		comments: false,
		parent: false,
		terms: false,
		meta: false,

		initialize: function(model, options){
			var me = this;
			if(model){
				if(model['id'])
					this.set(this.idAttribute, model['id']);
				if(model['author'])
					this.author = new Upfront.Models.User(model['author']);

				if(model['meta'])
					this.meta = new Upfront.Collections.MetaList(model['meta'], {objectId: this.id, metaType: 'post'});

			}
		},

		getVisibility: function(){
			if(this.get('post_status') == 'private')
				return 'private';
			if(this.get('post_password'))
				return 'password';
			if(this.sticky)
				return 'sticky';
			return 'public';
		},

		setVisibility: function(visibility){
			this.sticky = 0;
			if(visibility == 'password'){
				this.set('post_status', 'publish');
			} else {
				this.set('post_password', '');
				if(visibility == 'private')
					this.set('post_status', 'private');
				else if(visibility == 'sticky')
					this.sticky = 1;
				else if(visibility == 'public')
					this.set('post_status', 'publish');
			}
		},

		fetch: function(data) {
			var me = this;
			return WPModel.prototype.fetch.call(this, data)
				.done(function(response){
					if(response.data.author)
						me.author = new Upfront.Models.User(response.data.author);
					if(response.data.meta)
						me.meta = new Upfront.Collections.MetaList(response.data.meta, {objectId: me.id, metaType: 'post'});

					me.sticky = response.data.sticky;
				})
			;
		},

		idAttribute: 'ID',

		fetch_comments: function(data){
			var  me = this;
			data = _.isObject(data) ? data : {};

			this.comments = new Upfront.Collections.CommentList([], {postId: this.id});

			return this.comments.fetch();
		},

		fetch_parent: function() {
			if(!this.get('post_parent'))
				return false;

			var me = this,
				data = {
					action: 'fetch_post',
					id: this.get('post_parent')
				}
			;

			return this.post(data)
				.done(function(response){
						me.parent = new Post(response.data);
				});
		},

		fetch_author: function() {
			console.log('Fetch author not yet implemented.');
		},

		fetch_terms: function(type){
			if(!type)
				return false;
			return this.post({
				taxonomy: type,
				post_id: this.get('ID'),
				action: 'get_terms'
			});
		},

		fetch_meta: function(){
			this.meta = new Upfront.Collection.MetaList([], {objectId: this.id, metaType: 'post'});
			return this.meta.fetch();
		}
	}),

	PostList = WPCollection.extend({
		collectionName: 'post_list',
		model: Post,
		parentAttribute: 'post_parent',
		childrenAttribute: 'children',
		postId: false,
		postType: 'post',
		withMeta: false,
		withAuthor: false,
		fetchAttributes: ['postId', 'postType', 'withMeta', 'withAuthor'],
		initialize: function(models, options){
			if(options){
				if(options.postId)
					this.postId = options.postId;
				if(options.postType)
					this.postType = options.postType;
				if(options.withMeta)
					this.withMeta = options.withMeta;
				if(options.withAuthor)
					this.withAuthor = options.withAuthor;
			}
		}
	});

	var Comment = WPModel.extend({
		modelName: 'comment',
		defaults: {
			comment_ID: 0,
			comment_post_id: 0,
			comment_author: '',
			comment_author_email: '',
			comment_author_url: '',
			comment_author_IP: '0.0.0.0',
			comment_date: new Date(),
			comment_date_gmt: new Date(),
			comment_content: '',
			comment_karma: '',
			comment_agent: '',
			comment_type: '',
			comment_approved: '0',
			comment_parent: 0,
			user_id: 0
		},

		idAttribute: 'comment_ID',

		initialize: function(options){
			if(options && options['id'])
				this.set(this.idAttribute, options['id']);
		},

		trash: function(trashed){
			if(trashed)
				this.set('comment_approved', 'trash');
			else if(!trashed && this.get('comment_approved') == 'trash')
				this.set('comment_approved', '0');
			return this;
		},

		spam: function(spammed){
			if(spammed)
				this.set('comment_approved', 'spam');
			else if(!spammed && this.get('comment_approved') == 'spam')
				this.set('comment_approved', '0');
			return this;
		},

		approve: function(approved){
			if(approved)
				this.set('comment_approved', '1');
			else if(!approved && this.get('comment_approved') == '1')
				this.set('comment_approved', '0');
			return this;
		},
		isTrash: function(){
			return this.get('comment_approved') == 'trash';
		},
		isApproved: function(){
			return this.get('comment_approved') == '1';
		},
		isSpam: function(){
			return this.get('comment_approved') == 'spam';
		}
	}),

	CommentList = WPCollection.extend({
		model: Comment,
		collectionName: 'comment_list',
		postId: false,
		fetchAttributes: ['postId', 'commentType'],
		parentAttribute: 'comment_parent',
		childrenAttribute: 'replies',
		commentType: 'comment', // all, comment, trackback, pingback

		initialize: function(models, options){
			if(options.postId)
				this.postId = options.postId;
		},
		save: function(){
			console.error('CommentList save: Use single comment save instead.');
		}

	}),

	Meta = Backbone.Model.extend({
		defaults: {
			meta_key: '',
			meta_value: ''
		},
		idAttribute: 'meta_key'
	}),

	MetaList = WPCollection.extend({
		model: Meta,
		collectionName: 'meta_list',
		metaType: 'post',
		objectId: 0,
		fetchAttributes: ['objectId', 'metaType'],
		saveAttributes: ['objectId', 'metaType'],
		initialize: function(models, options){
			var metaModels = [];
			if(options.objectId)
				this.objectId = options.objectId;
			if(options.metaType)
				this.metaType = options.metaType;
		},
		getValue: function(key){
			var meta = this.get(key);
			if(!meta)
				return undefined;
			return meta.get('meta_value');
		},
		setValue: function(key, value){
			var meta = this.get(key);
			if(!meta){
				meta = new Meta({meta_key: key, meta_value: value});
				this.add(meta);
			}
			else{
				meta.set('meta_value', value);
				this.changedModels.push(meta.id);
			}
			return meta;
		}
	}),

	Term =  WPModel.extend({
		modelName: 'term',
		defaults: {
			term_id: 0,
			name: '',
			slug: '',
			term_group: '',
			term_taxonomy_id: 0,
			taxonomy: '',
			description: '',
			parent: '',
			count: 0
		},
		idAttribute: 'term_id',
		taxonomy: false,
		fetchAttributes: ['taxonomy'],
		saveAttributes: ['taxonomy'],
		initialize: function(model, options){
			if(model && model.taxonomy)
				this.taxonomy = model.taxonomy;
		},
		save: function(data){
			var me = this;
			return WPModel.prototype.save.call(this, data).
				done(function(response){
					me.set('term_id', response.data.term_id);
				})
			;
		}
	}),

	TermList = WPCollection.extend({
		collectionName: 'term_list',
		model: Term,
		taxonomy: false,
		taxonomyObject: false,
		postId: false,
		fetchAttributes: ['taxonomy', 'postId'],
		saveAttributes: ['taxonomy', 'postId'],
		parentAttribute: 'parent',
		childrenAttribute: 'children',
		initialize: function(models, options){
			if(options){
				if(options.taxonomy){
					this.taxonomy = options.taxonomy;
				}

				if(options.postId)
					this.postId = options.postId;
			}
		},
		fetch: function(options){
			var me = this;
			 return WPCollection.prototype.fetch.call(this, options)
				.done(function(response){
					me.taxonomyObject = response.data.taxonomy;
				})
			;
		}
	}),

	User = WPModel.extend({
		modelName: 'user',
		defaults: {
			ID: 0,
			caps: [],
			cap_key: '',
			roles: [],
			allcaps: [],
			data: {}
		},
		idAttribute: 'ID'
	}),


	Posts = Backbone.Model.extend({
		initialize: function () {
			var args = arguments,
				data = args[0] || {}
			;
			this.posts = data.posts ? new Backbone.Collection(data.posts) : new Backbone.Collection([]);
			this.pagination = data.pagination ? new Backbone.Model(data.pagination) : new Backbone.Model([]);
		}
	}),

	Pages = Posts.extend({}),

	Comments = Backbone.Model.extend({
		initialize: function () {
			var args = arguments,
				data = args[0] || {}
			;
			this.comments = data.comments ? new Backbone.Collection(data.comments) : new Backbone.Collection([]);
			this.pagination = data.pagination ? new Backbone.Model(data.pagination) : new Backbone.Model([]);
		}
	}),

		ImageVariant = Backbone.Model.extend({
			defaults : function () {
				return {
					vid   : "",
					label : "Variant Label",
					group : {
						margin_left: 0,
						margin_right: 0,
						col: 24,
						row: 50,
						left: 0,
						float: "none"
					},
					image : {
						order: 0,
						col: 24,
						top: 0,
						left: 0,
						row: 40,
						clear: true
					},
					caption : {
						show: 1,
						order: 1,
						col: 24,
						top: 0,
						left: 0,
						row: 10,
						clear: true
					}
				};
			}
		}),
		ImageVariants = Backbone.Collection.extend({
			model : ImageVariant
		}),
	_omega = 'omega';

	return {
		"Models": {
			"Property": Property,
			"ObjectModel": ObjectModel,
			"Module": Module,
			"ModuleGroup": ModuleGroup,
			"Region": Region,
			"Wrapper": Wrapper,
			"Layout": Layout,
			"Taxonomy": Taxonomy,
			"Post": Post,
			"Posts": Posts,
			"Pages": Pages,
			"Comment": Comment,
			"Comments": Comments,
			"Meta": Meta,
			"Term": Term,
			"User": User,
			"ImageVariant" : ImageVariant
		},
		"Collections": {
			"Properties": Properties,
			"Objects": Objects,
			"Modules": Modules,
			"Regions": Regions,
			"Wrappers": Wrappers,
			"CommentList": CommentList,
			"MetaList": MetaList,
			"PostList": PostList,
			"TermList": TermList,
			"ImageVariants" : ImageVariants
		}
	};
});

})(jQuery);


/**
 * @license RequireJS text 2.0.3 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require: false, XMLHttpRequest: false, ActiveXObject: false,
  define: false, window: false, process: false, Packages: false,
  java: false, location: false */

define('text',['module'], function (module) {
    'use strict';

    var text, fs,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = [],
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.3',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var strip = false, index = name.indexOf("."),
                modName = name.substring(0, index),
                ext = name.substring(index + 1, name.length);

            index = ext.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = ext.substring(index + 1, ext.length);
                strip = strip === "strip";
                ext = ext.substring(0, index);
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                nonStripName = parsed.moduleName + '.' + parsed.ext,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + '.' +
                                     parsed.ext) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback) {
            var file = fs.readFileSync(url, 'utf8');
            //Remove BOM (Byte Mark Order) from utf8 files if it is there.
            if (file.indexOf('\uFEFF') === 0) {
                file = file.substring(1);
            }
            callback(file);
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback) {
            var xhr = text.createXhr();
            xhr.open('GET', url, true);

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                stringBuffer.append(line);

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    }

    return text;
});


define('text!upfront/templates/object.html',[],function () { return '<div class="upfront-editable_entity upfront-object {{properties.class}} {{properties.preset}}" id="{{properties.element_id}}" {[ if (height > 0){ ]}style="min-height: {{height}}px;"{[ } ]}>\r\n\t<b class="upfront-entity_meta upfront-ui">\r\n\t\t<!-- {[ if (parseInt(properties.has_settings, 10)) { ]} <a href="#" class="upfront-icon-button upfront-icon-button-setting upfront-entity-settings_trigger"></a> {[ } ]} -->\r\n        {{extra_buttons}}\r\n\t\t<!--<a href="#" class="upfront-icon-button upfront-icon-button-delete upfront-entity-delete_trigger"></a>-->\r\n\t</b>\r\n\t{[ if (buttons){ ]}\r\n\t<b class="upfront-entity_meta upfront-ui upfront-entity_meta_extra">{{buttons}}</b>\r\n\t{[ } ]}\r\n\t<div class="upfront-object-content upfront-output-{{properties.id_slug}}">\r\n\t\t{{content}}\r\n\t</div>\r\n</div>\r\n';});


define('text!upfront/templates/module.html',[],function () { return '<div class="upfront-editable_entity upfront-module {{parent_group_class}} {{properties.class}}" id="{{properties.element_id}}" style="{[ if (height > 0){ ]}min-height: {{height}}px;{[ } ]} {[ if (hide == 1) { ]}display: none;{[ } ]}" data-row="{{properties.row}}">\r\n\t<b class="upfront-entity_meta upfront-ui">\r\n\t\t{{name}} \r\n\t\t{[ if (parseInt(properties.has_settings, 10)) { ]} <a href="#" class="upfront-icon-button upfront-icon-button-setting upfront-entity-settings_trigger"></a> {[ } ]}\r\n\t\t{[ if (!properties.sticky) { ]} <a href="#" class="upfront-icon-button upfront-icon-button-delete upfront-entity-delete_trigger"></a> {[ } ]}\r\n\t\t<a href="#" class="upfront-icon-button upfront-icon-button-hide upfront-entity-hide_trigger" style="display:none;"></a> \r\n\t</b>\r\n\t<div class="upfront-objects_container"></div>\r\n</div>\r\n<div class="upfront-module-hidden-toggle upfront-ui" style="display:none;"><a class="upfront-entity-hide_trigger">{{Upfront.Settings.l10n.global.views.show_element}}</a></div>\r\n';});


define('text!upfront/templates/module_group.html',[],function () { return '<b class="upfront-entity_meta upfront-ui">\r\n\t<!--<a href="#" class="upfront-icon-button upfront-icon-button-setting upfront-entity-settings_trigger"></a>-->\r\n\t<a href="#" class="upfront-icon-button upfront-icon-button-hide upfront-entity-hide_trigger" style="display:none;"></a>\r\n</b>\r\n<div class="upfront-selected-border"></div>\r\n<div class="upfront-module-group-toggle-container upfront-module-group-toggle-edit-container">\r\n\t<div class="upfront-module-group-toggle upfront-module-group-ungroup">{{Upfront.Settings.l10n.global.views.ungroup}}</div><br />\r\n\t<div class="upfront-module-group-toggle upfront-module-group-edit">{{Upfront.Settings.l10n.global.views.edit_elements}}</div>\r\n</div>\r\n<div class="upfront-module-group-toggle-container upfront-module-group-toggle-reorder-container">\r\n\t<div class="upfront-module-group-toggle upfront-module-group-reorder">{{Upfront.Settings.l10n.global.views.reorder}}</div>\r\n</div>\r\n<div class="upfront-module-group-finish-edit upfront-ui"><i class="upfront-field-icon upfront-field-icon-tick"></i> {{Upfront.Settings.l10n.global.views.done}}</div>\r\n\r\n<div class="upfront-module-hidden-toggle upfront-ui" style="display:none;"><a class="upfront-entity-hide_trigger">{{Upfront.Settings.l10n.global.views.show_group}}</a></div>\r\n\r\n<div class="upfront-module-group-bg"></div>\r\n<div class="upfront-modules_container"></div>\r\n';});


define('text!upfront/templates/region_container.html',[],function () { return '<div class="upfront-region-container-bg">\r\n\t<div class="upfront-grid-layout {{size_class}}{{max_col}}">\r\n\t\t<div class="upfront-grid-layout-gutter">\r\n\t\t\t<div class="upfront-grid-layout-gutter-left"></div>\r\n\t\t\t<div class="upfront-grid-layout-gutter-right"></div>\r\n\t\t</div>\r\n\t</div>\r\n</div>';});


define('text!upfront/templates/region.html',[],function () { return '<b class="upfront-entity_meta upfront-ui">\r\n\t<a href="#" class="upfront-icon-button upfront-icon-button-delete upfront-entity-delete_trigger"></a>\r\n\t<a href="#" class="upfront-icon-button upfront-icon-button-hide upfront-entity-hide_trigger" style="display:none;"></a> \r\n\t<a href="#" class="upfront-icon-button upfront-icon-button-setting upfront-entity-settings_trigger"></a>\r\n</b>\r\n<div class="upfront-region-title">{{title}}</div>\r\n<div class="upfront-region-wrapper"><div class="upfront-modules_container"></div></div>\r\n<div class="upfront-region-hidden-toggle upfront-ui" style="display:none;"><a class="upfront-entity-hide_trigger">{{Upfront.Settings.l10n.global.views.show_region}}</a></div>';});


define('text!upfront/templates/wrapper.html',[],function () { return '<b class="upfront-wrapper-meta upfront-wrapper-meta-left upfront-ui upfront-resize-handle-wrapper upfront-resize-handle-wrapper-w ui-resizable-handle ui-resizable-w">\r\n\t<a href="#" class="upfront-icon-button upfront-icon-button-add-spacer upfront-add-spacer" data-position="left" title="Add spacer"></a>\r\n</b>\r\n<b class="upfront-wrapper-meta upfront-wrapper-meta-right upfront-ui upfront-resize-handle-wrapper upfront-resize-handle-wrapper-e ui-resizable-handle ui-resizable-e">\r\n\t<a href="#" class="upfront-icon-button upfront-icon-button-add-spacer upfront-add-spacer" data-position="right" title="Add spacer"></a>\r\n</b>\r\n';});


define('text!upfront/templates/layout.html',[],function () { return '<section class="upfront-layout">\r\n\r\n</section>';});

(function ($) {

var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('views',[
	"text!upfront/templates/object.html",
	"text!upfront/templates/module.html",
	"text!upfront/templates/module_group.html",
	"text!upfront/templates/region_container.html",
	"text!upfront/templates/region.html",
	"text!upfront/templates/wrapper.html",
	"text!upfront/templates/layout.html"
], function () {
  var _template_files = [
    "text!upfront/templates/object.html",
    "text!upfront/templates/module.html",
    "text!upfront/templates/module_group.html",
    "text!upfront/templates/region_container.html",
    "text!upfront/templates/region.html",
    "text!upfront/templates/wrapper.html",
    "text!upfront/templates/layout.html"
];

	// Auto-assign the template contents to internal variable
	var _template_args = arguments,
		_Upfront_Templates = {}
	;
	_(_template_files).each(function (file, idx) {
		_Upfront_Templates[file.replace(/text!upfront\/templates\//, '').replace(/\.html/, '')] = _template_args[idx];
	});

	var
		_dispatcher = _.clone(Backbone.Events),

		_Upfront_ViewMixin = {
			"dispatcher": _dispatcher
		},

	/* ----- Core View Mixins ----- */

		FixedObject_Mixin = {
			activate_condition: function () {
				return false;
			}
		},

		FixedObjectInAnonymousModule_Mixin = {
			activate_condition: function () {
				var parent_view = this.parent_module_view,
					parent_model = parent_view && parent_view.model ? parent_view.model : false
				;
				if (!parent_model) return true; // Something went wrong, assume we're not in anonymos module
				return !!parent_model.get("name").length; // Anonymous parent check
			}
		},

		Anchorable_Mixin = {
			anchor: {
				is_target: true,
				is_trigger: false
			}
		},

	/* ----- Core views ----- */

		_Upfront_SingularEditor = Backbone.View.extend(_.extend({}, _Upfront_ViewMixin, {
			initialize: function (opts) {
				// this.model.bind("change", this.render, this);
				this.options = opts;
				this.listenTo(this.model, "change", this.render);
				if (this.init) this.init();

				this.listenTo(Upfront.Events, "upfront:paddings:top:updated", this.adjust_top_settings_panel_position);
			},
			_get_full_size_el: function ($el, ratio, inside) {
				var width = $el.width(),
					height = $el.height();
				return this._get_full_size(width, height, ratio, inside);
			},
			_get_full_size: function (width, height, ratio, inside) {
				if ( !inside ) {
					if ( Math.round(height/width*100)/100 > ratio ) {
						var w = (height/ratio);
						return [ w, height, (width-w)/2, 0 ];
					} else {
						var h = (width*ratio);
						return [ width, h, 0, (height-h)/2 ];
					}
				} else {
					if ( Math.round(height/width*100)/100 < ratio ) {
						var w = (height/ratio);
						return [ w, height, (width-w)/2, 0 ];
					} else {
						var h = (width*ratio);
						return [ width, h, 0, (height-h)/2 ];
					}
				}
			},
			update_background: function () {
				var me = this,
					is_layout = ( this instanceof Layout ),
					$bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el,
					type = this.model.get_breakpoint_property_value('background_type', true),
					$overlay = $bg.children('.upfront-region-bg-overlay');

				if ( type != 'featured' && me.$el.children('.feature_image_selector').length > 0 ) {
					me.$el.children('.feature_image_selector').remove();
				}
				// Destroy parallax first if exists
				if ( $overlay.data('uparallax') ) {
					$overlay.uparallax('destroy');
				}
				if ( !type || type == 'color') {
					this.update_background_color();
					if ( $overlay.length ) {
						$overlay.hide();
					}
				} else {
					if ( ! $overlay.length ) {
						$overlay = $('<div class="upfront-region-bg-overlay" />');
						$bg.append($overlay);
					} else {
						$overlay.show();
					}
					var $type = $overlay.find('.upfront-region-bg-'+type);
					if ( ! $type.length ) {
						$type = $('<div class="upfront-region-bg upfront-region-bg-' + type + '" />');
						$overlay.append($type);
					} else {
						$type.show();
					}
					$overlay.find('.upfront-region-bg').not($type).hide();
					$bg.css({
						backgroundColor: "",
						backgroundImage: "none",
						backgroundSize: "",
						backgroundRepeat: "",
						backgroundPosition: ""
					});
					switch ( type ) {
						case 'image':
							this.update_background_image($type, $overlay);
							break;
						case 'featured':
							this.update_background_featured($type, $overlay);
							break;
						case 'map':
							this.update_background_map($type, $overlay);
							break;
						case 'slider':
							this.update_background_slider($type, $overlay);
							break;
						case 'video':
							this.update_background_video($type, $overlay);
							break;
					}
				}
				Upfront.Events.trigger("entity:background:update", this, this.model);
			},
			update_background_color: function () {
				var $bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el,
					color = this.model.get_breakpoint_property_value('background_color', true)
				;
				if ( color ) {
					$bg.css('background-color', color);
				} else {
					$bg.css('background-color', '');
				}
			},
			_update_background_image_from_data: function (data, $type, $overlay) {
				var is_layout = ( this instanceof Layout ),
					repeat = this.model.get_breakpoint_property_value('background_repeat', true),
					position = this.model.get_breakpoint_property_value('background_position', true),
					style = this.model.get_breakpoint_property_value('background_style', true)
				;
				if ( data.image ){
					$type.css('background-image', "url('" + data.image + "')");
					// If parallax, then run parallax first so it applies correct background size
					if ( style == 'parallax' ) {
						$overlay.uparallax({
							element: $type,
							overflowTop: 0,
							overflowBottom: 0
						});
					}
					if ( style == 'full' || style == 'parallax' ){
						var size = this._get_full_size_el((is_layout ? $(window) : $type), data.ratio, false);
						$type.data('bg-position-y', size[3]);
						$type.data('bg-position-x', size[2]);
						$type.css({
							backgroundSize: size[0] + "px " + size[1] + "px", // "auto 100%",
							backgroundRepeat: "no-repeat",
							backgroundPosition: size[2] + "px " + size[3] + "px"
						});
					} else {
						$type.css({
							backgroundSize: "auto auto",
							backgroundRepeat: repeat,
							backgroundPosition: position
						});
					}
					if ( is_layout ) {
						$type.css('background-attachment', 'fixed');
					}
				} else {
					$type.css({
						backgroundImage: "none",
						backgroundSize: "",
						backgroundRepeat: "",
						backgroundPosition: "",
						backgroundAttachment: ""
					});
				}
			},
			update_background_image: function ($type, $overlay) {
				var $bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el,
					image = this.model.get_breakpoint_property_value('background_image', true),
					ratio = parseFloat(this.model.get_breakpoint_property_value('background_image_ratio', true))
				;
				this.update_background_color();
				this._update_background_image_from_data({
					image: image,
					ratio: ratio
				}, $type, $overlay);
			},
			update_background_featured: function ($type, $overlay) {
				var me = this;
				var $bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el;
				this.update_background_color();

				if(me.$el.children('.feature_image_selector').length < 1) {
					var feature_selector = $('<a href="#" class="feature_image_selector"></a>');
					feature_selector.bind('click', function() {
							Upfront.Views.Editor.ImageSelector.open().done(function(images){
								var sizes = {},
									imageId = 0
								;
								_.each(images, function(image, id){
									sizes = image;
									imageId = id;
								});
								var imageInfo = {
										src: sizes.medium ? sizes.medium[0] : sizes.full[0],
										srcFull: sizes.full[0],
										srcOriginal: sizes.full[0],
										fullSize: {width: sizes.full[1], height: sizes.full[2]},
										size: sizes.medium ? {width: sizes.medium[1], height: sizes.medium[2]} : {width: sizes.full[1], height: sizes.full[2]},
										position: false,
										rotation: 0,
										id: imageId
									}
								;
								$('<img>').attr('src', imageInfo.srcFull).load(function(){
									var post = Upfront.data.posts[_upfront_post_data.post_id];
									post.meta.setValue('_thumbnail_id', imageInfo.id);
									post.meta.setValue('_thumbnail_data', imageInfo);

									post.meta.save().done(function(){
										$('<img>').attr('src', imageInfo.srcOriginal).load(function() {
											me.update_background();
											Upfront.Views.Editor.ImageSelector.close();
										});
									});
								});
							});
						});
					me.$el.append(feature_selector);
				}

				Upfront.Util.post({action: 'this_post-get_thumbnail', post_id: _upfront_post_data.post_id})
					.done(function(response){
						if(typeof(response.data.featured_image) != 'undefined') {

							if (response.data.featured_image != '') {
								me.$el.children('.feature_image_selector').addClass('change_feature_image');
							} else {
								me.$el.children('.feature_image_selector').removeClass('change_feature_image');
							}

							image = response.data.featured_image;
							var temp_image = $('<img>').attr('src', response.data.featured_image);
							temp_image.load(function(){
								ratio = parseFloat(Math.round(this.height/this.width*100)/100);
								$bg.data('bg-featured-image-ratio', ratio);

								me._update_background_image_from_data({
									image: image,
									ratio: ratio
								}, $type, $overlay);

							});
						} else {
							me._update_background_image_from_data({
								image: false,
								ratio: 0
							}, $type, $overlay);
						}
					})
				;
			},
			postpone_map_init: function ($type, $overlay) {
				var me = this;
				$(document).one("upfront-google_maps-loaded", function () {
					me.update_background_map($type, $overlay);
				});
			},
			update_background_map: function ($type, $overlay) {
				try {
					if (!window.google.maps.Map) return this.postpone_map_init($type, $overlay);
				} catch (e) {
					return this.postpone_map_init($type, $overlay);
				}
				var me = this,
					center = this.model.get_breakpoint_property_value('background_map_center', true),
					zoom = this.model.get_breakpoint_property_value('background_map_zoom', true),
					style = this.model.get_breakpoint_property_value('background_map_style', true),
					controls = this.model.get_breakpoint_property_value('background_map_controls', true),
					show_markers = this.model.get_breakpoint_property_value('background_show_markers', true),
					styles = (this.model.get_breakpoint_property_value("background_use_custom_map_code", true) ? JSON.parse(this.model.get_breakpoint_property_value("map_styles", true)) : false),
					options = {
						center: new google.maps.LatLng(center[0], center[1]),
						zoom: parseInt(zoom),
						mapTypeId: google.maps.MapTypeId[style],
						panControl: (controls.indexOf("pan") >= 0),
						zoomControl: (controls.indexOf("zoom") >= 0),
						mapTypeControl: (controls.indexOf("map_type") >= 0),
						scaleControl: (controls.indexOf("scale") >= 0),
						streetViewControl: (controls.indexOf("street_view") >= 0),
						overviewMapControl: (controls.indexOf("overview_map") >= 0),
						scrollwheel: false,
						styles: styles
					}
				;
				if ( !this.bg_map ) {
					this.bg_map = new google.maps.Map($type.get(0), options);
					if (styles) {
						this.bg_map.setOptions({styles: styles});
					}
				} else {
					$type.show();
					this.bg_map.setOptions(options);
					if (styles) {
						this.bg_map.setOptions({styles: styles});
					}
					setTimeout(function(){
						me.bg_map.setCenter(options.center);
					}, 500);
				}
				if (!!show_markers) {
					var mrk = new google.maps.Marker({
						position: options.center,
						draggable: false,
						map: this.bg_map
					});
				}
			},
			update_background_slider: function ($type, $overlay) {
				var me = this,
					slide_images = this.model.get_breakpoint_property_value('background_slider_images', true),
					rotate = this.model.get_breakpoint_property_value('background_slider_rotate', true),
					rotate_time = this.model.get_breakpoint_property_value('background_slider_rotate_time', true),
					control = this.model.get_breakpoint_property_value('background_slider_control', true),
					transition = this.model.get_breakpoint_property_value('background_slider_transition', true);
				if ( slide_images ) {
					if ( rotate ) {
						$type.attr('data-slider-auto', 1);
						$type.attr('data-slider-interval', rotate_time*1000);
					} else {
						$type.attr('data-slider-auto', 0);
					}
					$type.attr('data-slider-show-control', control);
					$type.attr('data-slider-effect', transition);
					if (!_.isUndefined(Upfront.themeExporter)) {
						// In builder always replace slide_images with server response
						Upfront.Views.Editor.ImageEditor.getImageData(slide_images).done(function(response){
							var images = response.data.images;
							// Rewrite slide images because in builder mode they will be just paths of theme images
							// and slider needs image objects to work.
							//slide_images = images;
							_.each(slide_images, function(id){
								var image = _.isNumber(id) || id.match(/^\d+$/) ? images[id] : _.find(images, function(img){
										return img.full[0].split(/[\\/]/).pop() == id.split(/[\\/]/).pop();
									}),
									$image = $('<div class="upfront-default-slider-item" />');
								if (image && image.full) $image.append('<img src="' + image.full[0] + '" />');
								$type.append($image);
							});
							me.slide_images = slide_images;
							$type.trigger('refresh');
						});
						return;
					}
					if ( (this.slide_images != slide_images) && slide_images.length > 0 ) {
						Upfront.Views.Editor.ImageEditor.getImageData(slide_images).done(function(response){
							var images = response.data.images;
							_.each(slide_images, function(id){
								var image = images[id],
									$image = $('<div class="upfront-default-slider-item" />');
								if (image && image.full) $image.append('<img src="' + image.full[0] + '" />');
								$type.append($image);
							});
							me.slide_images = slide_images;
							$type.trigger('refresh');
						});
					} else {
						$type.trigger('refresh');
					}

					//If all images deleted remove content
					if(slide_images.length == 0) {
						$type.find('.upfront-default-slider-wrap').html('');
						$type.trigger('refresh');
					}
				}
			},
			update_background_video: function ($type, $overlay) {
				var me = this,
					is_layout = ( this instanceof Layout ),
					$bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el,
					color = this.model.get_breakpoint_property_value('background_color', true),
					video = this.model.get_breakpoint_property_value('background_video', true),
					embed = this.model.get_breakpoint_property_value('background_video_embed', true),
					width = this.model.get_breakpoint_property_value('background_video_width', true),
					height = this.model.get_breakpoint_property_value('background_video_height', true),
					style = this.model.get_breakpoint_property_value('background_video_style', true) || 'crop',
					ratio, $embed;
				if ( style == 'inside' && color ) {
					$bg.css('background-color', color);
				} else {
					$bg.css('background-color', '');
				}
				if ( is_layout ) {
					$overlay.css('position', 'fixed');
				}
				if ( video && embed && ( this._prev_video && this._prev_video != video || !this._prev_video ) ) {
					ratio = height/width;
					$embed = $(embed);
					$embed.css('position', 'absolute').appendTo($type);
					if ( style == 'crop' || style == 'inside' ) {
						var size = this._get_full_size_el( ( is_layout ? $(window) : $type ), ratio, (style == 'inside') );
						$embed.css({
							width: size[0],
							height: size[1],
							left: size[2],
							top: size[3]
						});
					} else if ( style == 'full' ) {
						$embed.css({
							width: is_layout ? $(window).width() : $type.width(),
							height: is_layout ? $(window).height() : $type.height(),
							left: 0,
							top: 0
						});
					}
					this._prev_video = video;
				} else if ( !video || !embed ) {
					this.remove_background();
				} else {
					this.refresh_background();
				}
			},
			refresh_background: function () {
				var $bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el,
					type = this.model.get_breakpoint_property_value('background_type', true),
					$overlay = $bg.children('.upfront-region-bg-overlay'),
					$type = $overlay.find('.upfront-region-bg-' + type)
				;
				switch ( type ) {
					case 'image':
						this.refresh_background_image($type, $overlay);
						break;
					case 'featured':
						this.refresh_background_featured($type, $overlay);
						break;
					case 'map':
						this.refresh_background_map($type, $overlay);
						break;
					case 'slider':
						this.refresh_background_slider($type, $overlay);
						break;
					case 'video':
						this.refresh_background_video($type, $overlay);
						break;
				}
			},
			_refresh_background_image_from_data: function (data, $type, $overlay) {
				var style = this.model.get_breakpoint_property_value('background_style', true);
				// If parallax, then run parallax first so it applies correct background size
				if ( style == 'parallax' && $overlay.data('uparallax') ) {
					$overlay.uparallax('refresh');
					setTimeout(function(){
						// Do another refresh later to make sure it renders properly
						if ( $overlay.data('uparallax') ) $overlay.uparallax('refresh');
					}, 2000);
				}
				if ( style == 'full' || style == 'parallax' ) {
					var size = this._get_full_size_el($type, data.ratio, false);
					$type.data('bg-position-y', size[3]);
					$type.data('bg-position-x', size[2]);
					$type.css({
						backgroundSize: size[0] + "px " + size[1] + "px", // "auto 100%",
						backgroundRepeat: "no-repeat",
						backgroundPosition: size[2] + "px " + size[3] + "px"
					});
				}
			},
			refresh_background_image: function ($type, $overlay) {
				var ratio = this.model.get_breakpoint_property_value('background_image_ratio', true);
				this._refresh_background_image_from_data({
					ratio: ratio
				}, $type, $overlay);
			},
			refresh_background_featured: function ($type, $overlay) {
				var ratio = $type.data('bg-featured-image-ratio');
				this._refresh_background_image_from_data({
					ratio: ratio
				}, $type, $overlay);
			},
			refresh_background_map: function ($type, $overlay) {
				if ( !this.bg_map ) return;
				google.maps.event.trigger(this.bg_map, 'resize');
			},
			refresh_background_video: function ($type, $overlay) {
				var video = this.model.get_breakpoint_property_value('background_video', true),
					embed = this.model.get_breakpoint_property_value('background_video_embed', true),
					width = this.model.get_breakpoint_property_value('background_video_width', true),
					height = this.model.get_breakpoint_property_value('background_video_height', true),
					style = this.model.get_breakpoint_property_value('background_video_style', true) || 'crop',
					ratio,
					$embed = $type.children('iframe');
				if ( video && embed ) {
					ratio = height/width;
					if ( style == 'crop' || style == 'inside' ){
						var size = this._get_full_size_el($type, ratio, (style == 'inside'));
						$embed.css({
							width: size[0],
							height: size[1],
							left: size[2],
							top: size[3]
						});
					} else if ( style == 'full' ){
						$embed.css({
							width: $type.width(),
							height: $type.height(),
							left: 0,
							top: 0
						});
					}
				}
			},
			refresh_background_slider: function ($type, $overlay) {
				$type.trigger('refresh');
			},
			remove_background: function () {
				var $bg = typeof this.$bg != 'undefined' ? this.$bg : this.$el,
					$overlay = this.$el.find('.upfront-region-bg-overlay');
				if ( $overlay.length ) {
					$overlay.hide();
				}
				$bg.css({
					backgroundColor: "",
					backgroundImage: "none",
					backgroundSize: "",
					backgroundRepeat: "",
					backgroundPosition: ""
				});
			},
			on_window_resize: function (e) {
				if ( e.target != window || !e.data.model) return;

				var me = e.data;
				me.refresh_background();
			},
			/**
			 * Adjusts inline control panel top position when top padding is changed or element dropped
			 * Makes sure the top control panel is always visible and is not covering smaller elements
			 *
			 * @param model, either passed or existing in 'this'
             * @param current_el, either passed or existing in 'this'
			 *
			 * @return void
             */
			adjust_top_settings_panel_position: function( model, current_el ){
				var _model = model && ( model instanceof Backbone.Model ) ? model : this.model,
					_current_el = current_el ? current_el : this,
					_$control_el = current_el && current_el.$control_el ? current_el.$control_el : this.$control_el;
					;

				if( !_current_el || !_$control_el || _$control_el.$el ) return;
				// if top padding is less than 30 and element has at least 30px margin from top of window
				if(  parseInt( _model.get_breakpoint_property_value("top_padding_num", false, 0), 10 ) < 30 && _current_el.$el.offset().top >=30 ){
					_$control_el.find(".upfront-inline-panel-top").first().css("top", "-30px");
				}else{
					_$control_el.find(".upfront-inline-panel-top").first().css("top", "0px");
				}
			}
		})),

		_Upfront_EditableEntity = _Upfront_SingularEditor.extend({
			/*events: {
				"click .upfront-entity_meta a": "on_settings_click",
				"click .upfront-entity_meta": "on_meta_click",
				"click": "on_click",
			},*/
			// Propagate collection sorting event
			resort_bound_collection: function () {
				this.$el.trigger("resort", [this]);
			},
			get_settings: function () {
				return '';
			},
			on_click: function (e) {
				// We don't want to activate the element when Settings sidebar is open
				if ($('#element-settings-sidebar').html() !== '' || $('#settings').html() !== '') return false;
				// Let's not activate if shift key is hold
				if (e && e.shiftKey) return;
				this.activate();
				Upfront.Events.trigger("entity:contextmenu:deactivate", this);
				//return false;
			},
			deactivate: function () {
				this.$el.removeClass("upfront-active_entity");
				this.check_deactivated();
				this.trigger("upfront:entity:deactivate", this);
			},
			activate: function () {
				var me= this,
					currentEntity = Upfront.data.currentEntity
				;
				if (this.activate_condition && !this.activate_condition()) return false;
				if (currentEntity && currentEntity == this) return false;
				if (!(this instanceof ObjectView)) return;
				if (currentEntity && currentEntity != this) {
					//If the current entity is my child we are ok
					if(Upfront.data.currentEntity.$el.closest(me.$el).length)
						return;
					Upfront.data.currentEntity.trigger('deactivated');
				}

				Upfront.data.currentEntity = this;
				this.trigger("upfront:entity:activate", this);
				this.trigger("activated", this);
				this.listenToOnce(this, 'deactivated', this.deactivate);

				this.$el.addClass("upfront-active_entity");
				this.adjust_top_settings_panel_position();
			},
			// Stub handlers
			on_meta_click: function () {},
			on_delete_click: function () {
				this.$el.trigger("upfront:entity:remove", [this]);
				return false; // Stop propagation in order not to cause error with missing sortables etc
			},
			on_context_menu: function(e) {

				if($(e.target).closest('.redactor-editor').length > 0) {
					e.stopPropagation();
					return;
				}

				if (Upfront.Settings.Application.no_context_menu) return;

				e.stopPropagation();
				// disable context menu if the element is in text edit mode, in order to enable spell check
				if ($(e.target).closest('.redactor_box').length > 0) return;

				e.preventDefault();

				this.event = e;
				Upfront.Events.trigger("entity:contextmenu:activate", this);
			},
			on_settings_click: function (e) {
				if( typeof e !== "undefined" ) {
					e.preventDefault();
				}
				Upfront.Events.trigger("entity:settings:activate", this);
			},
			on_hide_click: function (e) {
				e.preventDefault();
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					data = Upfront.Util.clone(this.model.get_property_value_by_name('breakpoint') || {});
				if ( !_.isObject(data[breakpoint.id]) )
					data[breakpoint.id] = {};
				if ( data[breakpoint.id].hide == 1 )
					data[breakpoint.id].hide = 0;
				else
					data[breakpoint.id].hide = 1;
				this.model.set_property('breakpoint', data);
			},
			check_deactivated: function () {
				if (Upfront.data.currentEntity == this) Upfront.data.currentEntity = false;
			},
			create_size_hint: function ($el) {
				var me = this,
					$el = $el ? $el : this.$el.find('.upfront-editable_entity:first');
				if ( !$el.children('.upfront-entity-size-hint').length ) {
					this.$size_hint = $('<div class="upfront-entity-size-hint upfront-ui"></div>');
					$el.append(this.$size_hint);
				}
				setTimeout(function(){ me.update_size_hint(); }, 500);
			},
			update_size_hint: function (width, height) {
				if ( !this.$size_hint ) return;

				var $el = this.$size_hint.parent(),
					column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding,
					hPadding = parseInt( this.model.get_breakpoint_property_value('left_padding_num') || column_padding ) + parseInt( this.model.get_breakpoint_property_value('right_padding_num') || column_padding ),
					vPadding = parseInt( this.model.get_breakpoint_property_value('top_padding_num') || column_padding ) + parseInt( this.model.get_breakpoint_property_value('bottom_padding_num') || column_padding ),
					width = width ? width - hPadding : $el.width() - hPadding,
					height = height ? height - vPadding : $el.height() - vPadding,
					hint = '<b>w:</b>' + width + 'px <b>h:</b>' + height + 'px';
				this.$size_hint.html(hint);
			},
			apply_breakpoint_position: function ($el, $toggle, exceptions) {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					grid = Upfront.Settings.LayoutEditor.Grid;
				if ( !breakpoint ) return;
				var me = this,
					exceptions = _.isArray(exceptions) ? exceptions : [],
					data = this.model.get_property_value_by_name('breakpoint'),
					row = this.model.get_property_value_by_name('row'),
					default_hide = this.model.get_property_value_by_name('default_hide'),
					toggle_hide = this.model.get_property_value_by_name('toggle_hide'),
					hide = this.model.get_property_value_by_name('hide'),
					breakpoint_data = data[breakpoint.id],
					$wrapper = this.$el.parent('.upfront-wrapper'),
					has_sibling = $wrapper.length > 0 ? ( $wrapper.children(':not(.upfront-wrapper-meta)').length > 1 ) : false,
					width_col = breakpoint_data ? breakpoint_data.left+breakpoint_data.col : 0
				;
				if ( has_sibling ) {
					width_col = Upfront.Util.width_to_col($wrapper.width());
				}
				if ( !_.contains(exceptions, 'hide') ) {
					if ( breakpoint_data && "hide" in breakpoint_data ) {
						hide = breakpoint_data.hide;
					}
					else {
						if ( !breakpoint.default || hide === false ) hide = default_hide;
					}
					if ( !hide ) $el.show();
					else $el.hide();
					if ( $toggle && $toggle.length > 0 ) {
						if ( ( toggle_hide !== false && toggle_hide == 0 )|| !hide ) $toggle.hide();
						else if ( hide ) $toggle.show();
					}
				}
				if ( !_.contains(exceptions, 'col') ) {
					if ( breakpoint_data && typeof breakpoint_data.col == 'number' ) {
						$el.css('width', (breakpoint_data.col/width_col*100) + '%');
						$el.data('breakpoint_col', breakpoint_data.col);
					}
					else {
						$el.css('width', '');
						$el.removeData('breakpoint_col');
					}
				}
				if ( !_.contains(exceptions, 'left') ) {
					if ( breakpoint_data && typeof breakpoint_data.left == 'number' ) {
						$el.css('margin-left', (breakpoint_data.left/width_col*100) + '%');
						$el.data('breakpoint_left', breakpoint_data.left);
					}
					else {
						$el.css('margin-left', '');
						$el.removeData('breakpoint_left');
					}
				}
				if ( !_.contains(exceptions, 'top') ) {
					if ( breakpoint_data && typeof breakpoint_data.top == 'number' ) {
						$el.css('margin-top', (breakpoint_data.top*grid.baseline) + 'px');
						$el.data('breakpoint_top', breakpoint_data.top);
					}
					else {
						$el.css('margin-top', '');
						$el.removeData('breakpoint_top');
					}
				}
				if ( !_.contains(exceptions, 'row') ) {
					if ( breakpoint_data && typeof breakpoint_data.row == 'number' ) {
						$el.css('min-height', (breakpoint_data.row*grid.baseline) + 'px');
						$el.data('breakpoint_row', breakpoint_data.row);
					}
					else {
						$el.css('min-height', (row*grid.baseline) + 'px');
						$el.removeData('breakpoint_row');
					}
				}
				if ( !_.contains(exceptions, 'order') ) {
					// order is applied to the view.$el
					if ( breakpoint_data && typeof breakpoint_data.order == 'number' ) {
						this.$el.css('order', breakpoint_data.order);
						$el.data('breakpoint_order', breakpoint_data.order);
					}
					else {
						this.$el.css('order', '');
						$el.removeData('breakpoint_order');
					}
				}
				//this.apply_paddings($el);
			},
			apply_paddings: function ($el) {
				var top_padding_use = this.model.get_breakpoint_property_value('top_padding_use', true),
					bottom_padding_use = this.model.get_breakpoint_property_value('bottom_padding_use', true),
					left_padding_use = this.model.get_breakpoint_property_value('left_padding_use', true),
					right_padding_use = this.model.get_breakpoint_property_value('right_padding_use', true),
					top_padding_num = this.model.get_breakpoint_property_value('top_padding_num', true),
					bottom_padding_num = this.model.get_breakpoint_property_value('bottom_padding_num', true),
					left_padding_num = this.model.get_breakpoint_property_value('left_padding_num', true),
					right_padding_num = this.model.get_breakpoint_property_value('right_padding_num', true)
				;
				$el.css({
					paddingTop: top_padding_use && top_padding_num !== false ? top_padding_num + 'px' : '',
					paddingBottom: bottom_padding_use && bottom_padding_num !== false ? bottom_padding_num + 'px' : '',
					paddingLeft: left_padding_use && left_padding_num !== false ? left_padding_num + 'px' : '',
					paddingRight: right_padding_use && right_padding_num !== false ? right_padding_num + 'px' : ''
				});

			},
			show_top_padding_hint: function (value) {
				var me               = this,
					top_padding_hint = this.$el.parents('.upfront-module').find('.upfront-entity-top-padding-hint')
				;
				if(!this.top_padding_hint_flag) {
					this.top_padding_hint_flag = true;
					return;
				}
				if(!top_padding_hint.length) {
					top_padding_hint = $('<div class="upfront-ui upfront-entity-padding-hint upfront-entity-top-padding-hint"></div>').appendTo(this.$el.parents('.upfront-module'));
				}
				top_padding_hint.css({
					height: value + 'px',
					opacity: 1
				});
				clearTimeout(this.top_padding_hint_timer);
				this.top_padding_hint_timer = setTimeout(function() {
					me.hide_top_padding_hint();
				}, 1000);
			},
			hide_top_padding_hint: function () {
				if(!this.padding_hint_locked) {
					this.$el.parents('.upfront-module').find('.upfront-entity-top-padding-hint').css({
						opacity: 0
					});
				}
			},
			show_bottom_padding_hint: function (value) {
				var me                  = this,
					bottom_padding_hint = this.$el.parents('.upfront-module').find('.upfront-entity-bottom-padding-hint')
				;
				if(!this.bottom_padding_hint_flag) {
					this.bottom_padding_hint_flag = true;
					return;
				}
				if(!bottom_padding_hint.length) {
					bottom_padding_hint = $('<div class="upfront-ui upfront-entity-padding-hint upfront-entity-bottom-padding-hint"></div>').appendTo(this.$el.parents('.upfront-module'));
				}
				bottom_padding_hint.css({
					height: value + 'px',
					opacity: 1
				});
				clearTimeout(this.bottom_padding_hint_timer);
				this.bottom_padding_hint_timer = setTimeout(function() {
					me.hide_bottom_padding_hint();
				}, 1000);
			},
			hide_bottom_padding_hint: function () {
				if(!this.padding_hint_locked) {
					this.$el.parents('.upfront-module').find('.upfront-entity-bottom-padding-hint').css({
						opacity: 0
					});
				}
			},
			updateControls: function() {
				var elementControlsTpl = '<div class="upfront-element-controls upfront-ui"></div>';
				if(this.paddingControl && typeof this.paddingControl.isOpen !== 'undefined' && this.paddingControl.isOpen)	return;

				if (!this.controls) {
					this.controls = this.createControls();
				}

				if (this.controls === false) return;

				this.controls.render();
				if (!this.$control_el || this.$control_el.length === 0) {
					this.$control_el = this.$el;
				}
				if (this.$control_el.find('>.upfront-element-controls').length === 0) {
					this.$control_el.append(elementControlsTpl);
					this.$control_el.find('>.upfront-element-controls').html('').append(this.controls.$el);
				}
				this.controls.delegateEvents();

			},
			createControls: function() {
				var me = this,
					panel = new Upfront.Views.Editor.InlinePanels.Panel()
					;

				panel.items = this.getControlItems();

				return panel;
			},
			createControl: function(icon, tooltip, click){
				var me = this,
					item = new Upfront.Views.Editor.InlinePanels.Control();
				item.icon = icon;
				item.tooltip = tooltip;
				if(click){
					this.listenTo(item, 'click', function(e){
						me[click](e);
					});
				}

				return item;
			},
			createPaddingControl: function(){
				this.paddingControl = new Upfront.Views.Editor.InlinePanels.PaddingControl({
					model: this.model
				});

				this.paddingControl.icon = 'padding';
				this.paddingControl.tooltip = l10n.padding_settings;
				return this.paddingControl;
			},
			getControlItems: function(){
				return _([
					this.createPaddingControl(),
					this.createControl('settings', l10n.settings, 'on_settings_click')
				]);
			}
		}),

		_Upfront_EditableContentEntity = _Upfront_EditableEntity.extend({
			events: {
				"click": "on_click",
				"dblclick": "on_edit"
			},
			on_edit: function () {
				// We don't want to activate the Entity when Settings sidebar is open
				if($('#element-settings-sidebar').html() !== '' || $('#settings').html() !== '') return false;
				var contentEditable = this.$el.find('[contenteditable]');
				if (contentEditable.length > 0) {
					contentEditable[0].focus();
				} else {
					// Trigger settings popup
					Upfront.Events.trigger("entity:settings:activate", this);
				}
				return false;
			}
        }),

		_Upfront_PluralEditor = Backbone.View.extend(_.extend({}, _Upfront_ViewMixin, {
			initialize: function () {
				// this.model.bind("change", this.render, this);
				// this.model.bind("add", this.render, this);
				// this.model.bind("remove", this.render, this);
				this.listenTo(this.model, 'change', this.render);
				this.listenTo(this.model, 'add', this.render);
				this.listenTo(this.model, 'remove', this.render);

				if (this.init) this.init();
			},
		})),

		_Upfront_EditableEntities = _Upfront_PluralEditor.extend({
			"events": {
				"resort": "on_resort_collection",
				"upfront:entity:remove": "on_entity_remove"
			},

			on_resort_collection: function () {
				var models = [],
					collection = this.model
				;
				this.$el.find(".upfront-editable_entity, .upfront-module-group").each(function () {
					var element_id = $(this).attr("id"),
						model = collection.get_by_element_id(element_id)
					;
					model && models.push(model);
				});
				this.model.reset(models);
				return false; // Don't bubble up
			},
			on_entity_remove: function (e,view) {
				view.remove();
				this.model.remove(view.model);
			},
			on_activate: function (view) {
				this.model.active_entity = view.model;
				//Upfront.data.currentEntity = view;
				Upfront.Events.trigger("entity:activated", view, view.model);
				this.trigger('activated');
			},
			deactivate: function (removed) {
				if (removed == this.model.active_entity) this.model.active_entity = false;
				//this.check_deactivated();
				Upfront.Events.trigger("entity:deactivated", removed);
				this.trigger('deactivated');
			},

			fix_flexbox_clear: function ($el) {
				// @TODO Experiment: don't need flexbox clearing workaround as elements will always take the whole width!
				/*var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					off = $el.offset(),
					width = $el.width(),
					$prev;
				$el.children().each(Upfront.Util.normalize_sort_elements_cb).sort(Upfront.Util.sort_elements_cb).filter(function(){
					return $(this).children().size() > 0;
				}).each(function(){
					var order = $(this).data('breakpoint_order') || 0,
						clear = $(this).data('breakpoint_clear'),
						prev_off, margin;
					$(this).css('margin-right', 0);
					if ( $prev && ( ( ( !breakpoint || breakpoint.default ) && $(this).hasClass('clr') ) || ( breakpoint && !breakpoint.default && clear) ) ) {
						prev_off = $prev.offset();
						margin = Math.floor( (off.left+width) - (prev_off.left+$prev.width()) );
						$prev.css('margin-right', (margin/width*100-1) + '%' ); // Add -1 to prevent rounding error
					}
					$prev = $(this);
				});*/
			},

			fix_wrapper_height: function (modules, wrappers, col) {
				Upfront.Behaviors.GridEditor.time_start('fn fix_wrapper_height');
				var me = this,
					ed = Upfront.Behaviors.GridEditor,
					breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
					lines = ed.parse_modules_to_lines(modules, wrappers, breakpoint.id, _.isNumber(col) ? col : breakpoint.columns)
				;
				Upfront.Events.trigger('upfront:wrappers:before_fix_height', this);
				// Reset height first
				wrappers.each(function (wrapper) {
					var wrapper_view = Upfront.data.wrapper_views[wrapper.cid];
					if ( !wrapper_view ) return;
					wrapper_view.$el.css('min-height', '');
				});
				_.each(lines, function (l) {
					var wraps = [];
					_.each(l.wrappers, function (w) {
						var wrapper_view = Upfront.data.wrapper_views[w.model.cid];
						if ( !wrapper_view ) return;
						wraps.push(wrapper_view.$el);
					});
					me._apply_wrapper_height(wraps);
				});
				Upfront.Events.trigger('upfront:wrappers:after_fix_height', this);
				Upfront.Behaviors.GridEditor.time_end('fn fix_wrapper_height');
			},
			_apply_wrapper_height: function (wraps) {
				// Find max height and apply to all
				var wraps_height = _.map(wraps, function($wrap){
						return parseFloat($wrap.css('height'));
					}),
					height = _.max(wraps_height, function(h){
						return h;
					})
				;
				_.each(wraps, function ($wrap, index) {
					var prev_is_spacer = index > 0 ? wraps[index-1].hasClass('upfront-wrapper-spacer') : false,
						next_is_spacer = index < wraps.length-1 ? wraps[index+1].hasClass('upfront-wrapper-spacer') : false
					;
					$wrap.removeAttr('data-first-in-row');
					$wrap.removeAttr('data-last-in-row');
					$wrap.removeAttr('data-prev-spacer');
					$wrap.removeAttr('data-next-spacer');
					if ( index == 0 ) $wrap.attr('data-first-in-row', '1');
					if ( index == wraps.length-1 ) $wrap.attr('data-last-in-row', '1');
					if ( prev_is_spacer ) $wrap.attr('data-prev-spacer', '1');
					if ( next_is_spacer ) $wrap.attr('data-next-spacer', '1');
					$wrap.css('min-height', height);
				});
			}
		}),

		ContextMenuItem = Backbone.View.extend({
			tagName: 'li',
			initialize: function(opts){
				this.options = opts;
				this.label = this.options.get_label;
				this.action = this.options.action;

				if ( typeof this.options.in_context == 'function' ) {
					this.in_context = this.options.in_context;
				}
			},
			render: function () {
				var me = this,
					cls = 'upfront-ctx-' + this.label().replace(/[^a-z0-9]/ig, '_').toLowerCase()
				;
				this.$el.empty().addClass(cls);
				this.$el.append(this.label);

				this.$el.bind('click', function(e) {
					e.preventDefault();
					me.action(this.for_view, e);
					Upfront.Events.trigger("entity:contextmenu:deactivate", this);
				});
			},
			remove: function(){
				this.parent_view = false;
				this.for_view = false;
				Backbone.View.prototype.remove.call(this);
			},
			in_context: function(){
				// Allow additional context for individual menuitem
				return true;
			}
		}),

		ContextMenuList = Backbone.View.extend({
			tagName: 'ul',
			initialize: function (opts) {
				this.options = opts;
				this.for_view = this.options.for_view;
			},

			render: function () {
				var me = this;
				this.$el.empty();
				this.menuitems.each(function(menuitem) {
					if ( ! menuitem.menulist ) menuitem.menulist = me;
					menuitem.for_view = me.for_view;
					if ( !menuitem.in_context() ) // Don't render if the item is not in context
						return;
					menuitem.render();
					menuitem.parent_view = me;
					me.$el.append(menuitem.el);
				});
			},
			remove: function(){
				if (this.menuitems) {
					this.menuitems.each(function(itemView){
						itemView.remove();
					});
				}
				this.for_view = false;
				this.parent_view = false;
				this.options = false;
				Backbone.View.prototype.remove.call(this);
			}

		}),
		DefaultMenuList = ContextMenuList.extend({
			className: 'upfront-default_ctx_list',
			initialize: function() {
				var menuitems = [];

				if (Upfront.Application.get_current() != "theme") {
					if (!Upfront.Settings.Application.NO_SAVE) {
						menuitems.push(new Upfront.Views.ContextMenuItem({
							get_label: function() {
								return l10n.save;
							},
							action: function() {
								var savelayout = new Upfront.Views.Editor.Command_SaveLayout();
								savelayout.on_click();
							}
						}));
					}
					menuitems.push(new Upfront.Views.ContextMenuItem({
						get_label: function() {
							return l10n.undo;
						},
						action: function(for_view) {
							var undo = new Upfront.Views.Editor.Command_Undo({"model": Upfront.Application.layout});
							undo.on_click();
						}
					}));
				}

				menuitems.push(new Upfront.Views.ContextMenuItem({
					get_label: function() {
						return Upfront.Application.get_gridstate() ? l10n.hide_grid: l10n.show_grid;
					},
					action: function() {
						var togglegrid = new Upfront.Views.Editor.Command_ToggleGrid();
						togglegrid.on_click();
					}
				}));

				menuitems.push(new Upfront.Views.ContextMenuItem({
					get_label: function() {
						return l10n.clone;
					},
					in_context: function() {
						// Only show this menu on ObjectView instance
						return this.for_view instanceof Upfront.Views.ObjectView;
					},
					action: function(for_view, e) {
						var module_view = this.for_view.parent_module_view,
							module = module_view.model,
							parent_region_view = module_view.group_view ? module_view.group_view : module_view.region_view,
							modules = parent_region_view.model.get('modules'),
							wrappers = parent_region_view.model.get('wrappers'),
							wrap_model = wrappers.get_by_wrapper_id(module.get_property_value_by_name('wrapper_id')),
							data = Upfront.Util.model_to_json(module),
							new_model = new Upfront.Models.Module(data),
							wrapper_id = Upfront.Util.get_unique_id("wrapper"),
							wrap_data = Upfront.Util.model_to_json(wrap_model),
							new_wrap_model = new Upfront.Models.Wrapper(wrap_data),
							index = modules.indexOf(module),
							models = [];

						// Make sure new model element ids and wrapper id is unique
						new_wrap_model.set_property('wrapper_id', wrapper_id);
						new_model.set_property('wrapper_id', wrapper_id);
						new_model.set_property('element_id', Upfront.Util.get_unique_id('module'));
						new_model.get('objects').each(function(obj){
							obj.set_property('element_id', Upfront.Util.get_unique_id('object'));
						});
						// Add to layout now
						wrappers.add(new_wrap_model);
						//new_model.add_to(modules, index+1);
						modules.add(new_model);
						// Normalize layout
						var ed = Upfront.Behaviors.GridEditor,
							new_module_view =  Upfront.data.module_views[new_model.cid],
							$new_module_view = new_module_view.$el,
							$new_module = $new_module_view.find(".upfront-module"),
							off = $new_module.offset(),
							pos = $new_module.position(),
							h = $new_module.outerHeight(),
							w = $new_module.outerWidth();
						ed.start(new_module_view, new_model);
						ed.normalize(ed.els, ed.wraps);

						// properly position the new module and show it under the cursor
						$new_module.css({
							position: "relative",
							top: ( e.pageY-off.top-(h/2) ),
							left: ( e.pageX-off.left-(w/2) )
						});

						// Simulate and mousedown and actually trigger drag
					    $new_module.simulate("mousedown", {
					        clientX: e.clientX,
					        clientY: e.clientY
					    });

					}
				}));
				this.menuitems = _(menuitems);
			}

		}),
		ContextMenu = Backbone.View.extend({
			initialize: function(opts) {
				this.options = opts;
				this.for_view = this.options.for_view;
				this.menulists = _([]);
			},
			render: function () {

				var me = this;

				this.$el
					.empty()
					.show()
				;

				this.menulists.each(function (menulist) {
					menulist.for_view = me.for_view;
					menulist.render();
					menulist.parent_view = me;
					me.$el.append(menulist.el);
				});

				var defaultmenulist = new DefaultMenuList();
				defaultmenulist.for_view = me.for_view;
				defaultmenulist.render();
				defaultmenulist.parent_view = me;
				me.$el.append(defaultmenulist.el);

				this.$el
				.css({
					"position": "absolute",
					"z-index": 10000000,
					"display": "block"
				})
				.offset({
					"top":me.for_view.event.pageY,
					"left": me.for_view.event.pageX-(($(document).width()-me.for_view.event.pageX <= this.$el.width() )?this.$el.width():0)
				})
				.addClass('uf-context-menu')
				;

			},

			remove: function(){
				if (this.menulists) {
					this.menulists.each(function(list){
						list.remove();
					});
				}
				Backbone.View.prototype.remove.call(this);
				if (!$('#contextmenu').length) {
					$('body').append('<div id="contextmenu">');
				}
			}

		}),

		ObjectView = _Upfront_EditableContentEntity.extend({
			className: "upfront-object-view",
			display_size_hint: true,
			events: {
				// "click .upfront-object > .upfront-entity_meta > a.upfront-entity-settings_trigger": "on_settings_click",
                "click .upfront-object > .upfront-entity_meta > a.upfront-entity-delete_trigger": "on_delete_click",
				"click .upfront-object > .upfront-entity_meta": "on_meta_click",
				"click": "on_click",
				//"dblclick": "on_edit",
				"contextmenu": "on_context_menu"
			},
			initialize: function () {
				var callback = this.update || this.render;
				this.listenTo(this.model.get("properties"), 'change', callback);
				this.listenTo(this.model.get("properties"), 'add', callback);
				this.listenTo(this.model.get("properties"), 'remove', callback);

				this.listenTo(Upfront.Events, 'entity:resize_start', this.close_settings);
				this.listenTo(Upfront.Events, 'entity:drag_start', this.close_settings);
				this.listenTo(Upfront.Events, 'upfront:element:edit:start', this.on_element_edit_start);
				this.listenTo(Upfront.Events, 'upfront:element:edit:stop', this.on_element_edit_stop);
				this.listenTo(Upfront.Events, 'entity:module:update', this.on_module_update);
				this.listenTo(Upfront.Events, 'layout:after_render', this.on_after_layout_render);
				this.listenTo(Upfront.Events, 'layout:after_render', this.checkUiOffset);

				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);

				if (this.init) this.init();
			},
			init_properties: function() {
				var column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding;
				
				if(!this.model.get_property_value_by_name('padding_slider')) {
					this.model.init_property('padding_slider', column_padding);
				}
			},
			close_settings: function () {
				Upfront.Events.trigger("entity:settings:deactivate");
			},
			render: function () {
				var props = {},
					me = this,
					buttons = (this.get_buttons ? this.get_buttons() : ''),
					extra_buttons = (this.get_extra_buttons ? this.get_extra_buttons() : ''),
					content = (this.get_content_markup ? this.get_content_markup() : ''),
					column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding,
					height, model, template
				;
				// Force add upfront-object-view class as element object can override the view and left without this class
				this.$el.addClass('upfront-object-view');
				
				//Make sure padding properties are initialized
				this.init_properties();

				// Id the element by anchor, if anchor is defined
				var the_anchor = this.model.get_property_value_by_name("anchor");
				if (the_anchor && the_anchor.length) {
					this.el.id = the_anchor;
				}

				this.model.get("properties").each(function (prop) {
					props[prop.get("name")] = prop.get("value");
				});

				// Check if theme_style was removed and remove class from element,
				// this happens when element style is migrated to preset
				var oldThemeStyle = '';
				_.each(this.model._previousAttributes.properties, function(property) {
					if (typeof property === 'undefined') return;
					if (property.name === 'theme_style') {
						oldThemeStyle = property.value;
					}
				});
				// And now update classes properly (because template re-render does not affect this)
				if (oldThemeStyle && props.theme_style === '') {
					this.$el.removeClass(oldThemeStyle);
					this.$el.addClass(props.preset);
				}


				var row = this.model.get_breakpoint_property_value('row', true);
				height = ( row ) ? row * Upfront.Settings.LayoutEditor.Grid.baseline : 0;

				var theme_style = this.model.get_breakpoint_property_value('theme_style', true);
				if (theme_style) {
					props.class += ' ' + theme_style.toLowerCase();
					this._theme_style = theme_style;
				}
				props.preset = props.preset || '';

				model = _.extend(this.model.toJSON(), {"properties": props, "buttons": buttons, "content": content, "height": height, "extra_buttons": extra_buttons});
				template = _.template(_Upfront_Templates["object"], model);

				Upfront.Events.trigger("entity:object:before_render", this, this.model);
				// Listen to module resize and drop event
				if ( this.parent_module_view ){
					this.stopListening((this._previous_parent_module_view || this.parent_module_view), 'entity:resize_start');
					this.listenTo(this.parent_module_view, 'entity:resize_start', this.on_element_resize_start);
					this.stopListening((this._previous_parent_module_view || this.parent_module_view), 'entity:resizing');
					this.listenTo(this.parent_module_view, 'entity:resizing', this.on_element_resizing);
					this.stopListening((this._previous_parent_module_view || this.parent_module_view), 'entity:resize_stop');
					this.listenTo(this.parent_module_view, 'entity:resize_stop', this.on_element_resize);

					this.stopListening((this._previous_parent_module_view || this.parent_module_view), 'entity:drop');
					this.listenTo(this.parent_module_view, 'entity:drop', this.on_element_drop);
					this.listenTo(this.parent_module_view, 'entity:drop', this.adjust_top_settings_panel_position);
				}

				this.$el.html(template);

				// render subview if it exists
				if (typeof this.subview != 'undefined') {
					this.subview.setElement(this.$('.upfront-object-content')).render();
				}

				this.apply_paddings(this.$el.find('> .upfront-editable_entity:first'));

				//this.init_ckeditor_on_focus();

				Upfront.Events.trigger("entity:object:after_render", this, this.model);

				// Run checkUiOffset on after layout render instead (see initialize)
				//setTimeout(function() {
				//	me.checkUiOffset();
				//}, 300);

				if ( this.display_size_hint ) {
					this.create_size_hint(this.$el);
				}
				if ( this.on_render ) this.on_render();

				// Put this here because initialize gets overriden by child classes
				this.ensure_breakpoint_change_is_listened();
				this.ensureUiOffsetCalls();

				if ( this.parent_module_view ) {
					this.$control_el = this.parent_module_view.$('.upfront-module');
					this.updateControls();
					setTimeout(function() {
						if(me.paddingControl && typeof me.paddingControl.isOpen !== 'undefined' && !me.paddingControl.isOpen)	me.paddingControl.refresh();
					}, 300);
				}

				///**
				// * Make sure it's rendered and then adjust top panel position
				// */
				//setTimeout(function() {
				//	me.adjust_top_settings_panel_position();
				//}, 150);

			},
			update: function (prop, options) {
				if (typeof prop === 'undefined') return this.render();

				// var prev_value = prop._previousAttributes.value,
				var value = prop.get('value'),
					$me = this.$el.find('.upfront-editable_entity:first'),
					grid = Upfront.Settings.LayoutEditor.Grid
				;
				if ( prop.id == 'row' ){
					// row change
					var height = value * grid.baseline;
					$me.css('min-height', height).attr('data-row', value);
				}
				else if ( prop.id == 'class' ){
					// column and margin changes
					var classes = $me.attr('class');
					_.each([grid.class, grid.left_margin_class, grid.top_margin_class, grid.bottom_margin_class, grid.right_margin_class], function(class_name){
						var rx = new RegExp('\\b' + class_name + '(\\d+)'),
							val = value.match(rx);
						if ( val && val[1] )
							Upfront.Behaviors.GridEditor.update_class($me, class_name, val[1]);
					});
				}
				else if ( prop.id == 'breakpoint' ){
					this.update_position();

					var current_property = value.current_property,
						breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
						val = value[breakpoint.id] && value[breakpoint.id][current_property] ? value[breakpoint.id][current_property] : false;
					;

					if( current_property && val ) {
						if( current_property === 'top_padding_num' ) this.show_top_padding_hint(val);
						if( current_property === 'bottom_padding_num' ) this.show_bottom_padding_hint(val);
					}

				}
				else if ( prop.id.match(/(top|bottom|left|right)_padding_(use|num|slider)/) ) {
					this.apply_paddings($me);
					this.handle_visual_padding_hint(prop);
				}
				else if ( prop.id.match(/padding_slider/) ) {
					this.render();
					this.handle_visual_padding_hint(prop);
				}
				else {
					this.render();
				}
				Upfront.Events.trigger('entity:object:update', this, this.model);

			},
			handle_visual_padding_hint: function (prop) {
				if (typeof prop === 'undefined') return;

				var value = prop.get('value');

				if ( prop.id.match(/(top|bottom)_padding_(num|slider)/) ) {
					if ( prop.id.match(/top_padding_(num|slider)/) ) {
						this.show_top_padding_hint(value);
					}
					if ( prop.id.match(/bottom_padding_(num|slider)/) ) {
						this.show_bottom_padding_hint(value);
					}
				}
				else if ( prop.id.match(/padding_slider/) ) {
					this.show_top_padding_hint(value);
					this.show_bottom_padding_hint(value);
				}

			},
			update_position: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
				if ( !breakpoint ) return;
				var $object = this.$el.find('> .upfront-editable_entity:first'),
					$toggle = this.$el.find('> .upfront-object-hidden-toggle')
				;
				this.apply_paddings($object);
				this.apply_breakpoint_position($object, $toggle);
				if ( this.display_size_hint ) {
					this.update_size_hint();
				}
				Upfront.Events.trigger('entity:object:update_position', this, this.model);
			},
			ensure_breakpoint_change_is_listened: function() {
				if (this.breakpoint_change_is_setup) {
					return;
				}

				this.listenTo(Upfront.Events, 'upfront:layout_size:change_breakpoint', this.on_change_breakpoint);
				this.breakpoint_change_is_setup = true;
			},
			ensureUiOffsetCalls: function() {
				var me = this;
				if (this.parent_module_view && this.parent_module_view.$el && !this.offset_check_set_for_parent) {
					this.offset_check_set_for_parent = true;
					this.listenTo(this.parent_module_view, 'entity:drop', function(){
						me.checkUiOffset();
					});
				}
				if (this.window_resize_offset_check_set) {
					return;
				}
				// This is not so important visually so throttle to 1 second
				this.lazyCheckUiOffset = _.throttle(this.checkUiOffset, 1000);
				$(window).on('resize', $.proxy(this.lazyCheckUiOffset, me));
				this.window_resize_offset_check_set = true;
			},
			checkUiOffset: function() {
				if (!this.parent_module_view) return;
				var $parentRegionEl = this.parent_module_view.region_view && this.parent_module_view.region_view.$el;

				if (!$parentRegionEl) {
					return;
				}

				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					is_responsive = breakpoint && !breakpoint.default,
					$container = $parentRegionEl.closest('.upfront-region-container'),
					containerOffset = is_responsive ? $parentRegionEl.offset() : $container.offset(),
					offset = this.$el.offset(),
					topOffsetTooClose = containerOffset && offset.top - containerOffset.top < 50,
					// $.offset does not have right side so calculate it
					rightOffset = offset.left + this.$el.width(),
					containerRightOffset = (containerOffset || {left: 0}).left + ( is_responsive ? $parentRegionEl.width() : $container.width() ),
					rightOffsetTooClose = containerRightOffset - rightOffset < 30;

				if (topOffsetTooClose && rightOffsetTooClose) {
					this.parent_module_view.$el.addClass('offset-ui-from-right-top');
				} else {
					this.parent_module_view.$el.removeClass('offset-ui-from-right-top');
				}
			},
			on_element_edit_start: function (edit, post) {
				if ( ( edit == 'text' || edit == 'write' ) && this.parent_module_view ){
					this.parent_module_view.$el.find('>.upfront-module').addClass('upfront-module-editing')
					this.parent_module_view.disable_interaction(false);
				}
			},
			on_element_edit_stop: function (edit, post, saving_draft) {
				if (this.parent_module_view && this.parent_module_view.enable_interaction && saving_draft !== true){
					this.parent_module_view.$el.find('>.upfront-module').removeClass('upfront-module-editing')
					this.parent_module_view.enable_interaction(false);
				}
			},
			on_element_resize_start: function (attr) {

			},
			on_element_resizing: function (attr) {
				if ( this.display_size_hint ) {
					this.update_size_hint(attr.width, attr.height);
				}
			},
			on_element_resize: function (attr) {

			},
			on_element_drop: function (attr) {

			},
			on_after_layout_render: function () {

			},
			on_module_update: function (view) {
				if ( !this.parent_module_view || this.parent_module_view != view ) return;
				if ( this.display_size_hint ) {
					this.update_size_hint();
				}
			},
			on_change_breakpoint: function (breakpoint) {
				var theme_style = this.model.get_breakpoint_property_value('theme_style', true),
					$obj = this.$el.find('.upfront-object');
				if ( this._theme_style ) {
					$obj.removeClass(this._theme_style.toLowerCase());
				}
				if ( theme_style ) {
					$obj.addClass(theme_style.toLowerCase());
					this._theme_style = theme_style;
				}
				
				// Deal with the preset classes change on breakpoint change
				this.model.decode_preset(breakpoint.id);
				
				this.update_position();
				this.checkUiOffset();
			},

			activate: function () {
				// Deactivate previous ObjectView
				if(typeof(Upfront.data.prevEntity) !== 'undefined' && Upfront.data.prevEntity !== false) {
					Upfront.data.prevEntity.deactivate();
				}
				Upfront.data.prevEntity = this;
				_Upfront_EditableEntity.prototype.activate.call(this);
				if ( !this.parent_module_view ) return;
				this.parent_module_view.$el.find('>.upfront-module').addClass('upfront-module-active');
				if ( !this.parent_module_view.wrapper_view ) return;
				this.parent_module_view.wrapper_view.$el.addClass('upfront-wrapper-active');
			},
			deactivate: function () {
				// We don't want to deactivate the element when Settings sidebar is open
				if($('#element-settings-sidebar').html() !== '' || $('#settings').html() !== '') return false;
				Upfront.data.prevEntity = false;
				_Upfront_EditableEntity.prototype.deactivate.call(this);
				if ( !this.parent_module_view ) return;
				this.parent_module_view.$el.find('>.upfront-module').removeClass('upfront-module-active');
				if ( !this.parent_module_view.wrapper_view ) return;
				this.parent_module_view.wrapper_view.$el.removeClass('upfront-wrapper-active');
			},

			toggle_region_class: function (classname, add, container) {
				var region_view = ( this.parent_module_view && this.parent_module_view.region_view ) ? this.parent_module_view.region_view : false,
					container_view = ( region_view ) ? region_view.parent_view.get_container_view(region_view.model) : false,
					container = ( true === container )
				;
				if ( !region_view ) return;
				if ( container ) {
					if ((container_view || {}).$el) container_view.$el.toggleClass(classname, add); // Make sure we have actual .$el to work with - `container_view` could be a boolean
				} else {
					region_view.$el.toggleClass(classname, add);
				}
			},

			add_region_class: function (classname, container) {
				this.toggle_region_class(classname, true, container);
			},

			remove_region_class: function (classname, container) {
				this.toggle_region_class(classname, false, container);
			},

			/* Getting dimension and resize element */
			get_element_size: function (real) {
				var ed = Upfront.Behaviors.GridEditor,
					real = typeof real == 'undefined' ? true : real;
				ed.start(this.parent_module_view, this.parent_module_view.model);
				var element = ed.get_position( this.parent_module_view.$el.find('.upfront-module') );
				return {
					col: element.col,
					row: real ? element.row : this.model.get_property_value_by_name('row')
				};
			},
			get_element_columns: function () {
				return this.get_element_size().col;
			},
			get_element_rows: function () {
				return this.get_element_size().row;
			},
			get_element_size_px: function (real) {
				var ed = Upfront.Behaviors.GridEditor,
					real = typeof real == 'undefined' ? true : real,
					size = this.get_element_size(real);
				return {
					col: size.col * ed.col_size,
					row: size.row * ed.baseline
				};
			},
			get_element_columns_px: function () {
				return this.get_element_size_px().col;
			},
			get_element_rows_px: function () {
				return this.get_element_size_px().row;
			},
			get_element_max_size: function ( axis ) {
				var ed = Upfront.Behaviors.GridEditor,
					$el = this.parent_module_view.$el.find('.upfront-module'),
					$region = this.$el.closest('.upfront-region'); //this.parent_module_view.region_view.$el; // @TODO parent_module_view.region_view didn't updated when changing region
				ed.start(this.parent_module_view, this.parent_module_view.model);
				return ed.get_max_size(ed.get_el($el), ed.els, ed.get_region($region), axis);
			},
			get_element_max_columns: function ( axis ) {
				return this.get_element_max_size(axis).col;
			},
			get_element_max_rows: function ( axis ) {
				return this.get_element_max_size(axis).row;
			},
			get_element_max_size_px: function ( axis ) {
				var ed = Upfront.Behaviors.GridEditor,
					max = this.get_element_max_size(axis);
				return {
					col: max.col * ed.col_size,
					row: max.row * ed.baseline
				};
			},
			get_element_max_columns_px: function ( axis ) {
				return this.get_element_max_size_px(axis).col;
			},
			get_element_max_rows_px: function ( axis ) {
				return this.get_element_max_size_px(axis).row;
			},
			set_element_size: function (col, row, axis, force) {
				return Upfront.Behaviors.GridEditor.resize(this.parent_module_view, this.parent_module_view.model, col, row, axis, force);
			},

			cleanup: function(){
				//Override this method to clean any subview on remove
			},

			remove: function(){
				this.cleanup();
				$(window).off('resize', this.lazyCheckUiOffset);
				this.parent_view = false;
				this.parent_module_view = false;
				Backbone.View.prototype.remove.call(this);
			},
			on_settings_click: function(event) {
				if ( typeof event !== "undefined" ) {
					event.preventDefault();
				}
				Upfront.Events.trigger("element:settings:activate", this);
			}
		}),

		Objects = _Upfront_EditableEntities.extend({
			"attributes": {
				"class": "upfront-editable_entities_container"
			},

			render: function () {
				var $el = this.$el,
					me = this
				;
				$el.html('');
				if ( typeof Upfront.data.object_views == 'undefined' ) {
					Upfront.data.object_views = {};
				}
				this.model.each(function (obj) {
					var view_class_prop = obj.get("properties").where({"name": "view_class"}),
						view_class = view_class_prop.length ? view_class_prop[0].get("value") : "ObjectView",
						local_view = Upfront.Views[view_class] ? Upfront.data.object_views[obj.cid] || new Upfront.Views[view_class]({model: obj}) : false
					;
					if (local_view) {
						local_view.parent_view = me;
						local_view._previous_parent_module_view = local_view.parent_module_view;
						local_view.parent_module_view = me.parent_view;
						local_view.render();
						$el.append(local_view.el);
						if ( ! Upfront.data.object_views[obj.cid] ) {
							me.listenTo(local_view, 'upfront:entity:activate', me.on_activate);
							me.listenTo(local_view.model, 'remove', me.deactivate);
							//local_view.bind("upfront:entity:activate", me.on_activate, me);
							//local_view.model.bind("remove", me.deactivate, me);
							//local_view.listenTo(local_view.model, "remove", me.deactivate);
							Upfront.data.object_views[obj.cid] = local_view;
						} else {
							local_view.delegateEvents();
						}
					}
				});
			},
			remove: function() {
				if (this.model) {
					this.model.each(function(model){
						var view = Upfront.data.object_views[model.cid];
						if(	view ){
							view.remove();
							delete Upfront.data.object_views[model.cid];
						}
					});
				}
				this.parent_view = false;
				Backbone.View.prototype.remove.call(this);
				if (this.model) {
					this.model.reset([], {silent:true});
					this.model = false;
				}
			}
		}),

		Module = _Upfront_EditableEntity.extend({
			interaction: true,
			lock_interaction: false,
			className: "upfront-module-view",
			events: {
				"click .upfront-module > .upfront-entity_meta > a.upfront-entity-settings_trigger": "on_settings_click",
				"click .upfront-module > .upfront-entity_meta > a.upfront-entity-delete_trigger": "on_delete_click",
				"click .upfront-module > .upfront-entity_meta > a.upfront-entity-hide_trigger": "on_hide_click",
				"click .upfront-module-hidden-toggle > a.upfront-entity-hide_trigger": "on_hide_click",
				"click .upfront-module > .upfront-entity_meta": "on_meta_click",
				"click": "on_click"
			},
			initialize: function () {
				var callback = this.update || this.render;
				// this.model.get("properties").bind("change", callback, this);
				// this.model.get("properties").bind("add", callback, this);
				// this.model.get("properties").bind("remove", callback, this);
				this.listenTo(this.model.get("properties"), 'change', callback);
				this.listenTo(this.model.get("properties"), 'add', callback);
				this.listenTo(this.model.get("properties"), 'remove', callback);

				this.listenTo(Upfront.Events, 'command:region:edit_toggle', this.on_region_edit);
				this.listenTo(Upfront.Events, 'command:region:fixed_edit_toggle', this.on_region_edit);

				this.on('on_layout', this.render_new_object, this);
				//this.on('entity:resize_stop', this.on_resize, this);
				//this.on('entity:drop', this.on_drop, this);
				this.on('region:updated', this.on_region_update, this);

				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				this.listenTo(Upfront.Events, "entity:wrapper:update_position", this.on_wrapper_update);

				this.listenTo(Upfront.Events, "layout:render", this.on_after_layout_render);
			},
			render: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					props = {},
					is_parent_group = ( typeof this.group_view != 'undefined' ),
					run = this.model.get("properties").each(function (prop) {
						props[prop.get("name")] = prop.get("value");
					}),
					height = ( props.row ) ? props.row * Upfront.Settings.LayoutEditor.Grid.baseline : 0,
					default_hide = "default_hide" in props ? props.default_hide : 0,
					hide = "hide" in props ? props.hide : default_hide,
					model = _.extend(this.model.toJSON(), {"properties": props, "height": height, "hide": hide, "parent_group_class": is_parent_group ? 'upfront-module-parent-group' : ''}),
					template = _.template(_Upfront_Templates["module"], model)
				;
				Upfront.Events.trigger("entity:module:before_render", this, this.model);

				this.$el.html(template);
				if ( breakpoint && !breakpoint.default ) {
					this.update_position();
				}

				if ( this.model.get("shadow") ) {
					this.$el.find('.upfront-editable_entity:first').attr("data-shadow", this.model.get("shadow"));
				} else {
					this.render_object();
				}

				if (this.$el.is(".upfront-active_entity")) {
					this.$el.trigger("upfront-editable_entity-selected", [this.model, this]);
				}
				Upfront.Events.trigger("entity:module:after_render", this, this.model);
			},
			update: function (prop, options) {
				var prev_value = prop._previousAttributes.value,
					value = prop.get('value'),
					$me = this.$el.find('.upfront-editable_entity:first'),
					grid = Upfront.Settings.LayoutEditor.Grid
				;
				if ( prop.id == 'row' ) {
					// row change
					var height = value * grid.baseline;
					$me.css('min-height', height).attr('data-row', value);
				} else if ( prop.id == 'class' ) {
					// column and margin changes
					var classes = $me.attr('class');
					_.each([grid.class, grid.left_margin_class, grid.top_margin_class, grid.bottom_margin_class, grid.right_margin_class], function(class_name){
						var rx = new RegExp('\\b' + class_name + '(\\d+)'),
							val = value.match(rx);
						if ( val && val[1] )
							Upfront.Behaviors.GridEditor.update_class($me, class_name, val[1]);
					});
				} else if ( prop.id == 'breakpoint' ) {
					this.update_position();
				}
				Upfront.Events.trigger('entity:module:update', this, this.model);
			},
			update_position: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					grid = Upfront.Settings.LayoutEditor.Grid;
				if ( ! breakpoint ) return;
				var $module = this.$el.find('> .upfront-module'),
					$toggle = this.$el.find('> .upfront-module-hidden-toggle')
				;
				this.apply_breakpoint_position($module, $toggle);
				Upfront.Events.trigger('entity:module:update_position', this, this.model);
			},
			render_object: function () {
				var objects_view = this._objects_view || new Objects({"model": this.model.get("objects")});
				objects_view.parent_view = this;
				objects_view.render();
				this.$(".upfront-objects_container").append(objects_view.el);
				if ( ! this._objects_view ) {
					this._objects_view = objects_view;
				} else {
					this._objects_view.delegateEvents();
				}
			},
			render_new_object: function() {
				this.render_object();
				
				//Add usingNewAppearance property
				this.model.get('objects').each(function(object) { 
					object.set_property('usingNewAppearance', true); 
				})
			},
			disable_interaction: function (prevent_edit, prevent_button, resize, drag, lock) {
				var $el = this.$el.find('.upfront-editable_entity:first');

				if ( prevent_edit && prevent_button ) $el.addClass('upfront-module-disabled-all');

				if ( prevent_edit ) $el.addClass('upfront-module-disabled-edit');

				if ( prevent_button ) $el.addClass('upfront-module-disabled-button');

				if ( !resize && $el.data('ui-resizable') ) $el.resizable('option', 'disabled', true);

				if ( !drag && $el.data('ui-draggable') ) $el.draggable('option', 'disabled', true);

				this.interaction = false;

				if ( lock ) this.lock_interaction = true;
			},
			enable_interaction: function (unlock) {
				if ( this.lock_interaction && !unlock ) return;

				var $el = this.$el.find('.upfront-editable_entity:first');
				$el.removeClass('upfront-module-disabled-all upfront-module-disabled-edit upfront-module-disabled-button');

				if ( $el.data('ui-resizable') ) $el.resizable('option', 'disabled', false);

				if ( $el.data('ui-draggable') ) $el.draggable('option', 'disabled', false);

				this.interaction = true;
				this.lock_interaction = false;
			},
			on_click: function (e) {
				var me = this,
					ed = Upfront.Behaviors.LayoutEditor,
					clean_selection = false,
					$module = this.$el.find('>.upfront-module'),
					currentEntity = Upfront.data.currentEntity,
					$current = currentEntity ? currentEntity.$el.closest('.upfront-module') : false,
					$selected, $selectable, $restricted
				;
				if ( this.interaction ) {
					// Check if shift key is pressed, if it does, try to do selection
					if ( e && e.shiftKey && this.region_view ) {
						// Clean selection if any of the selection is on different region
						// We can't group element that wasn't in the same region
						_.each(ed.selection, function (sel) {
							if ( !clean_selection ) {
								clean_selection = ( $(sel).closest('.upfront-region').get(0) != me.region_view.$el.get(0) );
							}
						});
						if ( clean_selection ) ed.remove_selections();
						// Do selecting
						// We'll add our module to existing selection
						// If no existing selection, we select the active module + this module
						// Or just this module if no active, or active is the same as this module
						$selectable = this.region_view.$el.find('.upfront-module').not('.upfront-ui-selected, .upfront-module-parent-group');
						$restricted = this.region_view.$el.find('.upfront-module-group');
						if ( ed.selection.length > 0 ) {
							$selected = this.region_view.$el.find('.upfront-ui-selected');
							ed._add_selections($selected.add($module), $selectable, $restricted);
						}
						else {
							if ( $current !== false && $current.length > 0 ) {
								ed._add_selection($current.get(0));
								$selected = $current;
								if ( $current.get(0) != $module.get(0) ) {
									$selected = $selected.add($module);
								}
								if ( $selected.length > 1 ) {
									ed._add_selections($selected, $selectable, $restricted);
								}
							}
							else {
								ed._add_selection($module.get(0));
							}
						}
						ed._update_selection_outline();
						if ( ed.selection.length > 1 ) {
							ed.parse_selections();
						}
						// Let's deactivate active element too
						if ( currentEntity ){
							currentEntity.trigger('deactivated', e);
							currentEntity.$el.removeClass("upfront-active_entity");
							Upfront.Events.trigger("entity:deactivated", e);
							Upfront.data.currentEntity = false;
						}
						e.stopPropagation();
					}
					else {
						ed.remove_selections();
						this.constructor.__super__.on_click.call(this, e);
					}
				} else {
					e.stopPropagation();
				}
			},
			on_hide_click: function (e) {
				_Upfront_EditableEntity.prototype.on_hide_click.call(this, e);
				Upfront.Events.trigger("entity:module:hide_toggle", this, this.model);
			},
			on_resize: function (attr) {
				// on resize
			},
			on_drop: function (attr) {
				// on drop
			},
			on_region_update: function(){
				if ( this._objects_view ) {
					this._objects_view.model.each(function(view){
						view.trigger('region:updated');
					});
				}
			},
			on_region_edit: function (edit) {
				if (Upfront.Application.PostContentEditor == Upfront.Application.current_subapplication) {
					return;
				}

				if ( edit ) {
					this.disable_interaction(true, true, false, false, true);
				} else {
					this.enable_interaction(true);
				}
			},
			on_wrapper_update: function (wrapper, wrapper_model) {
				if ( wrapper != this.wrapper_view ) return;
				this.update_position();
			},
			on_change_breakpoint: function (breakpoint) {
				var $delete = this.$el.find('.upfront-module > .upfront-entity_meta > a.upfront-entity-delete_trigger'),
					$hide = this.$el.find('.upfront-module > .upfront-entity_meta > a.upfront-entity-hide_trigger');
				if ( !breakpoint.default ) {
					this.disable_interaction(true, false, true, true, true);
					$delete.hide();
					$hide.show();
				} else {
					this.enable_interaction(true);
					$delete.show();
					$hide.hide();
				}
				//this.update_position();
			},
			on_after_layout_render: function () {
			},
			remove: function(){
				if(this._objects_view)
					this._objects_view.remove();
				Backbone.View.prototype.remove.call(this);
			}
		}),

		ModuleGroup = _Upfront_EditableEntity.extend({
			className: "upfront-editable_entity upfront-module-group",
			id: function(){ return this.model.get_property_value_by_name('element_id'); },
			cssSelectors: {
				'.upfront-module-group': {label: l10n.mg_label, info: l10n.mg_info},
				'.upfront-module-group-bg': {label: l10n.mgbg_label, info: l10n.mgbg_info},
				'.upfront-object, .upfront-output-object': {label: l10n.mgel_label, info: l10n.mgel_info}
			},
			events: {
				"click > .upfront-entity_meta > a.upfront-entity-settings_trigger": "on_settings_click",
				"click > .upfront-module-group-toggle-container > .upfront-module-group-ungroup": "on_ungroup",
				"click > .upfront-module-group-toggle-container > .upfront-module-group-reorder": "on_reorder",
				"click > .upfront-module-group-toggle-container > .upfront-module-group-edit": "on_edit",
				"click > .upfront-entity_meta > a.upfront-entity-hide_trigger": "on_hide_click",
				"click > .upfront-module-hidden-toggle > a.upfront-entity-hide_trigger": "on_hide_click",
				//"click a.redactor_act": "onOpenPanelClick",
				//"click .upfront-save_settings": "onOpenPanelClick",
				"click .open-item-controls": "onOpenItemControlsClick",
				"click > .upfront-module-group-finish-edit": "on_finish",
				"click": "on_click",
				"dblclick": "on_dblclick"
			},
			initialize: function () {
				var callback = this.update || this.render;
				this.listenTo(this.model.get("properties"), 'change', callback);
				this.listenTo(this.model.get("properties"), 'change', this.handle_visual_padding_hint);
				this.listenTo(this.model.get("properties"), 'add', callback);
				this.listenTo(this.model.get("properties"), 'remove', callback);
				this._prev_class = this.model.get_property_value_by_name('class');

				this.listenTo(Upfront.Events, 'layout:after_render', this.refresh_background);
				this.listenTo(Upfront.Events, 'layout:after_render', this.update_size_hint);

				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				this.listenTo(Upfront.Events, "command:module_group:finish_edit", this.on_finish);
				this.listenTo(Upfront.Events, "command:module_group:close_panel", this.closeControlPanel);


				this.editing = false;
				this.hidden = false;
				this.on('entity:resize_stop', this.on_resize, this);
			},
			handle_visual_padding_hint: function (prop) {
				if (typeof prop === 'undefined') return;

				var value = prop.get('value');

				if ( prop.id.match(/(top|bottom)_padding_(num|slider)/) ) {
					if ( prop.id.match(/top_padding_(num|slider)/) ) {
						this.show_top_padding_hint(value);
					}
					if ( prop.id.match(/bottom_padding_(num|slider)/) ) {
						this.show_bottom_padding_hint(value);
					}
				}

			},
			show_top_padding_hint: function (value) {
				var me               = this,
					top_padding_hint = this.$el.find('.upfront-entity-top-padding-hint')
				;
				if(!this.top_padding_hint_flag) {
					this.top_padding_hint_flag = true;
					return;
				}
				if(!top_padding_hint.length) {
					top_padding_hint = $('<div class="upfront-ui upfront-entity-padding-hint upfront-entity-top-padding-hint"></div>').appendTo(this.$el);
				}
				top_padding_hint.css({
					height: value + 'px',
					opacity: 1
				});
				clearTimeout(this.top_padding_hint_timer);
				this.top_padding_hint_timer = setTimeout(function() {
					me.hide_top_padding_hint();
				}, 1000);
			},
			hide_top_padding_hint: function () {
				if(!this.padding_hint_locked) {
					this.$el.find('.upfront-entity-top-padding-hint').css({
						opacity: 0
					});
				}
			},
			show_bottom_padding_hint: function (value) {
				var me                  = this,
					bottom_padding_hint = this.$el.find('.upfront-entity-bottom-padding-hint')
				;
				if(!this.bottom_padding_hint_flag) {
					this.bottom_padding_hint_flag = true;
					return;
				}
				if(!bottom_padding_hint.length) {
					bottom_padding_hint = $('<div class="upfront-ui upfront-entity-padding-hint upfront-entity-bottom-padding-hint"></div>').appendTo(this.$el);
				}
				bottom_padding_hint.css({
					height: value + 'px',
					opacity: 1
				});
				clearTimeout(this.bottom_padding_hint_timer);
				this.bottom_padding_hint_timer = setTimeout(function() {
					me.hide_bottom_padding_hint();
				}, 1000);
			},
			hide_bottom_padding_hint: function () {
				if(!this.padding_hint_locked) {
					this.$el.find('.upfront-entity-bottom-padding-hint').css({
						opacity: 0
					});
				}
			},

			createPaddingControl: function(){
				this.paddingControl = new Upfront.Views.Editor.InlinePanels.PaddingControl({
					model: this.model
				});

				this.paddingControl.icon = 'padding';
				this.paddingControl.tooltip = l10n.padding_settings;
				this.paddingControl.default_padding.top = 0;
				this.paddingControl.default_padding.bottom = 0;

				return this.paddingControl;
			},

			onOpenPanelClick: function(event) {
				event.preventDefault();
				this.toggleLinkPanel();
			},

			onOpenItemControlsClick: function() {
				if (this.$el.hasClass('controls-visible')) {
					this.closeControlPanel();
				} else {
					this.openControlPanel();
				}
			},

			openControlPanel: function () {
				this.$el.addClass('controls-visible');
				this.controlsVisible = true;
				this.disable_interaction(false, false, false);
			},

			closeControlPanel: function(enable) {
				var enable = ( enable !== false );
				this.$el.removeClass('controls-visible');
				this.controlsVisible = false;
				if (enable) {
					this.enable_interaction();
				}
			},

			createInlineControlPanel: function() {
				var property_url = this.model.get_property_value_by_name('href');

				if(!property_url) {
					property_url = "";
				}

				var me = this,
					panel = new Upfront.Views.Editor.InlinePanels.ControlPanel(),
					visitLinkControl = new Upfront.Views.Editor.InlinePanels.Controls.VisitLink({
						url: property_url,
						hideIfUnlink: true,
						linkLabel: {
							external: l10n.visit_link
						}
					}),
					linkPanelControl = new Upfront.Views.Editor.InlinePanels.Controls.GroupLinkPanel({
						linkUrl: property_url,
						linkType: Upfront.Util.guessLinkType(property_url),
						linkTarget: this.model.get_property_value_by_name("linkTarget"),
						button: false
					}),
					ungroupControl = new Upfront.Views.Editor.InlinePanels.Control({
						label: l10n.ungroup,
						className: 'upfront-inline-panel-item ungroup-control'
					}),
					editControl = new Upfront.Views.Editor.InlinePanels.Control({
						label: l10n.edit_elements,
						className: 'upfront-inline-panel-item edit-elements-control'
					})
				;

				this.listenTo(linkPanelControl, 'change change:target', function(data) {
					visitLinkControl.setLink(data.url);
					this.model.set_property('href', data.url);
					this.model.set_property('linkTarget', data.target);
				});
				this.listenTo(linkPanelControl, 'panel:open panel:close', function() {
					me.toggleLinkPanel();
				});
				this.listenTo(ungroupControl, 'click', function (e) {
					me.on_ungroup();
				});
				this.listenTo(editControl, 'click', function (e) {
					me.closeControlPanel(false);
					me.on_edit();
				});

				panel.items = _([
					linkPanelControl,
					visitLinkControl,
					editControl,
					ungroupControl
				]);

				var $imageControlsTpl = $('<div class="upfront-module-group-controls upfront-ui"></div>');
				this.$el.append($imageControlsTpl);
				panel.render();
				$imageControlsTpl.append(panel.el);
				panel.delegateEvents();

				this.panel = panel;
			},

			toggleLinkPanel: function() {
				this.$el.toggleClass('control-dialog-open');
			},

			render: function () {
				var me = this,
					props = {},
					run = this.model.get("properties").each(function (prop) {
						props[prop.get("name")] = prop.get("value");
					}),
					height = ( props.row ) ? props.row * Upfront.Settings.LayoutEditor.Grid.baseline : 0,
					model = _.extend(this.model.toJSON(), {"properties": props, "height": height, "href": ""}),
					template = _.template(_Upfront_Templates["module_group"], model);

				Upfront.Events.trigger("entity:module_group:before_render", this, this.model);


				// Id the element by anchor, if anchor is defined
				var the_anchor = this.model.get_property_value_by_name("anchor");
				if (the_anchor && the_anchor.length)
					this.el.id = the_anchor;

				var theme_style = this.model.get_breakpoint_property_value('theme_style', true);
				if(theme_style){
					this.$el.addClass( theme_style.toLowerCase() );
					this._theme_style = theme_style;
				}

				this.$el.html(template + '<span class="open-item-controls"></span>');
				this.$bg = this.$el.find('.upfront-module-group-bg');
				this.update();
				var local_view = this._modules_view || new Modules({"model": this.model.get("modules")});
				local_view.region_view = this.region_view;
				local_view.group_view = this;
				this.$el.find('> .upfront-modules_container').append(local_view.el);
				local_view.render();

				this.apply_paddings(this.$el.find('> .upfront-modules_container'));

				if ( ! this._modules_view ) {
					this._modules_view = local_view;
				}
				else {
					this._modules_view.delegateEvents();
				}

				this.createInlineControlPanel();

				this.create_size_hint(this.$el);
				this.$control_el = this.$el;
				this.updateControls();

				setTimeout(function() {
					if(me.paddingControl && typeof me.paddingControl.isOpen !== 'undefined' && !me.paddingControl.isOpen)	me.paddingControl.refresh();
				}, 300);

				Upfront.Events.trigger("entity:module_group:after_render", this, this.model);
			},
			update: function (prop) {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					prop_class = this.model.get_property_value_by_name('class'),
					row = this.model.get_property_value_by_name('row'),
					use_padding = this.model.get_breakpoint_property_value('use_padding', true),
					theme_style = this.model.get_breakpoint_property_value('theme_style', true),
					grid = Upfront.Settings.LayoutEditor.Grid,
					ed = Upfront.Behaviors.GridEditor,
					prev_col, col
				;
				if ( Upfront.Application.layout_ready ) {
					prev_col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num(this._prev_class, grid.class) : this.$el.data('breakpoint_col');
					col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num(prop_class, grid.class) : this.model.get_breakpoint_property_value('col');
				}
				this.$el.removeClass(this._prev_class).addClass(prop_class);
				this._prev_class = prop_class;
				if(theme_style){
					this.$el.removeClass(this._theme_style).addClass( theme_style.toLowerCase() );
					this._theme_style = theme_style;
				}
				this.$el.css('min-height', (row*grid.baseline) + 'px').attr('data-row', row);

				this.$bg.toggleClass('upfront-module-group-bg-padding', use_padding ? true : false);

				this.update_position();
				this.update_background();
				// Check if width is changed, if it did, let's normalize child modules
				if ( Upfront.Application.layout_ready && prop && ( prop.id == 'class' || prop.id == 'breakpoint' ) && prev_col != col ) {
					this.normalize_child_modules(prev_col);
				}
				Upfront.Events.trigger('entity:module_group:update', this, this.model);
			},
			update_position: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					grid = Upfront.Settings.LayoutEditor.Grid
				;

				this.apply_paddings(this.$el.find('> .upfront-modules_container'));

				if ( ! breakpoint ) return;

				var $toggle = this.$el.find('> .upfront-module-hidden-toggle'),
					hide = this.model.get_breakpoint_property_value('hide', true)
				;

				this.apply_breakpoint_position(this.$el, $toggle, ['hide']);

				if ( hide ) {
					this.hidden = true;
					this.$el.addClass('upfront-module-group-hidden');
					$toggle.show();
					this.disable_interaction(true, false, false);
				}
				else {
					this.hidden = false;
					this.$el.removeClass('upfront-module-group-hidden');
					$toggle.hide();
					this.enable_interaction();
					this.model.get('modules').each(function(module){
						var module_view = Upfront.data.module_views ? Upfront.data.module_views[module.cid] : false;
						if ( !module_view ) return;
						module_view.update_position();
					});
				}

				var theme_style = this.model.get_breakpoint_property_value('theme_style', true);
				if ( this._theme_style ) {
					this.$el.removeClass(this._theme_style.toLowerCase());
				}
				if ( theme_style ) {
					this.$el.addClass(theme_style.toLowerCase());
					this._theme_style = theme_style;
				}
				this.update_size_hint();
				Upfront.Events.trigger('entity:module_group:update_position', this, this.model);
			},
			normalize_child_modules: function (prev_col) {
				if ( !this._modules_view ) return;
				var breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
					ed = Upfront.Behaviors.GridEditor,
					col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num(this.$el, ed.grid.class) : this.$el.data('breakpoint_col')
				;
				this._modules_view.normalize_child_modules(col, prev_col, this.model.get('wrappers'));
			},
			on_settings_click: function (e) {
				if( typeof e !== "undefined" ){
					e.preventDefault();
				}
				var BgSettings = Upfront.Views.Editor.BgSettings.Settings.extend({
					bg_title: l10n.group_settings,
					enable_types: ['color', 'image'/*, 'slider', 'video', 'map'*/]
				});
				Upfront.Events.trigger("entity:settings:activate", this, BgSettings);
			},
			on_ungroup: function () {
				var me = this,
					ed = Upfront.Behaviors.GridEditor,
					breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
					col = ed.get_class_num(this.$el, ed.grid.class),
					top_padding_use = this.model.get_breakpoint_property_value('top_padding_use', true),
					top_padding_num = this.model.get_breakpoint_property_value('top_padding_num', true),
					top = top_padding_use && top_padding_num !== false ? top_padding_num : 0,
					$wrap = this.$el.closest('.upfront-wrapper'),
					$wraps = Upfront.Util.find_sorted($wrap.parent(), '> .upfront-wrapper:visible'),
					is_clr = $wrap.hasClass('clr'),
					group_wrapper_id = this.model.get_wrapper_id(),
					modules = this.model.get('modules'),
					wrappers = this.model.get('wrappers'),
					region = this.region,
					region_modules = this.region_view.model.get('modules'),
					region_wrappers = this.region_view.model.get('wrappers'),
					group_wrapper = region_wrappers.get_by_wrapper_id(group_wrapper_id),
					group_wrapper_view = Upfront.data.wrapper_views[group_wrapper.cid],
					index = region_modules.indexOf(this.model),
					region_lines = ed.parse_modules_to_lines(region_modules, region_wrappers, breakpoint.id, breakpoint.columns),
					group_lines = ed.parse_modules_to_lines(modules, wrappers, breakpoint.id, col),
					modules_arr = modules.map(function(module){ return module; }),
					line_spacers = [],
					line,
					my_wrapper, prev_wrapper, next_wrapper,
					module_index = 0,
					add_spacer_queue = [],
					is_combine_wrap = false,
					combine_left_spacers = [],
					combine_right_spacers = [],
					combine_left_spacer = 0,
					combine_right_spacer = 0
				;
				// Make sure module interaction is enabled first to prevent issue after ungroup
				this.toggle_modules_interaction(true, true);
				ed.start(this, this.model);
				// Find previous and next wrapper
				_.each(region_lines, function (l) {
					if ( line ) return;
					prev_wrapper = false;
					next_wrapper = false;
					_.each(l.wrappers, function (w) {
						if ( my_wrapper && !next_wrapper ) next_wrapper = w;
						_.each(w.modules, function (m) {
							if ( me.model == m.model ) {
								my_wrapper = w;
								line = l;
							}
						});
						if ( !my_wrapper ) prev_wrapper = w;
					});
				});
				if ( !line ) return;
				// Find how many spacer is in the line
				_.each(line.wrappers, function (w) {
					if ( w.spacer ) {
						line_spacers.push(w);
					}
				});
				// Let's check if we need to combine wrapper
				// Do that when group is trapped between elements or when there is other element in the same wrapper
				if ( my_wrapper.modules.length > 1 || ( line.wrappers.length - line_spacers.length > 1 ) ) {
					is_combine_wrap = true;
					if ( my_wrapper.modules.length == 1 && group_lines.length == 1 ) {
						is_combine_wrap = false;
					}
				}
				// Find left/right spacer if combined
				if ( is_combine_wrap && my_wrapper.modules.length == 1 ) {
					_.each(group_lines, function (l, li) {
						_.each(l.wrappers, function (w, wi) {
							if ( wi == 0 ) {
								if ( w.spacer ) combine_left_spacers.push(w.col);
								else combine_left_spacers.push(0);
							}
							if ( wi == l.wrappers.length-1 ) {
								if ( w.spacer ) combine_right_spacers.push(w.col);
								else combine_right_spacers.push(0);
							}
						});
					});
					combine_left_spacer = _.min(combine_left_spacers);
					combine_right_spacer = _.min(combine_right_spacers);
				}
				// Iterate through group
				_.each(group_lines, function (l, li) {
					_.each(l.wrappers, function (w, wi) {
						var wrapper_view = Upfront.data.wrapper_views[w.model.cid],
							remove_modules = [],
							move_modules = []
						;
						_.each(w.modules, function (m, mi) {
							var view = Upfront.data.module_views[m.model.cid],
								$view_el = view.$el.find('> .upfront-editable_entity'),
								is_visible = $view_el.is(':visible'),
								object = m.model.get('objects').first(),
								module_col = col,
								remove_module = false
							;
							// If not visible, let's remove it
							if ( !is_visible ) {
								remove_module = true;
							}
							else {
								// If combine wrap, remove all spacer and set the group wrapper_id
								if ( is_combine_wrap ) {
									if ( m.spacer ) {
										remove_module = true;
									}
									else {
										if ( combine_left_spacer > 0 && prev_wrapper && prev_wrapper.spacer ) {
											module_col -= combine_left_spacer;
										}
										if ( combine_right_spacer > 0 && next_wrapper && next_wrapper.spacer ) {
											module_col -= combine_right_spacer;
										}
										ed.update_model_margin_classes( $view_el, [ed.grid.class + module_col] );
										m.model.set_property('wrapper_id', group_wrapper_id);
									}
								}
								if ( li == 0 && mi == 0 && !m.spacer ) {
									me._update_padding('top', object, top);
								}
							}
							delete view.group_view;
							if ( remove_module ) {
								remove_modules.push({
									model: m.model
								});
							}
							else {
								move_modules.push({
									model: m.model,
									index: index+module_index
								});
								module_index++;
							}
						});

						// If combined, try to see spacer we can add
						// Otherwise, normalize spacers and add needed class
						if ( !is_combine_wrap ) {
							if ( wi == 0 ){
								// Add/remove clr class as this is the first in row
								if ( is_clr ) w.model.add_class('clr');
								else w.model.remove_class('clr');
								// Add previous spacer
								if ( prev_wrapper && prev_wrapper.spacer ) {
									if ( w.spacer ) {
										w.modules[0].model.replace_class(ed.grid.class + (w.col+prev_wrapper.col));
										w.model.replace_class(ed.grid.class + (w.col+prev_wrapper.col));
									}
									else {
										add_spacer_queue.push({
											view: wrapper_view,
											position: 'left',
											col: prev_wrapper.col,
											wrapper_col: w.col+prev_wrapper.col
										});
									}
								}
							}
							if ( wi == l.wrappers.length-1 ) {
								// Add next spacer
								if ( next_wrapper && next_wrapper.spacer ) {
									if ( w.spacer ) {
										w.modules[0].model.replace_class(ed.grid.class + (w.col+next_wrapper.col));
										w.model.replace_class(ed.grid.class + (w.col+next_wrapper.col));
									}
									else {
										add_spacer_queue.push({
											view: wrapper_view,
											position: 'right',
											col: next_wrapper.col,
											wrapper_col: w.col+next_wrapper.col
										});
									}
								}
							}
						}

						_.each(remove_modules, function (m) {
							modules.remove(m.model);
						});

						wrappers.remove(w.model, {silent: true});

						if ( move_modules.length > 0 ) {
							if ( !is_combine_wrap ) {
								region_wrappers.add(w.model, {silent: true});
							}
							_.each(move_modules, function(m){
								modules.remove(m.model, {silent: true});
								m.model.add_to(region_modules, m.index, {update: false});
							});
						}
					});
				});

				if ( is_combine_wrap ) {
					// Let's add the left and right spacer
					if ( combine_left_spacer > 0 ) {
						if ( prev_wrapper && prev_wrapper.spacer ) {
							prev_wrapper.modules[0].model.replace_class(ed.grid.class + (prev_wrapper.col+combine_left_spacer));
							prev_wrapper.model.replace_class(ed.grid.class + (prev_wrapper.col+combine_left_spacer));
						}
						else {
							group_wrapper_view.add_spacer('left', combine_left_spacer, col);
						}
					}
					if ( combine_right_spacer > 0 ) {
						if ( next_wrapper && next_wrapper.spacer ) {
							next_wrapper.modules[0].model.replace_class(ed.grid.class + (next_wrapper.col+combine_right_spacer));
							next_wrapper.model.replace_class(ed.grid.class + (next_wrapper.col+combine_right_spacer));
						}
						else {
							group_wrapper_view.add_spacer('right', combine_right_spacer, col-combine_left_spacer);
						}
					}
				}
				else {
					// Also remove prev/next spacer if exists
					if ( prev_wrapper && prev_wrapper.spacer ) {
						region_wrappers.remove(prev_wrapper.model);
						region_modules.remove(prev_wrapper.modules[0].model, {update: false});
					}
					if ( next_wrapper && next_wrapper.spacer ) {
						region_wrappers.remove(next_wrapper.model);
						region_modules.remove(next_wrapper.modules[0].model, {update: false});
					}
					// Add the queued spacers
					_.each(add_spacer_queue, function(add){
						add.view.add_spacer(add.position, add.col, add.wrapper_col);
					});
					// As this isn't combined, we remove the group wrapper
					region_wrappers.remove(group_wrapper);
				}
				region_modules.remove(this.model);
				//this.remove();
				ed.update_position_data($wrap.closest('.upfront-editable_entities_container'));
				ed.update_wrappers(region);
				Upfront.Events.trigger("entity:module_group:ungroup", modules_arr, region);
			},
			_update_padding: function (dir, object, add) {
				var padding_use = object.get_breakpoint_property_value(dir+'_padding_use', true),
					padding_num = object.get_breakpoint_property_value(dir+'_padding_num', true),
					column_padding = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().get('column_padding')
				;
				if ( add === 0 ) return;
				object.set_breakpoint_property(dir+'_padding_use', 'yes');
				if ( padding_num !== false) {
					object.set_breakpoint_property(dir+'_padding_num', parseInt(padding_num, 10) + parseInt(add, 10));
				}
				else {
					object.set_breakpoint_property(dir+'_padding_num', parseInt(column_padding, 10) + parseInt(add, 10));
				}

			},
			on_reorder: function () {
				Upfront.Events.trigger("command:module_group:finish_edit"); // close other reorder first
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				$main.addClass('upfront-module-group-editing');
				this.$el.addClass('upfront-module-group-on-edit');
				this.editing = true;
				this.disable_interaction(false, false);
				this.toggle_modules_interaction(true, false);
				Upfront.Events.trigger('entity:module_group:edit', this, this.model);
			},
			on_edit: function () {
				Upfront.Events.trigger("command:module_group:finish_edit"); // close other reorder first
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				$main.addClass('upfront-module-group-editing');
				this.$el.addClass('upfront-module-group-on-edit');
				this.trigger('deactivated');
				this.editing = true;
				this.disable_interaction(false, false, false);
				this.toggle_modules_interaction(true, true);
				Upfront.Events.trigger('entity:module_group:edit', this, this.model);
			},
			on_finish: function () {
				if ( !this.editing ){
					return;
				}
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				$main.removeClass('upfront-module-group-editing');
				this.$el.removeClass('upfront-module-group-on-edit');
				this.editing = false;
				this.enable_interaction();
				this.toggle_modules_interaction(false);
			},
			on_resize: function (attr) {
				var wrappers = this.model.get('wrappers');
				wrappers.each(function(wrapper){
					var view = Upfront.data.wrapper_views[wrapper.cid];
					if ( !view )
						return;
					view.update_position();
				});
				this.update_size_hint();
			},
			on_dblclick: function (e) {
				// We don't want to activate the Group when Settings sidebar is open
				if($('#element-settings-sidebar').html() !== '' || $('#settings').html() !== '') return false;
				if ( this.$el.hasClass('upfront-module-group-on-edit') || this.$el.hasClass('upfront-module-group-disabled') ) return;
				this.closeControlPanel(false);
				this.on_edit();
			},
			on_hide_click: function (e) {
				_Upfront_EditableEntity.prototype.on_hide_click.call(this, e);
				this.closeControlPanel(false);
				this.deactivate();
				e.stopPropagation();
				Upfront.Events.trigger("entity:module_group:hide_toggle", this, this.model);
			},
			disable_interaction: function (prevent_edit, resize, drag) {
				if ( prevent_edit ) {
					this.$el.addClass('upfront-module-group-disabled');
				}
				if ( !resize && this.$el.data('ui-resizable') ) {
					this.$el.resizable('option', 'disabled', true);
				}
				if ( !drag && this.$el.data('ui-draggable') ) {
					this.$el.draggable('option', 'disabled', true);
				}
			},
			enable_interaction: function () {
				if ( this.editing || this.hidden ) return; // Don't enable interaction if it's on editing/hidden
				this.$el.removeClass('upfront-module-group-disabled');
				if ( this.$el.data('ui-resizable') ) {
					this.$el.resizable('option', 'disabled', false);
				}
				if ( this.$el.data('ui-draggable') ) {
					this.$el.draggable('option', 'disabled', false);
				}
			},
			toggle_modules_interaction: function (enable, can_edit) {
				var can_edit = can_edit === true ? true : false;
				this.model.get('modules').each(function(module){
					var module_view = Upfront.data.module_views ? Upfront.data.module_views[module.cid] : false;
					if ( module_view ) {
						if ( enable ) {
							module_view.enable_interaction(true);
							module_view.disable_interaction(!can_edit, false, true, true, !can_edit);
						}
						else {
							module_view.disable_interaction(true, false, false, false, true);
						}
					}
				});
			},
			on_change_breakpoint: function (breakpoint) {
				var $hide = this.$el.find('> .upfront-entity_meta > a.upfront-entity-hide_trigger');
				if ( !breakpoint.default ){
					this.$el.addClass('upfront-module-group-reorder-mode');
					$hide.show();
				}
				else {
					this.$el.removeClass('upfront-module-group-reorder-mode');
					$hide.hide();
				}
				this.on_finish(); // make sure to close editing
				this.update_position();
				this.update_background();
			},
			deactivate: function () {
				// We don't want to deactivate the Group when Settings sidebar is open
				if($('#element-settings-sidebar').html() !== '' || $('#settings').html() !== '') return false;
				Upfront.data.prevEntity = false;
				this.$el.removeClass("upfront-module-group-active");
				this.check_deactivated();
				this.trigger("upfront:entity:deactivate", this);
			},
			activate: function () {
				var me= this,
					currentEntity = Upfront.data.currentEntity
				;
				if (this.hidden) return false;
				// Deactivate previous ObjectView
				if(typeof(Upfront.data.prevEntity) !== 'undefined' && Upfront.data.prevEntity !== false) {
					Upfront.data.prevEntity.deactivate();
				}
				Upfront.data.prevEntity = this;
				if (this.activate_condition && !this.activate_condition()) return false;
				if (currentEntity && currentEntity == this) return false;
				if (currentEntity && currentEntity != this) {
					currentEntity.trigger('deactivated');
				}

				Upfront.data.currentEntity = this;
				this.trigger("activated", this);
				this.trigger("upfront:entity:activate", this);
				this.listenToOnce(this, 'deactivated', this.deactivate);
				this.$el.addClass("upfront-module-group-active");
			},
			remove: function(){
				if (this._modules_view) {
					this._modules_view.remove();
				}
				var wrappers = this.model.get('wrappers');
				if (wrappers) {
					wrappers.each(function(wrapper){
						var wrapperView = Upfront.data.wrapper_views[wrapper.cid];
						if(wrapperView){
							wrapperView.remove();
							delete Upfront.data.wrapper_views[wrapper.cid];
						}
					});
				}
				if (this.panel) {
					this.panel.remove();
					this.panel = false;
				}
				this.region_view = false;
				this.region = false;
				Backbone.View.prototype.remove.call(this);
				this.model.get('wrappers').reset([], {silent:true});
				this.model = false;
			}
		}),

		Modules = _Upfront_EditableEntities.extend({
			className: "upfront-editable_entities_container",
			init: function () {
				// this.model.unbind('add', this.render, this);
				// this.model.bind('add', this.on_add, this);
				// this.model.unbind('remove', this.render, this);
				// this.model.bind('remove', this.on_remove, this);
				// this.model.bind('reset', this.on_reset, this);
				this.stopListening(this.model, 'add', this.render);
				this.listenTo(this.model, 'add', this.on_add);
				this.stopListening(this.model, 'remove', this.render);
				this.listenTo(this.model, 'remove', this.on_remove);
				this.listenTo(this.model, 'reset', this.on_reset);

				this.listenTo(Upfront.Events, "entity:drag_stop", this.on_drop);
				this.listenTo(Upfront.Events, "entity:resized", this.on_resize);
				this.listenTo(Upfront.Events, "entity:wrapper:resized", this.on_wrapper_resize);
				this.listenTo(Upfront.Events, "entity:wrappers:update", this.on_wrappers_update);
				this.listenTo(Upfront.Events, "entity:module:hide_toggle", this.on_module_hide);
				this.listenTo(Upfront.Events, "entity:module_group:hide_toggle", this.on_module_hide);
				this.listenTo(Upfront.Events, "entity:object:refresh", this.on_object_refresh);
				this.listenTo(Upfront.Events, "entity:module_group:group", this.on_group);
				this.listenTo(Upfront.Events, "entity:module_group:ungroup", this.on_ungroup);
				this.listenTo(Upfront.Events, "layout:after_render", this.on_after_layout_render);
				this.listenTo(Upfront.Events, "upfront:csseditor:ready", this.on_csseditor_ready);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
			},
			on_entity_remove: function(e, view) {
				Upfront.Events.trigger("entity:removed:before");
				var wrapper_id = view.model.get_wrapper_id(),
					me = this;
				if ( wrapper_id ){
					var wrappers = this.region_view.model.get('wrappers'),
						wrapper = wrappers.get_by_wrapper_id(wrapper_id),
						wrapper_module = 0;
					if ( wrapper ){
						// check if this wrapper has another module
						this.model.each(function(module){
							if ( module.get_wrapper_id() == wrapper_id )
								wrapper_module++;
						});
						if ( wrapper_module == 1 ){
							Upfront.Behaviors.GridEditor.normalize_module_remove(view, view.model, this.model, wrapper, wrappers);
							wrappers.remove(wrapper);
						}
					}
				}
				view.remove();
				this.model.remove(view.model);
				Upfront.Events.trigger("entity:removed:after");
			},
			render: function () {
				this.$el.html('');
				var $el = this.$el,
					me = this;
				this.current_wrapper_view = null;
				this.current_wrapper_id = null;
				this.current_wrapper_el = null
				Upfront.Events.trigger("entity:modules:before_render", this, this.model);
				if ( typeof Upfront.data.module_views == 'undefined' )
					Upfront.data.module_views = {};
				if ( typeof Upfront.data.wrapper_views == 'undefined' )
					Upfront.data.wrapper_views = {};
				this.model.each(function (module) {
					me.render_module(module);
				});
				this.apply_flexbox_clear();
				this.apply_wrapper_height();
				Upfront.Events.trigger("entity:modules:after_render", this, this.model);
			},
			render_module: function (module, options) {
				var $el = this.$el,
					index = options && typeof options.index != 'undefined' ? options.index-1 : -2,
					$el_index = index >= 0 ? $el.find('> .upfront-wrapper > .upfront-module-view, > .upfront-wrapper > .upfront-module-group').eq(index) : false,
					default_view_class = module.get('modules') ? "ModuleGroup" : "Module",
					view_class_prop = module.get("properties").where({"name": "view_class"}),
					view_class = view_class_prop.length ? view_class_prop[0].get("value") : default_view_class,
					//view_class = Upfront.Views[view_class] ? view_class : "Module",
					local_view = Upfront.Views[view_class] ? Upfront.data.module_views[module.cid] || new Upfront.Views[view_class]({model: module}): false,
					wrappers = (typeof this.group_view != 'undefined' ? this.group_view : this.region_view).model.get('wrappers'),
					wrapper_id = module.get_wrapper_id(),
					wrapper = wrappers && wrapper_id ? wrappers.get_by_wrapper_id(wrapper_id) : false,
					wrapper_view, wrapper_el
				;
				if(local_view){
					local_view.parent_view = this;
					local_view.region_view = this.region_view;
					local_view.region = this.region_view.model;
					if ( this.group_view ) {
						local_view.group_view = this.group_view;
					}
					if ( !wrapper ){
						local_view.render();
						if ( index === -2 ) {
							$el.append(local_view.el);
						}
						else if ( index === -1 ) {
							$el.prepend(local_view.el);
						}
						else {
							$el_index.parent().after(local_view.el);
						}
					}
					else {
						if ( this.current_wrapper_id == wrapper_id ){
							wrapper_el = this.current_wrapper_el;
						}
						else {
							wrapper_view = Upfront.data.wrapper_views[wrapper.cid];
							if ( !wrapper_view ) {
								wrapper_view = new Upfront.Views.Wrapper({model: wrapper})
								wrapper_view.parent_view = this;
								wrapper_view.render();
							}
							else {
								wrapper_view.parent_view = this;
							}
							wrapper_el = wrapper_view.el;
							this.current_wrapper_view = wrapper_view;
						}
						this.current_wrapper_id = wrapper_id;
						this.current_wrapper_el = wrapper_el;
						if ( this.current_wrapper_view ) {
							local_view.wrapper_view = this.current_wrapper_view;
						}
						if ( wrapper_view ){
							if ( index === -2 ) {
								$el.append(wrapper_el);
							}
							else if ( index === -1 ) {
								$el.prepend(wrapper_el);
							}
							else {
								$el_index.closest('.upfront-wrapper').after(wrapper_el);
							}
							if ( ! Upfront.data.wrapper_views[wrapper.cid] ) {
								Upfront.data.wrapper_views[wrapper.cid] = wrapper_view;
							}
						}
						if ( $el_index !== false ){
							if ( $el_index.closest('.upfront-wrapper').get(0) == wrapper_el ) {
								$el_index.after(local_view.el);
							}
							else {
								$(wrapper_el).prepend(local_view.el);
							}
						}
						else if ( index === -1 ) {
							$(wrapper_el).prepend(local_view.el);
						}
						else {
							$(wrapper_el).append(local_view.el);
						}
						local_view.render();
					}
					if ( ! Upfront.data.module_views[module.cid] ){
						//local_view.bind("upfront:entity:activate", this.on_activate, this);
						//local_view.model.bind("remove", this.deactivate, this);
						//local_view.listenTo(local_view.model, 'remove', this.deactivate);

						this.listenTo(local_view, 'upfront:entity:activate', this.on_activate);
						this.listenTo(local_view.model, 'remove', this.deactivate);
						Upfront.data.module_views[module.cid] = local_view;
					}
					else {
						local_view.delegateEvents();
					}
				}
				Upfront.Events.trigger('entity:modules:render_module', local_view, local_view.model, this, this.model);
			},
			on_wrappers_update: function (parent_model) {
				if ( _.isObject(parent_model) && parent_model.get('modules') != this.model ) return;
				this.model.each(function(module){
					var local_view = Upfront.data.module_views[module.cid];
					if ( ! local_view ) return;
					local_view.update_position();
				});
				this.apply_flexbox_clear();
				this.apply_wrapper_height();
			},
			on_drop: function (view, model) {
				if ( view.parent_view && view.parent_view != this ) return;
				//this.apply_flexbox_clear();
				this.apply_wrapper_height();
				this.apply_adapt_to_breakpoints();
			},
			on_resize: function (view, model) {
				if ( view.parent_view && view.parent_view != this ) return;
				//this.apply_flexbox_clear();
				this.apply_wrapper_height();
				this.apply_adapt_to_breakpoints();
			},
			on_wrapper_resize: function (view, model) {
				if ( view.parent_view && view.parent_view != this ) return;
				//this.apply_flexbox_clear();
				this.apply_wrapper_height();
				this.apply_adapt_to_breakpoints();
			},
			on_module_hide: function (view, model) {
				if ( view.parent_view && view.parent_view != this ) return;
				//this.apply_flexbox_clear();
				this.apply_wrapper_height();
				this.apply_adapt_to_breakpoints();
			},
			on_object_refresh: function (view) {
				if ( !view.parent_module_view ) return;
				if ( view.parent_module_view.parent_view && view.parent_module_view.parent_view != this ) return;
				this.apply_wrapper_height();
			},
			on_add: function (model, collection, options) {
				var update = typeof options.update != 'undefined' ? options.update : true;
				this.current_wrapper_id = this.current_wrapper_el = null;
				this.render_module(model, options);
				if ( update ) {
					//this.apply_flexbox_clear();
					this.apply_wrapper_height();
					this.apply_adapt_to_breakpoints();
				}
				Upfront.Events.trigger("entity:added:after");
			},
			on_remove: function (model, collection, options) {
				var update = typeof options.update != 'undefined' ? options.update : true;
				this.remove_model(model);
				if ( update ) {
					this.apply_wrapper_height();
					this.apply_adapt_to_breakpoints();
				}
			},
			remove_model: function (model) {
				var view = Upfront.data.module_views[model.cid];
				if ( !view ) return;
				view.unbind();
				view.remove();
				delete Upfront.data.module_views[model.cid];
			},
			on_reset: function (collection, options) {
				var me = this;
				if ( options && options.call_render ){
					_.each(options.call_render, function(module){
						var index = collection.indexOf(module);
						me.render_module(module, {index: index});
					});
					this.apply_flexbox_clear();
					this.apply_wrapper_height();
					this.apply_adapt_to_breakpoints();
				}
			},
			on_after_layout_render: function () {
				this.apply_flexbox_clear();
				this.apply_adapt_to_breakpoints();
				var me = this;
				setTimeout(function(){
					me.apply_wrapper_height();
				}, 1000); // Wait for other positioning finished
			},
			on_csseditor_ready: function () {
				//this.apply_wrapper_height();
			},
			normalize_child_modules: function (col, prev_col, wrappers) {
				var breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
					me = this,
					ed = Upfront.Behaviors.GridEditor,
					modules = this.model,
					use_col = _.isNumber(prev_col) ? prev_col : col,
					lines = ed.parse_modules_to_lines(modules, wrappers, ( breakpoint ? breakpoint.id : 'desktop' ), use_col)
				;
				_.each(lines, function (line) {
					var diff_col = col - line.col,
						total_diff = 0,
						outstanding_diff = 0,
						prev_outstanding_diff = 0,
						outstanding_col = 0,
						all_wrappers = [],
						spacer_wrappers = [],
						el_wrappers = []
					;
					if ( diff_col == 0 ) return;
					_.each(line.wrappers, function (w) {
						w.ratio = w.col/use_col;
						w.apply_diff = Math.round(w.ratio * diff_col);
						if ( w.col + w.apply_diff <= 0 ) w.apply_diff = 0;
						total_diff += w.apply_diff;
						all_wrappers.push(w);
						if ( w.spacer ) spacer_wrappers.push(w);
						else el_wrappers.push(w);
					});
					if ( all_wrappers.length == spacer_wrappers.length ) {
						// everything is spacer, remove it
						_.each(spacer_wrappers, function (w) {
							_.each(w.modules, function (m) {
								modules.remove(m.model);
							});
							wrappers.remove(w.model);
						});
						return;
					}
					outstanding_diff = total_diff - diff_col;
					if ( outstanding_diff != 0 ) {
						outstanding_col = outstanding_diff > 0 ? -1 : 1;
						while ( outstanding_diff != 0 ) {
							prev_outstanding_diff = outstanding_diff;
							_.each(diff_col > 0 ? _.union(el_wrappers, spacer_wrappers) : _.union(spacer_wrappers, el_wrappers), function (w) {
								if ( outstanding_diff == 0 ) return;
								if ( w.col + w.apply_diff + outstanding_col <= 0 ) return;
								w.apply_diff += outstanding_col;
								outstanding_diff += outstanding_col;
							});
							// No changes? Somethings wrong, let's break
							if ( prev_outstanding_diff == outstanding_diff ) break;
						}
					}
					_.each(all_wrappers, function (w) {
						var apply_col = w.col + w.apply_diff,
							w_breakpoint = w.model.get_property_value_by_name('breakpoint'),
							w_breakpoint_data = ( w_breakpoint && breakpoint.id in w_breakpoint ) ? w_breakpoint[breakpoint.id] : {}
						;
						if ( !breakpoint || breakpoint.default ) {
							w.model.replace_class(ed.grid.class + apply_col);
							_.each(w.modules, function (m) {
								m.model.replace_class(ed.grid.class + apply_col);
							});
						}
						else {
							w_breakpoint_data.col = apply_col;
							w.model.set_property('breakpoint', Upfront.Util.clone(w_breakpoint));
							_.each(w.modules, function (m) {
								var m_breakpoint = m.model.get_property_value_by_name('breakpoint'),
									m_breakpoint_data = ( m_breakpoint && breakpoint.id in m_breakpoint ) ? m_breakpoint[breakpoint.id] : {}
									;
								m_breakpoint_data.col = apply_col;
								m.model.set_property('breakpoint', Upfront.Util.clone(m_breakpoint));
							});
						}
					});
				});
			},
			apply_flexbox_clear: function () {
				this.fix_flexbox_clear(this.$el);
			},
			apply_wrapper_height: function () {
				if ( !Upfront.Application.layout_ready ) return;
				if ( !this.region_view || this.region_view.model.get('name') == 'shadow' ) return;
				var ed = Upfront.Behaviors.GridEditor,
					breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
					is_group = !_.isUndefined(this.group_view),
					wrappers = ( is_group ? this.group_view : this.region_view ).model.get('wrappers'),
					col = breakpoint.default
						? ed.get_class_num(( is_group ? this.group_view : this.region_view ).$el, ed.grid.class)
						: ( is_group ? this.group_view : this.region_view ).model.get_breakpoint_property_value('col')
				;
				this.model.each(function (module) {
					var local_view = Upfront.data.module_views[module.cid];
					if ( !local_view || !local_view._modules_view ) return;
					local_view._modules_view.apply_wrapper_height();
				});
				this.fix_wrapper_height(this.model, wrappers, col);
			},
			apply_adapt_to_breakpoints: function () {
				var current_breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
				if ( current_breakpoint && !current_breakpoint.default )
					return;
				// Don't do anything on shadow region
				if ( this.region_view && this.region_view.model.get('name') == 'shadow' )
					return;
				var me = this,
					ed = Upfront.Behaviors.GridEditor,
					is_group = ( typeof this.group_view != 'undefined' ),
					wrappers = ( is_group ? this.group_view : this.region_view ).model.get('wrappers'),
					breakpoints = Upfront.Views.breakpoints_storage.get_breakpoints().get_enabled();
				_.each(breakpoints, function(each){
					var breakpoint = each.toJSON();
					if ( breakpoint.default )
						return;
					if ( is_group ) {
						var group_col = ed.get_class_num(me.group_view.$el, ed.grid.class),
							breakpoint_data = me.group_view.model.get_property_value_by_name('breakpoint');
						if ( _.isObject(breakpoint_data) && _.isObject(breakpoint_data[breakpoint.id]) && !_.isUndefined(breakpoint_data[breakpoint.id].col) )
							group_col = breakpoint_data[breakpoint.id].col;
					}
					var col = is_group ? group_col : breakpoint.columns;
					ed.adapt_to_breakpoint(me.model, wrappers, breakpoint.id, col, true);
				});
			},
			on_group: function (group) {
				if ( typeof this.group_view == 'undefined' || group.cid != this.group_view.model.cid )
					return;
				this.reset_breakpoints(this.model.map(function(module){ return module; }));
			},
			on_ungroup: function (modules) {
				if ( modules && modules[0] && !this.model.find(function(module){ return module.cid == modules[0].cid }) )
					return;
				this.reset_breakpoints(modules);
			},
			reset_breakpoints: function (modules) {
				_.each(modules, function(module){
					var breakpoint = Upfront.Util.clone( module.get_property_value_by_name('breakpoint') || {} );
					_.each(breakpoint, function(data, id){
						breakpoint[id].edited = false;
					});
					module.set_property('breakpoint', breakpoint, true);
				});
				this.apply_adapt_to_breakpoints();
			},
			on_change_breakpoint: function (breakpoint) {
				var me = this;
				// Make sure clearing flexbox is applied, set a timeout to let other positioning finish
				setTimeout(function(){
					me.apply_flexbox_clear();
					me.apply_wrapper_height();
				}, 1000);
			},
			remove: function() {
				var me = this;
				this.model.each(function(model){
					me.remove_model(model);
				});
				this.region_view = false;
				this.group_view = false;
				Backbone.View.prototype.remove.call(this);
				this.model.reset([], {silent:true});
				this.model = false;
			}
		}),

		RegionContainer = _Upfront_SingularEditor.extend({
			cssSelectors: {
				'.upfront-region-container-bg': {label: l10n.region_container_label, info: l10n.region_container_info},
				'.upfront-region-center': {label: l10n.main_content_label, info: l10n.main_content_info},
				'.upfront-region-side-left': {label: l10n.lsr_label, info: l10n.lsr_info},
				'.upfront-region-side-right': {label: l10n.rsr_label, info: l10n.rsr_info}
			},
			events: {
				"click > .upfront-region-edit-trigger": "trigger_edit",
				"click > .upfront-region-edit-fixed-trigger": "trigger_edit_fixed",
				"click > .upfront-region-finish-edit": "finish_edit" ,
				"contextmenu": "on_context_menu",
				"mouseover": "on_mouse_over"
			},
			attributes: function(){
				var name = ( this.model.get("container") || this.model.get("name") ).toLowerCase().replace(/\s/g, "-"),
					classes = [];
				classes.push('upfront-region-container');
				classes.push('upfront-region-container-' + name);
				classes.push('upfront-region-container-' + this._get_region_type() );
				if ( _.isObject(this.model.collection) && this.model.collection.active_region == this.model ){
					classes.push('upfront-region-container-active');
				}
				return {
					"class": classes.join(' '),
					"id": 'region-container-' + name
				};
			},
			_get_region_type: function () {
				return this.model.get('type') || ( this.model.get('clip') ? 'clip' : 'wide' );
			},
			_get_previous_region_type: function () {
				return this.model.previous('type') || ( this.model.previous('clip') ? 'clip' : 'wide' );
			},
			/*_get_full_size_el: function ($el, ratio, inside) {
				var is_full_screen = ( this._get_region_type() == 'full' ),
					width = $el.width(),
					win_height = $(window).height(),
					height = is_full_screen ? win_height : $el.height();
				return this._get_full_size(width, height, ratio, inside);
			},*/
			on_mouse_over: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				if ( $main.hasClass('upfront-region-fixed-editing') )
					this.trigger('activate_region', this);
				//this.update_pos();
			},
			remove_context_menu: function(e) {
				if (!this.context_menu_view) return false;
				$(Upfront.Settings.LayoutEditor.Selectors.contextmenu).html('').hide();
				this.context_menu_view = false;

			},
			on_context_menu: function(e) {
				if($(e.target).closest('.upfront-inline-modal-content').length > 0) {
					e.stopPropagation();
					return;
				}
				if (Upfront.Settings.Application.no_context_menu) return;

				e.preventDefault();
				this.event = e;
				//Upfront.Events.trigger("entity:contextmenu:activate", this);
				if(this.context_menu_view) {
					return this.context_menu_view.render();
				}

				var context_menu_view = new this.ContextMenu({
					model: this.model,
					el: $(Upfront.Settings.LayoutEditor.Selectors.contextmenu)
				});

				context_menu_view.for_view = this;
				this.context_menu_view = context_menu_view;

				return this.context_menu_view.render();

			},
			init: function () {
				var me = this;
				var ContextMenuList = Upfront.Views.ContextMenuList.extend({
					initialize: function() {

						this.menuitems = _([
						  new Upfront.Views.ContextMenuItem({
							  get_label: function() {
								  var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				 				  if($main.hasClass('upfront-region-editing'))
								  	return l10n.finish_editing;
								  else
								  	return l10n.edit_background;
							  },
							  action: function() {
							  		var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				 				  if($main.hasClass('upfront-region-editing'))
								  	me.close_edit();
								  else
								  	me.trigger_edit(me.event);

							  }
						  }),

						  new Upfront.Views.ContextMenuItem({
							  get_label: function() {
								  	return l10n.add_floating_region;
							  },
							  action: function(view, e) {
							  		var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
							  			collection = me.model.collection,
							  			index = collection.indexOf(me.model),
							  			fixed = me.model.get_sub_region('fixed'),
							  			title = me.model.get('title') + " Floating " + (fixed.length+1),
							  			name = title.toLowerCase().replace(/\s/g, '-'),
								  		new_region = new Upfront.Models.Region(_.extend(_.clone(Upfront.data.region_default_args), {
											"name": name,
											"container": me.model.get('name'),
											"title": title,
											"type": 'fixed',
											"sub": 'fixed',
											"scope": me.model.get('scope')
										})),
							  			offset = me.$el.offset(),
							  			width = me.$el.width(),
							  			height = me.$el.height(),
							  			window_h = $(window).height(),
							  			new_region_w = 225,
							  			new_region_h = 225,
										end_t, pos_x, pos_y, prop_x, prop_y;
									new_region.set_property('width', new_region_w);
									new_region.set_property('height', new_region_h);
									if ( e.pageX > offset.left + (width/2) ){
										pos_x = offset.left + width - e.pageX - Math.floor(new_region_w/2);
										prop_x = 'right';
									}
									else {
										pos_x = e.pageX - offset.left - Math.floor(new_region_w/2);
										prop_x = 'left';
									}
									if ( height >= window_h && e.clientY > window_h/2 ){
										pos_y = window_h - e.clientY - Math.floor(new_region_h/2);
										prop_y = 'bottom';
									}
									else {
										pos_y = e.clientY - Math.floor(new_region_h/2);
										prop_y = 'top';
									}
									pos_x = pos_x > 0 ? pos_x : 0;
									pos_y = pos_y > 0 ? pos_y : 0;
									new_region.set_property(prop_x, pos_x);
									new_region.set_property(prop_y, pos_y);
									new_region.set_property('background_type', 'color');
									new_region.set_property('background_color', '#aeb8c2');
									Upfront.Events.once('entity:region:added', run_animation, this);
									new_region.add_to(collection, index+1, {sub: 'fixed'});
				 				 	if(!$main.hasClass('upfront-region-fixed-editing'))
								  		me.trigger_edit_fixed(me.event);
								  	function run_animation(view, model){
										var ani_event_end = 'animationend.fixed_region_ani webkitAnimationEnd.fixed_region_ani MSAnimationEnd.fixed_region_ani oAnimationEnd.fixed_region_ani';
								  		end_t = setTimeout(end, 2000);
								  		view.$el.addClass("upfront-add-region-ani upfront-add-region-ani-" + prop_y + '-' + prop_x);
										view.$el.one(ani_event_end, function () {
											end(view);
											clearTimeout(end_t);
											view.$el.off(ani_event_end); // Make sure to remove any remaining unfired event
										});
								  	}
									function end (view) {
										view.$el.removeClass("upfront-add-region-ani upfront-add-region-ani-" + prop_y + '-' + prop_x);
										Upfront.Events.trigger('command:region:fixed_edit_toggle', true);
									}
							  }
						  })
						]);
					}
				});

				this.ContextMenu = Upfront.Views.ContextMenu.extend({
					initialize: function() {
						this.menulists = _([
						  new ContextMenuList()
						]);
					}
				});


				var grid = Upfront.Settings.LayoutEditor.Grid,
					width = this.model.get_property_value_by_name('width');
				this.sub_model = [];
				this.max_col = width ? Upfront.Util.width_to_col(width) : grid.size;
				this.available_col = this.max_col;

				// this.model.get("properties").bind("change", this.update, this);
				// this.model.get("properties").bind("add", this.update, this);
				// this.model.get("properties").bind("remove", this.update, this);
				this.listenTo(this.model.get("properties"), 'change', this.update);
				this.listenTo(this.model.get("properties"), 'add', this.update);
				this.listenTo(this.model.get("properties"), 'remove', this.update);
				this.listenTo(Upfront.Events, "entity:region:activated", this.update_pos);
				this.listenTo(Upfront.Events, "entity:region:activated", this.update_overlay);
				this.listenTo(Upfront.Events, "entity:region:deactivated", this.close_edit);
				this.listenTo(Upfront.Events, "layout:after_render", this.fix_height);
				this.listenTo(Upfront.Events, "entity:resize_stop", this.fix_height);
				this.listenTo(Upfront.Events, "entity:region:resize_stop", this.fix_height);
				this.listenTo(Upfront.Events, "entity:region_container:resize_stop", this.fix_height);
				this.listenTo(Upfront.Events, "entity:region_container:resize_stop", this.update_overlay);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.fix_height);
				this.listenTo(Upfront.Events, "entity:drag:drop_change", this.refresh_background);
				this.listenTo(Upfront.Events, "sidebar:toggle:done", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:navigation:responsive_open", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:navigation:responsive_close", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:region:added", this.fix_height);
				this.listenTo(Upfront.Events, "entity:region:removed", this.on_region_remove);
				this.listenTo(Upfront.Events, "entity:region:hide_toggle", this.on_region_hide);
				this.listenTo(Upfront.Events, "entity:module_group:group", this.fix_height);
				this.listenTo(Upfront.Events, "entity:module_group:ungroup", this.fix_height);
				this.listenTo(Upfront.Events, "upfront:layout:contained_region_width", this.on_contained_width_change);
				this.listenTo(Upfront.Events, 'layout:after_render', this.update_pos);
				this.listenTo(Upfront.Events, "sidebar:toggle:done", this.update_pos);
				this.listenTo(Upfront.Events, "application:mode:after_switch", this.update_pos);
				$(window).on('scroll.region_container_' + this.model.get('name'), this, this.on_scroll);
				$(window).on('resize.region_container_' + this.model.get('name'), this, this.on_window_resize);

				// breakpoint changes
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);

				this.listenTo(Upfront.Events, "entity:contextmenu:deactivate", this.remove_context_menu);

				this.lazyFixHeight = _.debounce(this.fix_height, 1000);
			},
			render: function () {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					type = this._get_region_type(),
					data = _.extend(this.model.toJSON(), {size_class: grid.class, max_col: this.max_col, available_col: this.available_col}),
					template = _.template(_Upfront_Templates["region_container"], data),
					$edit = $('<div class="upfront-region-edit-trigger upfront-ui" title="' + l10n.change_background + '"><i class="upfront-icon upfront-icon-region-edit"></i></div>'),
					$finish = $('<div class="upfront-region-finish-edit upfront-ui"><i class="upfront-field-icon upfront-field-icon-tick"></i> ' + l10n.finish_edit_bg + '</div>');
				Upfront.Events.trigger("entity:region_container:before_render", this, this.model);
				this.$el.html(template);
				this.$bg = this.$el.find('.upfront-region-container-bg');
				this.$layout = this.$el.find('.upfront-grid-layout');
				$edit.appendTo(this.$el);
				//$edit_fixed.appendTo(this.$el);
				$finish.appendTo(this.$el);
				//this.render_fixed_panel();
				this.update();
				//if ( type != 'clip' )
					this.$el.append('<div class="upfront-region-active-overlay" />');
				Upfront.Events.trigger("entity:region_container:after_render", this, this.model);
			},
			update: function () {
				var me = this,
					grid = Upfront.Settings.LayoutEditor.Grid,
					name = ( this.model.get("container") || this.model.get("name") ).toLowerCase().replace(/\s/g, "-"),
					previous_name = ( this.model.previous("container") || this.model.previous("name") ).toLowerCase().replace(/\s/g, "-"),
					expand_lock = this.model.get_property_value_by_name('expand_lock'),
					type = this._get_region_type(),
					previous_type = this._get_previous_region_type(),
					default_breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_default().toJSON(),
					contained_width = Upfront.Application.layout.get_property_value_by_name('contained_region_width') || (default_breakpoint.columns * grid.column_width);
				if ( type == 'clip' )
					this.$bg.css('max-width', contained_width + 'px');
				else
					this.$bg.css('max-width', '');
				this.update_background();
				if ( previous_type != type ){
					this.$el.removeClass('upfront-region-container-' + previous_type);
					this.$el.addClass('upfront-region-container-' + type);
					_.delay(function(){
						me.fix_height();
						me.update_overlay();
					}, 500)
				}
				if ( previous_name != name ){
					this.$el.removeClass('upfront-region-container-' + previous_name);
					this.$el.addClass('upfront-region-container-' + name);
					this.$el.attr('id', 'region-container-' + name);
				}
			},
			render_fixed_panel: function () {
				this.region_fixed_panels = new Upfront.Views.Editor.RegionFixedPanels({model: this.model});
				this.region_fixed_panels.render();
				this.$el.append(this.region_fixed_panels.el);
			},
			on_change_breakpoint: function (breakpoint) {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					me = this;
				this.$layout.removeClass(grid.class + this.max_col);
				this.max_col = breakpoint.columns;
				this.$layout.addClass(grid.class + this.max_col);
				this.update_background();
				setTimeout(function(){ me.fix_height(); }, 500);
			},
			on_contained_width_change: function (width) {
				var type = this._get_region_type();
				if ( type == 'clip' ) {
					this.$bg.css('max-width', width + 'px');
				}
				else {
					this.$bg.css('max-width', '');
				}
				this.refresh_background();
			},
			trigger_edit: function (e) {
				if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.CONTENT )
					return false;
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				$main.addClass('upfront-region-editing');
				this.update_overlay();
				Upfront.Events.trigger("command:region:edit_toggle", true);
				this.trigger("activate_region", this);
				this.listenTo(Upfront.Events, "command:newpage:start", this.close_edit);
				this.listenTo(Upfront.Events, "command:newpost:start", this.close_edit);
				this.$el.find('.upfront-region-edit-fixed-trigger').show();
				if ( Upfront.Application.sidebar.visible )
					Upfront.Application.sidebar.toggleSidebar();
				e.stopPropagation();
			},
			finish_edit: function (e) {
				Upfront.Events.trigger("entity:region:deactivated");
			},
			close_edit: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				if ( !$main.hasClass('upfront-region-editing') && !$main.hasClass('upfront-region-fixed-editing') && !$main.hasClass('upfront-region-lightbox-editing') )
					return;
				$main.removeClass('upfront-region-editing');
				$main.removeClass('upfront-region-fixed-editing');
				$main.removeClass('upfront-region-lightbox-editing');
				this.remove_overlay();
				Upfront.Events.trigger("command:region:edit_toggle", false);
				Upfront.Events.trigger("command:region:fixed_edit_toggle", false);
				Upfront.Events.off("command:newpage:start", this.close_edit, this);
				Upfront.Events.off("command:newpost:start", this.close_edit, this);
				this.$el.find('.upfront-region-edit-fixed-trigger').hide();
				this.$el.find('.upfront-region-edit-lightbox-trigger').hide();
				if ( !Upfront.Application.sidebar.visible )
					Upfront.Application.sidebar.toggleSidebar();
				$('.upfront-region-container > .upfront-region-finish-edit').css({
					position: '',
					left: '',
					right: ''
				});
			},
			trigger_edit_lightbox: function(e) {
				if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.CONTENT )
					return false;
				var me = this,
					$main = $(Upfront.Settings.LayoutEditor.Selectors.main);

				if ( $main.hasClass('upfront-region-editing') )
					this.close_edit();

				$main.addClass('upfront-region-lightbox-editing');

				this.trigger('activate_region', this);
				Upfront.Events.trigger("command:region:fixed_edit_toggle", true);
				//if ( Upfront.Application.sidebar.visible )
					//Upfront.Application.sidebar.toggleSidebar();
				setTimeout(function(){
					$('.upfront-region-container > .upfront-region-finish-edit').each(function(){
						$(this).css({
							position: 'fixed',
							left: (me.$layout.offset().left + me.$layout.width()) - $(this).width(),
							right: 'auto'
						});
					});
				}, 350);

			},
			trigger_edit_fixed: function () {
				if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.CONTENT )
					return false;
				var me = this,
					$main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				if ( $main.hasClass('upfront-region-editing') )
					this.close_edit();
				$main.addClass('upfront-region-fixed-editing');
				this.trigger('activate_region', this);
				Upfront.Events.trigger("command:region:fixed_edit_toggle", true);
				if ( Upfront.Application.sidebar.visible )
					Upfront.Application.sidebar.toggleSidebar();
				setTimeout(function(){
					$('.upfront-region-container > .upfront-region-finish-edit').each(function(){
						$(this).css({
							position: 'fixed',
							left: (me.$layout.offset().left + me.$layout.width()) - $(this).width(),
							right: 'auto'
						});
					});
				}, 350);
			},
			update_overlay: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					pos = this.$el.position(),
					$before_overlay = $('<div class="upfront-region-editing-overlay" />'),
					$after_overlay = $('<div class="upfront-region-editing-overlay" />');
				if ( ! $main.hasClass('upfront-region-editing') )
					return;
				if ( this.parent_view.model.active_region != this.model )
					return;
				this.$el.siblings('.upfront-region-editing-overlay').remove();
				this.$el.before($before_overlay);
				$before_overlay.css({
					bottom: 'auto',
					height: pos.top
				});
				this.$el.after($after_overlay);
				$after_overlay.css({
					top: pos.top + this.$el.height()
				});
			},
			remove_overlay: function () {
				this.$el.siblings('.upfront-region-editing-overlay').remove();
			},
			add_sub_model: function (model) {
				this.sub_model.push(model);
			},
			on_scroll: function (e) {
				var me = e.data;
				me.update_pos();
			},
			on_region_render: function (region) {
			},
			on_region_update: function (region) {
				// Update flexible region column
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					col = this.max_col;
				_.each(this.sub_model, function (sub) {
					var sub_type = sub.get('sub');
					if ( !sub_type || sub_type == 'left' || sub_type == 'right' )
						col -= sub.get_property_value_by_name('col');
				});
				if ( !breakpoint || breakpoint.default ) {
					this.trigger("region_resize", col);
					this.available_col = col;
				}
				this.fix_height();
				this.update_overlay();
			},
			on_region_changed: function () {
				this.fix_height();
			},
			on_region_remove: function (view, model) {
				var sub = model.get('sub');
				this.fix_height();
				if ( !sub || !sub.match(/(top|bottom|left|right)/) )
					this.close_edit();
			},
			on_region_hide: function (hide, view) {
				var container = view.parent_view.get_container_view(view.model);
				if ( this != container )
					return;
				if ( hide && this.$el.find('.upfront-region-center, .upfront-region-side-left, .upfront-region-side-right').not('.upfront-region-hidden').length == 0 )
					this.close_edit();
			},
			on_window_resize: function (e) {
				if ( e.target != window || !e.data.model)
					return;
				var me = e.data;
				me.lazyFixHeight();
			},
			fix_height: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
				// Don't need to adapt height if breakpoint isn't default or that flexbox is supported
				// Make sure to test with non-flexbox browser whenever possible
				if ( ( breakpoint && !breakpoint.default ) || this.$layout.css('display').indexOf('flex') != -1 ){
					this.set_full_screen();
					this.refresh_background();
					this.update_pos();
					return;
				}
				var $regions = this.$el.find('.upfront-region-center, .upfront-region-side-left, .upfront-region-side-right'),
					$sub = this.$el.find('.upfront-region-side-top, .upfront-region-side-bottom'),
					$container = $regions.find('> .upfront-region-wrapper > .upfront-modules_container'),
					height = 0;
				$regions.add($container).css({
					minHeight: "",
					height: "",
					maxHeight: ""
				});
				this.set_full_screen();
				$sub.each(function(){
					$(this).find('> .upfront-region-wrapper > .upfront-modules_container').css('min-height', $(this).outerHeight());
				});
				$regions.each(function(){
					var h = $(this).outerHeight();
					height = h > height ? h : height;
				});
				$regions.add($container).css('min-height', height);
				this.refresh_background();
				this.update_pos();
			},
			set_full_screen: function () {
				var $region = this.$layout.find('.upfront-region-center'),
					$sub = this.$bg.find('.upfront-region-side-top, .upfront-region-side-bottom'),
					row = this.model.get_breakpoint_property_value('row', true),
					min_height = row ? row * Upfront.Settings.LayoutEditor.Grid.baseline : 0,
					height = $(window).height();
				if ( this._get_region_type() == 'full' ) {
					this.$bg.children('.upfront-region-bg-overlay').css('height', height);
					$sub.each(function(){
						height -= $(this).outerHeight();
					});
					$region.css({
						minHeight: height
					});
					this.model.set_property('original_height', height, true);
				}
				else {
					this.$bg.children('.upfront-region-bg-overlay').css('height', '');
					$region.css({
						minHeight: ''
					});
					if ( min_height > 0 )
						$region.css('min-height', min_height);
					this.model.remove_property('original_height', true);
				}
			},
			update_pos: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					offset = this.$el.offset(),
					top = offset.top,
					height = this.$el.outerHeight(),
					bottom = top + height,
					scroll_top = $(document).scrollTop(),
					win_height = $(window).height(),
					scroll_bottom = scroll_top + win_height,
					main_off = $main.offset(),
					rel_top = main_off.top,
					$trig = this.$el.find('> .upfront-region-edit-trigger'),
					trig_offset = $trig.offset(),
					sticky = this.model.get('sticky'),
					sticky_top = this.$el.data('sticky-top');
				// Normalize scroll top value
				scroll_top = scroll_top < 0 ? 0 : scroll_top;
				// Sticky behavior
				// @TODO Need to have a proper behavior for responsive view, disable for now
				if ( breakpoint && !breakpoint.default )
					sticky = false;
				if ( sticky ) {
					if ( !_.isNumber(sticky_top) && scroll_top > top-rel_top ) {
						this.$el.css({
							position: 'fixed',
							top: rel_top,
							left: main_off.left,
							right: 0,
							bottom: 'auto'
						});
						this.$el.addClass('upfront-region-container-sticky');
						this.$el.data('sticky-top', top-rel_top);
						this.$el.nextAll('.upfront-region-container:first').css('margin-top', this.$el.height());
					}
				}
				if ( this.$el.css('position') == 'fixed' && ( !sticky || ( _.isNumber(sticky_top) && scroll_top <= sticky_top ) ) ) {
					this.$el.css({
						position: '',
						top: '',
						left: '',
						right: '',
						bottom: ''
					});
					this.$el.removeClass('upfront-region-container-sticky');
					this.$el.removeData('sticky-top');
					this.$el.nextAll('.upfront-region-container:first').css('margin-top', '');
				}

				// Keep background position on scroll for full screen region
				if ( this._get_region_type() == 'full' ) {
					var bg_type = this.model.get_breakpoint_property_value('background_type', true),
						full_screen_height = parseInt(this.$layout.find('.upfront-region-center').css('min-height'));
					if ( scroll_top >= top-rel_top && scroll_bottom <= bottom ) {
						this.$bg.children('.upfront-region-bg-overlay').css('top', ( scroll_top - rel_top ))
					}
					else {
						this.$bg.children('.upfront-region-bg-overlay').css('top', ( height - win_height ));
					}
				}


				if ( scroll_top > top-rel_top && scroll_top < bottom-rel_top ) {
					if ( $trig.css('position') != 'fixed' )
						$trig.css({
							position: 'fixed',
							top: rel_top,
							left: trig_offset.left,
							right: 'auto'
						});
				}
				else {
					$trig.css({
						position: '',
						top: '',
						left: '',
						right: ''
					});
				}
				if ( $main.hasClass('upfront-region-editing') && this.$el.hasClass('upfront-region-container-active') ){
					var $fin = this.$el.find('.upfront-region-finish-edit'),
						fin_offset = $fin.offset();
					if ( bottom+$fin.outerHeight() > scroll_bottom && top < scroll_bottom ){
						if ( $fin.css('position') != 'fixed' )
							$fin.css({
								position: 'fixed',
								bottom: 0,
								left: fin_offset.left,
								right: 'auto'
							});
					}
					else {
						$fin.css({
							position: '',
							bottom: '',
							left: '',
							right: ''
						});
					}
				}
			},
			remove: function(){
				$(window).off('scroll.region_container_' + this.model.get('name'));
				$(window).off('resize.region_container_' + this.model.get('name'));

				if(this.context_menu_view){
					this.context_menu_view.remove();
				}
				this.parent_view = false;
				this.event = false;
				Backbone.View.prototype.remove.call(this);
			}
		}),

		RegionSubContainer = _Upfront_SingularEditor.extend({
			attributes: function () {
				var name = this.model.get("container") || this.model.get("name"),
					sub = this.model.get('sub'),
					classes = [];
				classes.push('upfront-region-sub-container');
				classes.push('upfront-region-sub-container-' + name.toLowerCase().replace(/ /, "-"));
				classes.push('upfront-region-sub-container-' + sub);
				return {
					"class": classes.join(' ')
				};
			},
			init: function () {
				this.listenTo(this.model.get("properties"), 'change', this.update);
				this.listenTo(this.model.get("properties"), 'add', this.update);
				this.listenTo(this.model.get("properties"), 'remove', this.update);
				this.listenTo(Upfront.Events, 'layout:after_render', this.refresh_background);
				this.listenTo(Upfront.Events, "entity:resize_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:region:resize_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:region_container:resize_stop", this.update_pos);
				this.listenTo(Upfront.Events, "entity:region_container:resize_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:drag:drop_change", this.refresh_background);
				this.listenTo(Upfront.Events, 'layout:after_render', this.update_pos);
				this.listenTo(Upfront.Events, "entity:region:added", this.update_pos);
				this.listenTo(Upfront.Events, "entity:region:removed", this.update_pos);
				this.listenTo(Upfront.Events, "sidebar:toggle:done", this.update_pos);
				this.listenTo(Upfront.Events, "application:mode:after_switch", this.update_pos);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				$(window).on('scroll.region_subcontainer_' + this.model.get('name'), this, this.on_scroll);
				$(window).on('resize.region_subcontainer_' + this.model.get('name'), this, this.on_window_resize);
			},
			_get_region_type: function () {
				return this.model.get('type') || ( this.model.get('clip') ? 'clip' : 'wide' );
			},
			render: function () {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					container_view = this.parent_view.get_container_view(this.model),
					data = _.extend(this.model.toJSON(), {size_class: grid.class, max_col: container_view.max_col, available_col: container_view.available_col}),
					template = _.template(_Upfront_Templates["region_container"], data);
				Upfront.Events.trigger("entity:region_sub_container:before_render", this, this.model);
				this.$el.html(template);
				this.$layout = this.$el.find('.upfront-grid-layout');
				this.update();
				Upfront.Events.trigger("entity:region_sub_container:after_render", this, this.model);
			},
			update: function () {
				var container_view = this.parent_view.get_container_view(this.model);
				if ( container_view && container_view._get_region_type() == 'full' ){
					this.update_background();
					this.$el.show();
				}
				else{
					this.$el.hide();
				}
				this.update_pos();
			},
			on_scroll: function (e) {
				var me = e.data;
				me.update_pos();
			},
			on_window_resize: function (e) {
				var me = e.data;
				me.update_pos();
			},
			on_change_breakpoint:  function () {
				this.update_pos();
				//_.delay(this.update_pos.bind(this), 200);
			},
			update_pos: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					offset = this.$el.offset(),
					top = offset.top,
					scroll_top = $(document).scrollTop(),
					win_height = $(window).height(),
					scroll_bottom = scroll_top + win_height,
					main_off = $main.offset(),
					rel_top = main_off.top,
					container_view = this.parent_view.get_container_view(this.model),
					container_height = container_view.$el.outerHeight(),
					container_offset = container_view.$el.offset(),
					container_bottom = container_offset.top + container_height,
					height = this.$el.height(),
					sticky = this.model.get('sticky'),
					sticky_top = this.$el.data('sticky-top'),
					sub = this.model.get('sub'),
					is_sticky = false,
					css = {};
				if ( this.$el.css('display') == 'none' ) {
					this.$el.css({
						position: '',
						top: '',
						left: '',
						right: '',
						bottom: ''
					});
					this.$el.removeClass('upfront-region-container-sticky');
					this.$el.removeData('sticky-top');
					if ( sub == 'top' )
						this.$el.closest('.upfront-region-container-bg').css('padding-top', '');
					else
						this.$el.closest('.upfront-region-container-bg').css('padding-bottom', '');
					return;
				}
				// Normalize scroll top value
				scroll_top = scroll_top < 0 ? 0 : scroll_top;
				// @TODO Need to have a proper behavior for responsive view, disable for now
				if ( breakpoint && !breakpoint.default )
					sticky = false;
				// Sticky behavior
				if ( sticky ) {
					if ( !_.isNumber(sticky_top) && scroll_top >= top-rel_top ) {
						css.position = 'fixed';
						css.top = rel_top;
						css.left = main_off.left;
						css.right = 0;
						css.bottom = 'auto';
						is_sticky = true;
						this.$el.data('sticky-top', top-rel_top);
					}
				}



				// Sub-container behavior to stick when scroll
				if ( scroll_top+rel_top >= container_offset.top && scroll_bottom <= container_bottom ){
					css.position = 'fixed';
					if ( sub == 'top' ) {
						css.top = rel_top;
						css.bottom = 'auto';
					}
					else {
						css.top = 'auto';
						css.bottom = 0;
					}
					css.left = main_off.left;
					css.right = 0;
					is_sticky = false;

					var ref = $('.upfront-regions');//this.$el.closest('.upfront-region-container-bg');
					var targ = this.$el.children('.upfront-region-container-bg').children('.upfront-grid-layout');
					css.width = ref.width();
					if(ref.offset())
						css.left = ref.offset().left-$(document).scrollLeft();
					/*console.log(ref.offset());
					console.log($(document).scrollLeft());
					if(ref.offset()) {
						css.left-=(2*($(document).scrollLeft())-60);
						//ref.offset().left-targ.offset({top: targ.offset().top, left: ref.offset.left});
					}*/
				}
				if ( css.position && css.position == 'fixed' ) {
					if ( this.$el.css('position') != css.position || this.$el.css('left') != css.left || this.$el.css('top') != css.top ) {
						this.$el.css(css);
						if ( sub == 'top' )
							this.$el.closest('.upfront-region-container-bg').css('padding-top', height);
						else
							this.$el.closest('.upfront-region-container-bg').css('padding-bottom', height);
					}
					if ( is_sticky )
						this.$el.addClass('upfront-region-container-sticky');
					else
						this.$el.removeClass('upfront-region-container-sticky');
				}
				else if (
					this.$el.css('position') == 'fixed' &&
					(
						!sticky ||
						( _.isNumber(sticky_top) && scroll_top <= sticky_top ) ||
						( !_.isNumber(sticky_top) && ( scroll_top+rel_top < container_offset.top || scroll_bottom > container_bottom ) )
					)
				) {
					this.$el.css({
						position: '',
						top: '',
						left: '',
						right: '',
						bottom: ''
					});
					if ( sub == 'top' ) {
						this.$el.css('top', container_height - win_height + rel_top)
					}
					this.$el.removeClass('upfront-region-container-sticky');
					this.$el.removeData('sticky-top');
					if ( sub == 'top' )
						this.$el.closest('.upfront-region-container-bg').css('padding-top', '');
					else
						this.$el.closest('.upfront-region-container-bg').css('padding-bottom', '');
				}

			},
			remove: function () {
				var sub = this.model.get('sub');
				if ( sub == 'top' )
					this.$el.closest('.upfront-region-container-bg').css('padding-top', '');
				else
					this.$el.closest('.upfront-region-container-bg').css('padding-bottom', '');
				this.event = false;
				$(window).off('scroll.region_subcontainer_' + this.model.get('name'));
				$(window).off('resize.region_subcontainer_' + this.model.get('name'));
				Backbone.View.prototype.remove.call(this);
			}
		}),

		Region = _Upfront_SingularEditor.extend({
			cssSelectors: {
				'.upfront-region-wrapper': {label: l10n.rw_label, info: l10n.rw_info}
			},
			events: {
				"mouseup": "on_mouse_up", // Bound on mouseup because "click" prevents bubbling (for module/object activation)
				"mouseover": "on_mouse_over",
				"click": "on_click",
				"click > .upfront-entity_meta > a.upfront-entity-settings_trigger": "on_settings_click",
				"click > .upfront-entity_meta > a.upfront-entity-delete_trigger": "on_delete_click",
				"click > .upfront-entity_meta > a.upfront-entity-hide_trigger": "on_hide_click",
				"click > .upfront-region-hidden-toggle > a.upfront-entity-hide_trigger": "on_hide_click",
				"click > .upfront-region-edit-trigger": "trigger_edit"
			},
			attributes: function(){
				var grid = Upfront.Settings.LayoutEditor.Grid,
					container = this.model.get("container"),
					name = this.model.get("name").toLowerCase().replace(/\s/, "-"),
					classes = [],
					col, width;
				if ( ! this.col ){
					col = this.model.get_property_value_by_name('col');
					width = this.model.get_property_value_by_name('width');
					this.col = col || ( width ? Upfront.Util.width_to_col(width) : grid.size );
					if ( this.col > grid.size ) this.col = grid.size;
				}
				classes.push('upfront-region');
				classes.push('upfront-region-' + name);
				classes.push(grid.class + this.col);
				if ( ! this.model.is_main() ){
					var index = this.model.collection.indexOf(this.model),
						sub = this.model.get('sub'),
						next = this.model.collection.at(index+1),
						is_left = ( next && ( next.get('name') == container || next.get('container') == container) );
					classes.push('upfront-region-side');
					classes.push('upfront-region-side-' + ( sub ? sub : (is_left ? 'left' : 'right') ));
				}
				else {
					classes.push('upfront-region-center');
				}
				if ( this.model.collection && this.model.collection.active_region == this.model ){
					classes.push('upfront-region-active');
				}
				return {
					"class": classes.join(' '),
					"id": 'region-' + name
				};
			},
			init: function () {
				var container = this.model.get("container"),
					name = this.model.get("name");
				this.listenTo(this.dispatcher, 'plural:propagate_activation', this.on_mouse_up);
				//this.dispatcher.on("plural:propagate_activation", this.on_mouse_up, this);
				// this.model.get("properties").bind("change", this.update, this);
				// this.model.get("properties").bind("add", this.update, this);
				// this.model.get("properties").bind("remove", this.update, this);
				// this.model.get("modules").bind("change", this.on_module_update, this);
				// this.model.get("modules").bind("add", this.on_module_update, this);
				this.listenTo(this.model.get("properties"), 'change', this.update);
				this.listenTo(this.model.get("properties"), 'add', this.update);
				this.listenTo(this.model.get("properties"), 'remove', this.update);
				this.listenTo(this.model.get("modules"), 'change', this.on_module_update);
				this.listenTo(this.model.get("modules"), 'add', this.on_module_update);
				this.listenTo(this.model.get("modules"), 'remove', this.on_module_update);
				this.listenTo(this.model.get("modules"), 'reset', this.on_module_update);
				this.listenTo(Upfront.Events, 'entity:added:after', this.display_region_hint);
				this.listenTo(Upfront.Events, 'layout:after_render', this.on_layout_render);
				this.listenTo(Upfront.Events, "entity:resize_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:region:resize_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:region_container:resize_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:drag:drop_change", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:navigation:responsive_open", this.refresh_background);
				this.listenTo(Upfront.Events, "entity:navigation:responsive_close", this.refresh_background);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				this.listenTo(Upfront.Events, "entity:region:hide_toggle", this.update_hide_toggle);
				this.listenTo(Upfront.Events, "command:region:edit_toggle", this.update_buttons);
				this.listenTo(Upfront.Events, "entity:region:removed", this.update_buttons);
				$(window).on('resize.region_' + this.model.get('name'), this, this.on_window_resize);
			},
			on_click: function (e) {

			},
			on_mouse_up: function () {
				this.trigger("activate_region", this);
			},
			on_mouse_over: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					container = this.parent_view.get_container_view(this.model),
					$main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				if ( ! $main.hasClass('upfront-region-editing') )
					return;
				if ( container && container.$el.hasClass('upfront-region-container-active') && !container.$el.hasClass('upfront-region-bg-setting-open') )
					this.trigger("activate_region", this);
			},
			_is_clipped: function () {
				var type = this.model.get('type'),
					sub = this.model.get('sub');
				return ( !this.model.is_main() && ( !sub || (sub != 'top' && sub != 'bottom') ) );
			},
			render: function () {
				var container = this.model.get("container"),
					name = this.model.get("name"),
					template = _.template(_Upfront_Templates["region"], this.model.toJSON()),
					$edit = $('<div class="upfront-region-edit-trigger upfront-region-edit-trigger-small upfront-ui" title="Edit region"><i class="upfront-icon upfront-icon-region-edit"></i></div>'),
					$size = $('<div class="upfront-region-size-hint upfront-ui"></div>')
				;
				Upfront.Events.trigger("entity:region:before_render", this, this.model);
				this.$el.html(template);
				this.$el.append('<div class="upfront-debug-info"/>');
				$edit.appendTo(this.$el);
				$size.appendTo(this.$el);

				this.update();

				var local_view = this._modules_view || new Modules({"model": this.model.get("modules")});
				local_view.region_view = this;
				this.$el.find('> .upfront-region-wrapper > .upfront-modules_container').append(local_view.el);
				local_view.render();
				this.render_panels();
				this.render_bg_setting();
				//if ( this._is_clipped() )
				//	this.$el.append('<div class="upfront-region-active-overlay" />');
				this.display_region_hint();
				Upfront.Events.trigger("entity:region:after_render", this, this.model);
				this.trigger("region_render", this);
				if ( ! this._modules_view )
					this._modules_view = local_view;
				else
					this._modules_view.delegateEvents();
			},
			render_panels: function () {
				this.region_panels = new Upfront.Views.Editor.RegionPanels({model: this.model});
				this.region_panels.render();
				this.$el.append(this.region_panels.el);
			},
			render_bg_setting: function () {
				var container_view = this.parent_view.get_container_view(this.model),
					opts = {
						model: this.model,
						to: this.$el,
						width: 420,
						top: 52,
						right:43,
						keep_position: false
					};
				this.bg_setting = new Upfront.Views.Editor.ModalBgSetting(opts);
				this.bg_setting.for_view = this;
				this.bg_setting.render();
				this.$el.append(this.bg_setting.el);
				this.listenTo(this.bg_setting, "modal:open", this.on_modal_open);
				this.listenTo(this.bg_setting, "modal:close", this.on_modal_close);
			},
			update: function () {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					container = this.model.get("container"),
					name = this.model.get("name").toLowerCase().replace(/\s/g, "-"),
					previous_name = this.model.previous("name"),
					col = this.model.get_property_value_by_name('col'),
					row = this.model.get_property_value_by_name('row'),
					height = row ? row * Upfront.Settings.LayoutEditor.Grid.baseline : 0,
					expand_lock = this.model.get_property_value_by_name('expand_lock')
				;
				this.$el.data('name', name);
				this.$el.attr('data-title', this.model.get("title"));
				this.$el.data('type', this.model.get("type"));
				this.$el.find('.upfront-region-title').html(this.model.get("title"));
				if ( !breakpoint || breakpoint.default ){
					if ( col && col != this.col ) {
						this.region_resize(col);
					}
				}
				if ( height > 0 ) {
					this.$el.css('min-height', height + 'px');
				}
				if ( expand_lock ) {
					this.$el.addClass('upfront-region-expand-lock');
				}
				else {
					this.$el.removeClass('upfront-region-expand-lock');
				}
				if ( previous_name != name ){
					this.$el.removeClass('upfront-region-' + previous_name.toLowerCase().replace(/\s/g, "-"));
					this.$el.addClass('upfront-region-' + name);
					this.$el.attr('id', 'region-' + name);
				}
				if ( this._is_clipped() ){
					// This region is inside another region container
					this.update_background(); // Allow background applied
				}
				else {
					this.remove_background();
				}
				this.update_position();
				this.update_buttons();
				this.update_size_hint(this.col * grid.column_width, parseInt(this.$el.css('height'), 10));
				this.trigger("region_update", this);
			},
			update_position: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					grid = Upfront.Settings.LayoutEditor.Grid,
					$edit = this.$el.find('> .upfront-region-edit-trigger');
				if ( ! breakpoint ) return;
				var data = this.model.get_property_value_by_name('breakpoint'),
					row = this.model.get_property_value_by_name('row'),
					breakpoint_data = data[breakpoint.id],
					container_view = this.parent_view.get_container_view(this.model),
					$container = this.$el.find('> .upfront-region-wrapper > .upfront-modules_container'),
					$toggle = this.$el.find('.upfront-region-hidden-toggle'),
					$regions = container_view.$el.find('.upfront-region-center, .upfront-region-side-left, .upfront-region-side-right'),
					$hide_trigger = this.$el.find('> .upfront-entity_meta > a.upfront-entity-hide_trigger'),
					height = 0,
					width = 0,
					top_padding = 0,
					bottom_padding = 0
				;
				if ( ! breakpoint_data || ! breakpoint_data.hide ){
					$container.show();
					$toggle.hide();
					this.$el.removeClass('upfront-region-hidden');
					if ( !breakpoint.default )
						$hide_trigger.show();
				}
				else if ( breakpoint_data.hide ){
					$container.hide();
					$toggle.show();
					this.$el.addClass('upfront-region-hidden');
					$hide_trigger.hide();
					this.update_hide_toggle();
				}
				if ( $regions.length > 0 && $regions.length == container_view.$el.find('.upfront-region-hidden').length )
					container_view.$el.addClass('upfront-region-container-hidden');
				else
					container_view.$el.removeClass('upfront-region-container-hidden');
				if ( breakpoint_data && typeof breakpoint_data.col == 'number' ){
					width = (breakpoint_data.col/(breakpoint.columns)*100);
					this.$el.css('width', ( width > 100 ? 100 : width ) + '%');
					this.$el.data('breakpoint_col', breakpoint_data.col);
				}
				else {
					this.$el.css('width', '');
					this.$el.removeData('breakpoint_col');
				}
				if ( !breakpoint.default ) {
					if ( this.model.is_main() )
						$edit.css('right', (breakpoint.width - (breakpoint.columns*grid.column_width)) / 2 * -1);
					else
						$edit.css('right', '');
					$toggle.css('left', (breakpoint.width - (breakpoint.columns*grid.column_width)) / 2);
				}
				else {
					$edit.css('right', '');
					$toggle.css('left', '');
				}
				if ( breakpoint_data && typeof breakpoint_data.row == 'number' ) {
					height = (breakpoint_data.row*grid.baseline);
					this.$el.data('breakpoint_row', breakpoint_data.row);
				}
				else {
					height = (row*grid.baseline);
					this.$el.removeData('breakpoint_row');
				}
				if ( height > 0 ){
					top_padding = parseInt(this.$el.css('padding-top'), 10);
					bottom_padding = parseInt(this.$el.css('padding-bottom'), 10);
					this.$el.css('min-height', height + 'px');
					height -= top_padding + bottom_padding;
					height = height > 0 ? height : 0;
					$container.css('min-height', height + 'px');
				}
				else {
					this.$el.css('min-height', '');
					$container.css('min-height', '');
				}
				this.trigger("region_changed", this);
			},
			update_buttons: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					$delete_trigger = this.$el.find('> .upfront-entity_meta > a.upfront-entity-delete_trigger');
				if ( !breakpoint || breakpoint.default ){
					if (
						( this.model.is_main() && this.model.has_side_region() ) ||
						( this.model.get('sub') == 'top' || this.model.get('sub') == 'bottom' )
					)
						$delete_trigger.hide();
					else
						$delete_trigger.css('display', 'block');
				}
				else {
					$delete_trigger.hide();
				}
				this.update_size_hint(parseInt(this.$el.css('width'), 10), parseInt(this.$el.css('height'), 10));
			},
			update_size_hint: function (width, height, $helper) {
				var hint = '<b>w:</b>' + width + 'px <b>h:</b>' + height + 'px';
				( $helper ? $helper : this.$el ).find('.upfront-region-size-hint').html(hint);
			},
			region_resize: function (col) {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					prev_col = this.col
				;
				this.col = col;
				this.$el.removeClass(grid.class + prev_col);
				this.$el.addClass(grid.class + this.col);
				if ( Upfront.Application.layout_ready ) {
					this.normalize_child_modules(prev_col);
				}
			},
			on_module_update: function () {
				this.trigger("region_changed", this);
				this.display_region_hint();
			},
			display_region_hint: function() {

				if(Upfront.Application.get_current() != "theme" || this.$el.hasClass('upfront-region-floating') || this.$el.hasClass('upfront-region-lightbox') || this.$el.attr('id')=='region-shadow')
					return

				if(this.$el.find('> .upfront-region-wrapper > .upfront-modules_container .upfront-wrapper').size() < 1) {
					this.$el.addClass('empty_in_theme_mode');
				}
				else {
					this.$el.removeClass('empty_in_theme_mode');
				}
			},
			on_layout_render: function () {
				this.update_size_hint(parseInt(this.$el.css('width'), 10), parseInt(this.$el.css('height'), 10));
				this.refresh_background();
			},
			normalize_child_modules: function (prev_col) {
				if ( !this._modules_view ) return;
				var breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
					ed = Upfront.Behaviors.GridEditor,
					col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num(this.$el, ed.grid.class) : this.$el.data('breakpoint_col')
				;
				this._modules_view.normalize_child_modules(col, prev_col, this.model.get('wrappers'));
			},
			remove: function() {
				if(this._modules_view)
					this._modules_view.remove();
				$(window).off('resize.region_' + this.model.get('name'));
				var wrappers = this.model.get('wrappers');
				if(wrappers)
					wrappers.each(function(wrapper){
						var wrapperView = Upfront.data.wrapper_views[wrapper.cid];
						if(wrapperView){
							wrapperView.remove();
							delete Upfront.data.wrapper_views[wrapper.cid];
						}
					});
				this.parent_view = false;
				Backbone.View.prototype.remove.call(this);
				this.model.get('wrappers').reset([], {silent:true});
				this.model = false;
			},
			on_delete_click: function (e) {
				var main, main_view;

				if(typeof(e) != 'undefined')
					e.preventDefault();


				if ( confirm(l10n.section_delete_nag) ){
					var parent_view = this.parent_view; // reserve parent_view before removal as we use it later
					// if ( this.model.get('container') ){
						// main = this.model.collection.get_by_name(this.model.get('container'));
						// main_view = Upfront.data.region_views[main.cid];
					// }
					if(this.model.get('type') == 'lightbox')
						this.hide();

					var thecollection = this.model.collection;

					// Make sure sub-regions is also removed if it's main region
					if ( this.model.is_main() ) {
						var sub_regions = this.model.get_sub_regions();
						_.each(sub_regions, function(sub_model, sub){
							if ( _.isArray(sub_model) )
								_.each(sub_model, function(sub_model2){ thecollection.remove(sub_model2) });
							else if ( _.isObject(sub_model) )
								thecollection.remove(sub_model);
						});
					}
					this.model.collection.remove(this.model);

					var total_container = thecollection.total_container(['shadow', 'lightbox']); // don't include shadow and lightbox region
					if ( total_container == 0 ) {
						if ( parent_view.$el.find('#no_region_add_one').length < 1 ) {
							parent_view.$el.append($('<a>').attr('id', 'no_region_add_one').text(l10n.no_region_add).one('click', function() {
								var new_title = false,
									name = 'main',
									title = l10n.main_area;
								if ( thecollection.get_by_name(name) ) {
									new_title = thecollection.get_new_title("Main ", 2);
									title = new_title.title;
									name = new_title.name;
								}
								var new_region = new Upfront.Models.Region(_.extend(_.clone(Upfront.data.region_default_args), {
									"name": name,
									"container": name,
									"title": title
								}));

								var options = {};
								new_region.set_property('row', Upfront.Util.height_to_row($(window).height())); // default to screen height worth of row
								new_region.add_to(thecollection, 0, options);

								$(this).remove();
							}));

						}

					}

					// if ( main_view ){
						// Upfront.Events.trigger('command:region:edit_toggle', true);
						// main_view.trigger('activate_region', main_view);
					// }
				}
			},
			on_settings_click: function (e) {

				if(typeof(e) != 'undefined') {
					e.preventDefault();
					e.stopPropagation();
				}

				var me = this,
					container_view = this.parent_view.get_container_view(this.model);
				this.listenToOnce(Upfront.Events, "entity:region:deactivated", function(deac){
					if(e && !this.$el.is($(e.target).closest('div.upfront-region'))) {
						me.bg_setting.close(false);
					}
				});

				// Make sure all other instance is closed
				_.each(_.flatten([container_view.model, container_view.sub_model]), function(each){
					var each_view = Upfront.data.region_views[each.cid];
					if ( each == me.model ) {
						each_view.$el.find('.upfront-inline-modal-wrap').draggable({
							delay: 300,
							addClasses: false,
							cancel: '.upfront-field-select, input,textarea,button,select,option'
						});
						return;
					}
					if ( each_view && each_view.bg_setting )
						each_view.bg_setting.close(false);
				});

				var $settings_trigger = this.$el.find('> .upfront-entity_meta > a.upfront-entity-settings_trigger'),
					setting_offset = $settings_trigger.offset(),
					offset = this.$el.offset(),
					width = this.$el.width();



				if(this.model.get('type') == 'lightbox') {
					this.bg_setting.right =  80;
					this.bg_setting.top = setting_offset.top;

					var container_view = this.parent_view.get_container_view(this.model);
					container_view.trigger_edit_lightbox(e);
				}
				else {
					if ( this.bg_setting.width < setting_offset.left - 10 ) {
						this.bg_setting.right = ( offset.left + width - setting_offset.left ) + 10;
						this.bg_setting.left = -1;
					}
					else {
						this.bg_setting.right = -1;
						this.bg_setting.left = width;
					}
					this.bg_setting.top = setting_offset.top - offset.top;
				}

				container_view.$el.addClass('upfront-region-bg-setting-open');
				this.bg_setting.open().always(function(){
					container_view.$el.removeClass('upfront-region-bg-setting-open');
				});
			},
			on_hide_click: function (e) {
				e.preventDefault();
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					data = Upfront.Util.clone(this.model.get_property_value_by_name('breakpoint') || {});
				if ( !_.isObject(data[breakpoint.id]) )
					data[breakpoint.id] = {};
				if ( data[breakpoint.id].hide == 1 )
					data[breakpoint.id].hide = 0;
				else
					data[breakpoint.id].hide = 1;
				this.model.set_property('breakpoint', data);
				Upfront.Events.trigger('entity:region:hide_toggle', data[breakpoint.id].hide, this);
			},
			update_hide_toggle: function () {
				if ( ! this.$el.hasClass('upfront-region-hidden') )
					return;
				var $toggle = this.$el.find('.upfront-region-hidden-toggle'),
					$regions = $('.upfront-region-center, .upfront-region-side-left, .upfront-region-side-right'),
					$hidden = Upfront.Util.find_from_elements($regions, this.$el, '.upfront-region', true, ':not(.upfront-region-hidden)');
				$toggle.css('margin-top', ( $hidden.length * 20 ) + 'px');
			},
			trigger_edit: function (e) {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.trigger_edit(e);
				e.stopPropagation();
			},
			close_edit: function (e) {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.close_edit();
				e.stopPropagation();
			},
			on_modal_open: function () {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.$el.find('.upfront-region-finish-edit').css('display', 'none'); // hide finish edit button
			},
			on_modal_close: function () {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.$el.find('.upfront-region-finish-edit').css('display', ''); // reset hide finish edit button
			},
			on_change_breakpoint: function (breakpoint) {
				var $delete = this.$el.find('> .upfront-entity_meta > a.upfront-entity-delete_trigger'),
					$settings = this.$el.find('> .upfront-entity_meta > a.upfront-entity-settings_trigger'),
					$hide = this.$el.find('> .upfront-entity_meta > a.upfront-entity-hide_trigger');
				if ( !breakpoint.default ){
					$delete.hide();
					//$settings.hide();
					$hide.show();
				}
				else {
					$delete.show();
					//$settings.show();
					$hide.hide();
				}
				this.update_position();
				this.update_size_hint(parseInt(this.$el.css('width'), 10), parseInt(this.$el.css('height'), 10));
				if ( this._is_clipped() )
					this.update_background();
			}
		}),

		RegionFixed = Region.extend({
			events: {
				//"mouseup": "on_mouse_up", // Bound on mouseup because "click" prevents bubbling (for module/object activation)
				"mouseover": "on_mouse_over",
				"click": "on_click",
				"click > .upfront-entity_meta > a.upfront-entity-settings_trigger": "on_settings_click",
				"click > .upfront-entity_meta > a.upfront-entity-delete_trigger": "on_delete_click",
				"click > .upfront-region-edit-trigger": "trigger_edit",
				"click > .upfront-region-finish-edit-fixed": "close_edit",
			},
			init: function () {
				this.constructor.__super__.init.call(this);
				this.listenTo(Upfront.Events, 'sidebar:toggle:done', this.update_region_position);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.update_region_position);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.check_modules);
				this.listenTo(Upfront.Events, "layout:after_render", this.check_modules);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				this.listenTo(this.model, "restrict_to_container", this.update_position_on_restrict);
				$(window).on('scroll.region_' + this.model.get('name'), this, this.on_scroll);
			},
			render: function () {
				this.constructor.__super__.render.call(this);
				var	$edit = $('<div class="upfront-region-edit-trigger upfront-region-edit-trigger-small upfront-ui" title="' + l10n.change_background + '"><i class="upfront-icon upfront-icon-region-edit"></i></div>'),
					$edit_full = $('<div class="upfront-region-edit-trigger upfront-region-edit-trigger-full upfront-ui"><div class="upfront-region-edit-text">' + l10n.click_to_edit_floating_region + '</div></div>'),
					$ok = $('<div class="upfront-region-finish-edit-fixed upfront-ui">' + l10n.ok + '</div>'),
					$size = $('<div class="upfront-region-size-hint upfront-ui"></div>'),
					$position = $('<div class="upfront-region-position-hint upfront-ui"></div>');
				$size.appendTo(this.$el);
				$position.appendTo(this.$el);
				$edit.appendTo(this.$el);
				$edit_full.appendTo(this.$el);
				$ok.appendTo(this.$el);
				//this.render_edit_position();
			},
			render_bg_setting: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				this.bg_setting = new Upfront.Views.Editor.ModalBgSetting({model: this.model, to: $main, width: 420});
				this.bg_setting.render();
				$main.append(this.bg_setting.el);
				this.listenTo(this.bg_setting, "modal:open", this.on_modal_open);
				this.listenTo(this.bg_setting, "modal:close", this.on_modal_close);
			},
			update: function() {
				this.constructor.__super__.update.call(this);
				this.check_modules();
				this.update_region_position();
			},
			update_region_position: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					grid = Upfront.Settings.LayoutEditor.Grid,
					restrict = this.model.get('restrict_to_container'),
					width = this.model.get_property_value_by_name('width'),
					col = this.model.get_property_value_by_name('col'),
					height = this.model.get_property_value_by_name('height'),
					top = this.model.get_property_value_by_name('top'),
					is_top = ( typeof top == 'number' ),
					left = this.model.get_property_value_by_name('left'),
					is_left = ( typeof left == 'number' ),
					bottom = this.model.get_property_value_by_name('bottom'),
					is_bottom = ( typeof bottom == 'number' ),
					right = this.model.get_property_value_by_name('right'),
					is_right = ( typeof right == 'number' ),
					css = {
						width: width || 225,
						minHeight: height || 225
					};
				if ( !width ) {
					this.model.set_property('width', 225, true);
				}
				if ( !col ) {
					col = Upfront.Util.width_to_col(css.width);
					col = ( col <= grid.size ) ? col : grid.size;
					this.model.set_property('col', col, true)
				}
				else {
					col = ( col <= grid.size ) ? col : grid.size;
				}
				if ( !height ) {
					this.model.set_property('height', 225, true);
				}
				if ( is_top || !is_bottom ){
					css.top = is_top ? top : 30;
					css.bottom = '';
					if ( !is_top ) {
						this.model.set_property('top', 30, true);
					}
				}
				else {
					css.bottom = bottom;
					css.top = '';
				}
				if ( is_left || !is_right ){
					css.left = ( is_left ? left : 30 ) + ( restrict ? 0 : $main.offset().left );
					css.right = '';
					if ( !is_left ) {
						this.model.set_property('left', 30, true);
					}
				}
				else {
					css.right = right;
					css.left = '';
				}
				this.$el.find('> .upfront-region-wrapper > .upfront-modules_container').css( {
					width: ( col * grid.column_width ),
					minHeight: css.minHeight
				});
				this.$el.css(css);
				if ( this.edit_position ) {
					this.edit_position.update_fields();
				}
				this.update_size_hint(css.width, css.minHeight);
				this.update_position_hint(css);
				this.update_position_scroll();
			},
			update_position_hint: function (pos, $helper) {
				var hint = '';
				if ( typeof pos.top == 'number' )
					hint += '<b>top:</b>' + pos.top;
				else if ( typeof pos.bottom == 'number' )
					hint += '<b>bottom:</b>' + pos.bottom;
				if ( typeof pos.left == 'number' )
					hint += ' <b>left:</b>' + pos.left;
				else if ( typeof pos.right == 'number' )
					hint += ' <b>right:</b>' + pos.right;
				( $helper ? $helper : this.$el ).find('.upfront-region-position-hint').html(hint);
			},
			update_position_on_restrict: function (value) {
				var scroll_top = $(window).scrollTop(),
					win_height = $(window).height(),
					scroll_bottom = scroll_top + win_height,
					container_view = this.parent_view.get_container_view(this.model),
					container_height = container_view.$el.height(),
					container_offset = container_view.$el.offset(),
					container_bottom = container_offset.top + container_height,
					height = this.model.get_property_value_by_name('height'),
					top = this.model.get_property_value_by_name('top'),
					is_top = ( typeof top == 'number' ),
					bottom = this.model.get_property_value_by_name('bottom'),
					is_bottom = ( typeof bottom == 'number' );
				if ( value ){
					if ( ( is_top || !is_bottom ) && scroll_top <= container_offset.top ){
						top = top - ( container_offset.top - scroll_top );
						if ( top + height > container_height )
							top = container_height - height;
						else if ( top < 0 )
							top = 0;
					}
					else if ( is_bottom && ( scroll_bottom >= container_bottom ) ){
						bottom = bottom - ( scroll_bottom - container_bottom );
						if ( bottom + height > container_height )
							bottom = container_height - height;
						else if ( bottom < 0 )
							bottom = 0;
					}
				}
				else {
					if ( is_top || !is_bottom ){
						top = ( container_offset.top >= scroll_top ) ? container_offset.top - scroll_top + top : top;
					}
					else {
						bottom = ( scroll_bottom >= container_bottom ) ? scroll_bottom - container_bottom + bottom : bottom;
					}
				}
				if ( is_top || !is_bottom ) {
					this.model.set_property('top', top, true);
					// let's automatically scroll to avoid confusion with the correct absolute positioning
					if ( container_height > win_height && scroll_bottom > container_bottom )
						$('html,body').animate({scrollTop: container_bottom - win_height}, 600);
				}
				else {
					this.model.set_property('bottom', bottom, true);
					// let's automatically scroll to avoid confusion with the correct absolute positioning
					if ( container_height > win_height && scroll_top < container_offset.top )
						$('html,body').animate({scrollTop: container_offset.top}, 600);
				}
			},
			update_position_scroll: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					scroll_top = $(window).scrollTop(),
					win_height = $(window).height(),
					scroll_bottom = scroll_top + win_height,
					container_view = this.parent_view.get_container_view(this.model),
					container_height = container_view.$el.height(),
					container_offset = container_view.$el.offset(),
					container_bottom = container_offset.top + container_height,
					restrict = this.model.get('restrict_to_container'),
					height = this.model.get_property_value_by_name('height'),
					top = this.model.get_property_value_by_name('top'),
					is_top = ( typeof top == 'number' ),
					left = this.model.get_property_value_by_name('left'),
					right = this.model.get_property_value_by_name('right'),
					is_left = ( typeof left == 'number' ),
					bottom = this.model.get_property_value_by_name('bottom'),
					is_bottom = ( typeof bottom == 'number' ),
					css = {};

				if((scroll_bottom < container_view.$el.offset().top || scroll_top > container_view.$el.offset().top + container_view.$el.outerHeight()) !== true) {
					if(right == 0) {
						this.$el.find('.upfront-region-edit-trigger').css({
							right: 30
						})
					}
				} else {
					this.$el.find('.upfront-region-edit-trigger').css({
						right: 0
					})
				}

				if ( restrict ){
					if ( scroll_top >= container_offset.top && scroll_bottom <= container_bottom ){
						css.position = 'fixed';
						if ( is_top )
							css.top = top;
						else
							css.bottom = bottom;
					}
					else {
						css.position = 'absolute';
						if ( is_top ) {
							if ( container_height > win_height && scroll_top >= ( container_offset.top + container_height - win_height ) )
								css.top = container_height - win_height + top;
							else
								css.top = top;
						}
						else {
							if ( container_height > win_height && scroll_bottom <= ( container_offset.top + win_height ) )
								css.bottom =  container_height - win_height + bottom;
							else
								css.bottom = bottom;
						}
					}
				}
				else {
					css.position = 'fixed';
					if ( is_top )
						css.top = top;
					else
						css.bottom = bottom;
				}
				if ( is_left )
					css.left = left + ( css.position == 'fixed' ? $main.offset().left : 0 );
				this.$el.css(css);

				if ( ( css.position == 'fixed' && css.bottom < 35 ) || ( css.position == 'absolute' && this.$el.offset().top+this.$el.height() > scroll_bottom-35 ) )
					this.$el.find('.upfront-region-finish-edit-fixed').css('bottom', 0);
				else
					this.$el.find('.upfront-region-finish-edit-fixed').css('bottom', '');
			},
			on_scroll: function (e) {
				var me = e.data;
				me.update_position_scroll();
			},
			render_panels: function () {
			},
			render_edit_position: function () {
				this.edit_position = new Upfront.Views.Editor.RegionFixedEditPosition({model: this.model});
				this.edit_position.render();
				this.$el.append(this.edit_position.el);
			},
			trigger_edit: function (e) {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.trigger_edit_fixed();
				e.stopPropagation();
			},
			close_edit: function (e) {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.close_edit();
				e.stopPropagation();
			},
			check_modules: function () {
				var total = this.$el.find('> .upfront-region-wrapper > .upfront-modules_container > .upfront-editable_entities_container').find('.upfront-module').size();
				if ( total == 0 ){
					this.$el.removeClass('upfront-region-has-modules');
					this.$el.addClass('upfront-region-empty');
				}
				else {
					this.$el.removeClass('upfront-region-empty');
					this.$el.addClass('upfront-region-has-modules');
				}
			},
			remove: function() {
				$(window).off('scroll.region_' + this.model.get('name'));
				this.constructor.__super__.remove.call(this);
			},
			on_change_breakpoint: function (breakpoint) {
				if ( !breakpoint.default )
					this.$el.hide();
				else
					this.$el.show();
			}
		}),

/*  Lightbox is extended from Region */
		RegionLightbox = Region.extend({
			cssSelectors: {
				'.upfront-region-side-lightbox': {label: l10n.ltbox_area_label, info: l10n.ltbox_area_info},
				'.close_lightbox > .upfront-icon-popup-close': {label: l10n.ltbox_close_icon_label, info: l10n.ltbox_close_icon_info}
			},
			$bg: $('<div class="upfront-lightbox-bg"></div>'),
			$close: $('<div class="upfront-ui close_lightbox"></div>'),
			$close_icon: $('<div class="upfront-icon-popup-close"></div>'),
			events: {
				//"mouseup": "on_mouse_up", // Bound on mouseup because "click" prevents bubbling (for module/object activation)
				"mouseover": "on_mouse_over",
				"click": "on_click",
				"click > .upfront-entity_meta > a.upfront-entity-settings_trigger": "on_settings_click",
				"click > .upfront-entity_meta > a.upfront-entity-delete_trigger": "on_delete_click",
				"click > .upfront-region-edit-trigger": "trigger_edit",
				"click > .upfront-region-finish-edit-lightbox": "close_edit",
				"click > .close_lightbox": "hide",
			},
			init: function () {
				this.constructor.__super__.init.call(this);

				this.listenTo(Upfront.Events, 'sidebar:toggle:done', this.update_region_position);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.update_region_position);
				this.listenTo(Upfront.Events, "entity:drag_stop", this.check_modules);
				this.listenTo(Upfront.Events, "layout:after_render", this.check_modules);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
			},
			render: function () {
				this.constructor.__super__.render.call(this);
				this.hide();

					//var	$edit = $('<div class="upfront-region-edit-trigger upfront-region-edit-trigger-small upfront-ui" title="' + l10n.edit_ltbox + '"><i class="upfront-icon upfront-icon-region-edit"></i></div>');
					//$ok = $('<div class="upfront-region-finish-edit-lightbox upfront-ui">Finish Editing</div>');


				//this.$el.prepend(this.$bg);
				this.$close.appendTo(this.$el);

				//$edit.appendTo(this.$el);
				//$ok.appendTo(this.$el);
			},
			render_bg_setting: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
				this.bg_setting = new Upfront.Views.Editor.ModalBgSetting({model: this.model, to: $main, width: 420});
				this.bg_setting.for_view = this;
				this.bg_setting.render();
				$main.append(this.bg_setting.el);
				this.listenTo(this.bg_setting, "modal:open", this.on_modal_open);
				this.listenTo(this.bg_setting, "modal:close", this.close_edit);
			},
			show:function () {
				Upfront.Events.trigger('upfront:element:edit:stop');
				var me = this;
				this.$bg.insertBefore(this.$el);
				if(this.model.get_property_value_by_name('click_out_close') == 'yes') {
					this.$bg.unbind('click');
					this.$bg.bind('click', function() {
						me.hide();
					});
				}

				this.$el.show();

				/** Because it is a lightbox, the following rendering specific function
					should be applied on the modules once the contents of the lightbox show up
				**/
				this._modules_view.apply_flexbox_clear();
				this._modules_view.apply_wrapper_height();

				Upfront.Events.trigger('upfront:lightbox:show');

			},
			hide:function () {
				this.$el.hide();
				this.$bg.remove();
			},
			refresh_background: function () {
				this.constructor.__super__.refresh_background.call(this);

			},
			update: function() {
				this.constructor.__super__.update.call(this);
				this.check_modules();
				this.update_region_position();

				if(this.model.get_property_value_by_name('show_close') == 'yes' || this.model.get_property_value_by_name('add_close_text') == 'yes') {

					this.$el.find('.close_lightbox').css('display', 'block');


					if(this.model.get_property_value_by_name('add_close_text') == 'yes') {

						this.$close.html('<h3>'+this.model.get_property_value_by_name('close_text')+'</h3>');
						if(this.model.get_property_value_by_name('show_close') == 'yes')
							this.$close.children('h3').css('margin-right', '40px');
					}
					else {
						this.$close.html('');
					}

					if(this.model.get_property_value_by_name('show_close') == 'yes') {
						this.$close.append(this.$close_icon);
					}
				}
				else
					this.$el.find('.close_lightbox').css('display', 'none');

				var me = this;

				if(this.model.get_property_value_by_name('click_out_close') == 'yes') {
					this.$bg.unbind('click');
					this.$bg.bind('click', function() {
						me.hide();
					});
				} else {
					this.$bg.unbind('click');
				}

				this.$bg.css('background-color', this.model.get_property_value_by_name('overlay_color') );
				this.$el.css('background-color', this.model.get_property_value_by_name('lightbox_color') );

				/*if(this.$el.hasClass('init_state')) {
					this.$el.find('.upfront-region-edit-trigger-small').trigger('click');
				}*/
				this.$el.removeClass('init_state');

				if(this.model.get_property_value_by_name('delete')) {
					this.model.set_property('delete', false);
					this.on_delete_click();
				}


			},
			update_region_position: function () {
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					grid = Upfront.Settings.LayoutEditor.Grid,
					col = this.model.get_property_value_by_name('col'),
					height = this.model.get_property_value_by_name('height');



				if ( !col )
					this.model.set_property('col', 10, true);
				if ( !height )
					this.model.set_property('height', 225, true);

				width =  col*grid.column_width

				var css = {
						width: width || 225,
						minHeight: parseInt(height) || 225
					};

				css['margin-left'] = parseInt(-(width/2)+$('#sidebar-ui').width()/2);
				css['margin-top'] = parseInt(-(height/2));

				this.$el.find('> .upfront-region-wrapper > .upfront-modules_container').css( {
					width: Math.floor(css.width/grid.column_width) * grid.column_width,
					'minHeight': css.minHeight
				});
				this.$el.css(css);

			},
			/*update_position_hint: function (pos, $helper) {
				var hint = '';
				if ( typeof pos.top == 'number' )
					hint += '<b>top:</b>' + pos.top;
				else if ( typeof pos.bottom == 'number' )
					hint += '<b>bottom:</b>' + pos.bottom;
				if ( typeof pos.left == 'number' )
					hint += ' <b>left:</b>' + pos.left;
				else if ( typeof pos.right == 'number' )
					hint += ' <b>right:</b>' + pos.right;
				( $helper ? $helper : this.$el ).find('.upfront-region-position-hint').html(hint);
			},*/
			render_edit_position: function () {
				this.edit_position = new Upfront.Views.Editor.RegionFixedEditPosition({model: this.model});
				this.edit_position.render();
				this.$el.append(this.edit_position.el);
			},
			trigger_edit: function (e) {
				this.on_settings_click();
				e.stopPropagation();

			},
			close_edit: function (e) {
				var container_view = this.parent_view.get_container_view(this.model);
				container_view.close_edit();
				if(typeof(e) !== 'undefined')
					e.stopPropagation();
			},
			check_modules: function () {
				var total = this.$el.find('> .upfront-region-wrapper > .upfront-modules_container > .upfront-editable_entities_container').find('.upfront-module').size();
				if ( total == 0 ){
					this.$el.removeClass('upfront-region-has-modules');
					this.$el.addClass('upfront-region-empty');
				}
				else {
					this.$el.removeClass('upfront-region-empty');
					this.$el.addClass('upfront-region-has-modules');
				}
			},
			on_change_breakpoint: function (breakpoint) {
					this.hide();
			}
		}),


		Regions = _Upfront_PluralEditor.extend({
			className: "upfront-regions",
			allow_edit: true,
			init: function () {
				this.stopListening(this.model, 'add', this.render);
				this.listenTo(this.model, 'add', this.on_add);
				this.stopListening(this.model, 'remove', this.render);
				this.listenTo(this.model, 'remove', this.on_remove);
				this.listenTo(this.model, 'reset', this.on_reset);
				//this.listenTo(Upfront.Events, 'command:region:edit_toggle', this.on_edit_toggle);
				//this.listenTo(Upfront.Events, 'command:region:fixed_edit_toggle', this.on_edit_toggle);
				this.listenTo(Upfront.Events, 'entity:region:resize_start', this.pause_edit);
				this.listenTo(Upfront.Events, 'entity:region:resize_stop', this.resume_edit);
				this.listenTo(Upfront.Events, "entity:region:deactivated", this.deactivate_region);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
			},
			render: function () {
				this.$el.html('');
				var me = this;
				if ( typeof this.container_views != 'object' )
					this.container_views = {};
				if ( typeof this.sub_container_views != 'object' )
					this.sub_container_views = {};
				if ( typeof Upfront.data.region_views != 'object' )
					Upfront.data.region_views = {};
				this.model.each(function (region) {
					me.render_container(region);
				});
				this.model.each(function (region, index) {
					me.render_region(region);
				});
				this.apply_adapt_region_to_breakpoints();
			},
			render_container: function (region, index) {
				var container = region.get("container"),
					name = region.get("name");
				if ( region.is_main() || (container == 'lightbox' && !this.container_views[region.cid])) {
					var container_view = this.container_views[region.cid] || this.create_container_instance(region);
					container_view.parent_view = this;
					this.listenTo(container_view, "activate_region", this.activate_region_container);
					if ( index >= 0 ){
						this.$el.find('.upfront-region').eq(index).closest('.upfront-region-container').before(container_view.el);
					}
					else {
						this.$el.append(container_view.el);
					}
					container_view.render();
					if ( !this.container_views[region.cid] ){
						this.container_views[region.cid] = container_view;
					}
					else {
						container_view.delegateEvents();
					}
					Upfront.Events.trigger("entity:regions:render_container", container_view, container_view.model);
					return container_view;
				}
			},
			render_region: function (region, sub) {
				var local_view = Upfront.data.region_views[region.cid] || this.create_region_instance(region),
					container_view = this.get_container_view(region),
					sub = sub ? sub : region.get('sub'),
					sub_container_view
				;
				if ( !container_view ) return;

				if ( sub == 'top' || sub == 'bottom' ){
					sub_container_view = this.sub_container_views[region.cid] || new RegionSubContainer({"model": region});
					if ( sub == 'top' ) {
						container_view.$layout.before(sub_container_view.el);
					}
					else {
						container_view.$layout.after(sub_container_view.el);
					}
					sub_container_view.parent_view = this;
					sub_container_view.listenTo(container_view.model.get('properties'), 'change', sub_container_view.update);
					sub_container_view.render();
					local_view.sub_container_view = sub_container_view;
					sub_container_view.$layout.append(local_view.el);
					if ( !this.sub_container_views[region.cid] ){
						this.sub_container_views[region.cid] = sub_container_view;
					}
					else {
						sub_container_view.delegateEvents();
					}
				}
				else if ( sub == 'left' ) {
					container_view.$layout.prepend(local_view.el);
				}
				else if ( sub == 'fixed' ) {
					container_view.$el.append(local_view.el);
				}
				else {
					container_view.$layout.append(local_view.el);
				}

				if ( !Upfront.data.region_views[region.cid] ){
					local_view.parent_view = this;
					container_view.listenTo(local_view, "region_render", container_view.on_region_render);
					container_view.listenTo(local_view, "region_update", container_view.on_region_update);
					container_view.listenTo(local_view, "region_changed", container_view.on_region_changed);
/*
					local_view.bind("region_render", container_view.on_region_render, container_view);
					local_view.bind("region_update", container_view.on_region_update, container_view);
					local_view.bind("region_changed", container_view.on_region_changed, container_view);
					*/
					if ( region.is_main() )
						//container_view.bind("region_resize", local_view.region_resize, local_view);
						local_view.listenTo(container_view, 'region_resize', local_view.region_resize);
					else
						container_view.add_sub_model(region);
					local_view.render();
					//local_view.bind("activate_region", this.activate_region, this);
					this.listenTo(local_view, 'activate_region', this.activate_region);
					Upfront.data.region_views[region.cid] = local_view;
				}
				else {
					local_view.render();
					local_view.delegateEvents();
				}
				if ( region.get("default") ) {
					local_view.trigger("activate_region", local_view);
				}
				Upfront.Events.trigger("entity:regions:render_region", local_view, local_view.model);
				return local_view;
			},
			create_container_instance: function (model) {
				return new RegionContainer({"model": model});
			},
			create_region_instance: function (model) {
				var type = model.get('type');
				if ( type == 'fixed' )
					return new RegionFixed({"model": model});
				else if ( type == 'lightbox')
					return new RegionLightbox({"model": model});
				else
					return new Region({"model": model});
			},
			get_container_view: function (region) {
				return _.find(this.container_views, function (container) {
					var name = container.model.get("container") || container.model.get("name");
					if ( region.get("container") == name || region.get("name") == name )
						return true;
				});
			},
			activate_region: function (region) {
				if ( ! this.allow_edit )
					return;
				var region = region.model ? region : Upfront.data.region_views[region.cid],
					new_active_region = region.model;
				if ( this.model.active_region == new_active_region )
					return;
				this.model.active_region = new_active_region;
				if ( region.$el ){
					$('.upfront-region-active').removeClass('upfront-region-active');
					region.$el.addClass('upfront-region-active');
					var container = this.get_container_view(region.model);
					if ( container ){
						$('.upfront-region-container-active').removeClass('upfront-region-container-active');
						container.$el.addClass('upfront-region-container-active');
					}
					$('.upfront-region-sub-container-active').removeClass('upfront-region-sub-container-active');
					if ( region.sub_container_view ){
						region.sub_container_view.$el.addClass('upfront-region-sub-container-active');
					}
					Upfront.Events.trigger("entity:region:activated", region);
				}
			},
			deactivate_region: function () {
				if ( ! this.allow_edit || ! this.model.active_region )
					return;
				$('.upfront-region-active').removeClass('upfront-region-active');
				$('.upfront-region-container-active').removeClass('upfront-region-container-active');
				this.model.active_region = null;
			},
			activate_region_container: function (container) {
				var region_view = Upfront.data.region_views[container.model.cid];
				if ( region_view )
					region_view.trigger("activate_region", region_view);
			},
			pause_edit: function () {
				this.allow_edit = false;
			},
			resume_edit: function () {
				this.allow_edit = true;
			},
			on_edit_toggle: function (edit) {
				this.allow_edit = edit;
			},
			on_add: function (model, collection, options) {
				var container_view = this.get_container_view(model),
					index = typeof options.index != 'undefined' ? options.index : -1,
					sub = options.sub ? options.sub : false,
					region_view;
				if ( ! container_view ){
					this.render_container(model, index);
					region_view  = this.render_region(model);
				}
				else {
					region_view = this.render_region(model, sub);
				}
				this.apply_adapt_region_to_breakpoints();

				Upfront.Events.trigger("entity:region:added", region_view, region_view.model);
			},
			on_remove: function (model) {
				var view = Upfront.data.region_views[model.cid];
				if ( !view )
					return;
				var container_view = this.get_container_view(model),
					sub_container_view = this.sub_container_views[model.cid];
				delete Upfront.data.region_views[model.cid];
				if ( view.region_panels ){
					view.region_panels.unbind();
					view.region_panels.remove();
				}
				if ( view.bg_setting ){
					view.bg_setting.unbind();
					view.bg_setting.remove();
				}
				if ( view.edit_position ){
					view.edit_position.unbind();
					view.edit_position.remove();
				}
				view.unbind();
				view.remove();
				if ( container_view){
					if ( container_view.sub_model.length > 0 ) {
						var main_view = Upfront.data.region_views[container_view.model.cid];
						_.each(container_view.sub_model, function(sub, i){
							if ( sub == model ){
								container_view.sub_model.splice(i, 1);
							}
							else {
								var sub_view = Upfront.data.region_views[sub.cid];
								if ( sub_view ) sub_view.update();
							}
						});
						if ( main_view ) main_view.update();
					}
					if ( container_view.sub_model.length == 0 ){
						delete this.container_views[container_view.model.cid];
						if ( container_view.region_fixed_panels ){
							container_view.region_fixed_panels.unbind();
							container_view.region_fixed_panels.remove();
						}
						container_view.unbind();
						container_view.remove();
					}
				}
				if ( sub_container_view ){
					delete this.sub_container_views[model.cid];
					sub_container_view.unbind();
					sub_container_view.remove();
				}
				Upfront.Events.trigger("entity:region:removed", view, model);
			},
			on_reset: function (collection, options) {
				var me = this;
				// Properly remove old views
				if (options.previousModels) {
					_.each(options.previousModels, function(model){
						me.on_remove(model);
					});
				}
			},
			apply_adapt_region_to_breakpoints: function () {
				var current_breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
				if ( current_breakpoint && !current_breakpoint.default )
					return;
				var me = this,
					ed = Upfront.Behaviors.GridEditor,
					breakpoints = Upfront.Views.breakpoints_storage.get_breakpoints().get_enabled();
				_.each(breakpoints, function(each){
					var breakpoint = each.toJSON();
					if ( breakpoint.default )
						return;
					ed.adapt_region_to_breakpoint(me.model, breakpoint.id, breakpoint.columns, true);
				});
			},
			on_change_breakpoint: function (breakpoint) {

			},
			remove: function(){
				var me = this;
				this.model.each(function(model){
					me.on_remove(model);
				});
				Backbone.View.prototype.remove.call(this);
				// Remove container views
				_.each(this.container_views, function(view, index){
					view.remove();
					delete me.container_views[index];
				});
				this.container_views = null;
				// Remove sub container views
				_.each(this.sub_container_views, function(view, index){
					view.remove();
					delete me.sub_container_views[index];
				});
				this.sub_container_views = null;
				this.model.reset([], {silent:true});
				this.model = false;
				this.options = false;
			}
		}),

		Wrapper = _Upfront_SingularEditor.extend({
			events: {
				"mouseup": "on_mouse_up",
				"click > .upfront-wrapper-meta > .upfront-add-spacer": "on_add_spacer"
			},
			attributes: function(){
				var cls = "upfront-wrapper",
					model_cls = this.model.get_property_value_by_name('class');
				return {
					"class": cls + " " + model_cls,
					"id": this.model.get_wrapper_id()
				}
			},
			init: function () {
				// this.model.get("properties").bind("change", this.update, this);
				this.listenTo(this.model.get("properties"), 'change', this.update);
				// this.model.bind("remove", this.on_remove, this);
				this.listenTo(this.model, 'remove', this.on_remove);

				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				this.listenTo(Upfront.Events, 'entity:module:update_position', this.on_module_update);
				this.listenTo(Upfront.Events, 'entity:modules:render_module', this.on_module_update);
				this.listenTo(Upfront.Events, 'layout:after_render', this.on_layout_after_render);

				// this one to do fix the wrapper visibility for elements inside a lightbox
				this.listenTo(Upfront.Events, 'upfront:lightbox:show', this.on_lightbox_show);
			},
			render: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					template = _.template(_Upfront_Templates["wrapper"])
				;
				Upfront.Events.trigger('entity:wrapper:before_render', this, this.model);
				this.$el.html(template);
				if ( breakpoint && !breakpoint.default ) {
					this.update_position();
				}
				Upfront.Events.trigger('entity:wrapper:after_render', this, this.model);
			},
			update: function (prop, options) {
				if ( prop.id == 'class' ){
					this.$el.attr('class', this.attributes().class);
				}
				else if ( prop.id == 'breakpoint' ){
					this.update_position();
				}
			},
			update_position: function () {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
				if ( ! breakpoint )
					return;
				var grid = Upfront.Settings.LayoutEditor.Grid,
					data = this.model.get_property_value_by_name('breakpoint'),
					breakpoint_data = data[breakpoint.id],
					parent_width = this.$el.parent().width(),
					parent_col = Math.round(parent_width/grid.column_width)
				;
				this.$el.css({
					minHeight: '',
					marginRight: 0
				});
				if ( breakpoint_data && typeof breakpoint_data.col == 'number' ){
					this.$el.css('width', (breakpoint_data.col/parent_col*100) + '%');
					this.$el.data('breakpoint_col', breakpoint_data.col);
				}
				else {
					this.$el.css('width', '');
					this.$el.removeData('breakpoint_col');
				}
				if ( breakpoint_data && typeof breakpoint_data.order == 'number' ){
					this.$el.css('order', breakpoint_data.order);
					this.$el.data('breakpoint_order', breakpoint_data.order);
				}
				else {
					this.$el.css('order', '');
					this.$el.removeData('breakpoint_order');
				}
				if ( breakpoint_data && breakpoint_data.clear ) {
					this.$el.data('breakpoint_clear', breakpoint_data.clear);
				}
				else {
					this.$el.removeData('breakpoint_clear');
				}
				Upfront.Events.trigger('entity:wrapper:update_position', this, this.model);
			},
			on_add_spacer: function (e) {
				var $target = $(e.target),
					position = $target.attr('data-position');
				e.preventDefault();
				this.add_spacer(position);
			},
			add_spacer: function (position, spacer_col, current_col) {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					ed = Upfront.Behaviors.GridEditor,
					col_class = Upfront.Settings.LayoutEditor.Grid.class,
					spacer_col = spacer_col > 0 ? spacer_col : 1,
					current_col = _.isNumber(current_col) && current_col > spacer_col
						? current_col
						: Upfront.Util.width_to_col(this.$el.width()),
					min_col = this._find_child_min_col(),
					new_col = current_col-spacer_col,
					$rsz_wrapper = ( new_col >= min_col ? this.$el : ( this._find_closest_wrapper(position == 'left', spacer_col) ) )
				;
				if ( !$rsz_wrapper.length ) return;
				if ( new_col < min_col ) {
					current_col = Upfront.Util.width_to_col($rsz_wrapper.width());
					new_col = current_col-spacer_col;
				}
				var rsz_model = this.model.collection.get_by_wrapper_id($rsz_wrapper.attr('id')),
					model_cls = this.model.get_property_value_by_name('class'),
					is_clr = ( breakpoint && !breakpoint.default ? this.model.get_breakpoint_property_value('clear') : model_cls.match(/clr/) ),
					object = new Upfront.Models.UspacerModel({
						"name": "",
						"properties": []
					}),
					wrapper_id = Upfront.Util.get_unique_id("wrapper"),
					module = new Upfront.Models.Module({
						"name": "",
						"properties": [
							{"name": "element_id", "value": Upfront.Util.get_unique_id("module")},
							{"name": "wrapper_id", "value": wrapper_id},
							{"name": "class", "value": col_class+spacer_col + " upfront-module-spacer"},
							{"name": "has_settings", "value": 0},
							{"name": "default_hide", "value": 1},
							{"name": "toggle_hide", "value": 0},
							{"name": "hide", "value": ( breakpoint && !breakpoint.default ? 1 : 0 )}
						],
						"objects": [
							object
						]
					}),
					wrapper = new Upfront.Models.Wrapper({
						"name": "",
						"properties": [
							{"name": "wrapper_id", "value": wrapper_id},
							{"name": "class", "value": col_class+spacer_col + ( is_clr && position == 'left' ? ' clr' : '' )}
						]
					}),
					$child = this.$el.find("> .upfront-module-view > .upfront-module, > .upfront-module-group"),
					$target_child = ( position == 'right' ? $child.last() : $child.first() ),
					target_model = ed.get_el_model($target_child),
					index = target_model.collection.indexOf(target_model)
				;

				if ( !rsz_model ) return;

				// Change the columns of current/closest wrapper and the containing models
				$rsz_wrapper.find("> .upfront-module-view > .upfront-module, > .upfront-module-group").each(function () {
					var child = ed.get_el_model($(this));
					if ( breakpoint && !breakpoint.default ) {
						child.set_breakpoint_property('edited', true, true);
						child.set_breakpoint_property('col', new_col);
					}
					else {
						child.replace_class(col_class+new_col);
					}
				});
				if ( is_clr && position == 'left' ) {
					if ( breakpoint && !breakpoint.default ) {
						this.model.set_breakpoint_property('clear', false);
					}
					else {
						this.model.remove_class('clr');
					}
				}
				if ( breakpoint && !breakpoint.default ) {
					rsz_model.set_breakpoint_property('edited', true, true);
					rsz_model.set_breakpoint_property('col', new_col);
				}
				else {
					rsz_model.replace_class(col_class+new_col);
				}

				// Add the spacer element
				if ( breakpoint && !breakpoint.default ) {
					wrapper.set_breakpoint_property('edited', true, true);
					wrapper.set_breakpoint_property('clear', ( is_clr && position == 'left' ), true);
					wrapper.set_breakpoint_property('order', this.model.get_breakpoint_property_value('order'));
					module.set_breakpoint_property('edited', true, true);
					module.set_breakpoint_property('hide', 0, true);
					module.set_breakpoint_property('left', 0, true);
					module.set_breakpoint_property('col', spacer_col);
				}
				this.model.collection.add(wrapper);
				module.add_to(target_model.collection, ( position == 'right' ? index+1 : index ));
			},
			_find_closest_wrapper: function (reverse, min_col) {
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					$wrappers = this.$el.parent()
						.children('.upfront-wrapper:visible')
						.filter(function(){
							return ( $(this).height() > 0 )
						})
						.each(Upfront.Util.normalize_sort_elements_cb)
						.sort(Upfront.Util.sort_elements_cb),
					index = $wrappers.index(this.$el),
					is_clr = function ($each) {
						return ( !breakpoint || breakpoint.default ? $each.hasClass('clr') : $each.data('breakpoint_clear') )
					},
					find_cb = function ($each) {
						return ( Upfront.Util.width_to_col($each.width()) > min_col )
					},
					$start = is_clr(this.$el) ? this.$el : Upfront.Util.find_from_elements($wrappers, this.$el, is_clr, true),
					$nexts = Upfront.Util.find_from_elements($wrappers, $start, '.upfront-wrapper', false, is_clr),
					$all = $( _.union( [$start.get(0)], $nexts.map(function(){ return this; }).get() ) ),
					find_1 = Upfront.Util.find_from_elements($all, this.$el, find_cb, reverse),
					find_2 = ( !find_1.length ? Upfront.Util.find_from_elements($all, this.$el, find_cb, !reverse) : find_1 )
				;
				return find_2.first();
			},
			_find_child_min_col: function () {
				var ed = Upfront.Behaviors.GridEditor,
					min_col = 1
				;
				this.parent_view.model.each(function(module){
					if ( !module.get('modules') ) return; // Not group, no min_col change
					var module_view = Upfront.data.module_views[module.cid],
						mod_min_col = module_view ? ed.get_group_min_col(module_view) : 1
					;
					min_col = Math.max(min_col, mod_min_col);
				});
				return min_col;
			},
			toggle_wrapper_visibility: function () {
				var visible = ( parseInt(this.$el.css('height'), 10) > 0 );
				if ( !visible && this.$el.css('display') != 'none' ) {
					this.$el.css('display', 'none');
				}
				else if ( visible ) {
					this.$el.css('display', '');
				}
			},
			on_change_breakpoint: function () {
				this.$el.css({
					display: ''
				});
				this.update_position();
			},
			on_module_update: function (from_view) {
				if ( !from_view.wrapper_view || from_view.wrapper_view != this ) return;
				if ( from_view instanceof Upfront.Views.ModuleGroup ) return;
				this.toggle_wrapper_visibility();
			},
			on_layout_after_render: function () {
				if ( this.$el.find('> .upfront-module-group').length > 0 ) return; // Don't update for group
				this.toggle_wrapper_visibility();
			},
			on_lightbox_show: function () {
				if ( this.$el.find('> .upfront-module-group').length > 0 ) return; // Don't update for group
				this.toggle_wrapper_visibility();
			},
			on_remove: function () {
				this.unbind();
				this.remove();
			}
		}),

		Layout = _Upfront_SingularEditor.extend({
			tpl: _.template(_Upfront_Templates.layout),
			events: {
				"click": "on_click"
			},
			initialize: function (opts) {
				this._has_ruler = false;
				this.listenTo(this.model.get("properties"), 'change', this.update);
				this.listenTo(this.model.get("properties"), 'add', this.update);
				this.listenTo(this.model.get("properties"), 'remove', this.update);
				this.listenTo(Upfront.Events, "command:layout:edit_background", this.open_edit_background);
				this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.on_change_breakpoint);
				this.listenTo(Upfront.Events, "application:mode:after_switch", this.on_mode_switch);
				$(window).on('resize.upfront_layout', this, this.on_window_resize);
				$(window).on('scroll.upfront_layout', this, this.on_window_scroll);
				$(window).on('keydown.upfront_layout', this, this.on_keydown);
				this.render();
			},
			update: function () {
				this.update_background();
			},
			render: function () {
				this.$el.addClass('upfront-layout-view');
				this.$el.html(this.tpl(this.model.toJSON()));
				this.$layout = this.$(".upfront-layout");
				this.remove_selections();

				if (!this.local_view) {
					this.local_view = new Regions({"model": this.model.get("regions")});
					this.$layout.append(this.local_view.el);
					this.local_view.render();
				}
				else {
					this.$layout.append(this.local_view.el);
					this.local_view.render();
					this.local_view.delegateEvents();
				}

				this.update();

				this.bg_setting = new Upfront.Views.Editor.ModalBgSetting({model: this.model, to: this.$el, width: 420});
				this.bg_setting.render();
				this.$el.append(this.bg_setting.el);

				this.fix_height();

				// Use flexbox when we can
				if ( Upfront.Util.css_support('flex') )
					$('html').addClass('flexbox-support');

				Upfront.Events.trigger("layout:after_render");
			},
			on_click: function (e) {
				//Check we are not selecting text
				//var selection = document.getSelection ? document.getSelection() : document.selection;
				//if(selection && selection.type == 'Range')
				//	return;
				var currentEntity = Upfront.data.currentEntity;
				// Deactivate settings on clicking anywhere in layout, but the settings button
				if(!$(e.target).closest('.upfront-entity_meta').length && !$(e.target).closest('#upfront-csseditor').length){
					Upfront.Events.trigger("entity:settings:deactivate");
				}
				Upfront.Events.trigger("entity:contextmenu:deactivate");
				if(currentEntity){
					//If the click has been made outside the currentEntity, deactivate it
					if(!$(e.target).closest(currentEntity.el).length){
						currentEntity.trigger('deactivated', e);
						currentEntity.$el.removeClass("upfront-active_entity");
						Upfront.Events.trigger("entity:deactivated", e);
						Upfront.data.currentEntity = false;
					}
				}
				// Deactivate if clicked on blank area of region
				if($(e.target).hasClass('upfront-editable_entities_container')){
					Upfront.Events.trigger("entity:deactivated");
				}

				// Close region editing on click anywhere out the region
				if ( $(e.target).hasClass('upfront-region-editing-overlay') && !$('.upfront-region-bg-setting-open').length ){
					Upfront.Events.trigger("entity:region:deactivated");
				}
				this.remove_selections();
				// Deactiving group reorder on clicking anywhere
				if ( !$(e.target).closest('.upfront-module-group-on-edit').length ){
					Upfront.Events.trigger("command:module_group:finish_edit");
				}
				// Close group inline panel on clicking anywhere
				if ( !$(e.target).closest('.upfront-module-group.controls-visible').length ){
					Upfront.Events.trigger("command:module_group:close_panel");
				}
			},
			on_keydown: function (e) {
				var currentEntity = Upfront.data.currentEntity;

				if (
					typeof currentEntity === 'undefined' ||
					!currentEntity ||
					!currentEntity instanceof ObjectView ||
					currentEntity.$el.find( '.redactor-box' ).length > 0 ||
					!currentEntity.paddingControl
				) {
					return;
				}

				if (e.keyCode === 38 || e.keyCode === 40) {
					e.preventDefault();
					e.stopPropagation();

					switch (e.keyCode) {
						case 38:
							currentEntity.paddingControl.on_up_arrow_click();
							break;
						case 40:
							currentEntity.paddingControl.on_down_arrow_click();
							break;
					}
				}
			},
			on_mode_switch: function () {
				if ( Upfront.Application.get_current() !== Upfront.Settings.Application.MODE.RESPONSIVE )
					this.remove_ruler();
				else
					this.render_ruler(true);
			},
			on_change_breakpoint: function (breakpoint) {
				var grid = Upfront.Settings.LayoutEditor.Grid;
				Upfront.Settings.LayoutEditor.CurrentBreakpoint = breakpoint;
				grid.size = breakpoint.columns;
				if ( breakpoint.default ){
					this.$layout.css('width', '');
					this.render_ruler(true);
					this.remove_gutter();
					Upfront.Behaviors.LayoutEditor.enable_mergeable();
				}
				else {
					this.$layout.width(breakpoint.width);
					this.render_ruler(false, breakpoint.width);
					this.render_gutter(breakpoint.width);
					Upfront.Behaviors.LayoutEditor.disable_mergeable();
				}
				this.update_grid_css();
			},
			render_gutter: function (width) {
				var $gutter = this.$el.find('.upfront-layout-gutter');
				if ( ! $gutter.length ){
					$gutter = $('<div class="upfront-layout-gutter"><div class="upfront-layout-gutter-left"></div><div class="upfront-layout-gutter-right"></div></div>');
					this.$el.prepend($gutter);
				}
				$gutter.find('.upfront-layout-gutter-left').css('margin-right', Math.ceil(width/2));
				$gutter.find('.upfront-layout-gutter-right').css('margin-left', Math.ceil(width/2));
			},
			remove_gutter: function () {
				this.$el.find('.upfront-layout-gutter').remove();
			},
			render_ruler: function (follow_grid, width) {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					width = follow_grid ? grid.size*grid.column_width : width,
					$ruler_container = this.$el.find('.upfront-ruler-container'),
					$ruler = $ruler_container.find('.upfront-ruler'),
					create_mark = function (at, size, show_num) {
						return '<div class="upfront-ruler-mark" style="width:' + size + 'px;">' +
									( show_num ? '<div class="upfront-ruler-mark-num">' +  at + '</div>' : '' ) +
								'</div>';
					},
					mark;
				if ( !$ruler_container.length ) {
					$ruler_container = $('<div class="upfront-ruler-container"></div>');
					$ruler = $('<div class="upfront-ruler upfront-ui"></div>');
					this.$el.prepend($ruler_container);
					$ruler_container.prepend($ruler);
				}
				$ruler.empty();
				$ruler.css('width', width);
				for ( mark = 0; mark < width; mark+=100 ){
					$ruler.append( create_mark(mark, 100, (mark+40 > width ? false : true)) );
				}
				if ( width > (mark-100) )
					$ruler.append( create_mark(width, width-(mark-100), true) );
				this._has_ruler = true;
			},
			remove_ruler: function () {
				this.$el.find('.upfront-ruler-container').remove();
				this._has_ruler = false;
			},
			update_ruler: function () {
				if ( !this._has_ruler )
					return;
				var scroll_top = $(window).scrollTop(),
					$ruler_container = this.$el.find('.upfront-ruler-container'),
					ruler_position = $ruler_container.css('position');
				if ( scroll_top > 0 && ruler_position != 'fixed' ){
					var offset = this.$el.offset(),
						ruler_container_off = $ruler_container.offset();
					$ruler_container.css({
						position: 'fixed',
						top: offset.top,
						left: ruler_container_off.left,
						right: 0,
						width: 'auto'
					});
				}
				else if ( scroll_top <= 0 && ruler_position == 'fixed' ) {
					$ruler_container.css({
						position: '',
						top: '',
						left: '',
						right: '',
						width: ''
					});
				}
			},
			on_window_scroll: function (e) {
				var me = e.data;
				me.update_ruler();
			},
			update_grid_css: function () {
				var grid = Upfront.Settings.LayoutEditor.Grid,
					styles = [],
					selector = '#page.upfront-layout-view';
				styles.push(selector + ' .upfront-grid-layout { width: ' + grid.column_width*grid.size + 'px; }');
				styles.push(selector + ' .upfront-object { padding: ' + grid.column_padding + 'px; }');
				styles.push(selector + ' .upfront-overlay-grid {background-size: 100% ' + grid.baseline + 'px; }');
				styles.push(selector + ' .plaintxt_padding {padding: ' + grid.type_padding + 'px; }');
				styles.push(selector + ' .upfront-inserted_image-wrapper .wp-caption-text, ' + selector + ' .uinsert-image-wrapper { padding: ' + grid.column_padding + 'px; }');
				styles.push(selector + ' .upfront-module-group-bg-padding { margin: ' + grid.column_padding + 'px; }');

				if ( $('#upfront-grid-style-inline').length )
					$('#upfront-grid-style-inline').html( styles.join("\n") );
				else
					$('body').append('<style id="upfront-grid-style-inline">' + styles.join("\n") + '</style>');
			},
			remove: function(){
				if(this.local_view)
					this.local_view.remove();
				this.local_view = null;
				$(window).off('resize.upfront_layout');
				$(window).off('scroll.upfront_layout');
				if (this.bg_setting)
					this.bg_setting.remove();
				this.bg_setting = null;

				Backbone.View.prototype.remove.call(this);
				this.model = false;
				this.options = false;
			},
			open_edit_background: function () {
				this.bg_setting.open().always(function(){

				});
			},
			fix_height: function () {
				this.$('.upfront-layout').css('min-height', $(window).height());
			},
			remove_selections: function () {
				// Unselect selection
				if ( !Upfront.Behaviors.LayoutEditor.selecting ){
					Upfront.Events.trigger("command:selection:remove");
				}
			}
		})
	;

	return {
		"Views": {
			"ObjectView": ObjectView,
			"Module": Module,
			"ModuleGroup": ModuleGroup,
			"Wrapper": Wrapper,
			"Layout": Layout,
			"ContextMenu": ContextMenu,
			"ContextMenuList": ContextMenuList,
			"ContextMenuItem": ContextMenuItem,
			"RegionView": Region,
			"RegionLightboxView": RegionLightbox,
			"RegionContainerView": RegionContainer,
			"RegionsView": Regions
		},
		"Mixins": {
			"FixedObject": FixedObject_Mixin,
			"FixedObjectInAnonymousModule": FixedObjectInAnonymousModule_Mixin,
			Anchorable: Anchorable_Mixin,
		}
	};
});

})(jQuery);
//@ sourceURL=upfront-views.js
;
/* Chosen v1.1.0 | (c) 2011-2013 by Harvest | MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md */
!function(){var a,AbstractChosen,Chosen,SelectParser,b,c={}.hasOwnProperty,d=function(a,b){function d(){this.constructor=a}for(var e in b)c.call(b,e)&&(a[e]=b[e]);return d.prototype=b.prototype,a.prototype=new d,a.__super__=b.prototype,a};SelectParser=function(){function SelectParser(){this.options_index=0,this.parsed=[]}return SelectParser.prototype.add_node=function(a){return"OPTGROUP"===a.nodeName.toUpperCase()?this.add_group(a):this.add_option(a)},SelectParser.prototype.add_group=function(a){var b,c,d,e,f,g;for(b=this.parsed.length,this.parsed.push({array_index:b,group:!0,label:this.escapeExpression(a.label),children:0,disabled:a.disabled}),f=a.childNodes,g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(this.add_option(c,b,a.disabled));return g},SelectParser.prototype.add_option=function(a,b,c){return"OPTION"===a.nodeName.toUpperCase()?(""!==a.text?(null!=b&&(this.parsed[b].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:a.value,text:a.text,html:a.innerHTML,selected:a.selected,disabled:c===!0?c:a.disabled,group_array_index:b,classes:a.className,style:a.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1):void 0},SelectParser.prototype.escapeExpression=function(a){var b,c;return null==a||a===!1?"":/[\&\<\>\"\'\`]/.test(a)?(b={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},c=/&(?!\w+;)|[\<\>\"\'\`]/g,a.replace(c,function(a){return b[a]||"&amp;"})):a},SelectParser}(),SelectParser.select_to_array=function(a){var b,c,d,e,f;for(c=new SelectParser,f=a.childNodes,d=0,e=f.length;e>d;d++)b=f[d],c.add_node(b);return c.parsed},AbstractChosen=function(){function AbstractChosen(a,b){this.form_field=a,this.options=null!=b?b:{},AbstractChosen.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers())}return AbstractChosen.prototype.set_default_values=function(){var a=this;return this.click_test_action=function(b){return a.test_active_click(b)},this.activate_action=function(b){return a.activate_field(b)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text?this.options.allow_single_deselect:!1,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null!=this.options.enable_split_word_search?this.options.enable_split_word_search:!0,this.group_search=null!=this.options.group_search?this.options.group_search:!0,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=null!=this.options.single_backstroke_delete?this.options.single_backstroke_delete:!0,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1,this.display_selected_options=null!=this.options.display_selected_options?this.options.display_selected_options:!0,this.display_disabled_options=null!=this.options.display_disabled_options?this.options.display_disabled_options:!0},AbstractChosen.prototype.set_default_text=function(){return this.default_text=this.form_field.getAttribute("data-placeholder")?this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.options.placeholder_text_multiple||this.options.placeholder_text||AbstractChosen.default_multiple_text:this.options.placeholder_text_single||this.options.placeholder_text||AbstractChosen.default_single_text,this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||AbstractChosen.default_no_result_text},AbstractChosen.prototype.mouse_enter=function(){return this.mouse_on_container=!0},AbstractChosen.prototype.mouse_leave=function(){return this.mouse_on_container=!1},AbstractChosen.prototype.input_focus=function(){var a=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return a.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},AbstractChosen.prototype.input_blur=function(){var a=this;return this.mouse_on_container?void 0:(this.active_field=!1,setTimeout(function(){return a.blur_test()},100))},AbstractChosen.prototype.results_option_build=function(a){var b,c,d,e,f;for(b="",f=this.results_data,d=0,e=f.length;e>d;d++)c=f[d],b+=c.group?this.result_add_group(c):this.result_add_option(c),(null!=a?a.first:void 0)&&(c.selected&&this.is_multiple?this.choice_build(c):c.selected&&!this.is_multiple&&this.single_set_selected_text(c.text));return b},AbstractChosen.prototype.result_add_option=function(a){var b,c;return a.search_match?this.include_option_in_results(a)?(b=[],a.disabled||a.selected&&this.is_multiple||b.push("active-result"),!a.disabled||a.selected&&this.is_multiple||b.push("disabled-result"),a.selected&&b.push("result-selected"),null!=a.group_array_index&&b.push("group-option"),""!==a.classes&&b.push(a.classes),c=document.createElement("li"),c.className=b.join(" "),c.style.cssText=a.style,c.setAttribute("data-option-array-index",a.array_index),c.innerHTML=a.search_text,this.outerHTML(c)):"":""},AbstractChosen.prototype.result_add_group=function(a){var b;return a.search_match||a.group_match?a.active_options>0?(b=document.createElement("li"),b.className="group-result",b.innerHTML=a.search_text,this.outerHTML(b)):"":""},AbstractChosen.prototype.results_update_field=function(){return this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.results_build(),this.results_showing?this.winnow_results():void 0},AbstractChosen.prototype.reset_single_select_options=function(){var a,b,c,d,e;for(d=this.results_data,e=[],b=0,c=d.length;c>b;b++)a=d[b],a.selected?e.push(a.selected=!1):e.push(void 0);return e},AbstractChosen.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},AbstractChosen.prototype.results_search=function(){return this.results_showing?this.winnow_results():this.results_show()},AbstractChosen.prototype.winnow_results=function(){var a,b,c,d,e,f,g,h,i,j,k,l,m;for(this.no_results_clear(),e=0,g=this.get_search_text(),a=g.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),d=this.search_contains?"":"^",c=new RegExp(d+a,"i"),j=new RegExp(a,"i"),m=this.results_data,k=0,l=m.length;l>k;k++)b=m[k],b.search_match=!1,f=null,this.include_option_in_results(b)&&(b.group&&(b.group_match=!1,b.active_options=0),null!=b.group_array_index&&this.results_data[b.group_array_index]&&(f=this.results_data[b.group_array_index],0===f.active_options&&f.search_match&&(e+=1),f.active_options+=1),(!b.group||this.group_search)&&(b.search_text=b.group?b.label:b.html,b.search_match=this.search_string_match(b.search_text,c),b.search_match&&!b.group&&(e+=1),b.search_match?(g.length&&(h=b.search_text.search(j),i=b.search_text.substr(0,h+g.length)+"</em>"+b.search_text.substr(h+g.length),b.search_text=i.substr(0,h)+"<em>"+i.substr(h)),null!=f&&(f.group_match=!0)):null!=b.group_array_index&&this.results_data[b.group_array_index].search_match&&(b.search_match=!0)));return this.result_clear_highlight(),1>e&&g.length?(this.update_results_content(""),this.no_results(g)):(this.update_results_content(this.results_option_build()),this.winnow_results_set_highlight())},AbstractChosen.prototype.search_string_match=function(a,b){var c,d,e,f;if(b.test(a))return!0;if(this.enable_split_word_search&&(a.indexOf(" ")>=0||0===a.indexOf("["))&&(d=a.replace(/\[|\]/g,"").split(" "),d.length))for(e=0,f=d.length;f>e;e++)if(c=d[e],b.test(c))return!0},AbstractChosen.prototype.choices_count=function(){var a,b,c,d;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,d=this.form_field.options,b=0,c=d.length;c>b;b++)a=d[b],a.selected&&(this.selected_option_count+=1);return this.selected_option_count},AbstractChosen.prototype.choices_click=function(a){return a.preventDefault(),this.results_showing||this.is_disabled?void 0:this.results_show()},AbstractChosen.prototype.keyup_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),b){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:if(a.preventDefault(),this.results_showing)return this.result_select(a);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},AbstractChosen.prototype.clipboard_event_checker=function(){var a=this;return setTimeout(function(){return a.results_search()},50)},AbstractChosen.prototype.container_width=function(){return null!=this.options.width?this.options.width:""+this.form_field.offsetWidth+"px"},AbstractChosen.prototype.include_option_in_results=function(a){return this.is_multiple&&!this.display_selected_options&&a.selected?!1:!this.display_disabled_options&&a.disabled?!1:a.empty?!1:!0},AbstractChosen.prototype.search_results_touchstart=function(a){return this.touch_started=!0,this.search_results_mouseover(a)},AbstractChosen.prototype.search_results_touchmove=function(a){return this.touch_started=!1,this.search_results_mouseout(a)},AbstractChosen.prototype.search_results_touchend=function(a){return this.touch_started?this.search_results_mouseup(a):void 0},AbstractChosen.prototype.outerHTML=function(a){var b;return a.outerHTML?a.outerHTML:(b=document.createElement("div"),b.appendChild(a),b.innerHTML)},AbstractChosen.browser_is_supported=function(){return"Microsoft Internet Explorer"===window.navigator.appName?document.documentMode>=8:/iP(od|hone)/i.test(window.navigator.userAgent)?!1:/Android/i.test(window.navigator.userAgent)&&/Mobile/i.test(window.navigator.userAgent)?!1:!0},AbstractChosen.default_multiple_text="Select Some Options",AbstractChosen.default_single_text="Select an Option",AbstractChosen.default_no_result_text="No results match",AbstractChosen}(),a=jQuery,a.fn.extend({chosen:function(b){return AbstractChosen.browser_is_supported()?this.each(function(){var c,d;c=a(this),d=c.data("chosen"),"destroy"===b&&d?d.destroy():d||c.data("chosen",new Chosen(this,b))}):this}}),Chosen=function(c){function Chosen(){return b=Chosen.__super__.constructor.apply(this,arguments)}return d(Chosen,c),Chosen.prototype.setup=function(){return this.form_field_jq=a(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex,this.is_rtl=this.form_field_jq.hasClass("chosen-rtl")},Chosen.prototype.set_up_html=function(){var b,c;return b=["chosen-container"],b.push("chosen-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&b.push(this.form_field.className),this.is_rtl&&b.push("chosen-rtl"),c={"class":b.join(" "),style:"width: "+this.container_width()+";",title:this.form_field.title},this.form_field.id.length&&(c.id=this.form_field.id.replace(/[^\w]/g,"_")+"_chosen"),this.container=a("<div />",c),this.is_multiple?this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><ul class="chosen-results"></ul></div>'):this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><ul class="chosen-results"></ul></div>'),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chosen-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chosen-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chosen-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chosen-search").first(),this.selected_item=this.container.find(".chosen-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior(),this.form_field_jq.trigger("chosen:ready",{chosen:this})},Chosen.prototype.register_observers=function(){var a=this;return this.container.bind("mousedown.chosen",function(b){a.container_mousedown(b)}),this.container.bind("mouseup.chosen",function(b){a.container_mouseup(b)}),this.container.bind("mouseenter.chosen",function(b){a.mouse_enter(b)}),this.container.bind("mouseleave.chosen",function(b){a.mouse_leave(b)}),this.search_results.bind("mouseup.chosen",function(b){a.search_results_mouseup(b)}),this.search_results.bind("mouseover.chosen",function(b){a.search_results_mouseover(b)}),this.search_results.bind("mouseout.chosen",function(b){a.search_results_mouseout(b)}),this.search_results.bind("mousewheel.chosen DOMMouseScroll.chosen",function(b){a.search_results_mousewheel(b)}),this.search_results.bind("touchstart.chosen",function(b){a.search_results_touchstart(b)}),this.search_results.bind("touchmove.chosen",function(b){a.search_results_touchmove(b)}),this.search_results.bind("touchend.chosen",function(b){a.search_results_touchend(b)}),this.form_field_jq.bind("chosen:updated.chosen",function(b){a.results_update_field(b)}),this.form_field_jq.bind("chosen:activate.chosen",function(b){a.activate_field(b)}),this.form_field_jq.bind("chosen:open.chosen",function(b){a.container_mousedown(b)}),this.form_field_jq.bind("chosen:close.chosen",function(b){a.input_blur(b)}),this.search_field.bind("blur.chosen",function(b){a.input_blur(b)}),this.search_field.bind("keyup.chosen",function(b){a.keyup_checker(b)}),this.search_field.bind("keydown.chosen",function(b){a.keydown_checker(b)}),this.search_field.bind("focus.chosen",function(b){a.input_focus(b)}),this.search_field.bind("cut.chosen",function(b){a.clipboard_event_checker(b)}),this.search_field.bind("paste.chosen",function(b){a.clipboard_event_checker(b)}),this.is_multiple?this.search_choices.bind("click.chosen",function(b){a.choices_click(b)}):this.container.bind("click.chosen",function(a){a.preventDefault()})},Chosen.prototype.destroy=function(){return a(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.search_field[0].tabIndex&&(this.form_field_jq[0].tabIndex=this.search_field[0].tabIndex),this.container.remove(),this.form_field_jq.removeData("chosen"),this.form_field_jq.show()},Chosen.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field_jq[0].disabled,this.is_disabled?(this.container.addClass("chosen-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus.chosen",this.activate_action),this.close_field()):(this.container.removeClass("chosen-disabled"),this.search_field[0].disabled=!1,this.is_multiple?void 0:this.selected_item.bind("focus.chosen",this.activate_action))},Chosen.prototype.container_mousedown=function(b){return this.is_disabled||(b&&"mousedown"===b.type&&!this.results_showing&&b.preventDefault(),null!=b&&a(b.target).hasClass("search-choice-close"))?void 0:(this.active_field?this.is_multiple||!b||a(b.target)[0]!==this.selected_item[0]&&!a(b.target).parents("a.chosen-single").length||(b.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),a(this.container[0].ownerDocument).bind("click.chosen",this.click_test_action),this.results_show()),this.activate_field())},Chosen.prototype.container_mouseup=function(a){return"ABBR"!==a.target.nodeName||this.is_disabled?void 0:this.results_reset(a)},Chosen.prototype.search_results_mousewheel=function(a){var b;return a.originalEvent&&(b=-a.originalEvent.wheelDelta||a.originalEvent.detail),null!=b?(a.preventDefault(),"DOMMouseScroll"===a.type&&(b=40*b),this.search_results.scrollTop(b+this.search_results.scrollTop())):void 0},Chosen.prototype.blur_test=function(){return!this.active_field&&this.container.hasClass("chosen-container-active")?this.close_field():void 0},Chosen.prototype.close_field=function(){return a(this.container[0].ownerDocument).unbind("click.chosen",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chosen-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},Chosen.prototype.activate_field=function(){return this.container.addClass("chosen-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},Chosen.prototype.test_active_click=function(b){var c;return c=a(b.target).closest(".chosen-container"),c.length&&this.container[0]===c[0]?this.active_field=!0:this.close_field()},Chosen.prototype.results_build=function(){return this.parsing=!0,this.selected_option_count=null,this.results_data=SelectParser.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.single_set_selected_text(),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chosen-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chosen-container-single-nosearch"))),this.update_results_content(this.results_option_build({first:!0})),this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.parsing=!1},Chosen.prototype.result_do_highlight=function(a){var b,c,d,e,f;if(a.length){if(this.result_clear_highlight(),this.result_highlight=a,this.result_highlight.addClass("highlighted"),d=parseInt(this.search_results.css("maxHeight"),10),f=this.search_results.scrollTop(),e=d+f,c=this.result_highlight.position().top+this.search_results.scrollTop(),b=c+this.result_highlight.outerHeight(),b>=e)return this.search_results.scrollTop(b-d>0?b-d:0);if(f>c)return this.search_results.scrollTop(c)}},Chosen.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},Chosen.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.container.addClass("chosen-with-drop"),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results(),this.form_field_jq.trigger("chosen:showing_dropdown",{chosen:this}))},Chosen.prototype.update_results_content=function(a){return this.search_results.html(a)},Chosen.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chosen-with-drop"),this.form_field_jq.trigger("chosen:hiding_dropdown",{chosen:this})),this.results_showing=!1},Chosen.prototype.set_tab_index=function(){var a;return this.form_field.tabIndex?(a=this.form_field.tabIndex,this.form_field.tabIndex=-1,this.search_field[0].tabIndex=a):void 0},Chosen.prototype.set_label_behavior=function(){var b=this;return this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=a("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0?this.form_field_label.bind("click.chosen",function(a){return b.is_multiple?b.container_mousedown(a):b.activate_field()}):void 0},Chosen.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},Chosen.prototype.search_results_mouseup=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c.length?(this.result_highlight=c,this.result_select(b),this.search_field.focus()):void 0},Chosen.prototype.search_results_mouseover=function(b){var c;return c=a(b.target).hasClass("active-result")?a(b.target):a(b.target).parents(".active-result").first(),c?this.result_do_highlight(c):void 0},Chosen.prototype.search_results_mouseout=function(b){return a(b.target).hasClass("active-result")?this.result_clear_highlight():void 0},Chosen.prototype.choice_build=function(b){var c,d,e=this;return c=a("<li />",{"class":"search-choice"}).html("<span>"+b.html+"</span>"),b.disabled?c.addClass("search-choice-disabled"):(d=a("<a />",{"class":"search-choice-close","data-option-array-index":b.array_index}),d.bind("click.chosen",function(a){return e.choice_destroy_link_click(a)}),c.append(d)),this.search_container.before(c)},Chosen.prototype.choice_destroy_link_click=function(b){return b.preventDefault(),b.stopPropagation(),this.is_disabled?void 0:this.choice_destroy(a(b.target))},Chosen.prototype.choice_destroy=function(a){return this.result_deselect(a[0].getAttribute("data-option-array-index"))?(this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.search_field.val().length<1&&this.results_hide(),a.parents("li").first().remove(),this.search_field_scale()):void 0},Chosen.prototype.results_reset=function(){return this.reset_single_select_options(),this.form_field.options[0].selected=!0,this.single_set_selected_text(),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change"),this.active_field?this.results_hide():void 0},Chosen.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},Chosen.prototype.result_select=function(a){var b,c;return this.result_highlight?(b=this.result_highlight,this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("chosen:maxselected",{chosen:this}),!1):(this.is_multiple?b.removeClass("active-result"):this.reset_single_select_options(),c=this.results_data[b[0].getAttribute("data-option-array-index")],c.selected=!0,this.form_field.options[c.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(c):this.single_set_selected_text(c.text),(a.metaKey||a.ctrlKey)&&this.is_multiple||this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[c.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,this.search_field_scale())):void 0},Chosen.prototype.single_set_selected_text=function(a){return null==a&&(a=this.default_text),a===this.default_text?this.selected_item.addClass("chosen-default"):(this.single_deselect_control_build(),this.selected_item.removeClass("chosen-default")),this.selected_item.find("span").text(a)},Chosen.prototype.result_deselect=function(a){var b;return b=this.results_data[a],this.form_field.options[b.options_index].disabled?!1:(b.selected=!1,this.form_field.options[b.options_index].selected=!1,this.selected_option_count=null,this.result_clear_highlight(),this.results_showing&&this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[b.options_index].value}),this.search_field_scale(),!0)},Chosen.prototype.single_deselect_control_build=function(){return this.allow_single_deselect?(this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chosen-single-with-deselect")):void 0},Chosen.prototype.get_search_text=function(){return this.search_field.val()===this.default_text?"":a("<div/>").text(a.trim(this.search_field.val())).html()},Chosen.prototype.winnow_results_set_highlight=function(){var a,b;return b=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),a=b.length?b.first():this.search_results.find(".active-result").first(),null!=a?this.result_do_highlight(a):void 0},Chosen.prototype.no_results=function(b){var c;return c=a('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>'),c.find("span").first().html(b),this.search_results.append(c),this.form_field_jq.trigger("chosen:no_results",{chosen:this})},Chosen.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},Chosen.prototype.keydown_arrow=function(){var a;return this.results_showing&&this.result_highlight?(a=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(a):void 0:this.results_show()},Chosen.prototype.keyup_arrow=function(){var a;return this.results_showing||this.is_multiple?this.result_highlight?(a=this.result_highlight.prevAll("li.active-result"),a.length?this.result_do_highlight(a.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},Chosen.prototype.keydown_backstroke=function(){var a;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(a=this.search_container.siblings("li.search-choice").last(),a.length&&!a.hasClass("search-choice-disabled")?(this.pending_backstroke=a,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},Chosen.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},Chosen.prototype.keydown_checker=function(a){var b,c;switch(b=null!=(c=a.which)?c:a.keyCode,this.search_field_scale(),8!==b&&this.pending_backstroke&&this.clear_backstroke(),b){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(a),this.mouse_on_container=!1;break;case 13:a.preventDefault();break;case 38:a.preventDefault(),this.keyup_arrow();break;case 40:a.preventDefault(),this.keydown_arrow()}},Chosen.prototype.search_field_scale=function(){var b,c,d,e,f,g,h,i,j;if(this.is_multiple){for(d=0,h=0,f="position:absolute; left: -1000px; top: -1000px; display:none;",g=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"],i=0,j=g.length;j>i;i++)e=g[i],f+=e+":"+this.search_field.css(e)+";";return b=a("<div />",{style:f}),b.text(this.search_field.val()),a("body").append(b),h=b.width()+25,b.remove(),c=this.container.outerWidth(),h>c-10&&(h=c-10),this.search_field.css({width:h+"px"})}},Chosen}(AbstractChosen)}.call(this);
define("chosen", function(){});

(function ($) {
define('scripts/upfront/global-event-handlers',[],function() {

	// Close select dropdown on outside click
	$('body').on('mouseup', function() {
		$('.upfront-field-select').removeClass('upfront-field-select-expanded');
	});


  // Allow focus on click for inputs and textareas - draggable hijacks it
	var nonDraggableSelectors = '#page input[type="text"], #page input[type="email"], #page input[type="password"], #page textarea, #page select, #page .upfront-field-select';
	$('body').on('mouseover', nonDraggableSelectors, function(event) {
		try {
			$(event.target).closest('.ui-draggable').draggable('disable');
		} catch (event) {
			// We don't do anything but have to guard here
		}
	});
	$('body').on('mouseout', nonDraggableSelectors, function(event) {
		try {
			$(event.target).closest('.ui-draggable').draggable('enable');
		} catch (event) {
			// We don't do anything but have to guard here
		}
	});

	/**
	 * Hide color picker when clicked outside of it
	 */
	$(document).on("click", function(e){
		if( $(".sp-container").length === $(".sp-container.sp-hidden").length ) return;

		$(".sp-container").not(".sp-hidden").each(function(){
			var $this = $(this),
				options = $this.data("sp-options");
			if( !options || !options.flat  ){
				var $replacer = $this.parent().find(".sp-replacer");
				$replacer.removeClass("sp-active");
				$this.addClass("sp-hidden");
				setTimeout(function(){
					$replacer.removeClass("sp-active");
					$this.addClass("sp-hidden");
				}, 10);
			}
		});
	});

	/**
	 * re-Resize Magnific Popup on window resize (iPhone issue) 
	 */
	if(/i(Pad|Phone|Pod)/g.test(navigator.userAgent))
		$(window).on("resize", function(e){
			setTimeout(function(){
				$.magnificPopup.instance.updateSize();
			}, 500);
		});

	/**
	 * Handle navigation
	 */
	// Should only run after Upfront instance load
	$(document).one('upfront-load', function () {
		Upfront.Events.once('Upfront:loaded', function(){
			$(document)
				.on('click', 'a', function(e){
					var bypass, href, a, pathname, search;
		
					if(e.isDefaultPrevented()) return;
		
					bypass = $(e.currentTarget).data('bypass');
					if(bypass) return;
		
					a = e.target;
					pathname = a.pathname;
					href = a.getAttribute('href');
					search = a.search;
		
					if(href == '#' || a.origin != window.location.origin ||
						(pathname == window.location.pathname && search == window.location.search)) return;
		
					//If we are editing text, don't follow the link
					if($(e.target).closest('.redactor_box').length || $(e.target).parents('.redactor-editor').length) {
						return;
					}
		
					// Prevent crazy double url navigation
					if (Upfront.mainData.site.indexOf('localhost') > -1
						&& Upfront.mainData.site + '/' === a.origin + pathname) pathname = '/';
		
					// Make dev=true remain in arguments
					if (window.location.search.indexOf('dev=true') > -1
							&& search.indexOf('dev=true') === -1) {
								if (search === '') search = '?';
								search += 'dev=true';
							}
		
					e.preventDefault();
		
					if(!Upfront.PreviewUpdate._is_dirty || confirm(Upfront.Settings.l10n.global.application.navigation_confirm))
						Upfront.Application.navigate(pathname + search, {trigger: true});
				})
				.on('keydown', function(e){
					//Don't let the backspace go back in history
					if(e.which == 8){
						var tag = e.target.tagName.toUpperCase();
						if(tag != 'INPUT' && tag != 'TEXTAREA' && !$(e.target).closest('.redactor_box').length && !e.target.contentEditable)
					e.preventDefault();
					}
				});
		});
	});
});
})(jQuery);

(function ($) {
define('scripts/upfront/inline-panels/panels',[], function () {
	var Panels = Backbone.View.extend({
		className: 'upfront-inline-panels upfront-ui',
		initialize: function () {
			this.panels = _([]);
		},
		render: function () {
			var me = this,
				panels = typeof this.panels === 'function' ? this.panels() : this.panels,
				$wrap = $('<div class="upfront-inline-panels-wrap" />');
			this.$el.html('');
			panels.each(function(panel){
				if ( !panel ) {
					return;
				}
				panel.panels_view = me;
				panel.render();
				panel.delegateEvents();
				$wrap.append(panel.el);
			});
			this.$el.append($wrap);
			if ( typeof this.on_render === 'function' ) {
				this.on_render();
			}
		},
		on_active: function () {
			$('.upfront-inline-panels-active').removeClass('upfront-inline-panels-active');
			this.$el.addClass('upfront-inline-panels-active');
		},
		remove: function() {
			var panels = typeof this.panels === 'function' ? this.panels() : this.panels;
			if(panels) {
				panels.each(function(panel){
					panel.remove();
				});
			}
			Backbone.View.prototype.remove.call(this);
		}
	});

	return Panels;
});
})(jQuery);

define('scripts/upfront/inline-panels/panel',[], function () {
	var Panel = Backbone.View.extend({
		className: 'upfront-inline-panel upfront-no-select',
		position_v: 'top',
		position_h: 'center',

		initialize: function () {
			this.items = _([]);
		},

		render: function() {
			var items = typeof this.items === 'function' ? this.items() : this.items,
				classes = [
					'upfront-inline-panel-'+this.position_v,
					'upfront-inline-panel-'+this.position_v+'-'+this.position_h
				],
				width = 0,
				height = 0;

			this.$el.html('');
			this.collapsedParent = false;

			items.each(function(item){
				item.panel_view = this;
				item.render();
				item.delegateEvents();

				this.$el.append(item.el);

				if (item.collapsed) {
					classes.push('upfront-inline-panel-collapsed-parent');
					this.collapsedParent = true;
				}

				if ( this.position_v === 'center' ) {
					width = item.width > width ? item.width : width;
					height += item.height;
				} else {
					width += item.width;
					height = item.height > height ? item.height : height;
				}

				if( typeof item.active  === "function" && item.active() == 1 ){
					item.$el.addClass("active");
				}else if(typeof item.active  === "function" && item.active() == 0){
					item.$el.removeClass("active");
				}
			}, this);

			this.$el.addClass(this.className + ' ' + classes.join(' '));

			if (this.collapsedParent) {
				height = 13;
			}

			this.$el.css({
				width: width,
				height: height
			});


		},

		remove: function() {
			var items = typeof this.items === 'function' ? this.items() : this.items;

			if(items) {
				items.each(function(item){
					item.remove();
				});
			}
			Backbone.View.prototype.remove.call(this);
		}
	});

	return Panel;
});

define('scripts/upfront/inline-panels/item',[], function () {
	var Item = Backbone.View.extend({
		className: 'upfront-inline-panel-item',
		width: 30,
		height: 30,
		icon_class: 'upfront-icon-region',

		initialize: function(options) {
			this.options = options || {};
			this.label = this.options.label;
		},

		render_icon: function () {
			var icon = typeof this.icon === 'function' ? this.icon() : this.icon;
			if ( !icon ) {
				return;
			}
			var me = this,
				icons = icon.split(' '),
				icons_class = ['upfront-icon'],
				$icon = this.$el.find('.upfront-icon');
			_.each(icons, function(each){
				icons_class.push(me.icon_class + '-' + each);
			});
			if ( !$icon.length ) {
				this.$el.append('<i class="' + icons_class.join(' ') + '" />');
			} else {
				$icon.attr('class', icons_class.join(' '));
			}
		},

		render_label: function () {
			var label = typeof this.label === 'function' ? this.label() : this.label;
			if ( !label ) {
				return;
			}
			var $label = this.$el.find('.upfront-inline-panel-item-label');
			this.$el.addClass('labeled');
			if ( !$label.length ) {
				this.$el.append('<span class="upfront-inline-panel-item-label">' + label + '</span>');
			} else {
				$label.html(label);
			}
		},

		render_tooltip: function () {
			var tooltip = typeof this.tooltip === 'function' ? this.tooltip() : this.tooltip;
			if ( ! tooltip ) {
				return;
			}
			this.$el.attr('title', tooltip);
		},

		render: function () {
			this.render_icon();
			this.render_label();
			this.render_tooltip();
			this.$el.css({
				width: this.width,
				height: this.height
			});
			this.$el.attr('id', this.id);
			if ( typeof this.on_render === 'function' ) {
				this.on_render();
			}
		},

		open_modal: function (render_callback, button) {
			if ( ! this.modal ){
				var me = this;
				var $region_container = this.$el.closest('.upfront-region-container');
				this.modal = new Upfront.Views.Editor.Modal({ to: $region_container, top: 60 });
				this.modal.render();
				$region_container.append(this.modal.$el);
			}
			this.listenToOnce(Upfront.Events, 'entity:region:deactivated', function(){
				 me.close_modal(false);
			});
			return this.modal.open(render_callback, this, button);
		},

		close_modal: function (save) {
			return this.modal.close(save);
		},

		remove: function(){
			this.panel_view = false;
		}
	});

	return Item;
});

(function ($) {
define('scripts/upfront/inline-panels/item-multi',[
	'scripts/upfront/inline-panels/item'
], function (Item) {
	var ItemMulti = Item.extend({
		events: {
			'click >.upfront-icon': 'toggle_subitem'
		},
		initialize: function () {
			this.sub_items = {};
			this.listenTo(Upfront.Events, 'entity:region:activated', this.on_region_change);
		},
		get_selected_item: function () {},
		get_default_item: function () {},
		get_selected_icon: function (selected) {
			return selected + '-active';
		},
		set_selected_item: function () {},
		select_item: function (selected) {
			this.set_selected_item(selected);
			this.render();
		},
		render: function () {
			var me = this,
				selected = this.get_selected_item() || this.get_default_item(),
				$sub_items = $('<div class="upfront-inline-panel-subitem" />');
			this.$el.html('');
			this.icon = this.get_selected_icon(selected);
			this.render_icon();
			this.render_tooltip();
			_.each(this.sub_items, function(item, id){
				item.panel_view = me.panel_view;
				item.parent_view = me;
				item.render();
				item.delegateEvents();
				if ( selected != id ) {
					$sub_items.append(item.el);
				}
			});
			$sub_items.append(this.sub_items[selected].el);
			this.$el.append($sub_items);
		},
		toggle_subitem: function () {
			if ( this.$el.hasClass('upfront-inline-panel-subitem-active') ) {
				this.close_subitem();
			} else {
				this.open_subitem();
			}
		},
		open_subitem: function () {
			this.$el.addClass('upfront-inline-panel-subitem-active');
			this.$el.removeClass('upfront-inline-panel-subitem-inactive');
		},
		close_subitem: function () {
			this.$el.addClass('upfront-inline-panel-subitem-inactive');
			this.$el.removeClass('upfront-inline-panel-subitem-active');
		},
		on_region_change: function (region) {
			if ( region.model != this.model ) {
				this.close_subitem();
			}
		},
		remove: function(){
			if (this.sub_items) {
				_.each(this.sub_items, function(item){
					item.remove();
				});
			}
			this.panel_view = false;
			Backbone.View.prototype.remove.call(this);
		}
	});

	return ItemMulti;
});
})(jQuery);

(function ($) {
define('scripts/upfront/inline-panels/control',[
	'scripts/upfront/inline-panels/item'
], function (Item) {
	var Control = Item.extend({
		events: {
			'click': 'clicked'
		},

		initialize: function(options) {
			this.options = options || {};
			this.label = this.options.label;
			this.icon = this.options.icon;
		},

		clicked: function(e){
			var target = $(e.target);

			e.preventDefault();
			e.stopPropagation();
			this.$el
				.siblings('.upfront-inline-panel-subitem-active')
				.removeClass('upfront-inline-panel-subitem-active');

			if(!target.hasClass('upfront-icon-region-settings')){			
				if(!target.closest('.upfront-inline-panel-item').hasClass('upfront-control-dialog-open'))	target.closest('.upfront-wrapper').addClass('upfront-inline-panel-item-open');
				else	target.closest('.upfront-wrapper').removeClass('upfront-inline-panel-item-open');
			}

			this.trigger('click', e);
		},

		setIsSelected: function(isSelected) {
			if (isSelected) {
				this.$el.addClass('inline-panel-item-selected');
				return;
			}

			this.$el.removeClass('inline-panel-item-selected');
		}
	});

	return Control;
});
})(jQuery);

(function ($) {
define('scripts/upfront/inline-panels/multi-control',[
	'scripts/upfront/inline-panels/item-multi'
], function (ItemMulti) {
	var MultiControl = ItemMulti.extend({
	events: {
		'click': 'clicked',
		'click .upfront-inline-panel-item': 'selectItem'
	},
	render: function(){
		ItemMulti.prototype.render.call(this, arguments);
	},
	clicked: function(e){
		var $subitem = this.$el.children('.upfront-inline-panel-subitem');
		if ( $(e.target).closest($subitem).length > 0 )
			return;
		this.trigger('click', e);
		this.toggle_subitem();
	},
	get_selected_item: function () {
		return this.selected;
	},
	selectItem: function(e){
		var found = false,
			target = $(e.target).is('i') ? $(e.target) : $(e.target).find('i')
		;
		_.each(this.sub_items, function(item, key){
			if(target.hasClass('upfront-icon-region-' + item.icon)) {
				found = key;
			}
		});

		if(found){
			this.selected = found;
			this.render();
			this.trigger('select', found);
		}
	}

	});

	return MultiControl;
});
})(jQuery);

(function ($) {
define('scripts/upfront/inline-panels/tooltip-control',[
	'scripts/upfront/inline-panels/item',
	'scripts/upfront/inline-panels/control'
], function (Item, Control) {
	var l10n = Upfront.mainData.l10n.image_element;

	var TooltipControl = Control.extend({
		multiControl: true,

		events: {
			'click': 'onClickControl',
			'click .upfront-inline-panel-item': 'selectItem'
		},

		initialize: function() {
			var me = this;
			$(document).click(function(e){
				var	target = $(e.target);

				if(target.closest('#page').length && target[0] !== me.el && !target.closest(me.el).length && me.isOpen) {
					me.close();
				}
			});
		},

		onClickControl: function(e){
			if (this.isDisabled) {
				return;
			}

			e.preventDefault();

			this.clicked(e);

			this.$el.siblings('.upfront-control-dialog-open').removeClass('upfront-control-dialog-open');

			if (this.isOpen) {
				this.close();
			} else {
				this.open();
			}
		},

		open: function() {
			this.isOpen = true;
			this.$el.addClass('upfront-control-dialog-open');
		},

		close: function() {
			this.isOpen = false;
			this.$el.removeClass('upfront-control-dialog-open');
		},

		render: function() {
			Item.prototype.render.call(this, arguments);
			var captionControl = this.$('.uimage-caption-control'),
				me = this,
				selectedItem
			;

			if(!this.$el.hasClass('uimage-caption-control-item')) {
				this.$el.addClass('uimage-caption-control-item');
			}

			if(!captionControl.length){
				captionControl = $('<div class="uimage-caption-control inline-panel-control-dialog"></div>');
				this.$el.append(captionControl);
			}
			_.each(this.sub_items, function(item, key){
				if(key === me.selected){
					item.setIsSelected(true);
				} else {
					item.setIsSelected(false);
				}
				item.render();
				item.$el.find('i').addClass('upfront-icon-region-caption');
				captionControl.append(item.$el);
				me.listenTo(item, 'click', me.selectItem);
			});

			selectedItem = this.sub_items[this.selected];
					if(selectedItem){
							if( typeof selectedItem.icon !== 'undefined' ){
									this.$el.children('i').addClass('upfront-icon-region-' + selectedItem.icon);
							}else if( typeof selectedItem.label !== 'undefined' ){
									this.$el.find('.tooltip-content').append( ': ' +  selectedItem.label );
							}
					}
		},

		get_selected_item: function () {
			return this.selected;
		},

		selectItem: function(e){
			var found = false,
				target = $(e.target).is('i') ? $(e.target) : $(e.target).find('i');

			_.each(this.sub_items, function(item, key){
				if(target.hasClass('upfront-icon-region-' + item.icon)) {
					found = key;
				}

				if( !found && $(e.target).closest('.upfront-inline-panel-item').attr('id') === item.id ){
					found = key;
				}

			});

			if(found){
				this.selected = found;
				this.render();
				this.trigger('select', found);
			}
		},

		setDisabled: function(isDisabled) {
			this.isDisabled = isDisabled;
			if (isDisabled) {
				this.tooltip = l10n.ctrl.caption_position_disabled;
			} else {
				this.tooltip = l10n.ctrl.caption_display;
			}
		}
	});

	return TooltipControl;
});
})(jQuery);

(function ($) {
define('scripts/upfront/inline-panels/padding-control',[
	'scripts/upfront/inline-panels/item',
	'scripts/upfront/inline-panels/control'
], function (Item, Control) {
	var l10n = Upfront.mainData.l10n.global.views;

	var PaddingControl = Control.extend({
		multiControl: true,

		events: {
			'click': 'onClickControl'
		},

		initialize: function() {
			var me = this;
			$(document).click(function(e){
				var	target = $(e.target);

				if (target.closest('#page').length && target[0] !== me.el && !target.closest(me.el).length && me.isOpen) {
					me.close();
				}
			});
			$(document).mouseup(function(e){
				var	target = $(e.target),
					currentEntity = Upfront.data.currentEntity;

				if (target.closest('#page').length && target[0] !== me.el && !target.closest(me.el).length && typeof(currentEntity) !== 'undefined' && typeof(currentEntity.padding_hint_locked) !== 'undefined' && currentEntity.padding_hint_locked) {
					currentEntity.padding_hint_locked = false;
					currentEntity.top_padding_hint_timer = setTimeout(function() {
						if(typeof(currentEntity.hide_top_padding_hint) === 'function'){
							currentEntity.hide_top_padding_hint();
						}
					}, 1000);
					currentEntity.bottom_padding_hint_timer = setTimeout(function() {
						if(typeof(currentEntity.hide_bottom_padding_hint) === 'function'){
							currentEntity.hide_bottom_padding_hint();
						}
					}, 1000);
				}
			});

			this.default_padding = {
				top: false,
				bottom: false
			}

			this.listenTo(Upfront.Events, "upfront:paddings:updated", this.refresh);
		},

		onClickControl: function(e){
			var	target = $(e.target);

			if (this.isDisabled) 	return;

			e.preventDefault();

			if (!target.closest('.upfront-icon-region-padding').length) {
				e.stopPropagation();
				return;
			}

			this.clicked(e);

			this.$el.siblings('.upfront-control-dialog-open').removeClass('upfront-control-dialog-open');

			if (this.isOpen) {
				this.close();
			} else {
				this.open();
			}
		},

		open: function() {
			this.isOpen = true;
			this.refresh();
			this.$el.addClass('upfront-control-dialog-open');
		},

		close: function() {
			this.isOpen = false;
			this.$el.removeClass('upfront-control-dialog-open');
			this.$el.closest('.upfront-inline-panel-item-open').removeClass('upfront-inline-panel-item-open');
		},

		on_render: function() {
			var me = this,
				$paddingControl = me.$('.upfront-padding-control'),
				$paddingTopContainer = $('<div class="upfront-padding-container">' + l10n.top_padding_short + '<span class="upfront-padding-value"></span></div>'),
				$paddingBottomContainer = $('<div class="upfront-padding-container">' + l10n.bottom_padding_short + '<span class="upfront-padding-value"></span></div>'),
				column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding
			;

			if(!me.$el.hasClass('upfront-padding-control-item')) {
				me.$el.addClass('upfront-padding-control-item');
			}

			if($paddingControl.length === 0){
				$paddingControl = $('<div class="upfront-padding-control inline-panel-control-dialog"></div>');
				me.$el.append($paddingControl);
			}

			if(me.default_padding.top === false) {
				me.default_padding.top = column_padding;
			}
			if(me.default_padding.bottom === false){
				me.default_padding.bottom = column_padding;
			}

			me.paddingTop = new Upfront.Views.Editor.Field.Slider({
				model: this.model,
				use_breakpoint_property: true,
				property: 'top_padding_num',
				label: '',
				default_value: this.model.get_breakpoint_property_value('top_padding_num') || me.default_padding.top,
				min: 0,
				max: 200,
				step: 5,
				valueTextFilter: function (valueText) {
					me.paddingTop.$el.parent('.upfront-padding-container').find('.upfront-padding-value').html(valueText);
					return '';
				},
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('use_padding', 'yes', true);
					this.model.set_breakpoint_property('lock_padding', '', true);
					this.model.set_breakpoint_property('top_padding_use', 'yes', true);
					this.model.set_breakpoint_property('top_padding_slider', value, true); // silent, don't need to trigger update again
					this.model.set_breakpoint_property('top_padding_num', value);
					Upfront.Events.trigger("upfront:paddings:updated", this.model, Upfront.data.currentEntity);
					Upfront.Events.trigger("upfront:paddings:top:updated", this.model, Upfront.data.currentEntity);
				}
			});

			me.paddingBottom = new Upfront.Views.Editor.Field.Slider({
				model: this.model,
				use_breakpoint_property: true,
				property: 'bottom_padding_num',
				label: '',
				default_value: this.model.get_breakpoint_property_value('bottom_padding_num') || me.default_padding.bottom,
				min: 0,
				max: 200,
				step: 5,
				valueTextFilter: function (valueText) {
					me.paddingBottom.$el.parent('.upfront-padding-container').find('.upfront-padding-value').html(valueText);
					return '';
				},
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('use_padding', 'yes', true);
					this.model.set_breakpoint_property('lock_padding', '', true);
					this.model.set_breakpoint_property('bottom_padding_use', 'yes', true);
					this.model.set_breakpoint_property('bottom_padding_slider', value, true); // silent, don't need to trigger update again
					this.model.set_breakpoint_property('bottom_padding_num', value);
					Upfront.Events.trigger("upfront:paddings:updated", this.model, Upfront.data.currentEntity);
					Upfront.Events.trigger("upfront:paddings:bottom:updated", this.model, Upfront.data.currentEntity);
				}
			});

			$paddingControl.html('');
			me.paddingTop.render();
			$paddingTopContainer.append(me.paddingTop.$el);
			$paddingControl.append($paddingTopContainer);
			me.paddingBottom.render();
			$paddingBottomContainer.append(me.paddingBottom.$el);
			$paddingControl.append($paddingBottomContainer);

			$paddingTopContainer.on('mousedown', function() {
				Upfront.data.currentEntity.padding_hint_locked = true;
			}).on('mouseup', function() {
				var currentEntity = Upfront.data.currentEntity;

				currentEntity.padding_hint_locked = false;
				currentEntity.top_padding_hint_timer = setTimeout(function() {
					if(typeof(currentEntity.hide_top_padding_hint) === 'function'){
						currentEntity.hide_top_padding_hint();
					}
				}, 1000);
			});

			$paddingBottomContainer.on('mousedown', function() {
				Upfront.data.currentEntity.padding_hint_locked = true;
			}).on('mouseup', function() {
				var currentEntity = Upfront.data.currentEntity;

				currentEntity.padding_hint_locked = false;
				currentEntity.bottom_padding_hint_timer = setTimeout(function() {
					if(typeof(currentEntity.hide_bottom_padding_hint) === 'function'){
						currentEntity.hide_bottom_padding_hint();
					}
				}, 1000);
			});
		},

		refresh: function(model) {
			if ( model && model !== this.model ) return;
			var column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding,
				top_padding_use = this.model.get_breakpoint_property_value('top_padding_use', true),
				bottom_padding_use = this.model.get_breakpoint_property_value('bottom_padding_use', true),
				padding_top_val, padding_bottom_val
			;

			if(this.default_padding.top === false) {
				this.default_padding.top = column_padding;
			}
			if(this.default_padding.bottom === false){
				this.default_padding.bottom = column_padding;
			}
			padding_top_val = top_padding_use ? this.model.get_breakpoint_property_value('top_padding_num', true) : this.default_padding.top;
			padding_bottom_val = bottom_padding_use ? this.model.get_breakpoint_property_value('bottom_padding_num', true) : this.default_padding.bottom;


			if(typeof this.paddingTop !== 'undefined') {
				this.paddingTop.get_field().val(padding_top_val);
				if(typeof this.paddingTop.$el.find('#'+this.paddingTop.get_field_id()).slider('instance') !== 'undefined') 	this.paddingTop.$el.find('#'+this.paddingTop.get_field_id()).slider('value', padding_top_val);
				this.paddingTop.$el.parent('.upfront-padding-container').find('.upfront-padding-value').html(padding_top_val);
			}
			if(typeof this.paddingBottom !== 'undefined') {
				this.paddingBottom.get_field().val(padding_bottom_val);
				if(typeof this.paddingBottom.$el.find('#'+this.paddingBottom.get_field_id()).slider('instance') !== 'undefined') 	this.paddingBottom.$el.find('#'+this.paddingBottom.get_field_id()).slider('value', padding_bottom_val);
				this.paddingBottom.$el.parent('.upfront-padding-container').find('.upfront-padding-value').html(padding_bottom_val);
			}
		},
		on_up_arrow_click: function() {
			if(typeof this.paddingTop !== 'undefined') {
				var padding_top_val = parseInt(this.model.get_breakpoint_property_value('top_padding_num', true)) - 5;

				padding_top_val = padding_top_val < 0 ? 0 : padding_top_val;

				this.model.set_breakpoint_property('top_padding_use', 'yes');
				this.model.set_breakpoint_property('top_padding_num', padding_top_val);
				this.model.set_breakpoint_property('top_padding_slider', padding_top_val);

				this.refresh();
			}
		},
		on_down_arrow_click: function() {
			if(typeof this.paddingTop !== 'undefined') {
				var padding_top_val = parseInt(this.model.get_breakpoint_property_value('top_padding_num', true)) + 5;

				this.model.set_breakpoint_property('top_padding_use', 'yes');
				this.model.set_breakpoint_property('top_padding_num', padding_top_val);
				this.model.set_breakpoint_property('top_padding_slider', padding_top_val);

				this.refresh();
			}
		}
	});

	return PaddingControl;
});
})(jQuery);

(function ($) {
define('scripts/upfront/inline-panels/collapsed-multi-control',[
	'scripts/upfront/inline-panels/control',
	'scripts/upfront/inline-panels/multi-control'
], function (Control, MultiControl) {
	var CollapsedMultiControl = MultiControl.extend({
		collapsed: true,
		className: 'upfront-inline-panel-item inline-panel-collapsed-control',
		render: function(){
			if(!this.sub_items.collapsedControl){
				var control = new Control();
				control.icon = 'collapsedControl';
				control.tooltip = 'More tools';
				this.sub_items.collapsedControl = control;
			}
			this.selected = 'collapsedControl';

			this.constructor.__super__.render.call(this, arguments);
		},

		selectItem: function(e){
			var found = false,
				foundKey = false,
				target = $(e.target).is('i') ? $(e.target) : $(e.target).find('i')
			;

			_.each(this.sub_items, function(item, key){
				if(target.hasClass('upfront-icon-region-' + item.icon)){
					found = item;
					foundKey = key;
				}
			});

			if(found){
				if(found instanceof MultiControl || found.multiControl === true){
					return false;
				}
				else {
					this.render();
					this.trigger('select', foundKey);
				}
			}
		},

		open_subitem: function () {
			_.each(this.sub_items, function(item){
				if(item instanceof MultiControl){
					item.close_subitem();
				}
			});
			this.constructor.__super__.open_subitem.call(this, arguments);
		}
	});

	return CollapsedMultiControl;
});
})(jQuery);

define('scripts/upfront/inline-panels/control-panel',[
	'scripts/upfront/inline-panels/panel',
	'scripts/upfront/inline-panels/collapsed-multi-control',
	'scripts/upfront/inline-panels/tooltip-control'
], function (Panel, CollapsedMultiControl, TooltipControl) {
	var l10n = Upfront.mainData.l10n.image_element;

	var ControlPanel = Panel.extend({
		position_v: 'none', // Image view will handle this
		position_h: 'none',

		setWidth: function(optionsArg) {
			var items = this.items._wrapped,
				collapsedControl,
				options = _.extend({
					widthThreshold: 100,
					width: 101,
					heightThreshold: 100,
					height: 101
				}, optionsArg);


			if(options.width < options.widthThreshold || options.height < options.heightThreshold){
				if (this.collapsed !== true) {
					collapsedControl = new CollapsedMultiControl();

				_.each(items, function(item) {
					if (item instanceof TooltipControl) {
						item.setDisabled(true);
					}
					collapsedControl.sub_items[item.icon] = item;
				});

				collapsedControl.icon = 'collapsedControl';
				collapsedControl.tooltip = l10n.ctrl.more_tools;
				collapsedControl.position = 'left';

					this.items = _([collapsedControl]);
					this.collapsed = true;
				}
			} else {
				// Uncolapse
				if (this.collapsed) {
					this.items = _([]);
					_.each(items[0].sub_items, function(item, index) {
						if (index !== 'collapsedControl') {
							this.items.push(item);
						}
						if (item instanceof TooltipControl) {
							item.setDisabled(false);
						}
					}, this);
				}
				this.collapsed = false;
			}
		},

		delegateEvents: function(){
			Backbone.View.prototype.delegateEvents.call(this, arguments);
			this.items.each(function(item){
				item.delegateEvents();
			});
		}
	});

	return ControlPanel;
});


define('text!scripts/upfront/inline-panels/templates/panel-control-template.html',[],function () { return '<div class="uimage-control-panel upfront-ui">\n\t<div class="uimage-control-panel-content"></div>\n\t{[ if (!hideOkButton) { ]}\n\t<button type="button" class="upfront-save_settings"><i class="icon-ok"></i> {{ l10n.ok }}</button>\n\t{[ } ]}\n</div>\n';});

(function ($) {
define('scripts/upfront/inline-panels/dialog-control',[
	'scripts/upfront/inline-panels/control',
	'text!scripts/upfront/inline-panels/templates/panel-control-template.html'
], function (Control, panelControlTemplate) {
	var l10n = Upfront.mainData.l10n.image_element;

	var DialogControl = Control.extend({
		multiControl: true,
		hideOnClick: true,

		events: {
			'click': 'onClickControl',
			'click button': 'onClickOk'
		},

		initialize: function(options) {
			var me = this;
			this.options = options || {};

			// Allow only one control to be open at a time
			this.listenTo(Upfront.Events, 'dialog-control:open', function(dialogControl) {
				if (me === dialogControl) {
					return;
				}

				me.close();
			});
		},

		render: function(){
			Control.prototype.render.call(this, arguments);
			var me = this,
				panel;

			if(!this.$el.hasClass('uimage-control-panel-item')) {
				this.$el.addClass('uimage-control-panel-item');
			}

			if(this.view){
				this.view.render();
				this.view.delegateEvents();
			}

			if(!this.panel){
				//this is like initialize
				panel = $(_.template(panelControlTemplate, {l10n: l10n.template, hideOkButton: this.hideOkButton}));
				panel.addClass('inline-panel-control-dialog');
				panel.addClass('inline-panel-control-dialog-' + this.id);
				this.$el.append(panel);
				panel.find('.uimage-control-panel-content').html('').append(this.view.$el);
				this.panel = panel;
				$(document).on('click.dialog-control.'+me.cid, me, me.onDocumentClick);
			}

			return this;
		},

		remove: function() {
			$(document).off('click.dialog-control.'+this.cid);
		},

		onDocumentClick: function(e) {
			var	target = $(e.target),
				me = e.data;

			if(target.closest('#page').length && target[0] !== me.el && !target.closest(me.el).length && me.isopen) {
				me.close();
			}
		},

		onClickControl: function(e){
			
			this.$el.siblings('.upfront-control-dialog-open').removeClass('upfront-control-dialog-open');

			if(!$(e.target).closest('.upfront-icon').length || $(e.target).closest('upfront-icon-media-label-delete').length) {
				e.stopPropagation();
				return;
			}

			e.preventDefault();

			this.clicked(e);

			this.$el.siblings('.upfront-control-dialog-open').removeClass('upfront-control-dialog-open');

			if(this.isopen) {
				this.close();
			} else {
				this.open();
			}
		},

		onClickOk: function(e){
			e.preventDefault();
			this.trigger('panel:ok', this.view);
		},

		bindEvents: function(){
			this.panel.find('button').on('click', function(){
			});
		},

		open: function() {
			this.isopen = true;
			this.$el.addClass('upfront-control-dialog-open');
			this.trigger('panel:open');
			Upfront.Events.trigger('dialog-control:open', this);
			return this;
		},
		close: function() {
			this.isopen = false;
			this.$el.removeClass('upfront-control-dialog-open');
			this.trigger('panel:close');
			return this;
		}
	});

	return DialogControl;
});
})(jQuery);

define('scripts/upfront/inline-panels/controls/visit-link',[
	'scripts/upfront/inline-panels/control'
], function (Control) {
	var l10n = Upfront.Settings && Upfront.Settings.l10n
		? Upfront.Settings.l10n.global.content
		: Upfront.mainData.l10n.global.content
	;

	var VisitLinkControl = Control.extend({
		className: 'upfront-inline-panel-item visit-link-control',
		initialize: function(options) {
			this.options = options || {};
			this.constructor.__super__.initialize.call(this, options);
			this.linkLabel = _.extend({
				unlink: l10n.not_linked,
				lightbox: l10n.open_lightbox,
				anchor: l10n.scroll_to_anchor,
				entry: l10n.go_to_post,
				external: l10n.open_ext_link,
				email: l10n.send_email
			}, (options.linkLabel || {}));
			this.setOptions(this.options.url, this.options.type);
			this.hideIfUnlink = ( options.hideIfUnlink === true );
			this.setOptions(this.options.url);
		},

		setOptions: function(url, type) {
			var theType = type ? type : Upfront.Util.guessLinkType(url);
			this.url = url;
			this.icon = 'visit-link-' + theType,
			this.label = this.getTextByLinkType(theType);
		},

		clicked: function(event) {
			this.constructor.__super__.clicked.call(this, event);
			if(this.url !== "") {
				Upfront.Util.visitLink(this.url);
			}
		},

		setLink: function(url, type) {
			this.setOptions(url, type);
			this.render();
		},

		on_render: function () {
			if (this.hideIfUnlink && Upfront.Util.guessLinkType(this.url) == 'unlink') {
				this.$el.hide();
			}
			else if (!this.$el.is(':visible')) {
				this.$el.show();
			}
		},

		getTextByLinkType: function(linktype) {
			return this.linkLabel[linktype];
		},

	});

	return VisitLinkControl;
});

define('scripts/upfront/inline-panels/controls/link-panel',[
	'scripts/upfront/inline-panels/dialog-control'
], function (DialogControl) {
	var LinkPanelControl = DialogControl.extend({
		initialize: function(options) {
			this.options = options || {};
			this.constructor.__super__.initialize.call(this, options);

			this.icon = this.options.icon;
			this.tooltip = this.options.tooltip;
			this.id = this.options.id;

			this.view = new Upfront.Views.Editor.LinkPanel({
				model: this.model,
				button: false
			});
		},

		onClickOk: function(event){
			event.preventDefault();
			if (this.view.model.get('type') === 'lightbox' && this.view.$el.find('.js-ulinkpanel-lightbox-input').val() !== '')
				this.view.createLightBox();
			this.close();
		}
	});

	return LinkPanelControl;
});

define('scripts/upfront/link-model',[], function() {
	var LinkModel = Backbone.Model.extend({
		defaults: {
			type: 'unlink',
			url: '',
			target: '_self'
		},

		initialize: function() {
			this.on('change:type', this.updateTarget, this);
		},

		updateTarget: function() {
			// Ensure that we do _self for anchors and lightboxes
			if (_.contains(['lightbox', 'anchor'], this.get('type'))) {
				console.log('we have an anchor or a lightbox');
				this.set({'target': '_self'}, {silent: true});
			}
		}
	});

	return LinkModel;
});

(function ($) {
define('scripts/upfront/inline-panels/controls/group-link-panel',[
	'scripts/upfront/inline-panels/controls/link-panel',
	"scripts/upfront/link-model"
], function (LinkPanelControl, LinkModel) {

	var l10n = Upfront.Settings && Upfront.Settings.l10n ?
		Upfront.Settings.l10n.global.views
		: Upfront.mainData.l10n.global.views
	;

	var GroupLinkPanelControl = LinkPanelControl.extend({
		className: 'upfront-inline-panel-item group-link-control',
		initialize: function(options) {
			var me = this;
			this.options = options || {};
			this.constructor.__super__.constructor.__super__.initialize.call(this, options);

			this.icon = this.options.icon;
			this.tooltip = this.options.tooltip;
			this.id = this.options.id;

			this.link = new LinkModel({
				type: this.options.linkType,
				url: this.options.linkUrl,
				target: this.options.linkTarget,
				object: this.options.linkObject,
				object_id: this.options.linkObjectId,
			});
			this.view = new Upfront.Views.Editor.LinkPanel({
				model: this.link,
				button: false,
				title: l10n.link_group_to
			});
			this.listenTo(this.link, 'change change:target change:type', function(link) {
				me.render_label();
				this.trigger('change', {
					url: link.get('url'),
					target: link.get('target'),
					type: link.get('type')
				});
			});
		},

		label: function () {
			return ( this.link.get('type') != 'unlink' ? l10n.edit_link : l10n.not_linked );
		},

		onClickControl: function(e){
			this.$el.siblings('.upfront-control-dialog-open').removeClass('upfront-control-dialog-open');

			if($(e.target).closest('.inline-panel-control-dialog').length) {
				return;
			}

			e.preventDefault();

			if(this.isopen) {
				this.close();
			} else {
				this.open();
			}
		},
	});

	return GroupLinkPanelControl;
});
})(jQuery);

define('scripts/upfront/inline-panels/inline-panels',[
	'scripts/upfront/inline-panels/panels',
	'scripts/upfront/inline-panels/panel',
	'scripts/upfront/inline-panels/item',
	'scripts/upfront/inline-panels/item-multi',
	'scripts/upfront/inline-panels/control',
	'scripts/upfront/inline-panels/multi-control',
	'scripts/upfront/inline-panels/tooltip-control',
	'scripts/upfront/inline-panels/padding-control',
	'scripts/upfront/inline-panels/control-panel',
	'scripts/upfront/inline-panels/dialog-control',
	'scripts/upfront/inline-panels/collapsed-multi-control',
	'scripts/upfront/inline-panels/controls/visit-link',
	'scripts/upfront/inline-panels/controls/link-panel',
	'scripts/upfront/inline-panels/controls/group-link-panel'
], function (Panels, Panel, Item, ItemMulti, Control, MultiControl, TooltipControl, PaddingControl,
	ControlPanel, DialogControl, CollapsedMultiControl, VisitLinkControl, LinkPanelControl, GroupLinkPanelControl) {

	return {
		Panels: Panels,
		Panel: Panel,
		Item: Item,
		ItemMulti: ItemMulti,
		Control: Control,
		MultiControl: MultiControl,
		TooltipControl: TooltipControl,
		PaddingControl: PaddingControl,
		ControlPanel: ControlPanel,
		DialogControl: DialogControl,
		CollapsedMultiControl: CollapsedMultiControl,
		Controls: {
			VisitLink: VisitLinkControl,
			LinkPanel: LinkPanelControl,
			GroupLinkPanel: GroupLinkPanelControl
		}
	};
});

(function ($) {
define('scripts/upfront/element-settings/sidebar',[], function () {
	// Setup basics
	$('body').append('<div id="element-settings-sidebar" />');
	$('#element-settings-sidebar').width(0);
	var the_settings_view;
	var model;
	var oldData;

	var destroySettings = function() {
		//If settings are opened, destroy
		if (the_settings_view) {
			the_settings_view.cleanUp();
			the_settings_view = false;
			$('#element-settings-sidebar').width(0).html('');
			Upfront.Events.off('element:settings:saved', destroySettings);
			Upfront.Events.off('element:settings:cancel', resetModel);
		}
	};

	var resetModel = function() {
		var newProperties = new Upfront.Collections.Properties(oldData.properties);
		newProperties._events = model.get('properties')._events;
		model.set('properties', newProperties);
		destroySettings();
	};

	var showSettings = function(view) {
		var current_object_proto, settings_obj_view;

		if (the_settings_view) {
			/** triggering the event instead of directly calling the destroy function,
				so that elements can subscribe to this event even when executed by virtue
				of toggling the settings button **/
			Upfront.Events.trigger("element:settings:canceled");
			return;
		}

		current_object_proto = _(Upfront.Application.LayoutEditor.Objects).reduce(function (obj, current) {
			if (view instanceof current.View) {
				return current;
			}
			return obj;
		}, false);

		current_object_proto = (current_object_proto && current_object_proto.Settings ? current_object_proto : Upfront.Views.Editor.Settings);
		settings_obj_view = current_object_proto.Settings;

		the_settings_view = new settings_obj_view({
			model: view.model,
			anchor: ( current_object_proto ? current_object_proto.anchor : false )
		});
		the_settings_view.for_view = view;
		the_settings_view.render();
		$('#element-settings-sidebar').html(the_settings_view.el);
		$('#element-settings-sidebar').width(260);
		$('.uf-settings-panel--expanded:not(:first)').toggleClass('uf-settings-panel--expanded').find('.uf-settings-panel__body').toggle();

		Upfront.Events.on('element:settings:saved', destroySettings);

		model = view.model;
		oldData = Upfront.Util.model_to_json(view.model);
		Upfront.Events.once('element:settings:canceled', resetModel);
		setTimeout(function() { // Remove collapsed class, but allow a bit time for some animation handled elsewhere that does not work always
			$('#element-settings-sidebar').removeClass('collapsed');
		}, 500);
	};

	Upfront.Events.on('element:settings:activate', showSettings);

	//Destroy settings when element is removed
	Upfront.Events.on("entity:removed:after", destroySettings);

	// Also destroy settings when breakpoint is toggled
	Upfront.Events.on('upfront:layout_size:change_breakpoint', destroySettings);
});
})(jQuery);


define('text!scripts/upfront/templates/link-panel.html',[],function () { return '<div class="ulinkpanel-title">{{title}}</div>\n<form>\n{[if(type == \'external\') { ]}\n<div class="upfront-field-wrap ulinkpanel-external-wrap">\n\t<input type="text" value="{{link.url}}" placeholder="Type link URL" class="upfront-field-text js-ulinkpanel-input-url js-ulinkpanel-input-external">\n</div>\n{[ } ]}\n{[if(type == \'email\') { ]}\n<div class="upfront-field-wrap ulinkpanel-external-wrap">\n\t<input type="text" value="{{link.url}}" placeholder="johnsmith@example.com" class="upfront-field-text js-ulinkpanel-input-url js-ulinkpanel-input-external">\n</div>\n{[ } ]}\n{[if(type == \'entry\') { ]}\n<div class="upfront-field-wrap ulinkpanel-entry-wrap">\n\t<a title="{{Upfront.Settings.l10n.global.content.change_link}}" class="ulinkpanel-entry-url js-ulinkpanel-input-url js-ulinkpanel-input-entry" href="#">{{(!link.url || link.url==\'\' || link.url==\'http://\')?\'Select\':link.url}}</a>\n</div>\n{[ } ]}\n{[if(type == \'anchor\') { ]}\n<div class="anchor-selector">\n</div>\n{[ } ]}\n{[if(type == \'lightbox\') { ]}\n<div class="js-ulinkpanel-input-url js-ulinkpanel-input-lightbox clearfix">\n\t{[ if(lightboxes.length) { ]}\n\t\t<div class="lightbox-selector">\n\t\t</div>\n\t\t<a href="{{link.url}}" class="link-panel-lightbox-trigger">Open lightbox</a>\n\t{[ } else { ]}\n\n\t{[ } ]}\n\n    <div class="js-ulinkpanel-new-lightbox ulinkpanel-new-lightbox">\n        <div class="ulinkpanel-title">Create lightbox</div>\n        <input type="text" name="new_lightbox" class="upfront-field upfront-field-text upfront-field-empty ulinkpanel-lightbox-input js-ulinkpanel-lightbox-input" value="" placeholder="{{Upfront.Settings.l10n.global.content.lightbox_name}}" />\n    </div>\n</div>\n{[ } ]}\n</form>\n{[if(button) { ]}\n<div class="upfront-settings-button_panel">\n\t<button type="button" class="upfront-save_settings js-ulinkpanel-ok"><i class="icon-ok"></i> {{Upfront.Settings.l10n.global.content.ok}}</button>\n</div>\n{[ } ]}\n';});

(function ($) {
define('scripts/upfront/link-panel',[
	"scripts/upfront/link-model",
	"text!scripts/upfront/templates/link-panel.html",
], function(LinkModel, linkPanelTpl) {

	var getAnchors = function() {
		var regions = Upfront.Application.layout.get("regions"),
			anchors = [{id: '#page', label: Upfront.Settings.l10n.global.views.back_to_top}],
			find;

		find = function (modules) {
			modules.each(function(module) {
				var group_anchor = module.get_property_value_by_name("anchor");
				if (group_anchor && group_anchor.length) {
					anchors.push({id: '#' + group_anchor, label: group_anchor});
				}
				if (module.get("objects")) {
					module.get("objects").each(function (object) {
						var anchor = object.get_property_value_by_name("anchor");
						if (anchor && anchor.length) {
							anchors.push({id: '#' + anchor, label: anchor});
						}
					});
				} else if ( module.get("modules") ) {
					find(module.get("modules"));
				}
			});
		};

		regions.each(function(r) {
			find(r.get("modules"));
		});

		return anchors;
	};

	var getPostTypes = function(){
		var types = [];

		_.each(Upfront.data.ugallery.postTypes, function(type){
			if(type.name != 'attachment') {
				types.push({name: type.name, label: type.label});
			}
		});

		return types;
	};

	var getLightBoxes = function() {
		var lightboxes = [],
			regions = Upfront.Application.layout.get('regions');

		_.each(regions.models, function(model) {
			if(model.attributes.sub == 'lightbox') {
				lightboxes.push({id: '#' + model.get('name'), label: model.get('title')});
			}
		});

		return lightboxes;
	};


	var LinkPanel = Backbone.View.extend({
		tpl: _.template(linkPanelTpl),

		defaultLinkTypes: {
			unlink: true,
			external: true,
			entry: true,
			anchor: true,
			image: false,
			lightbox: true,
			email: true,
			homepage: true
		},

		events: {
			'click .js-ulinkpanel-input-entry': 'openPostSelector',
			'keydown .js-ulinkpanel-lightbox-input': 'onLightboxNameInputChange',
			'blur .js-ulinkpanel-input-external': 'onUrlInputBlur',
			//'click .js-ulinkpanel-ok': 'onOkClick',
			'click .upfront-save_settings': 'onOkClick',
			'click .link-panel-lightbox-trigger': 'visit_lightbox'
		},

		className: 'ulinkpanel-dark',

		visit_lightbox: function(e) {
			e.preventDefault();
			var url = $(e.target).attr('href');
			
			// if there is no url defined, no point going forward
			if(!url || url==='')
				return;

			var regions = Upfront.Application.layout.get('regions');
			region = regions ? regions.get_by_name(this.getUrlanchor(url)) : false;
			if(region){
				//hide other lightboxes
				_.each(regions.models, function(model) {
					if(model.attributes.sub == 'lightbox')
						Upfront.data.region_views[model.cid].hide();
				});
				var regionview = Upfront.data.region_views[region.cid];
				regionview.show();
			}
			
		},
		getUrlanchor: function(url) {
			if(typeof(url) == 'undefined') var url = $(location).attr('href');

			if(url.indexOf('#') >=0) {
				var tempurl = url.split('#');
				return tempurl[1];
			} else return false;
		},
		initialize: function(options) {
			// Make sure we have large image url if 'image' is one of link types
			if (options.linkTypes && options.linkTypes.image && options.linkTypes.image === true && _.isUndefined(options.imageUrl)) {
				throw 'Provide "imageUrl" if "linkTypes" option has { image: true } when initializing LinkPanel.';
			}


			var me = this;
			this.options = options || {};
			this.linkTypes = _.extend({}, this.defaultLinkTypes, options.linkTypes || {});
			this.theme = options.theme || 'dark';
			this.button = options.button || false;
			this.title = options.title || Upfront.Settings.l10n.global.content.links_to;

			if (typeof options.model === 'undefined') {
				// Make sure app does not fail if there is no model.
				Upfront.Util.log('There was no link model, use new linking.');
				return;
			}

			// Rewrite anchor url to new style (to include full url)
			var pageUrl = document.location.origin + document.location.pathname;
			if (this.model.get('type') === 'anchor' && this.model.get('url').match(/^#/) !== null) {
				this.model.set({'url' : pageUrl + this.model.get('url')}, {silent:true});
			}

			this.listenTo(this.model, 'change:type', this.handleTypeChange);
		},

		onOkClick: function() {
			if (this.model.get('type') == 'lightbox' && this.$el.find('.js-ulinkpanel-lightbox-input').val() !== '') {
				this.createLightBox();
			} else {
				this.close();
				this.model.trigger("change")
			}
			//this.trigger('change', this.model);
		},

		close: function() {
			this.trigger('linkpanel:close');
		},

		handleTypeChange: function() {
			if (this.model.get('type') === 'homepage') {
				this.model.set({'url': Upfront.mainData.site}, {silent: true});
			} else {
				// Reset url property
				// We don't want funny results when changing from one type to another.
				this.model.set({'url': ''}, {silent: true});
			}
			this.render();

			if (this.model.get('type') === 'entry') {
				this.openPostSelector();
			}
			if (this.model.get('type') === 'image') {
				this.model.set({'url': this.options.imageUrl});
			}
		},

		/**
		 * Determine proper link type select value/label based on link type. Used
		 * to populate link type select field.
		 */
		getLinkTypeValue: function(type) {
			var contentL10n = Upfront.Settings.l10n.global.content;
			switch(type) {
				case 'homepage':
					return { value: 'homepage', label: contentL10n.homepage };
				case 'unlink':
					return { value: 'unlink', label: contentL10n.no_link };
				case 'external':
					return { value: 'external', label: contentL10n.url };
				case 'email':
					return { value: 'email', label: contentL10n.email };
				case 'entry':
					return { value: 'entry', label: contentL10n.post_or_page };
				case 'anchor':
					return { value: 'anchor', label: contentL10n.anchor };
				case 'image':
					return { value: 'image', label: contentL10n.larger_image };
				case 'lightbox':
					return { value: 'lightbox', label: contentL10n.lightbox };
			}
		},

		/* Handle entry link type. (post or page) */
		/**
		 * Open post selector for entry type url and set link url when done.
		 */
		openPostSelector: function(event) {
			if (event) {
				event.preventDefault();
			}

			var me = this,
				selectorOptions = {
					postTypes: getPostTypes()
				};

			Upfront.Views.Editor.PostSelector.open(selectorOptions).done(function(post){
				me.model.set({url: post.get('permalink'), object: post.get('post_type'), object_id: post.get('ID')});
				me.render();
			});
		},

		/* Handle lightbox link type. */
		/**
		 * Check input for lightbox name for enter key.
		 */
		onLightboxNameInputChange: function(event) {
			if (event.which == 13) {
				event.preventDefault();
				this.createLightBox();
			}
		},

		createLightBox: function() {
			var name = $.trim(this.$('.js-ulinkpanel-lightbox-input').val());
			if (!name) {
				Upfront.Views.Editor.notify(Upfront.Settings.l10n.global.views.ltbox_empty_name_nag, 'error');
				return false;
			}

			this.model.set({
				url: '#' + Upfront.Application.LayoutEditor.getLightboxSafeName(name)
			});

			Upfront.Application.LayoutEditor.createLightboxRegion(name);
			// this is required to send a 'dontflag' to the editor, 
			// because the lightbox is created
			// after the link is saved in the text.
			// triggering the change again will refresh the editor's state 
			// and get rid of missing link flag
			this.model.trigger("change", true); 
			this.render();
		},

		/* Handle manually entered urls: external and email */
		onUrlInputBlur: function(event) {
			var userInput = $(event.currentTarget).val().trim();
			if (this.model.get('type') === 'external' && !userInput.match(/https?:\/\//)) {
				userInput = 'http://' + userInput;
			}
			if (this.model.get('type') === 'email' && !userInput.match(/^mailto:/)) {
				userInput = 'mailto:' + userInput;
			}

			this.model.set({'url': userInput});
			this.render();
		},

		/* Rendering stuff below */
		render: function() {

			var me = this;

			if (!this.model) {
			this.$el.html('Error occurred, link panel switch to new style.');
				return;
			}
			var tplData = {
				title: this.title,
				link: this.model.toJSON(),
				checked: 'checked="checked"',
				lightboxes: getLightBoxes(),
				button: this.button,
				type: this.model.get('type')
			};

			this.$el.html(this.tpl(tplData));

			this.renderTypeSelect();

			if (this.model.get('type') == 'anchor') {
				this.renderAnchorSelect();
			}

			if (this.model.get('type') == 'lightbox' && getLightBoxes()) {
				this.renderLightBoxesSelect();
			}

			if (_.contains(['external', 'entry', 'homepage'], this.model.get('type'))) {
				this.renderTargetRadio();
			}

			this.delegateEvents();
		},

		renderTypeSelect: function() {
			var me = this;

			var typeSelectValues = [];
			_.each(this.linkTypes, function(use, type) {
				if (!use) {
					return;
				}
				typeSelectValues.push(this.getLinkTypeValue(type));
			}, this);

			this.typeSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: typeSelectValues,
				default_value: this.model.get('type'),
				change: function () {
					me.model.set({'type': this.get_value()});
				}
			});

			this.typeSelect.render();
			this.$el.find('form').prepend(this.typeSelect.el);
		},

		renderTargetRadio: function() {
			var me = this;

			this.targetRadio = new Upfront.Views.Editor.Field.Radios({
				label: 'Target:',
				default_value: this.model.get('target') || '_self',
				layout: 'horizontal-inline',
				values: [
					{ label: 'blank', value: '_blank' },
					{ label: 'self', value: '_self' }
				],
				change: function () {
					me.model.set({'target': this.get_value()});
				}
			});

			this.targetRadio.render();
			this.$el.find('form').append(this.targetRadio.el);
		},

		renderAnchorSelect: function() {
			var model = this.model,
				pageUrl = document.location.origin + document.location.pathname;

			var anchorValues = [{label: 'Choose Anchor...', value: ''}];
			_.each(getAnchors(), function(anchor) {
				anchorValues.push({label: anchor.label, value: pageUrl + anchor.id});
			});

			var anchorValue = this.model.get('url');
			anchorValue = anchorValue ? anchorValue : '';
			anchorValue = anchorValue.indexOf('#') !== -1 ? anchorValue : '';

			this.anchorSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: anchorValues,
				default_value: anchorValue,
				change: function () {
					model.set({'url': this.get_value()});
				}
			});
			this.anchorSelect.render();
			this.$el.find('.anchor-selector').append(this.anchorSelect.el);
		},

		renderLightBoxesSelect: function() {
			var model = this.model;
			var lightboxValues = [{label: 'Choose Lightbox...', value: ''}];
			_.each(getLightBoxes() || [], function(lightbox) {
				lightboxValues.push({label: lightbox.label, value: lightbox.id});
			});

			var lightboxValue = this.model.get('url');
			lightboxValue = lightboxValue ? lightboxValue : '';
			lightboxValue = lightboxValue.match(/^#/) ? lightboxValue : '';

			this.lightboxSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: lightboxValues,
				default_value: lightboxValue,
				change: function () {
					model.set({'url': this.get_value()});
					$('.link-panel-lightbox-trigger').attr('href', this.get_value());
				}
			});
			this.lightboxSelect.render();
			this.$el.find('.lightbox-selector').append(this.lightboxSelect.el);
		},

		delegateEvents: function(events) {
			if (this.typeSelect) {
				this.typeSelect.delegateEvents();
			}
			if (this.anchorSelect) {
				this.anchorSelect.delegateEvents();
			}
			if (this.lightboxSelect) {
				this.lightboxSelect.delegateEvents();
			}
			Backbone.View.prototype.delegateEvents.call(this, events);
		}
	});

	return LinkPanel;

});
})(jQuery);


define('text!upfront/templates/property.html',[],function () { return '<dt class="upfront-property">{{name}}</dt>\r\n<dd class="upfront-property">\r\n\t{{value}}\r\n\t<div class="upfront-property-actions">\r\n\t\t<a href="#" class="upfront-property-change">{{Upfront.Settings.l10n.global.views.edit}}</a>\r\n\t\t<a href="#" class="upfront-property-remove">{{Upfront.Settings.l10n.global.views.remove}}</a>\r\n\t</div>\r\n</dd>';});


define('text!upfront/templates/properties.html',[],function () { return '<h3>{{name}}</h3>\r\n\r\n<dl class="upfront-properties_collection">\r\n</dl>\r\n\r\n<button type="button" id="add-property">{{Upfront.Settings.l10n.global.views.add_new}}</button>\r\n\r\n<div id="upfront-new_property" style="display:none">\r\n\t<input type="text" id="upfront-new_property-name" placeholder="name" />\r\n\t<input type="text" id="upfront-new_property-value" placeholder="value" />\r\n\t<button type="button" id="done-adding-property">{{Upfront.Settings.l10n.global.views.add}}</button>\r\n</div>';});


define('text!upfront/templates/property_edit.html',[],function () { return '<input type="text" id="upfront-new_property-name" placeholder="name" value="{{name}}" />\r\n<input type="text" id="upfront-new_property-value" placeholder="value" value="{{value}}" />\r\n<button type="button" class="upfront-property-save">{{Upfront.Settings.l10n.global.views.save}}</button>';});


define('text!upfront/templates/overlay_grid.html',[],function () { return '<div class="upfront-overlay-grid upfront-overlay-grid-{{style}}">\r\n\t{[ _(columns).times(function(i){ var c = i+1; ]}<div class="c1 t1 m1 upfront-grid-border">{{c}}</div>{[ }) ]}\r\n</div>\r\n';});


define('text!upfront/templates/edit_background_area.html',[],function () { return '<div class="command-edit-label">{{Upfront.Settings.l10n.global.views.edit_bg_areas}}</div>\r\n<div class="command-edit-switcher">\r\n\t<span class="switch switch-off">{{Upfront.Settings.l10n.global.views.off}}</span>\r\n\t<span class="switch switch-on">{{Upfront.Settings.l10n.global.views.on}}</span>\r\n\t<span class="knob"></span>\r\n</div>';});


define('text!upfront/templates/sidebar_settings_lock_area.html',[],function () { return '<div class="panel-setting-item">\r\n\t<div class="region-lock-switch upfront-icon upfront-icon-unlock {{lock_class}}">{{Upfront.Settings.l10n.global.views.lock_areas}}</div>\r\n</div>\r\n<div class="panel-setting-dialog panel-setting-dialog-info">{{Upfront.Settings.l10n.global.views.unlock_areas}}</div>';});


define('text!upfront/templates/sidebar_settings_background.html',[],function () { return '<div class="panel-setting-item">\r\n\t<div class="panel-setting-sub-label">{{Upfront.Settings.l10n.global.views..background}}:</div>\r\n\t<div class="panel-setting-background clearfix">\r\n\t\t<input type="text" id="region-bg-color" name="color" />\r\n\t\t<a href="#" id="region-bg-image-upload" class="panel-setting-button upfront-icon upfront-icon-edit thickbox">{{Upfront.Settings.l10n.global.views..upload_image}}</a>\r\n\t\t<a href="#" id="region-bg-image-edit" class="panel-setting-button upfront-icon upfront-icon-edit" style="display: none;">{{Upfront.Settings.l10n.global.views..edit_image}}</a>\r\n\t</div>\r\n\t<div class="panel-setting-background-more">\r\n\t\t<div class="background-image-wrap"></div>\r\n\t\t<div class="panel-setting-sub-label">{{Upfront.Settings.l10n.global.views..edit_image_position}}:</div>\r\n\t\t<div class="panel-setting-background-position">\r\n\t\t\t<div class="background-position-select">\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="left top" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="center top" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="right top" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="left center" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="center" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="right center" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="left bottom" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="center bottom" /></span>\r\n\t\t\t\t<span class="position-select-wrap"><input type="radio" class="position-select" name="position" value="right bottom" /></span>\r\n\t\t\t</div>\r\n\t\t\t<div class="or-round">or</div>\r\n\t\t\t<div class="background-tile-select">\r\n\t\t\t\t<label class="tile-select-wrap"><input type="checkbox" class="upfront-field-checkbox tile-select" name="tile" value="repeat-x" />{{Upfront.Settings.l10n.global.views..tile_horizontally}}</label>\r\n\t\t\t\t<label class="tile-select-wrap"><input type="checkbox" class="upfront-field-checkbox tile-select" name="tile" value="repeat-y" />{{Upfront.Settings.l10n.global.views..tile_vertically}}</label>\r\n\t\t\t\t<label class="tile-select-wrap"><input type="checkbox" class="upfront-field-checkbox tile-select" name="tile" value="fill" />{{Upfront.Settings.l10n.global.views..fill_space}}</label>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>';});


define('text!upfront/templates/popup.html',[],function () { return '<div>\r\n<!--\r\n\tWrap everything in a div to convert this file\'s content in a jquery element\r\n\tso it is possible to use $.find.\r\n-->\r\n<script type="text/template" id="upfront-post-list-tpl">\r\n<div id="upfront-list">\r\n\t<div id="upfront-list-meta" class="upfront-list_item clearfix">\r\n\t\t<div class="upfront-list_item-component upfront-date upfront-header {{ orderby == \'post_date\' ? \'active ordered-\' + order : \'\' }}" data-sortby="post_date">Date <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-title upfront-header {{ orderby == \'post_title\' ? \'active ordered-\' + order : \'\' }}"  data-sortby="post_title">Post Title <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-author upfront-header {{ orderby == \'post_author\' ? \'active ordered-\' + order : \'\' }}" data-sortby="post_author">Author <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-comments-count upfront-header {{ orderby == \'post_comments\' ? \'active ordered-\' + order : \'\' }}" data-sortby="post_comments"><i class="icon-post-comments"></i> <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t</div>\r\n\t<div class="upfront-list-items upfront-scroll-panel">\r\n\t{[ if(!posts.length){ ]}\r\n\t\t<p class="upfront-no-results">{{Upfront.Settings.l10n.global.content.no_posts}}</p>\r\n\t{[ } else { ]}\r\n\t{[ _.each(posts, function (post, idx){ ]}\r\n\t\t<div class="upfront-list_item-post upfront-list_item clearfix status-{{ post.get("post_status") }}" data-post_id="{{ post.get("ID") }}">\r\n\t\t\t<div class="upfront-list_item-component upfront-date post-status-{{ post.get("post_status") }}" title="{[ if(post.get("post_status") == "publish") { ]}Published{[ } else if(post.get("post_status") == "future") { ]}Scheduled{[ } else { ]}Draft{[ } ]}">{[ if(post.get("post_status") == "future") { ]}sched. for{[ } ]}\r\n\t\t\t{{ Upfront.Util.format_date(post.get("post_date")) }}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-title upfront-list_item-main">{{ post.get("post_title") }}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-author">{[ if(post.author.get(\'data\')){ ]} {{ post.author.get(\'data\').display_name }} {[ } ]}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-comments-count">{{ post.get("comment_count") }}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-editactions"><a href="{{ post.get("permalink") }}" class="editaction edit">Edit</a><a href="{{ post.get("permalink") }}" class="editaction view">View</a><a href="#" class="editaction trash">Trash</a></div>\r\n\t\t</div>\r\n\t{[ }); } ]}\r\n\t</div>\r\n</div>\r\n</script>\r\n\r\n<script type="text/template" type="text/template" id="upfront-post-single-tpl">\r\n<div id="upfront-list-page" style="display:none">\r\n\t<div id="upfront-list-page-path">\r\n\t\t<a href="#" class="upfront-path-back">{{Upfront.Settings.l10n.global.content.posts}}</a> &nbsp;&raquo;&nbsp;\r\n\t\t<a href="#" class="last">{{ post.get(\'post_title\') }}</a>\r\n\t</div>\r\n\t<div id="upfront-list-page-preview">\r\n\t\t<div id="upfront-page_preview-wrapper">\r\n\t\t\t<div id="upfront-page_preview-featured_image" class="upfront-page_preview-item">\r\n\t\t\t\t<h4>Featured Image: </h4>\r\n\t\t\t\t<div class="upfront-thumbnailinfo">{{Upfront.Settings.l10n.global.content.loading}}</div>\r\n\t\t\t\t<img src="{{post.featuredImage }}" style="{{post.featuredImage ? \'\' : \'display:none\'}}" />\r\n\t\t\t<div class="upfront-page_preview-edit_feature"><a href="#">{{Upfront.Settings.l10n.global.content.edit}} <i class="icon-pencil"></i></a></div>\r\n\t\t\t</div>\r\n\t\t\t<div class="upfront-page_preview-bottom" id="upfront-page_preview-edit">\r\n\t\t\t\t<button type="button"><i class="icon-pencil"></i> {{Upfront.Settings.l10n.global.content.edit_post}}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div id="upfront-list-page-tree" class="upfront-scroll-panel">\r\n\t\t<div class="upfront-post_content-wrapper">\r\n\t\t\t<div class="upfront-post_content">\r\n\t\t\t\t<h3>{{ post.get(\'post_title\') }}</h3>\r\n\t\t\t\t{{ post.get(\'post_content\') }}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-page-list-old-tpl">\r\n<div id="upfront-list-page" class="bordered-bottom clearfix">\r\n\t<div id="upfront-list-page-path"></div>\r\n\t<div id="upfront-list-page-preview">\r\n\t\t<div id="upfront-page_preview-wrapper">\r\n\t\t\t<h4>{{Upfront.Settings.l10n.global.content.select_page}}</h4>\r\n\t\t</div>\r\n\t</div>\r\n\t<div id="upfront-list-page-tree" class="upfront-list-items upfront-scroll-panel">\r\n\t{[ _.each(pages, function (page){ ]}\r\n\t\t{{ pageItemTemplate({page: page, pageItemTemplate: pageItemTemplate}) }}\r\n\t{[ }); ]}\r\n\t</div>\r\n</div>\r\n</script>\r\n\r\n<script type="text/template"  id="upfront-page-list-item-tpl">\r\n\t<div class="upfront-list-page_item {{ page.children.length ? \'has_children closed\' : \'\' }}" id="upfront-list-page_item-{{ page.get("ID") }}" data-post_id="{{ page.get("ID") }}">\r\n\t\t{[if(page.children.length){ ]}\r\n\t\t<i class="icon-caret-right"></i>\r\n\t\t<i class="icon-caret-down"></i>\r\n\t\t{[ } ]}\r\n\t\t{{ page.get("post_title") }}\r\n\t\t{[if(page.children.length){ page.children.each(function(child, idx) { ]}\r\n\t\t\t{{ pageItemTemplate({page: child, pageItemTemplate: pageItemTemplate}) }}\r\n\t\t{[ })}; ]}\r\n\t</div>\r\n</script>\r\n\r\n\r\n<script type="text/template" id="upfront-page-list-tpl">\r\n<div id="upfront-list">\r\n\t<div id="upfront-list-meta" class="upfront-list_item clearfix">\r\n\t\t<div class="upfront-list_item-component upfront-date upfront-header {{ orderby == \'post_date\' ? \'active ordered-\' + order : \'\' }}" data-sortby="post_date">Date <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-title upfront-header {{ orderby == \'post_title\' ? \'active ordered-\' + order : \'\' }}"  data-sortby="post_title">Page Title <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-author upfront-header {{ orderby == \'post_author\' ? \'active ordered-\' + order : \'\' }}" data-sortby="post_author">Author <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-comments-count upfront-header {{ orderby == \'post_comments\' ? \'active ordered-\' + order : \'\' }}" data-sortby="post_comments"><i class="icon-post-comments"></i> <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t</div>\r\n\t<div class="upfront-list-items upfront-scroll-panel">\r\n\t{[ if(!pages.length){ ]}\r\n\t\t<p class="upfront-no-results">{{Upfront.Settings.l10n.global.content.no_posts}}</p>\r\n\t{[ } else { ]}\r\n\t{[ _.each(pages, function (post){ ]}\r\n\t\t<div class="upfront-list_item-post upfront-list_item clearfix status-{{ post.get("post_status") }}" data-post_id="{{ post.get("ID") }}">\r\n\t\t\t<div class="upfront-list_item-component upfront-date post-status-{{ post.get("post_status") }}" title="{[ if(post.get("post_status") == "publish") { ]}Published{[ } else if(post.get("post_status") == "future") { ]}Scheduled{[ } else { ]}Draft{[ } ]}">{[ if(post.get("post_status") == "future") { ]}sched. for{[ } ]}\r\n\t\t\t{{ Upfront.Util.format_date(post.get("post_date")) }}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-title upfront-list_item-main">{{ post.get("post_title") }}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-author">{[ if(post.author.get(\'data\')){ ]} {{ post.author.get(\'data\').display_name }} {[ } ]}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-comments-count">{{ post.get("comment_count") }}</div>\r\n\t\t\t<div class="upfront-list_item-component upfront-editactions"><a href="{{ post.get("permalink") }}" class="editaction edit">Edit</a><a href="{{ post.get("permalink") }}" class="editaction view">View</a><a href="#" class="editaction trash">Trash</a></div>\r\n\t\t</div>\r\n\t{[ }); } ]}\r\n\t</div>\r\n</div>\r\n</script>\r\n\r\n\r\n\r\n<script type="text/template" id="upfront-page-preview-tpl">\r\n\t<div id="upfront-page_preview-wrapper" class="upfront-scroll-panel">\r\n\t\t<div id="upfront-page_preview-featured_image" class="upfront-page_preview-item">\r\n\t\t\t<h4>{{Upfront.Settings.l10n.global.content.featured_image}}: </h4>\r\n\t\t\t<div class="upfront-thumbnailinfo" style="{{page.thumbnail ? \'display:none\' : \'\'}}">Loading...</div>\r\n\t\t\t<img src="{{page.thumbnail }}" style="{{page.thumbnail ? \'\' : \'display:none\'}}" />\r\n\t\t\t<div class="upfront-page_preview-edit_feature"><a href="#">Edit <i class="icon-pencil"></i></a></div>\r\n\t\t</div>\r\n\t\t<div id="upfront-page_preview-template" class="upfront-page_preview-item">\r\n\t\t\t<h4>{{Upfront.Settings.l10n.global.content.template}}: </h4>\r\n\t\t\t<select id="upfront-page_template-select">\r\n\t\t\t\t<option value="0">{{Upfront.Settings.l10n.global.content.default_opt}}</option>\r\n\t\t\t\t{[ _.each(allTemplates, function(tpl, name){ var selected = tpl == template ? \'selected="selected"\' : ""; ]}\r\n\t\t\t\t<option value="{{tpl}}" {{selected}}>{{name}}</option>\r\n\t\t\t\t{[ }) ]}\r\n\t\t\t</select>\r\n\t\t</div>\r\n\t\t<div id="upfront-page_preview-edit">\r\n\t\t\t<button type="button"><i class="icon-pencil"></i> {{Upfront.Settings.l10n.global.content.edit_page}}</button>\r\n\t\t</div>\r\n\t</div>\r\n</script>\r\n\r\n<script type="text/template"  id="upfront-comments-tpl">\r\n<div id="upfront-list" class="upfront-list-comments clearfix bordered-bottom">\r\n\t{[ if(!comments.length){ ]}\r\n\t\t<p class="upfront-no-results">{{Upfront.Settings.l10n.global.content.no_comments}}</p>\r\n\t{[ } else { ]}\r\n\t<div id="upfront-list-meta" class="upfront-list_item">\r\n\t\t<div class="upfront-list_item-component upfront-comment_author upfront-header {{ orderby == \'comment_author\' ? \'active ordered-\' + order : \'\' }}" data-sortby="comment_author">{{Upfront.Settings.l10n.global.content.author}} <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-date upfront-header {{ orderby == \'comment_date\' ? \'active ordered-\' + order : \'\' }}" data-sortby="comment_date">{{Upfront.Settings.l10n.global.content.date}} <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t\t<div class="upfront-list_item-component upfront-comment_content upfront-header {{ orderby == \'comment_content\' ? \'active ordered-\' + order : \'\' }}" data-sortby="comment_content">{{Upfront.Settings.l10n.global.content.comment}} <i class="icon-caret-down"></i><i class="icon-caret-up"></i></div>\r\n\t</div>\r\n\t<div class="upfront-list-items upfront-list-comment-items upfront-scroll-panel">\r\n\r\n\t\t{[ _.each(comments, function(comment){ ]}\r\n\t\t<div class="upfront-list_item-comment upfront-list_item clearfix" id="upfront-list_item-comment-{{ comment.get("comment_ID") }}" data-comment_id="{{ comment.get("comment_ID") }}">\r\n\t\t\t\t{{ commentTpl({comment:comment, excerptLength: excerptLength}) }}\r\n\t\t</div>\r\n\t\t{[ }) ]}\r\n\t</div>\r\n\t{[ } ]}\r\n</div>\r\n</script>\r\n\r\n<script type="text/template"  id="upfront-comment-single-tpl">\r\n\t{[ var excerpt = jQuery(\'<div></div>\').html(comment.get(\'comment_content\')).text(); ]}\r\n\t\t<div class="upfront-comment-approved">\r\n\t\t\t{[ if(comment.get("comment_approved") === \'0\'){ ]}\r\n\t\t\t<i class="upfront-comments-approve icon-circle-blank" data-comment_id="{{ comment.get("comment_ID") }}"></i>\r\n\t\t\t{[ } ]}\r\n\t\t</div>\r\n\t\t<div class="upfront-list_item-component upfront-comment_author">\r\n\t\t\t<img src="{{ Upfront.Util.get_avatar(comment) }}" title="{{comment.get("comment_author")}}" class="avatar" /> {{comment.get("comment_author")}}</div>\r\n\t\t<div class="upfront-list_item-component upfront-date">{{ Upfront.Util.format_date(comment.get("comment_date")) }}</div>\r\n\t\t<div class="upfront-list_item-component upfront-comment_content upfront-comment_excerpt upfront-list_item-main upfront-post_content">{{ excerpt.length > excerptLength ? excerpt.substring(0, excerptLength) + \' [...]\' : excerpt }}</div>\r\n\t\t<div class="upfront-list_item-component upfront-comment_content upfront-comment_content-full-wrapper upfront-list_item-main upfront-post_content  upfront-scroll-panel">\r\n\t\t\t<div class="upfront-comment_content-full upfront-comment_togglable">{{ comment.get("comment_content") }}</div>\r\n\t\t\t<div class="upfront-comment_edit upfront-comment_togglable" data-comment_id="{{ comment.get(\'comment_ID\') }}">\r\n\t\t\t\t<textarea class="comment-edit-box" class="edit" rows="16">{{ comment.get("comment_content") }}</textarea>\r\n\t\t\t\t<button type="button" class="comment-edit-ok">{{Upfront.Settings.l10n.global.content.ok}}</button>\r\n\t\t\t\t<button type="button" class="comment-edit-cancel">{{Upfront.Settings.l10n.global.content.cancel}}</button>\r\n\t\t\t</div>\r\n\t\t\t<div class="upfront-comment_reply upfront-comment_togglable" data-comment_id="{{ comment.get(\'comment_ID\') }}">\r\n\t\t\t\t<textarea class="comment-edit-box" class="edit" rows="16" placeholder="Reply here..."></textarea>\r\n\t\t\t\t<button type="button" class="comment-reply-ok">{{Upfront.Settings.l10n.global.content.ok}}</button>\r\n\t\t\t\t<button type="button" class="comment-reply-cancel">{{Upfront.Settings.l10n.global.content.cancel}}</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class="upfront-comment_actions-wrapper">\r\n\t\t\t{[ if(comment.get("comment_approved") !== \'trash\'){ ]}\r\n\t\t\t<a href="#reply" class="reply"><i class="icon-reply"></i> {{Upfront.Settings.l10n.global.content.reply}}</a>\r\n\t\t\t{[ } ]}\r\n\t\t\t<a href="#edit" class="edit"><i class="icon-pencil"></i> {{Upfront.Settings.l10n.global.content.edit}}</a>\r\n\t\t\t{[ if(comment.get("comment_approved") === \'0\'){ ]}\r\n\t\t\t<a href="#approve" class="approve"><i class="icon-ok"></i> {{Upfront.Settings.l10n.global.content.approve}}</a>\r\n\t\t\t{[ } else if(comment.get("comment_approved") === \'1\'){ ]}\r\n\t\t\t<a href="#unapprove" class="unapprove"><i class="icon-circle-blank"></i> {{Upfront.Settings.l10n.global.content.unapprove}}</a>\r\n\t\t\t{[ } if(comment.get("comment_approved") === \'spam\'){ ]}\r\n\t\t\t<a href="#unspam" class="unspam"><i class="icon-comment-alt"></i> {{Upfront.Settings.l10n.global.content.unspam}}</a>\r\n\t\t\t{[ } else if(comment.get("comment_approved") !== \'trash\') { ]}\r\n\t\t\t<a href="#spam" class="spam"><i class="icon-ban-circle"></i> {{Upfront.Settings.l10n.global.content.spam}}</a>\r\n\t\t\t{[ } if(comment.get("comment_approved") === \'trash\'){ ]}\r\n\t\t\t<a href="#unthrash" class="unthrash"><i class="icon-comment"></i> {{Upfront.Settings.l10n.global.content.untrash}}</a>\r\n\t\t\t{[ } else { ]}\r\n\t\t\t<a href="#thrash" class="thrash"><i class="icon-remove"></i> {{Upfront.Settings.l10n.global.content.trash}}</a>\r\n\t\t\t{[ } ]}\r\n\t\t</div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-slug-tpl">\r\n<div class="upfront-slug_editor">\r\n\t<div class="upfront-slug_editor-title">{{Upfront.Settings.l10n.global.content.edit_post_url}}</div>\r\n\t<p class="upfront-slug_editor-info">{{Upfront.Settings.l10n.global.content.post_url_info}}</p>\r\n\t<p class="upfront-slug_editor-url">\r\n\t\t{{ rootURL }}\r\n\t\t<input type="text" id="upfront-post_slug" value\t="{{ slug }}" />\r\n\t\t<button id="upfront-post_slug-send" value="{{Upfront.Settings.l10n.global.content.ok}}"><i class="icon-ok"></i> {{Upfront.Settings.l10n.global.content.ok}}</button>\r\n\t</p>\r\n</div>\r\n</script>\r\n<script type="text/template" id="upfront-pagination-tpl">\r\n\t<div id="upfront-entity_list-pagination">\r\n\t\t<a class="upfront-pagination_item upfront-pagination_item-skip upfront-pagination_item-prev"></a>\r\n\r\n\r\n\t\t<div class="upfront-pagination_navigation">\r\n\t\t\t<input type="text" class="upfront-pagination_page-current" value="{{currentPage+1}}" /> of <a class="upfront-pagination_page-item" data-idx="{{pages}}">{{pages}}</a>\r\n\t\t</div>\r\n\r\n\t\t<a class="upfront-pagination_item upfront-pagination_item-skip upfront-pagination_item-next"></a>\r\n\r\n\t\t<small>{{totalElements}} items</small>\r\n\t\t</div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-pagination-tpl-old">\r\n<div id="upfront-entity_list-pagination" data-total="{{ pages }}" data-page_size="{{pageSize}}">\r\n\t{[ if(pages > 1) { ]}\r\n\t<div class="upfront-pagination_item upfront-pagination_item-skip upfront-pagination_item-prev">\r\n\r\n\t</div>\r\n\r\n\t{[ _.each(_.range(pages), function(i){ ]}\r\n\t<div class="upfront-pagination_item upfront-pagination_page-item {{ i == currentPage ? \'current\' : \'\' }}" data-page_idx="{{ i }}">{{ i + 1}}</div>\r\n\t{[ }) ]}\r\n\r\n\t<div class="upfront-pagination_item upfront-pagination_item-skip upfront-pagination_item-next">\r\n\r\n\t</div>\r\n\t{[ } ]}\r\n</div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-tabs-tpl">\r\n<ul class="upfront-tabs">\r\n\t{[ _.each(tabs, function(tab){ ]}\r\n\t<li data-type="{{tab.id}}" class="{{ tab.id == active ? \'active\' : \'\' }}">{{tab.text}}</li>\r\n\t{[ }); ]}\r\n</ul>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-search-tpl">\r\n\t<div class="search_container clearfix">\r\n\t\t<div id="upfront-search_action" class="search upfront-icon upfront-icon-popup-search"></div>\r\n\t\t<div id="upfront-search_container" style="display:{{ query ? \'block\' : \'none\' }}">\r\n\t\t\t<input type="text" id="upfront-list-search_input" value="{{ query ? query : \'\' }}" />\r\n\t\t</div>\r\n\t</div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-notifier-tpl">\r\n\t<div id="upfront-notifier">\r\n   \t\t<div id="upfront-notice"></div>\r\n\t</div>\r\n</script>\r\n\r\n<script type="text/template" id="selector-post_type-tpl">\r\n{[if(postTypes.length > 1){ ]}\r\n<div id="upfront-selector-post_type">\r\n\t{{Upfront.Settings.l10n.global.views.select_post_type}}\r\n\t<div class="upfront-field-select">\r\n\t\t<div class="upfront-field-select-value">{{postTypes[0].label}}</div>\r\n\t\t<ul class="upfront-field-select-options">\r\n\t\t{[ _.each(postTypes, function(type){ ]}\r\n\t\t\t<li class="upfront-field-select-option upfront-selector-option" rel="{{ type.name }}">\r\n\t\t\t\t{{ type.label }}\r\n\t\t\t</li>\r\n\t\t{[ }); ]}\r\n\t\t</ul>\r\n\t</div>\r\n</div>\r\n{[ } ]}\r\n<div id="upfront-selector-posts" class="upfront-scroll-panel">\r\n\r\n</div>\r\n</script>\r\n<script type="text/template" id="selector-post-tpl">\r\n<table id="upfront-list" class="upfront-list-items">\r\n{[ _.each(posts, function(post){ ]}\r\n<tr class="upfront-selector-post upfront-list_item" rel="{{post.id}}">\r\n\t<td class="upfront-selector-post-checked upfront-list_item-component"></td>\r\n\t<td class="upfront-selector-post-title upfront-list_item-component upfront-list_item-main">{{post.get(\'post_title\')}}</td>\r\n\t<td class="upfront-selector-post-date upfront-list_item-component">{{ Upfront.Util.format_date(post.get(\'post_date\'), false) }}</td>\r\n</tr>\r\n{[ }) ]}\r\n</table>\r\n</script>\r\n\r\n\r\n<script type="text/template" id="datepicker-tpl">\r\n<div class="upfront-date_picker upfront-ui">\r\n\t<div class="upfront-bar-datepicker">\r\n\t</div>\r\n\t<div class="upfront-time_picker">\r\n\t\tTime:\r\n\t\t<select class="ueditor-hours-select">\r\n\t\t\t{[ _.each(hours, function(h){ ]}\r\n\t\t\t<option value="{{h}}" {{h == currentHour ? \'selected=\\\'selected\\\'\' : \'\'}} >{{h}}</option>\r\n\t\t\t{[ }); ]}\r\n\t\t</select>:\r\n\t\t<select class="ueditor-minutes-select">\r\n\t\t\t{[ _.each(minutes, function(m){ ]}\r\n\t\t\t<option value="{{m}}" {{m == currentMinute ? \'selected=\\\'selected\\\'\' : \'\'}} >{{m}}</option>\r\n\t\t\t{[ }); ]}\r\n\t\t</select>\r\n\t</div>\r\n\t<div class="ueditor-datepicker-buttons">\r\n\t\t<a class="ueditor-action-pickercancel">Cancel</a>\r\n\t\t<a class="ueditor-action-pickerok button small-button">Ok</a>\r\n\t</div>\r\n</div>\r\n</script>\r\n\r\n<script type="text/template" id="microselect-tpl">\r\n\t\t<div class="ueditor-select-options">\r\n\t\t\t{[ _.each(options, function(option){ ]}\r\n\t\t\t\t<a class="ueditor-select-option ueditor-action-status" data-id="{{option.value}}">{{option.name}}</a>\r\n\t\t\t{[ }); ]}\r\n\t\t</div>\r\n\t\t<input type="text" class="ueditor-select-focus">\r\n</script>\r\n\r\n<script id="csseditor-tpl" type="text/template">\r\n\t<div class="upfront-css-resizable">\r\n\t\t<div class="upfront-css-top">\r\n      {[ if (elementType) { ]}\r\n\t\t\t<span class="upfront-css-type">{{ elementType }} Element</span>\r\n      {[ } ]}\r\n\t\t\t{[ if (showToolbar) { ]}\r\n\t\t\t<div id="insert-font-widget" class="upfront-icon">\r\n\t\t\t\t<a class="upfront-css-font" href="#">{{Upfront.Settings.l10n.global.content.insert_font}}</a>\r\n\t\t\t</div>\r\n\t\t\t<a class="upfront-css-theme_image upfront-css-image" href="#">{{Upfront.Settings.l10n.global.content.insert_theme_image}}</a>\r\n\t\t\t<a class="upfront-css-media_image upfront-css-image" href="#">{{Upfront.Settings.l10n.global.content.insert_image}}</a>\r\n\t\t\t<span class="upfront-css-color"></span>\r\n      {[ } ]}\r\n\t\t\t<a class="upfront-css-close" href="#">close</a>\r\n\t\t</div>\r\n\t\t<div class="upfront-css-body">\r\n\t\t\t<div class="upfront-css-ace"></div>\r\n\t\t\t<div class="upfront-css-sidebar">\r\n        {[ if (selectors) { ]}\r\n\t\t\t\t<div class="upfront-css-selectors upfront-scroll-panel">\r\n\t\t\t\t\t<p>{{Upfront.Settings.l10n.global.content.available_element_selectors}}</p>\r\n\t\t\t\t\t{[ _.each(selectors, function(data, s){ ]}\r\n\t\t\t\t\t<span class="upfront-css-selector" title="{{ data.info }}" data-selector="{{ s }}">{{data.label}}</span>\r\n\t\t\t\t\t{[ }); ]}\r\n          {[ if (elementType) { ]}\r\n\t\t\t\t\t{{ _.size(selectors) ? \'\' : \'No selectors available for the \' + elementType.toLowerCase() + \' element.\'}}\r\n          {[ } ]}\r\n\t\t\t\t</div>\r\n        {[ } ]}\r\n\t\t\t\t<div class="upfront-css-save-form">\r\n        \t\t{[ if (show_style_name) { ]}\r\n\t\t\t\t\t<p>{{Upfront.Settings.l10n.global.views.style_name}}</p>\r\n\t\t\t\t\t<input type="text" class="upfront-css-save-name-field" value="{{ name }}">\r\n        \t\t{[ } ]}\r\n          \t\t\t<button class="upfront-css-save-ok">{{Upfront.Settings.l10n.global.content.save}}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</script>\r\n\r\n<script id="icon-fonts-manager-tpl" type="text/template">\r\n\t<div class="manage-icon-fonts">\r\n\t\t<div class="fonts-manager-panel-title">\r\n\t\t\t{{Upfront.Settings.l10n.global.content.choose_icon_fonts}}\r\n\t\t</div>\r\n\t\t<div class="icon-fonts-list">\r\n\t\t\t{[ _.each(fonts, function(font) { ]}\r\n\t\t\t<div data-family="{{ font.get(\'family\') }}" class="icon-fonts-list-item {[ if (font.get(\'active\')) { ]}icon-fonts-list-item-active{[ } ]}">\r\n\t\t\t\t{{ font.get(\'name\') }}{[ if (font.getUploadStatus() !== true) { ]} <span class="icon-font-upload-status" title="{{ font.getUploadStatus() }}">*</span>{[ } ]}\r\n\t\t\t</div>\r\n\t\t\t{[ }); ]}\r\n\t\t</div>\r\n\t\t{[ if(Upfront.themeExporter && location.pathname.match(/\\/create_new\\/theme/) === null) { ]}\r\n\t\t<div class="upload-icon-font">{{Upfront.Settings.l10n.global.views.upload_icon_font}}</div>\r\n\t\t<form style="display: none" id="upfront-upload-icon-font" name="upfront-upload-icon-font" enctype="multipart/form-data" method="post" action="{{url}}" data-url="{{url}}?action=upfront-upload-icon-font">\r\n\t\t\t<input type="file" name="media" id="upfront-icon-font-input">\r\n\t\t\t<input type="hidden" name="action" value="upfront-upload-icon-font">\r\n\t\t\t<input type="submit" value="Upload">\r\n\t\t</form>\r\n\t\t{[ } ]}\r\n\t</div>\r\n\t<div class="preview-icon-fonts">\r\n\t\t<div class="fonts-manager-panel-title">\r\n\t\t\t{{Upfront.Settings.l10n.global.content.icon_font_icons_preview}}\r\n\t\t</div>\r\n\t\t<div class="icon-font-icons-preview">\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="A">A</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="B">B</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="C">C</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="D">D</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="E">E</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="F">F</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="G">G</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="H">H</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="I">I</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="J">J</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="K">K</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="L">L</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="M">M</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="N">N</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="O">O</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="P">P</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="Q">Q</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="R">R</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="S">S</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="T">T</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="U">U</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="V">V</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="W">W</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="X">X</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="Y">Y</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="Z">Z</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="a">a</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="b">b</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="c">c</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="d">d</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="e">e</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="f">f</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="g">g</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="h">h</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="i">i</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="j">j</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="k">k</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="l">l</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="m">m</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="n">n</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="o">o</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="p">p</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="q">q</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="r">r</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="s">s</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="t">t</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="u">u</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="v">v</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="w">w</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="x">x</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="y">y</div>\r\n\t\t\t<div class="icon-font-icon-preview uf_font_icon" title="z">z</div>\r\n\t\t</div>\r\n\t</div>\r\n</script>\r\n\r\n<script id="text-fonts-manager-tpl" type="text/template">\r\n  <div class="add-font-panel panel">\r\n    <div class="loading-fonts">{{Upfront.Settings.l10n.global.content.loading_fonts}}</div>\r\n    <div class="font-weights-list">\r\n      <div class="font-weights-list-wrapper">\r\n\t\t\t\t<div class="fonts-manager-panel-title">\r\n\t\t\t\t\t{{Upfront.Settings.l10n.global.content.choose_typeface}}\r\n\t\t\t\t</div>\r\n\t\t\t\t{[ if (show_no_styles_notice) { ]}\r\n\t\t\t\t<div class="fonts-weights-notice-text">\r\n\t\t\t\t\t{{Upfront.Settings.l10n.global.content.typeface_info_text}}\r\n\t\t\t\t</div>\r\n\t\t\t\t{[ } ]}\r\n\t\t\t</div>\r\n    </div>\r\n    <span class="add-font-button">Add &raquo;</span>\r\n  </div>\r\n</script>\r\n\r\n<script id="theme-fonts-panel" type="text/template">\r\n    <h3 class="panel-title">{{Upfront.Settings.l10n.global.content.theme_font_styles}}</h3>\r\n\t\t<div class="font-list">\r\n\t\t\t{[ if (show_no_styles_notice) { ]}\r\n\t\t\t<div class="fonts-manager-panel-title">{{Upfront.Settings.l10n.global.content.no_fonts_added}}</div>\r\n\t\t\t{[ } ]}\r\n\t\t</div>\r\n    <div class="font-stats">\r\n    </div>\r\n</script>\r\n\r\n<script id="theme-font-list-item" type="text/template">\r\n{{ family }} ({{ variant }})<span class="delete upfront-icon"></span>\r\n</script>\r\n\r\n<script id="save-dialog-tpl" type="text/template">\r\n\t<div id="upfront-save-dialog">\r\n\t\t<p>{{ question }}</p>\r\n\t\t<span class="upfront-save-button" data-save-as="this-post">{{ thisPostButton }}</span>\r\n\t\t<span class="upfront-save-button" data-save-as="all-posts">{{ allPostsButton }}</span>\r\n\t</div>\r\n</script>\r\n\r\n\r\n<!-- end of the wrap div -->\r\n</div>\r\n';});


define('text!upfront/templates/region_add_panel.html',[],function () { return '<div class="upfront-add-region-choice"></div>\r\n<div class="upfront-add-region-new"></div>\r\n<div class="upfront-add-region-global"></div>\r\n\r\n';});


define('text!upfront/templates/region_edit_panel.html',[],function () { return '<div>\r\n<!--\r\n\tWrap everything in a div to convert this file\'s content in a jquery element\r\n\tso it is possible to use $.find.\r\n-->\r\n<script type="text/template" id="upfront-region-bg-setting">\r\n\t<div class="upfront-region-bg-setting-header clearfix">\r\n\t\t<div class="upfront-region-bg-setting-auto-resize"></div>\r\n\t\t\r\n\t\t<div class="upfront-region-bg-setting-name">\r\n\t\t\t<div class="upfront-region-bg-setting-name-wrap">\r\n\t\t\t\t<span class="upfront-region-name-edit-value"></span>\r\n\t\t\t\t<span class="upfront-region-bg-setting-is-global">{{Upfront.Settings.l10n.global.views.global}}</span>\r\n\t\t\t\t<a href="#" class="upfront-region-name-edit-trigger">{{Upfront.Settings.l10n.global.views.edit}}</a>\r\n\t\t\t</div>\r\n\t\t\t<div class="upfront-region-bg-setting-name-edit"></div>\r\n\t\t</div>\r\n\t</div>\r\n\t\r\n\t<div class="upfront-region-bg-setting-fixed-region clearfix">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.floating_region_settings}}:</div>\r\n\r\n\t</div>\r\n\r\n\t<div class="upfront-region-bg-setting-lightbox-region clearfix">\r\n\r\n\t</div>\r\n\r\n\t<div class="upfront-region-bg-setting-theme-body">\r\n\t\t<div class="upfront-region-bg-setting-heading">{{Upfront.Settings.l10n.global.views.global_bg_settings}}</div>\r\n\r\n\t</div>\r\n\r\n\t<div class="upfront-region-bg-setting-region-global"></div>\r\n\t<div class="upfront-region-bg-setting-add-global-region"></div>\r\n\r\n\t<div class="upfront-region-bg-setting-region-type">\r\n\t\t<!-- <div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.area_type}}</div> -->\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-region-behavior">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.element_behavior}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-region-nav">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.add_sub_region}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-type">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.bg_type}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-tab upfront-region-bg-setting-tab-color"></div>\r\n\t<div class="upfront-region-bg-setting-tab upfront-region-bg-setting-tab-image"></div>\r\n\t<div class="upfront-region-bg-setting-tab upfront-region-bg-setting-tab-featured"></div>\r\n\t<div class="upfront-region-bg-setting-tab upfront-region-bg-setting-tab-slider"></div>\r\n\t<div class="upfront-region-bg-setting-tab upfront-region-bg-setting-tab-map"></div>\r\n\t<div class="upfront-region-bg-setting-tab upfront-region-bg-setting-tab-video"></div>\r\n\t<div class="upfront-region-bg-setting-padding">\r\n\t\t<div class="upfront-region-bg-setting-padding-type"></div>\r\n\t\t<div class="upfront-region-bg-setting-equal-padding"></div>\r\n\t\t<div class="upfront-region-bg-setting-varied-padding">\r\n\t\t\t<div class="upfront-region-bg-setting-padding-top">\r\n\t\t\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.top_padding}}</div>\r\n\t\t\t</div>\r\n\t\t\t<div class="upfront-region-bg-setting-padding-bottom">\r\n\t\t\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.bottom_padding}}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-footer clearfix">\r\n\t\t<!-- <div class="upfront-region-bg-setting-change-image">\r\n\t\t\t{{Upfront.Settings.l10n.global.views.change_image}}\r\n\t\t</div> -->\r\n\t\t<div class="upfront-region-bg-setting-floating-restrict"></div>\r\n\t\t<div class="upfront-region-bg-setting-sticky"></div>\r\n\t\t<div class="upfront-region-bg-setting-edit-css upfront-icon upfront-icon-edit-css">\r\n\t\t\t<span>{{Upfront.Settings.l10n.global.views.edit_region_css}}</span>\r\n\t\t</div>\r\n\t</div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-region-bg-setting-tab">\r\n\t<div class="upfront-region-bg-setting-tab-primary"></div>\r\n\t<div class="upfront-region-bg-setting-tab-secondary"></div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-region-bg-setting-tab-color">\r\n\t<div class="upfront-region-bg-setting-tab-primary">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.pick_color}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-tab-secondary"></div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-region-bg-setting-tab-image">\r\n\t<div class="upfront-region-bg-setting-tab-primary">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.image_variation}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-tab-secondary"></div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-region-bg-setting-tab-featured">\r\n\t<div class="upfront-region-bg-setting-tab-primary">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.image_variation}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-tab-secondary"></div>\r\n</script>\r\n\r\n<script type="text/template" id="upfront-region-bg-setting-tab-slider">\r\n\t<div class="upfront-region-bg-setting-tab-primary">\r\n\t\t<div class="upfront-region-bg-setting-label">{{Upfront.Settings.l10n.global.views.slider_transition}}</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-tab-secondary"></div>\r\n</script>\r\n\r\n\r\n<script type="text/template" id="upfront-region-bg-setting-tab-video">\r\n\t<div class="upfront-region-bg-setting-tab-primary">\r\n\t\t<div class="upfront-region-bg-setting-label">&nbsp;</div>\r\n\t</div>\r\n\t<div class="upfront-region-bg-setting-tab-secondary"></div>\r\n</script>\r\n\r\n\r\n</div>\r\n';});


define('text!upfront/templates/sidebar_settings_theme_colors.html',[],function () { return '<div class="panel-setting-theme-colors">\n    <div class="pabel-setting-theme-colors-top">\n        <div id="panel-setting-theme-colors-pane">\n            {[ if (!colors.length){ ]}\n            <div id="theme-colors-no-color-notice" class="upfront-icon">\n                {{Upfront.Settings.l10n.global.views.no_colors_click_plus}}\n            </div>\n            {[ } ]}\n            <div id="theme-colors-swatches">\n                <span class="theme-colors-swatch"></span>\n                <p class="theme-colors-explanation">{{Upfront.Settings.l10n.global.views.theme_colors_explanation}} <span class="theme-colors-eg-attribute">color:</span> <span class="theme-colors-eg-sharp">#</span><span class="theme-colors-eg-value">ufc2</span><span class="theme-colors-eg-semicolon">;</span></p>\n                {[ _.each(colors, function (color, idx){ ]}\n                                <span class="theme-colors-color-picker color-{{idx}}" data-index="{{idx}}" data-color="{{color.color}}"></span>\n                {[ }); ]}\n                {[ if (colors.length < 10){ ]}\n                 <span class="theme_colors_empty_picker"></span>\n                {[ } ]}\n            </div>\n        </div>\n    </div>\n    <!--<div class="panel-setting-theme-colors-bottom">-->\n        <!--<div class="panel-setting-theme-colors-shades-wrap">-->\n            <!--{[ if( colors.length ){ ]}-->\n                        <!--{{Upfront.Settings.l10n.global.views.define_swatch_hovers}}-->\n            <!--<label id="panel-setting-theme-colors-shades-label"  for="panel-setting-theme-colors-shades-range">-->\n                            <!--Color change value (<span class="panel-setting-theme-colors-shades-range-number">{{range}}</span>)-->\n                        <!--</label>-->\n                        <!--<div class="upfront-field upfront-field-slider panel-setting-theme-colors-shades-range"></div>-->\n                        <!--<ul class="panel-setting-theme-colors-shades-range-labels">-->\n                                <!--<li>0</li>-->\n                                <!--<li>50</li>-->\n                        <!--</ul>-->\n            <!--<div class="panel-setting-theme-colors-meta">-->\n                <!--{{Upfront.Settings.l10n.global.views.click_hilite_shade}}-->\n                                <!--<p class="swatch-title">{{Upfront.Settings.l10n.global.views.hilite}}:</p>-->\n                <!--<div class="panel-setting-theme-colors-highlights">-->\n                    <!--{[ _.each(colors, function (color, idx){ ]}-->\n                                        <!--<span class="theme-colors-color-box theme-colors-highlight{[ if(color.selected === \'highlight\') { ]} theme-colors-color-box-selected{[ } ]} {{color.luminance}} color-{{idx}}" style="background-color: {{color.highlight}}" data-color="{{color.highlight}}" data-index="{{idx}}" data-type="highlight"></span>-->\n                    <!--{[ }); ]}-->\n                <!--</div>-->\n                <!--<p class="swatch-title">Shade:</p>-->\n                <!--<div class="panel-setting-theme-colors-shades">-->\n                    <!--{[ _.each(colors, function (color, idx){ ]}-->\n                                        <!--<span class="theme-colors-color-box theme-colors-shade{[ if(color.selected === \'shade\') { ]} theme-colors-color-box-selected{[ } ]} {{color.luminance}} color-{{idx}}"  style="background-color: {{color.shade}}" data-index="{{idx}}" data-color="{{color.shade}}" data-type="shade"></span>-->\n                    <!--{[ }); ]}-->\n                <!--</div>-->\n            <!--</div>-->\n            <!--{[ } ]}-->\n        <!--</div>-->\n    <!--</div>-->\n</div>\n';});


define('text!upfront/templates/color_picker.html',[],function () { return '<ul class="upfront_color_picker_rgba">\n\t<li class="upfront_color_picker_rgba_r">\n\t\tR:\n\t\t<input type="text" value="{{r}}" data-type=\'r\' name="upfront_color_picker_rgba_r">\n\t</li>\n\t<li class="upfront_color_picker_rgba_g">\n\t\tG:\n\t\t<input type="text" value="{{g}}" data-type=\'g\' name="upfront_color_picker_rgba_g">\n\t</li>\n\t<li class="upfront_color_picker_rgba_b">\n\t\tB:\n\t\t<input type="text" value="{{b}}" data-type=\'b\'  name="upfront_color_picker_rgba_b">\t\t\n\t</li>\n\t<li class="upfront_color_picker_rgba_a">\n\t\tA:\n\t\t<input type="text" value="{{a}}" data-type=\'a\' name="upfront_color_picker_rgba_a">\t\t\t\n\t</li>\n</ul>\n<span class="upfront_color_picker_reset noColor"></span>';});

// Spectrum Colorpicker v1.3.2
// https://github.com/bgrins/spectrum
// Author: Brian Grinstead
// License: MIT

(function (window, $, undefined) {
    var defaultOpts = {

            // Callbacks
            beforeShow: noop,
            move: noop,
            change: noop,
            show: noop,
            hide: noop,

            // Options
            color: false,
            flat: false,
            showInput: false,
            allowEmpty: false,
            showButtons: true,
            clickoutFiresChange: false,
            showInitial: false,
            showPalette: false,
            showPaletteOnly: false,
            showSelectionPalette: true,
            localStorageKey: false,
            appendTo: "body",
            maxSelectionSize: 7,
            cancelText: "cancel",
            chooseText: "choose",
            clearText: "Clear Color Selection",
            preferredFormat: false,
            className: "",
            showAlpha: false,
            theme: "sp-light",
            palette: [["#ffffff", "#000000", "#ff0000", "#ff8000", "#ffff00", "#008000", "#0000ff", "#4b0082", "#9400d3"]],
            selectionPalette: [],
            disabled: false
        },
        spectrums = [],
        IE = !!/msie/i.exec( window.navigator.userAgent ),
        rgbaSupport = (function() {
            function contains( str, substr ) {
                return !!~('' + str).indexOf(substr);
            }

            var elem = document.createElement('div');
            var style = elem.style;
            style.cssText = 'background-color:rgba(0,0,0,.5)';
            return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');
        })(),
        inputTypeColorSupport = (function() {
            var colorInput = $("<input type='color' value='!' />")[0];
            return colorInput.type === "color" && colorInput.value !== "!";
        })(),
        replaceInput = [
            "<div class='sp-replacer'>",
            "<div class='sp-preview'><div class='sp-preview-inner'></div></div>",
            "<div class='sp-dd'>&#9660;</div>",
            "</div>"
        ].join(''),
        markup = (function () {

            // IE does not support gradients with multiple stops, so we need to simulate
            //  that for the rainbow slider with 8 divs that each have a single gradient
            var gradientFix = "";
            if (IE) {
                for (var i = 1; i <= 6; i++) {
                    gradientFix += "<div class='sp-" + i + "'></div>";
                }
            }

            return [
                "<div class='sp-container sp-hidden'>",
                "<div class='sp-palette-container'>",
                "<div class='sp-palette sp-thumb sp-cf'></div>",
                "</div>",
                "<div class='sp-picker-container'>",
                "<div class='sp-top sp-cf'>",
                "<div class='sp-fill'></div>",
                "<div class='sp-top-inner'>",
                "<div class='sp-color'>",
                "<div class='sp-sat'>",
                "<div class='sp-val'>",
                "<div class='sp-dragger'></div>",
                "</div>",
                "</div>",
                "</div>",
                "<div class='sp-clear sp-clear-display'>",
                "</div>",
                "<div class='sp-hue'>",
                "<div class='sp-slider'></div>",
                gradientFix,
                "</div>",
                "</div>",
                "<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>",
                "</div>",
                "<div class='sp-input-container sp-cf'>",
                "<input class='sp-input' type='text' spellcheck='false'  />",
                "</div>",
                "<div class='sp-initial sp-thumb sp-cf'></div>",
                "<div class='sp-button-container sp-cf'>",
                "<a class='sp-cancel' href='#'></a>",
                "<button class='sp-choose'></button>",
                "</div>",
                "</div>",
                "</div>"
            ].join("");
        })();

    function paletteTemplate (p, color, className) {
        var html = [];
        for (var i = 0; i < p.length; i++) {
            var current = p[i];
            if(current) {
                var tiny = tinycolor(current);
                var c = tiny.toHsl().l < 0.5 ? "sp-thumb-el sp-thumb-dark" : "sp-thumb-el sp-thumb-light";
                c += (tinycolor.equals(color, current)) ? " sp-thumb-active" : "";

                var swatchStyle = rgbaSupport ? ("background-color:" + tiny.toRgbString()) : "filter:" + tiny.toFilter();
                html.push('<span title="' + tiny.toRgbString() + '" data-color="' + tiny.toRgbString() + '" class="' + c + '"><span class="sp-thumb-inner" style="' + swatchStyle + ';" /></span>');
            } else {
                var cls = 'sp-clear-display';
                html.push('<span title="No Color Selected" data-color="" style="background-color:transparent;" class="' + cls + '"></span>');
            }
        }
        return "<div class='sp-cf " + className + "'>" + html.join('') + "</div>";
    }

    function hideAll() {
        for (var i = 0; i < spectrums.length; i++) {
            if (spectrums[i]) {
                spectrums[i].hide();
            }
        }
    }

    function instanceOptions(o, callbackContext) {
        var opts = $.extend({}, defaultOpts, o);
        opts.callbacks = {
            'move': bind(opts.move, callbackContext),
            'change': bind(opts.change, callbackContext),
            'show': bind(opts.show, callbackContext),
            'hide': bind(opts.hide, callbackContext),
            'beforeShow': bind(opts.beforeShow, callbackContext)
        };

        return opts;
    }

    function spectrum(element, o) {

        var opts = instanceOptions(o, element),
            flat = opts.flat,
            showSelectionPalette = opts.showSelectionPalette,
            localStorageKey = opts.localStorageKey,
            theme = opts.theme,
            callbacks = opts.callbacks,
            resize = throttle(reflow, 10),
            visible = false,
            dragWidth = 0,
            dragHeight = 0,
            dragHelperHeight = 0,
            slideHeight = 0,
            slideWidth = 0,
            alphaWidth = 0,
            alphaSlideHelperWidth = 0,
            slideHelperHeight = 0,
            currentHue = 0,
            currentSaturation = 0,
            currentValue = 0,
            currentAlpha = 1,
            palette = [],
            paletteArray = [],
            paletteLookup = {},
            selectionPalette = opts.selectionPalette.slice(0),
            maxSelectionSize = opts.maxSelectionSize,
            draggingClass = "sp-dragging",
            shiftMovementDirection = null;

        var doc = element.ownerDocument,
            body = doc.body,
            boundElement = $(element),
            disabled = false,
            container = $(markup, doc).addClass(theme),
            dragger = container.find(".sp-color"),
            dragHelper = container.find(".sp-dragger"),
            slider = container.find(".sp-hue"),
            slideHelper = container.find(".sp-slider"),
            alphaSliderInner = container.find(".sp-alpha-inner"),
            alphaSlider = container.find(".sp-alpha"),
            alphaSlideHelper = container.find(".sp-alpha-handle"),
            textInput = container.find(".sp-input"),
            paletteContainer = container.find(".sp-palette"),
            initialColorContainer = container.find(".sp-initial"),
            cancelButton = container.find(".sp-cancel"),
            clearButton = container.find(".sp-clear"),
            chooseButton = container.find(".sp-choose"),
            isInput = boundElement.is("input"),
            isInputTypeColor = isInput && inputTypeColorSupport && boundElement.attr("type") === "color",
            shouldReplace = isInput && !flat,
            replacer = (shouldReplace) ? $(replaceInput).addClass(theme).addClass(opts.className) : $([]),
            offsetElement = (shouldReplace) ? replacer : boundElement,
            previewElement = replacer.find(".sp-preview-inner"),
            initialColor = opts.color || (isInput && boundElement.val()),
            colorOnShow = false,
            preferredFormat = opts.preferredFormat,
            currentPreferredFormat = preferredFormat,
            clickoutFiresChange = !opts.showButtons || opts.clickoutFiresChange,
            isEmpty = !initialColor,
            allowEmpty = opts.allowEmpty && !isInputTypeColor;

        function applyOptions() {

            if (opts.showPaletteOnly) {
                opts.showPalette = true;
            }

            if (opts.palette) {
                palette = opts.palette.slice(0);
                paletteArray = $.isArray(palette[0]) ? palette : [palette];
                paletteLookup = {};
                for (var i = 0; i < paletteArray.length; i++) {
                    for (var j = 0; j < paletteArray[i].length; j++) {
                        var rgb = tinycolor(paletteArray[i][j]).toRgbString();
                        paletteLookup[rgb] = true;
                    }
                }
            }

            container.toggleClass("sp-flat", flat);
            container.toggleClass("sp-input-disabled", !opts.showInput);
            container.toggleClass("sp-alpha-enabled", opts.showAlpha);
            container.toggleClass("sp-clear-enabled", allowEmpty);
            container.toggleClass("sp-buttons-disabled", !opts.showButtons);
            container.toggleClass("sp-palette-disabled", !opts.showPalette);
            container.toggleClass("sp-palette-only", opts.showPaletteOnly);
            container.toggleClass("sp-initial-disabled", !opts.showInitial);
            container.addClass(opts.className);

            reflow();
        }

        function initialize() {

            if (IE) {
                container.find("*:not(input)").attr("unselectable", "on");
            }

            applyOptions();

            if (shouldReplace) {
                boundElement.after(replacer).hide();
            }

            if (!allowEmpty) {
                clearButton.hide();
            }

            if (flat) {
                boundElement.after(container).hide();
            }
            else {

                var appendTo = opts.appendTo === "parent" ? boundElement.parent() : $(opts.appendTo);
                if (appendTo.length !== 1) {
                    appendTo = $("body");
                }

                appendTo.append(container);
            }

            updateSelectionPaletteFromStorage();

            offsetElement.bind("click.spectrum touchstart.spectrum", function (e) {
                if (!disabled) {
                    toggle();
                }

                e.stopPropagation();

                if (!$(e.target).is("input")) {
                    e.preventDefault();
                }
            });

            if(boundElement.is(":disabled") || (opts.disabled === true)) {
                disable();
            }

            // Prevent clicks from bubbling up to document.  This would cause it to be hidden.
            container.click(stopPropagation);

            // Handle user typed input
            textInput.change(setFromTextInput);
            textInput.bind("paste", function () {
                setTimeout(setFromTextInput, 1);
            });
            textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });

            cancelButton.text(opts.cancelText);
            cancelButton.bind("click.spectrum", function (e) {
                e.stopPropagation();
                e.preventDefault();
                hide("cancel");
            });

            clearButton.attr("title", opts.clearText);
            clearButton.bind("click.spectrum", function (e) {
                e.stopPropagation();
                e.preventDefault();
                isEmpty = true;
                move();

                if(flat) {
                    //for the flat style, this is a change event
                    updateOriginalInput(true);
                }
            });

            chooseButton.text(opts.chooseText);
            chooseButton.bind("click.spectrum", function (e) {
                e.stopPropagation();
                e.preventDefault();

                if (isValid()) {
                    updateOriginalInput(true);
                    hide();
                }
            });

            draggable(alphaSlider, function (dragX, dragY, e) {
                currentAlpha = (dragX / alphaWidth);
                isEmpty = false;
                if (e.shiftKey) {
                    currentAlpha = Math.round(currentAlpha * 10) / 10;
                }

                move();
            }, dragStart, dragStop);

            draggable(slider, function (dragX, dragY) {
                currentHue = parseFloat(dragY / slideHeight);
                isEmpty = false;
                if (!opts.showAlpha) {
                    currentAlpha = 1;
                }
                move();
            }, dragStart, dragStop);

            draggable(dragger, function (dragX, dragY, e) {

                // shift+drag should snap the movement to either the x or y axis.
                if (!e.shiftKey) {
                    shiftMovementDirection = null;
                }
                else if (!shiftMovementDirection) {
                    var oldDragX = currentSaturation * dragWidth;
                    var oldDragY = dragHeight - (currentValue * dragHeight);
                    var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);

                    shiftMovementDirection = furtherFromX ? "x" : "y";
                }

                var setSaturation = !shiftMovementDirection || shiftMovementDirection === "x";
                var setValue = !shiftMovementDirection || shiftMovementDirection === "y";

                if (setSaturation) {
                    currentSaturation = parseFloat(dragX / dragWidth);
                }
                if (setValue) {
                    currentValue = parseFloat((dragHeight - dragY) / dragHeight);
                }

                isEmpty = false;
                if (!opts.showAlpha) {
                    currentAlpha = 1;
                }

                move();

            }, dragStart, dragStop);

            if (!!initialColor) {
                set(initialColor);

                // In case color was black - update the preview UI and set the format
                // since the set function will not run (default color is black).
                updateUI();
                currentPreferredFormat = preferredFormat || tinycolor(initialColor).format;

                addColorToSelectionPalette(initialColor);
            }
            else {
                updateUI();
            }

            if (flat) {
                show();
            }

            function palletElementClick(e) {
                if (e.data && e.data.ignore) {
                    set($(this).data("color"));
                    move();
                }
                else {
                    set($(this).data("color"));
                    move();
                    updateOriginalInput(true);
                    hide();
                }

                return false;
            }

            var paletteEvent = IE ? "mousedown.spectrum" : "click.spectrum touchstart.spectrum";
            paletteContainer.delegate(".sp-thumb-el", paletteEvent, palletElementClick);
            initialColorContainer.delegate(".sp-thumb-el:nth-child(1)", paletteEvent, { ignore: true }, palletElementClick);
        }

        function updateSelectionPaletteFromStorage() {

            if (localStorageKey && window.localStorage) {

                // Migrate old palettes over to new format.  May want to remove this eventually.
                try {
                    var oldPalette = window.localStorage[localStorageKey].split(",#");
                    if (oldPalette.length > 1) {
                        delete window.localStorage[localStorageKey];
                        $.each(oldPalette, function(i, c) {
                            addColorToSelectionPalette(c);
                        });
                    }
                }
                catch(e) { }

                try {
                    selectionPalette = window.localStorage[localStorageKey].split(";");
                }
                catch (e) { }
            }
        }

        function addColorToSelectionPalette(color) {
            if (showSelectionPalette) {
                var rgb = tinycolor(color).toRgbString();
                if (!paletteLookup[rgb] && selectionPalette.indexOf(rgb) === -1) {
                    selectionPalette.push(rgb);
                    while(selectionPalette.length > maxSelectionSize) {
                        selectionPalette.shift();
                    }
                }

                if (localStorageKey && window.localStorage) {
                    try {
                        window.localStorage[localStorageKey] = selectionPalette.join(";");
                    }
                    catch(e) { }
                }
            }
        }

        function getUniqueSelectionPalette() {
            var unique = [];
            if (opts.showPalette) {
                for (i = 0; i < selectionPalette.length; i++) {
                    var rgb = tinycolor(selectionPalette[i]).toRgbString();

                    if (!paletteLookup[rgb]) {
                        unique.push(selectionPalette[i]);
                    }
                }
            }

            return unique.reverse().slice(0, opts.maxSelectionSize);
        }

        function drawPalette() {

            var currentColor = get();

            var html = $.map(paletteArray, function (palette, i) {
                return paletteTemplate(palette, currentColor, "sp-palette-row sp-palette-row-" + i);
            });

            updateSelectionPaletteFromStorage();

            if (selectionPalette) {
                html.push(paletteTemplate(getUniqueSelectionPalette(), currentColor, "sp-palette-row sp-palette-row-selection"));
            }

            paletteContainer.html(html.join(""));
        }

        function drawInitial() {
            if (opts.showInitial) {
                var initial = colorOnShow;
                var current = get();
                initialColorContainer.html(paletteTemplate([initial, current], current, "sp-palette-row-initial"));
            }
        }

        function dragStart() {
            if (dragHeight <= 0 || dragWidth <= 0 || slideHeight <= 0) {
                reflow();
            }
            container.addClass(draggingClass);
            shiftMovementDirection = null;
            boundElement.trigger('dragstart.spectrum', [ get() ]);
        }

        function dragStop() {
            container.removeClass(draggingClass);
            boundElement.trigger('dragstop.spectrum', [ get() ]);
        }

        function setFromTextInput() {

            var value = textInput.val();

            if ((value === null || value === "") && allowEmpty) {
                set(null);
                updateOriginalInput(true);
            }
            else {
                var tiny = tinycolor(value);
                if (tiny.ok) {
                    set(tiny);
                    updateOriginalInput(true);
                }
                else {
                    textInput.addClass("sp-validation-error");
                }
            }
        }

        function toggle() {
            if (visible) {
                hide();
            }
            else {
                show();
            }
        }

        function show() {
            var event = $.Event('beforeShow.spectrum');

            if (visible) {
                reflow();
                return;
            }

            boundElement.trigger(event, [ get() ]);

            if (callbacks.beforeShow(get()) === false || event.isDefaultPrevented()) {
                return;
            }

            hideAll();
            visible = true;

            $(doc).bind("click.spectrum", hide);
            $(window).bind("resize.spectrum", resize);
            replacer.addClass("sp-active");
            container.removeClass("sp-hidden");

            reflow();
            updateUI();

            colorOnShow = get();

            drawInitial();
            callbacks.show(colorOnShow);
            boundElement.trigger('show.spectrum', [ colorOnShow ]);
        }

        function hide(e) {
            // Return on right click
            if (e && e.type == "click" && e.button == 2) { return; }

            // Return if hiding is unnecessary
            if (!visible || flat) { return; }
            visible = false;

            $(doc).unbind("click.spectrum", hide);
            $(window).unbind("resize.spectrum", resize);

            replacer.removeClass("sp-active");
            container.addClass("sp-hidden");

            var colorHasChanged = !tinycolor.equals(get(), colorOnShow);

            if (colorHasChanged) {
                if (clickoutFiresChange && e !== "cancel") {
                    updateOriginalInput(true);
                }
                else {
                    revert();
                }
            }

            callbacks.hide(get());
            boundElement.trigger('hide.spectrum', [ get() ]);
        }

        function revert() {
            set(colorOnShow, true);
        }

        function set(color, ignoreFormatChange) {
            if (tinycolor.equals(color, get())) {
                // Update UI just in case a validation error needs
                // to be cleared.
                updateUI();
                return;
            }

            var newColor, newHsv;
            if (!color && allowEmpty) {
                isEmpty = true;
            } else {
                isEmpty = false;
                newColor = tinycolor(color);
                newHsv = newColor.toHsv();

                currentHue = (newHsv.h % 360) / 360;
                currentSaturation = newHsv.s;
                currentValue = newHsv.v;
                currentAlpha = newHsv.a;
            }
            updateUI();

            if (newColor && newColor.ok && !ignoreFormatChange) {
                currentPreferredFormat = preferredFormat || newColor.format;
            }
        }

        function get(opts) {
            opts = opts || { };

            if (allowEmpty && isEmpty) {
                return null;
            }

            return tinycolor.fromRatio({
                h: currentHue,
                s: currentSaturation,
                v: currentValue,
                a: Math.round(currentAlpha * 100) / 100
            }, { format: opts.format || currentPreferredFormat });
        }

        function isValid() {
            return !textInput.hasClass("sp-validation-error");
        }

        function move() {
            updateUI();

            callbacks.move(get());
            boundElement.trigger('move.spectrum', [ get() ]);
        }

        function updateUI() {

            textInput.removeClass("sp-validation-error");

            updateHelperLocations();

            // Update dragger background color (gradients take care of saturation and value).
            var flatColor = tinycolor.fromRatio({ h: currentHue, s: 1, v: 1 });
            dragger.css("background-color", flatColor.toHexString());

            // Get a format that alpha will be included in (hex and names ignore alpha)
            var format = currentPreferredFormat;
            if (currentAlpha < 1 && !(currentAlpha === 0 && format === "name")) {
                if (format === "hex" || format === "hex3" || format === "hex6" || format === "name") {
                    format = "rgb";
                }
            }

            var realColor = get({ format: format }),
                displayColor = '';

            //reset background info for preview element
            previewElement.removeClass("sp-clear-display");
            previewElement.css('background-color', 'transparent');

            if (!realColor && allowEmpty) {
                // Update the replaced elements background with icon indicating no color selection
                previewElement.addClass("sp-clear-display");
            }
            else {
                var realHex = realColor.toHexString(),
                    realRgb = realColor.toRgbString();

                // Update the replaced elements background color (with actual selected color)
                if (rgbaSupport || realColor.alpha === 1) {
                    previewElement.css("background-color", realRgb);
                }
                else {
                    previewElement.css("background-color", "transparent");
                    previewElement.css("filter", realColor.toFilter());
                }

                if (opts.showAlpha) {
                    var rgb = realColor.toRgb();
                    rgb.a = 0;
                    var realAlpha = tinycolor(rgb).toRgbString();
                    var gradient = "linear-gradient(left, " + realAlpha + ", " + realHex + ")";

                    if (IE) {
                        alphaSliderInner.css("filter", tinycolor(realAlpha).toFilter({ gradientType: 1 }, realHex));
                    }
                    else {
                        alphaSliderInner.css("background", "-webkit-" + gradient);
                        alphaSliderInner.css("background", "-moz-" + gradient);
                        alphaSliderInner.css("background", "-ms-" + gradient);
                        // Use current syntax gradient on unprefixed property.
                        alphaSliderInner.css("background",
                            "linear-gradient(to right, " + realAlpha + ", " + realHex + ")");
                    }
                }

                displayColor = realColor.toString(format);
            }

            // Update the text entry input as it changes happen
            if (opts.showInput) {
                textInput.val(displayColor);
            }

            if (opts.showPalette) {
                drawPalette();
            }

            drawInitial();
        }

        function updateHelperLocations() {
            var s = currentSaturation;
            var v = currentValue;

            if(allowEmpty && isEmpty) {
                //if selected color is empty, hide the helpers
                alphaSlideHelper.hide();
                slideHelper.hide();
                dragHelper.hide();
            }
            else {
                //make sure helpers are visible
                alphaSlideHelper.show();
                slideHelper.show();
                dragHelper.show();

                // Where to show the little circle in that displays your current selected color
                var dragX = s * dragWidth;
                var dragY = dragHeight - (v * dragHeight);
                dragX = Math.max(
                    -dragHelperHeight,
                    Math.min(dragWidth - dragHelperHeight, dragX - dragHelperHeight)
                );
                dragY = Math.max(
                    -dragHelperHeight,
                    Math.min(dragHeight - dragHelperHeight, dragY - dragHelperHeight)
                );
                dragHelper.css({
                    "top": dragY + "px",
                    "left": dragX + "px"
                });

                var alphaX = currentAlpha * alphaWidth;
                alphaSlideHelper.css({
                    "left": (alphaX - (alphaSlideHelperWidth / 2)) + "px"
                });

                // Where to show the bar that displays your current selected hue
                var slideY = (currentHue) * slideHeight;
                slideHelper.css({
                    "top": (slideY - slideHelperHeight) + "px"
                });
            }
        }

        function updateOriginalInput(fireCallback) {
            var color = get(),
                displayColor = '',
                hasChanged = !tinycolor.equals(color, colorOnShow);

            if (color) {
                displayColor = color.toString(currentPreferredFormat);
                // Update the selection palette with the current color
                addColorToSelectionPalette(color);
            }

            if (isInput) {
                boundElement.val(displayColor);
            }

            colorOnShow = color;

            if (fireCallback && hasChanged) {
                callbacks.change(color);
                boundElement.trigger('change', [ color ]);
            }
        }

        function reflow() {
            dragWidth = dragger.width();
            dragHeight = dragger.height();
            dragHelperHeight = dragHelper.height();
            slideWidth = slider.width();
            slideHeight = slider.height();
            slideHelperHeight = slideHelper.height();
            alphaWidth = alphaSlider.width();
            alphaSlideHelperWidth = alphaSlideHelper.width();

            if (!flat) {
                container.css("position", "absolute");
                container.offset(getOffset(container, offsetElement));
            }

            updateHelperLocations();

            if (opts.showPalette) {
                drawPalette();
            }

            boundElement.trigger('reflow.spectrum');
        }

        function destroy() {
            boundElement.show();
            offsetElement.unbind("click.spectrum touchstart.spectrum");
            container.remove();
            replacer.remove();
            spectrums[spect.id] = null;
        }

        function option(optionName, optionValue) {
            if (optionName === undefined) {
                return $.extend({}, opts);
            }
            if (optionValue === undefined) {
                return opts[optionName];
            }

            opts[optionName] = optionValue;
            applyOptions();
        }

        function enable() {
            disabled = false;
            boundElement.attr("disabled", false);
            offsetElement.removeClass("sp-disabled");
        }

        function disable() {
            hide();
            disabled = true;
            boundElement.attr("disabled", true);
            offsetElement.addClass("sp-disabled");
        }

        initialize();

        var spect = {
            show: show,
            hide: hide,
            toggle: toggle,
            reflow: reflow,
            option: option,
            enable: enable,
            disable: disable,
            set: function (c) {
                set(c);
                updateOriginalInput();
            },
            get: get,
            destroy: destroy,
            container: container
        };

        spect.id = spectrums.push(spect) - 1;

        return spect;
    }

    /**
     * checkOffset - get the offset below/above and left/right element depending on screen position
     * Thanks https://github.com/jquery/jquery-ui/blob/master/ui/jquery.ui.datepicker.js
     */
    function getOffset(picker, input) {
        var extraY = 0;
        var dpWidth = picker.outerWidth();
        var dpHeight = picker.outerHeight();
        var inputHeight = input.outerHeight();
        var doc = picker[0].ownerDocument;
        var docElem = doc.documentElement;
        var viewWidth = docElem.clientWidth + $(doc).scrollLeft();
        var viewHeight = docElem.clientHeight + $(doc).scrollTop();
        var offset = input.offset();
        offset.top += inputHeight;

        offset.left -=
            Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
                Math.abs(offset.left + dpWidth - viewWidth) : 0);

        offset.top -=
            Math.min(offset.top, ((offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
                Math.abs(dpHeight + inputHeight - extraY) : extraY));

        return offset;
    }

    /**
     * noop - do nothing
     */
    function noop() {

    }

    /**
     * stopPropagation - makes the code only doing this a little easier to read in line
     */
    function stopPropagation(e) {
        e.stopPropagation();
    }

    /**
     * Create a function bound to a given object
     * Thanks to underscore.js
     */
    function bind(func, obj) {
        var slice = Array.prototype.slice;
        var args = slice.call(arguments, 2);
        return function () {
            return func.apply(obj, args.concat(slice.call(arguments)));
        };
    }

    /**
     * Lightweight drag helper.  Handles containment within the element, so that
     * when dragging, the x is within [0,element.width] and y is within [0,element.height]
     */
    function draggable(element, onmove, onstart, onstop) {
        onmove = onmove || function () { };
        onstart = onstart || function () { };
        onstop = onstop || function () { };
        var doc = element.ownerDocument || document;
        var dragging = false;
        var offset = {};
        var maxHeight = 0;
        var maxWidth = 0;
        var hasTouch = ('ontouchstart' in window);

        var duringDragEvents = {};
        duringDragEvents["selectstart"] = prevent;
        duringDragEvents["dragstart"] = prevent;
        duringDragEvents["touchmove mousemove"] = move;
        duringDragEvents["touchend mouseup"] = stop;

        function prevent(e) {
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.returnValue = false;
        }

        function move(e) {
            if (dragging) {
                // Mouseup happened outside of window
                if (IE && document.documentMode < 9 && !e.button) {
                    return stop();
                }

                var touches = e.originalEvent.touches;
                var pageX = touches ? touches[0].pageX : e.pageX;
                var pageY = touches ? touches[0].pageY : e.pageY;

                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));
                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));

                if (hasTouch) {
                    // Stop scrolling in iOS
                    prevent(e);
                }

                onmove.apply(element, [dragX, dragY, e]);
            }
        }

        function start(e) {
            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);
            var touches = e.originalEvent.touches;

            if (!rightclick && !dragging) {
                if (onstart.apply(element, arguments) !== false) {
                    dragging = true;
                    maxHeight = $(element).height();
                    maxWidth = $(element).width();
                    offset = $(element).offset();

                    $(doc).bind(duringDragEvents);
                    $(doc.body).addClass("sp-dragging");

                    if (!hasTouch) {
                        move(e);
                    }

                    prevent(e);
                }
            }
        }

        function stop() {
            if (dragging) {
                $(doc).unbind(duringDragEvents);
                $(doc.body).removeClass("sp-dragging");
                onstop.apply(element, arguments);
            }
            dragging = false;
        }

        $(element).bind("touchstart mousedown", start);
    }

    function throttle(func, wait, debounce) {
        var timeout;
        return function () {
            var context = this, args = arguments;
            var throttler = function () {
                timeout = null;
                func.apply(context, args);
            };
            if (debounce) clearTimeout(timeout);
            if (debounce || !timeout) timeout = setTimeout(throttler, wait);
        };
    }

    function log(){/* jshint -W021 */if(window.console){if(Function.prototype.bind)log=Function.prototype.bind.call(console.log,console);else log=function(){Function.prototype.apply.call(console.log,console,arguments);};log.apply(this,arguments);}}

    /**
     * Define a jQuery plugin
     */
    var dataID = "spectrum.id";
    $.fn.spectrum = function (opts, extra) {

        if (typeof opts == "string") {

            var returnValue = this;
            var args = Array.prototype.slice.call( arguments, 1 );

            this.each(function () {
                var spect = spectrums[$(this).data(dataID)];
                if (spect) {
                    var method = spect[opts];
                    if (!method) {
                        throw new Error( "Spectrum: no such method: '" + opts + "'" );
                    }

                    if (opts == "get") {
                        returnValue = spect.get();
                    }
                    else if (opts == "container") {
                        returnValue = spect.container;
                    }
                    else if (opts == "option") {
                        returnValue = spect.option.apply(spect, args);
                    }
                    else if (opts == "destroy") {
                        spect.destroy();
                        $(this).removeData(dataID);
                    }
                    else {
                        method.apply(spect, args);
                    }
                }
            });

            return returnValue;
        }

        // Initializing a new instance of spectrum
        return this.spectrum("destroy").each(function () {
            var options = $.extend({}, opts, $(this).data());
            var spect = spectrum(this, options);
            $(this).data(dataID, spect.id);
        });
    };

    $.fn.spectrum.load = true;
    $.fn.spectrum.loadOpts = {};
    $.fn.spectrum.draggable = draggable;
    $.fn.spectrum.defaults = defaultOpts;

    $.spectrum = { };
    $.spectrum.localization = { };
    $.spectrum.palettes = { };

    $.fn.spectrum.processNativeColorInputs = function () {
        if (!inputTypeColorSupport) {
            $("input[type=color]").spectrum({
                preferredFormat: "hex6"
            });
        }
    };

    // TinyColor v0.9.17
    // https://github.com/bgrins/TinyColor
    // 2013-08-10, Brian Grinstead, MIT License

    (function() {

        var trimLeft = /^[\s,#]+/,
            trimRight = /\s+$/,
            tinyCounter = 0,
            math = Math,
            mathRound = math.round,
            mathMin = math.min,
            mathMax = math.max,
            mathRandom = math.random;

        function tinycolor (color, opts) {

            color = (color) ? color : '';
            opts = opts || { };

            // If input is already a tinycolor, return itself
            if (typeof color == "object" && color.hasOwnProperty("_tc_id")) {
                return color;
            }

            var rgb = inputToRGB(color);
            var r = rgb.r,
                g = rgb.g,
                b = rgb.b,
                a = rgb.a,
                roundA = mathRound(100*a) / 100,
                format = opts.format || rgb.format;

            // Don't let the range of [0,255] come back in [0,1].
            // Potentially lose a little bit of precision here, but will fix issues where
            // .5 gets interpreted as half of the total, instead of half of 1
            // If it was supposed to be 128, this was already taken care of by `inputToRgb`
            if (r < 1) { r = mathRound(r); }
            if (g < 1) { g = mathRound(g); }
            if (b < 1) { b = mathRound(b); }

            return {
                ok: rgb.ok,
                format: format,
                _tc_id: tinyCounter++,
                alpha: a,
                getAlpha: function() {
                    return a;
                },
                get_is_theme_color : function(){ //Todo Sam: remove this function from here and place it in a relevant place
                    //return false; // Let's not deal with this right now...
                    var theme_color_index = Upfront.Views.Theme_Colors.colors.is_theme_color(this);
                    if( theme_color_index !== false ){
                        this.is_theme_color = true;
                        theme_color_index -= 1; // This is because the method returns result incremented by 1 to get true-ish value
                        this.theme_color = "#ufc" + theme_color_index;
                        this.theme_color_code = Upfront.Util.colors.convert_string_ufc_to_color(this.theme_color);
                    }else{
                        this.is_theme_color = false;
                    }
                    return theme_color_index;
                },
                setAlpha: function(value) {
                    a = boundAlpha(value);
                    roundA = mathRound(100*a) / 100;
                },
                toHsv: function() {
                    var hsv = rgbToHsv(r, g, b);
                    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: a };
                },
                toHsvString: function() {
                    var hsv = rgbToHsv(r, g, b);
                    var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
                    return (a == 1) ?
                    "hsv("  + h + ", " + s + "%, " + v + "%)" :
                    "hsva(" + h + ", " + s + "%, " + v + "%, "+ roundA + ")";
                },
                toHsl: function() {
                    var hsl = rgbToHsl(r, g, b);
                    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: a };
                },
                toHslString: function() {
                    var hsl = rgbToHsl(r, g, b);
                    var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
                    return (a == 1) ?
                    "hsl("  + h + ", " + s + "%, " + l + "%)" :
                    "hsla(" + h + ", " + s + "%, " + l + "%, "+ roundA + ")";
                },
                toHex: function(allow3Char) {
                    return rgbToHex(r, g, b, allow3Char);
                },
                toHexString: function(allow3Char) {
                    return '#' + this.toHex(allow3Char);
                },
                toHex8: function() {
                    return rgbaToHex(r, g, b, a);
                },
                toHex8String: function() {
                    return '#' + this.toHex8();
                },
                toRgb: function() {
                    return { r: mathRound(r), g: mathRound(g), b: mathRound(b), a: a };
                },
                toRgbString: function() {
                    return (a == 1) ?
                    "rgb("  + mathRound(r) + ", " + mathRound(g) + ", " + mathRound(b) + ")" :
                    "rgba(" + mathRound(r) + ", " + mathRound(g) + ", " + mathRound(b) + ", " + roundA + ")";
                },
                toPercentageRgb: function() {
                    return { r: mathRound(bound01(r, 255) * 100) + "%", g: mathRound(bound01(g, 255) * 100) + "%", b: mathRound(bound01(b, 255) * 100) + "%", a: a };
                },
                toPercentageRgbString: function() {
                    return (a == 1) ?
                    "rgb("  + mathRound(bound01(r, 255) * 100) + "%, " + mathRound(bound01(g, 255) * 100) + "%, " + mathRound(bound01(b, 255) * 100) + "%)" :
                    "rgba(" + mathRound(bound01(r, 255) * 100) + "%, " + mathRound(bound01(g, 255) * 100) + "%, " + mathRound(bound01(b, 255) * 100) + "%, " + roundA + ")";
                },
                toName: function() {
                    if (a === 0) {
                        return "transparent";
                    }

                    return hexNames[rgbToHex(r, g, b, true)] || false;
                },
                toFilter: function(secondColor) {
                    var hex8String = '#' + rgbaToHex(r, g, b, a);
                    var secondHex8String = hex8String;
                    var gradientType = opts && opts.gradientType ? "GradientType = 1, " : "";

                    if (secondColor) {
                        var s = tinycolor(secondColor);
                        secondHex8String = s.toHex8String();
                    }

                    return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
                },
                toString: function(format) {
                    var formatSet = !!format;
                    format = format || this.format;

                    var formattedString = false;
                    var hasAlphaAndFormatNotSet = !formatSet && a < 1 && a > 0;
                    var formatWithAlpha = hasAlphaAndFormatNotSet && (format === "hex" || format === "hex6" || format === "hex3" || format === "name");

                    if (format === "rgb") {
                        formattedString = this.toRgbString();
                    }
                    if (format === "prgb") {
                        formattedString = this.toPercentageRgbString();
                    }
                    if (format === "hex" || format === "hex6") {
                        formattedString = this.toHexString();
                    }
                    if (format === "hex3") {
                        formattedString = this.toHexString(true);
                    }
                    if (format === "hex8") {
                        formattedString = this.toHex8String();
                    }
                    if (format === "name") {
                        formattedString = this.toName();
                    }
                    if (format === "hsl") {
                        formattedString = this.toHslString();
                    }
                    if (format === "hsv") {
                        formattedString = this.toHsvString();
                    }

                    if (formatWithAlpha) {
                        return this.toRgbString();
                    }

                    return formattedString || this.toHexString();
                }
            };
        }

        // If input is an object, force 1 into "1.0" to handle ratios properly
        // String input requires "1.0" as input, so 1 will be treated as 1
        tinycolor.fromRatio = function(color, opts) {
            if (typeof color == "object") {
                var newColor = {};
                for (var i in color) {
                    if (color.hasOwnProperty(i)) {
                        if (i === "a") {
                            newColor[i] = color[i];
                        }
                        else {
                            newColor[i] = convertToPercentage(color[i]);
                        }
                    }
                }
                color = newColor;
            }

            return tinycolor(color, opts);
        };

        // Given a string or object, convert that input to RGB
        // Possible string inputs:
        //
        //     "red"
        //     "#f00" or "f00"
        //     "#ff0000" or "ff0000"
        //     "#ff000000" or "ff000000"
        //     "rgb 255 0 0" or "rgb (255, 0, 0)"
        //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
        //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
        //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
        //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
        //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
        //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
        //
        function inputToRGB(color) {

            var rgb = { r: 0, g: 0, b: 0 };
            var a = 1;
            var ok = false;
            var format = false;

            if (typeof color == "string") {
                color = stringInputToObject(color);
            }

            if (typeof color == "object") {
                if (color.hasOwnProperty("r") && color.hasOwnProperty("g") && color.hasOwnProperty("b")) {
                    rgb = rgbToRgb(color.r, color.g, color.b);
                    ok = true;
                    format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
                }
                else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("v")) {
                    color.s = convertToPercentage(color.s);
                    color.v = convertToPercentage(color.v);
                    rgb = hsvToRgb(color.h, color.s, color.v);
                    ok = true;
                    format = "hsv";
                }
                else if (color.hasOwnProperty("h") && color.hasOwnProperty("s") && color.hasOwnProperty("l")) {
                    color.s = convertToPercentage(color.s);
                    color.l = convertToPercentage(color.l);
                    rgb = hslToRgb(color.h, color.s, color.l);
                    ok = true;
                    format = "hsl";
                }

                if (color.hasOwnProperty("a")) {
                    a = color.a;
                }
            }

            a = boundAlpha(a);

            return {
                ok: ok,
                format: color.format || format,
                r: mathMin(255, mathMax(rgb.r, 0)),
                g: mathMin(255, mathMax(rgb.g, 0)),
                b: mathMin(255, mathMax(rgb.b, 0)),
                a: a
            };
        }


        // Conversion Functions
        // --------------------

        // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
        // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

        // `rgbToRgb`
        // Handle bounds / percentage checking to conform to CSS color spec
        // <http://www.w3.org/TR/css3-color/>
        // *Assumes:* r, g, b in [0, 255] or [0, 1]
        // *Returns:* { r, g, b } in [0, 255]
        function rgbToRgb(r, g, b){
            return {
                r: bound01(r, 255) * 255,
                g: bound01(g, 255) * 255,
                b: bound01(b, 255) * 255
            };
        }

        // `rgbToHsl`
        // Converts an RGB color value to HSL.
        // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
        // *Returns:* { h, s, l } in [0,1]
        function rgbToHsl(r, g, b) {

            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);

            var max = mathMax(r, g, b), min = mathMin(r, g, b);
            var h, s, l = (max + min) / 2;

            if(max == min) {
                h = s = 0; // achromatic
            }
            else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch(max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }

                h /= 6;
            }

            return { h: h, s: s, l: l };
        }

        // `hslToRgb`
        // Converts an HSL color value to RGB.
        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
        // *Returns:* { r, g, b } in the set [0, 255]
        function hslToRgb(h, s, l) {
            var r, g, b;

            h = bound01(h, 360);
            s = bound01(s, 100);
            l = bound01(l, 100);

            function hue2rgb(p, q, t) {
                if(t < 0) t += 1;
                if(t > 1) t -= 1;
                if(t < 1/6) return p + (q - p) * 6 * t;
                if(t < 1/2) return q;
                if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                return p;
            }

            if(s === 0) {
                r = g = b = l; // achromatic
            }
            else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1/3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1/3);
            }

            return { r: r * 255, g: g * 255, b: b * 255 };
        }

        // `rgbToHsv`
        // Converts an RGB color value to HSV
        // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
        // *Returns:* { h, s, v } in [0,1]
        function rgbToHsv(r, g, b) {

            r = bound01(r, 255);
            g = bound01(g, 255);
            b = bound01(b, 255);

            var max = mathMax(r, g, b), min = mathMin(r, g, b);
            var h, s, v = max;

            var d = max - min;
            s = max === 0 ? 0 : d / max;

            if(max == min) {
                h = 0; // achromatic
            }
            else {
                switch(max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }
            return { h: h, s: s, v: v };
        }

        // `hsvToRgb`
        // Converts an HSV color value to RGB.
        // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
        // *Returns:* { r, g, b } in the set [0, 255]
        function hsvToRgb(h, s, v) {

            h = bound01(h, 360) * 6;
            s = bound01(s, 100);
            v = bound01(v, 100);

            var i = math.floor(h),
                f = h - i,
                p = v * (1 - s),
                q = v * (1 - f * s),
                t = v * (1 - (1 - f) * s),
                mod = i % 6,
                r = [v, q, p, p, t, v][mod],
                g = [t, v, v, q, p, p][mod],
                b = [p, p, t, v, v, q][mod];

            return { r: r * 255, g: g * 255, b: b * 255 };
        }

        // `rgbToHex`
        // Converts an RGB color to hex
        // Assumes r, g, and b are contained in the set [0, 255]
        // Returns a 3 or 6 character hex
        function rgbToHex(r, g, b, allow3Char) {

            var hex = [
                pad2(mathRound(r).toString(16)),
                pad2(mathRound(g).toString(16)),
                pad2(mathRound(b).toString(16))
            ];

            // Return a 3 character hex if possible
            if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
                return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
            }

            return hex.join("");
        }
        // `rgbaToHex`
        // Converts an RGBA color plus alpha transparency to hex
        // Assumes r, g, b and a are contained in the set [0, 255]
        // Returns an 8 character hex
        function rgbaToHex(r, g, b, a) {

            var hex = [
                pad2(convertDecimalToHex(a)),
                pad2(mathRound(r).toString(16)),
                pad2(mathRound(g).toString(16)),
                pad2(mathRound(b).toString(16))
            ];

            return hex.join("");
        }

        // `equals`
        // Can be called with any tinycolor input
        tinycolor.equals = function (color1, color2) {
            if (!color1 || !color2) { return false; }
            return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
        };
        tinycolor.random = function() {
            return tinycolor.fromRatio({
                r: mathRandom(),
                g: mathRandom(),
                b: mathRandom()
            });
        };


        // Modification Functions
        // ----------------------
        // Thanks to less.js for some of the basics here
        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

        tinycolor.desaturate = function (color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.s -= amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
        };
        tinycolor.saturate = function (color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.s += amount / 100;
            hsl.s = clamp01(hsl.s);
            return tinycolor(hsl);
        };
        tinycolor.greyscale = function(color) {
            return tinycolor.desaturate(color, 100);
        };
        tinycolor.lighten = function(color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.l += amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
        };
        tinycolor.darken = function (color, amount) {
            amount = (amount === 0) ? 0 : (amount || 10);
            var hsl = tinycolor(color).toHsl();
            hsl.l -= amount / 100;
            hsl.l = clamp01(hsl.l);
            return tinycolor(hsl);
        };
        tinycolor.complement = function(color) {
            var hsl = tinycolor(color).toHsl();
            hsl.h = (hsl.h + 180) % 360;
            return tinycolor(hsl);
        };


        // Combination Functions
        // ---------------------
        // Thanks to jQuery xColor for some of the ideas behind these
        // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

        tinycolor.triad = function(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [
                tinycolor(color),
                tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
                tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
            ];
        };
        tinycolor.tetrad = function(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [
                tinycolor(color),
                tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
                tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
                tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
            ];
        };
        tinycolor.splitcomplement = function(color) {
            var hsl = tinycolor(color).toHsl();
            var h = hsl.h;
            return [
                tinycolor(color),
                tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
                tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
            ];
        };
        tinycolor.analogous = function(color, results, slices) {
            results = results || 6;
            slices = slices || 30;

            var hsl = tinycolor(color).toHsl();
            var part = 360 / slices;
            var ret = [tinycolor(color)];

            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
                hsl.h = (hsl.h + part) % 360;
                ret.push(tinycolor(hsl));
            }
            return ret;
        };
        tinycolor.monochromatic = function(color, results) {
            results = results || 6;
            var hsv = tinycolor(color).toHsv();
            var h = hsv.h, s = hsv.s, v = hsv.v;
            var ret = [];
            var modification = 1 / results;

            while (results--) {
                ret.push(tinycolor({ h: h, s: s, v: v}));
                v = (v + modification) % 1;
            }

            return ret;
        };


        // Readability Functions
        // ---------------------
        // <http://www.w3.org/TR/AERT#color-contrast>

        // `readability`
        // Analyze the 2 colors and returns an object with the following properties:
        //    `brightness`: difference in brightness between the two colors
        //    `color`: difference in color/hue between the two colors
        tinycolor.readability = function(color1, color2) {
            var a = tinycolor(color1).toRgb();
            var b = tinycolor(color2).toRgb();
            var brightnessA = (a.r * 299 + a.g * 587 + a.b * 114) / 1000;
            var brightnessB = (b.r * 299 + b.g * 587 + b.b * 114) / 1000;
            var colorDiff = (
            Math.max(a.r, b.r) - Math.min(a.r, b.r) +
            Math.max(a.g, b.g) - Math.min(a.g, b.g) +
            Math.max(a.b, b.b) - Math.min(a.b, b.b)
            );

            return {
                brightness: Math.abs(brightnessA - brightnessB),
                color: colorDiff
            };
        };

        // `readable`
        // http://www.w3.org/TR/AERT#color-contrast
        // Ensure that foreground and background color combinations provide sufficient contrast.
        // *Example*
        //    tinycolor.readable("#000", "#111") => false
        tinycolor.readable = function(color1, color2) {
            var readability = tinycolor.readability(color1, color2);
            return readability.brightness > 125 && readability.color > 500;
        };

        // `mostReadable`
        // Given a base color and a list of possible foreground or background
        // colors for that base, returns the most readable color.
        // *Example*
        //    tinycolor.mostReadable("#123", ["#fff", "#000"]) => "#000"
        tinycolor.mostReadable = function(baseColor, colorList) {
            var bestColor = null;
            var bestScore = 0;
            var bestIsReadable = false;
            for (var i=0; i < colorList.length; i++) {

                // We normalize both around the "acceptable" breaking point,
                // but rank brightness constrast higher than hue.

                var readability = tinycolor.readability(baseColor, colorList[i]);
                var readable = readability.brightness > 125 && readability.color > 500;
                var score = 3 * (readability.brightness / 125) + (readability.color / 500);

                if ((readable && ! bestIsReadable) ||
                    (readable && bestIsReadable && score > bestScore) ||
                    ((! readable) && (! bestIsReadable) && score > bestScore)) {
                    bestIsReadable = readable;
                    bestScore = score;
                    bestColor = tinycolor(colorList[i]);
                }
            }
            return bestColor;
        };


        // Big List of Colors
        // ------------------
        // <http://www.w3.org/TR/css3-color/#svg-color>
        var names = tinycolor.names = {
            aliceblue: "f0f8ff",
            antiquewhite: "faebd7",
            aqua: "0ff",
            aquamarine: "7fffd4",
            azure: "f0ffff",
            beige: "f5f5dc",
            bisque: "ffe4c4",
            black: "000",
            blanchedalmond: "ffebcd",
            blue: "00f",
            blueviolet: "8a2be2",
            brown: "a52a2a",
            burlywood: "deb887",
            burntsienna: "ea7e5d",
            cadetblue: "5f9ea0",
            chartreuse: "7fff00",
            chocolate: "d2691e",
            coral: "ff7f50",
            cornflowerblue: "6495ed",
            cornsilk: "fff8dc",
            crimson: "dc143c",
            cyan: "0ff",
            darkblue: "00008b",
            darkcyan: "008b8b",
            darkgoldenrod: "b8860b",
            darkgray: "a9a9a9",
            darkgreen: "006400",
            darkgrey: "a9a9a9",
            darkkhaki: "bdb76b",
            darkmagenta: "8b008b",
            darkolivegreen: "556b2f",
            darkorange: "ff8c00",
            darkorchid: "9932cc",
            darkred: "8b0000",
            darksalmon: "e9967a",
            darkseagreen: "8fbc8f",
            darkslateblue: "483d8b",
            darkslategray: "2f4f4f",
            darkslategrey: "2f4f4f",
            darkturquoise: "00ced1",
            darkviolet: "9400d3",
            deeppink: "ff1493",
            deepskyblue: "00bfff",
            dimgray: "696969",
            dimgrey: "696969",
            dodgerblue: "1e90ff",
            firebrick: "b22222",
            floralwhite: "fffaf0",
            forestgreen: "228b22",
            fuchsia: "f0f",
            gainsboro: "dcdcdc",
            ghostwhite: "f8f8ff",
            gold: "ffd700",
            goldenrod: "daa520",
            gray: "808080",
            green: "008000",
            greenyellow: "adff2f",
            grey: "808080",
            honeydew: "f0fff0",
            hotpink: "ff69b4",
            indianred: "cd5c5c",
            indigo: "4b0082",
            ivory: "fffff0",
            khaki: "f0e68c",
            lavender: "e6e6fa",
            lavenderblush: "fff0f5",
            lawngreen: "7cfc00",
            lemonchiffon: "fffacd",
            lightblue: "add8e6",
            lightcoral: "f08080",
            lightcyan: "e0ffff",
            lightgoldenrodyellow: "fafad2",
            lightgray: "d3d3d3",
            lightgreen: "90ee90",
            lightgrey: "d3d3d3",
            lightpink: "ffb6c1",
            lightsalmon: "ffa07a",
            lightseagreen: "20b2aa",
            lightskyblue: "87cefa",
            lightslategray: "789",
            lightslategrey: "789",
            lightsteelblue: "b0c4de",
            lightyellow: "ffffe0",
            lime: "0f0",
            limegreen: "32cd32",
            linen: "faf0e6",
            magenta: "f0f",
            maroon: "800000",
            mediumaquamarine: "66cdaa",
            mediumblue: "0000cd",
            mediumorchid: "ba55d3",
            mediumpurple: "9370db",
            mediumseagreen: "3cb371",
            mediumslateblue: "7b68ee",
            mediumspringgreen: "00fa9a",
            mediumturquoise: "48d1cc",
            mediumvioletred: "c71585",
            midnightblue: "191970",
            mintcream: "f5fffa",
            mistyrose: "ffe4e1",
            moccasin: "ffe4b5",
            navajowhite: "ffdead",
            navy: "000080",
            oldlace: "fdf5e6",
            olive: "808000",
            olivedrab: "6b8e23",
            orange: "ffa500",
            orangered: "ff4500",
            orchid: "da70d6",
            palegoldenrod: "eee8aa",
            palegreen: "98fb98",
            paleturquoise: "afeeee",
            palevioletred: "db7093",
            papayawhip: "ffefd5",
            peachpuff: "ffdab9",
            peru: "cd853f",
            pink: "ffc0cb",
            plum: "dda0dd",
            powderblue: "b0e0e6",
            purple: "800080",
            red: "f00",
            rosybrown: "bc8f8f",
            royalblue: "4169e1",
            saddlebrown: "8b4513",
            salmon: "fa8072",
            sandybrown: "f4a460",
            seagreen: "2e8b57",
            seashell: "fff5ee",
            sienna: "a0522d",
            silver: "c0c0c0",
            skyblue: "87ceeb",
            slateblue: "6a5acd",
            slategray: "708090",
            slategrey: "708090",
            snow: "fffafa",
            springgreen: "00ff7f",
            steelblue: "4682b4",
            tan: "d2b48c",
            teal: "008080",
            thistle: "d8bfd8",
            tomato: "ff6347",
            turquoise: "40e0d0",
            violet: "ee82ee",
            wheat: "f5deb3",
            white: "fff",
            whitesmoke: "f5f5f5",
            yellow: "ff0",
            yellowgreen: "9acd32"
        };

        // Make it easy to access colors via `hexNames[hex]`
        var hexNames = tinycolor.hexNames = flip(names);


        // Utilities
        // ---------

        // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
        function flip(o) {
            var flipped = { };
            for (var i in o) {
                if (o.hasOwnProperty(i)) {
                    flipped[o[i]] = i;
                }
            }
            return flipped;
        }

        // Return a valid alpha value [0,1] with all invalid values being set to 1
        function boundAlpha(a) {
            a = parseFloat(a);

            if (isNaN(a) || a < 0 || a > 1) {
                a = 1;
            }

            return a;
        }

        // Take input from [0, n] and return it as [0, 1]
        function bound01(n, max) {
            if (isOnePointZero(n)) { n = "100%"; }

            var processPercent = isPercentage(n);
            n = mathMin(max, mathMax(0, parseFloat(n)));

            // Automatically convert percentage into number
            if (processPercent) {
                n = parseInt(n * max, 10) / 100;
            }

            // Handle floating point rounding errors
            if ((math.abs(n - max) < 0.000001)) {
                return 1;
            }

            // Convert into [0, 1] range if it isn't already
            return (n % max) / parseFloat(max);
        }

        // Force a number between 0 and 1
        function clamp01(val) {
            return mathMin(1, mathMax(0, val));
        }

        // Parse a base-16 hex value into a base-10 integer
        function parseIntFromHex(val) {
            return parseInt(val, 16);
        }

        // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
        // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
        function isOnePointZero(n) {
            return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
        }

        // Check to see if string passed in is a percentage
        function isPercentage(n) {
            return typeof n === "string" && n.indexOf('%') != -1;
        }

        // Force a hex value to have 2 characters
        function pad2(c) {
            return c.length == 1 ? '0' + c : '' + c;
        }

        // Replace a decimal with it's percentage value
        function convertToPercentage(n) {
            if (n <= 1) {
                n = (n * 100) + "%";
            }

            return n;
        }

        // Converts a decimal to a hex value
        function convertDecimalToHex(d) {
            return Math.round(parseFloat(d) * 255).toString(16);
        }
        // Converts a hex value to a decimal
        function convertHexToDecimal(h) {
            return (parseIntFromHex(h) / 255);
        }

        var matchers = (function() {

            // <http://www.w3.org/TR/css3-values/#integers>
            var CSS_INTEGER = "[-\\+]?\\d+%?";

            // <http://www.w3.org/TR/css3-values/#number-value>
            var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

            // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
            var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

            // Actual matching.
            // Parentheses and commas are optional, but not required.
            // Whitespace can take the place of commas or opening paren
            var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
            var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

            return {
                rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
                rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
                hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
                hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
                hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
                hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
            };
        })();

        // `stringInputToObject`
        // Permissive string parsing.  Take in a number of formats, and output an object
        // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
        function stringInputToObject(color) {

            color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
            var named = false;
            if (names[color]) {
                color = names[color];
                named = true;
            }
            else if (color == 'transparent') {
                return { r: 0, g: 0, b: 0, a: 0, format: "name" };
            }

            // Try to match string input using regular expressions.
            // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
            // Just return an object and let the conversion functions handle that.
            // This way the result will be the same whether the tinycolor is initialized with string or object.
            var match;
            if ((match = matchers.rgb.exec(color))) {
                return { r: match[1], g: match[2], b: match[3] };
            }
            if ((match = matchers.rgba.exec(color))) {
                return { r: match[1], g: match[2], b: match[3], a: match[4] };
            }
            if ((match = matchers.hsl.exec(color))) {
                return { h: match[1], s: match[2], l: match[3] };
            }
            if ((match = matchers.hsla.exec(color))) {
                return { h: match[1], s: match[2], l: match[3], a: match[4] };
            }
            if ((match = matchers.hsv.exec(color))) {
                return { h: match[1], s: match[2], v: match[3] };
            }
            if ((match = matchers.hex8.exec(color))) {
                return {
                    a: convertHexToDecimal(match[1]),
                    r: parseIntFromHex(match[2]),
                    g: parseIntFromHex(match[3]),
                    b: parseIntFromHex(match[4]),
                    format: named ? "name" : "hex8"
                };
            }
            if ((match = matchers.hex6.exec(color))) {
                return {
                    r: parseIntFromHex(match[1]),
                    g: parseIntFromHex(match[2]),
                    b: parseIntFromHex(match[3]),
                    format: named ? "name" : "hex"
                };
            }
            if ((match = matchers.hex3.exec(color))) {
                return {
                    r: parseIntFromHex(match[1] + '' + match[1]),
                    g: parseIntFromHex(match[2] + '' + match[2]),
                    b: parseIntFromHex(match[3] + '' + match[3]),
                    format: named ? "name" : "hex"
                };
            }

            return false;
        }

        // Expose tinycolor to window, does not need to run in non-browser context.
        window.tinycolor = tinycolor;

    })();


    $(function () {
        if ($.fn.spectrum.load) {
            $.fn.spectrum.processNativeColorInputs();
        }
    });

})(window, jQuery);

define("spectrum", function(){});

(function ($) {

  $.cssHooks[ "backgroundColor" ] = {

    set: function( elem, value ) {
    	if( value.indexOf("ufc") === -1 ) {
    		elem.style.backgroundColor = value;
    		return;
    	}

    	elem.style.backgroundColor = Upfront.Util.colors.get_color(value);
    	$(elem).data("ufc", value);
    	$(elem).data("ufc_rule", "backgroundColor");
    }
  };

  $.cssHooks[ "color" ] = {

    set: function( elem, value ) {
    	if( value.indexOf("ufc") === -1 ) {
    		elem.style.color = value;
    		return;
    	}

    	elem.style.color = Upfront.Util.colors.get_color(value);
    	$(elem).data("ufc", value);
    	$(elem).data("ufc_rule", "color");
    }
  };

var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('editor_views',[
	"chosen",
	"scripts/upfront/global-event-handlers",
	"scripts/upfront/inline-panels/inline-panels",
	"scripts/upfront/element-settings/sidebar",
	"scripts/upfront/link-panel", // If adding more arguments adjust _.rest in line 72
	"text!upfront/templates/property.html",
	"text!upfront/templates/properties.html",
	"text!upfront/templates/property_edit.html",
	"text!upfront/templates/overlay_grid.html",
	"text!upfront/templates/edit_background_area.html",
	"text!upfront/templates/sidebar_settings_lock_area.html",
	"text!upfront/templates/sidebar_settings_background.html",
	"text!upfront/templates/popup.html",
	"text!upfront/templates/region_add_panel.html",
	"text!upfront/templates/region_edit_panel.html",
	"text!upfront/templates/sidebar_settings_theme_colors.html",
	"text!upfront/templates/color_picker.html",
    'spectrum'
], function (chosen, globalEventHandlers, InlinePanelsLoader, ElementSettingsSidebar, LinkPanel) {
	var _template_files = [
		"text!upfront/templates/property.html",
		"text!upfront/templates/properties.html",
		"text!upfront/templates/property_edit.html",
		"text!upfront/templates/overlay_grid.html",
		"text!upfront/templates/edit_background_area.html",
		"text!upfront/templates/sidebar_settings_lock_area.html",
		"text!upfront/templates/sidebar_settings_background.html",
		"text!upfront/templates/popup.html",
		"text!upfront/templates/region_add_panel.html",
		"text!upfront/templates/region_edit_panel.html",
		"text!upfront/templates/sidebar_settings_theme_colors.html",
		"text!upfront/templates/color_picker.html"
	];

	// Auto-assign the template contents to internal variable
	var _template_args = _.rest(arguments, 5),
		_Upfront_Templates = {}
	;
	_(_template_files).each(function (file, idx) {
		if (file.match(/text!/)) _Upfront_Templates[file.replace(/text!upfront\/templates\//, '').replace(/\.html/, '')] = _template_args[idx];
	});

	var InlinePanels = InlinePanelsLoader;


	Upfront.Events.on('data:ready', function(){
		Upfront.data.tpls = _Upfront_Templates;
	});

	var Upfront_Scroll_Mixin = {
		stop_scroll_propagation: function ($el) {
			$el.on('DOMMouseScroll mousewheel', function(ev) {
				var $this = $(this),
					scrollTop = this.scrollTop,
					scrollHeight = this.scrollHeight,
					height = $this.outerHeight(),
					delta = ev.originalEvent.wheelDelta,
					up = delta > 0,
					scroll = scrollHeight > height;

				if ( !scroll )
					return;

				ev.stopPropagation();

				var prevent = function() {
					ev.preventDefault();
					ev.returnValue = false;
					return false;
				};

				if (!up && -delta > scrollHeight - height - scrollTop) {
					// Scrolling down, but this will take us past the bottom.
					$this.scrollTop(scrollHeight);
					return prevent();
				} else if (up && delta > scrollTop) {
					// Scrolling up, but this will take us past the top.
					$this.scrollTop(0);
			 		return prevent();
				}
			});
		}
	};

	// Stubbing interface control

	var Property = Backbone.View.extend({
		events: {
			"click .upfront-property-change": "show_edit_property_partial",
			"click .upfront-property-save": "save_property",
			"click .upfront-property-remove": "remove_property"
		},
		render: function () {
			var template = _.template(_Upfront_Templates.property, this.model.toJSON());
			this.$el.html(template);
		},

		remove_property: function () {
			this.model.destroy();
		},
		save_property: function () {
			var name = this.$("#upfront-new_property-name").val(),
				value = this.$("#upfront-new_property-value").val()
			;
			this.model.set({
				"name": name,
				"value": value
			});
			this.render();
		},
		show_edit_property_partial: function () {
			var template = _.template(_Upfront_Templates.property_edit, this.model.toJSON());
			this.$el.html(template);
		}
	});

	var Properties = Backbone.View.extend({
		events: {
			"click #add-property": "show_new_property_partial",
			"click #done-adding-property": "add_new_property",
		},
		initialize: function () {
/*
			this.model.get("properties").bind("change", this.render, this);
			this.model.get("properties").bind("add", this.render, this);
			this.model.get("properties").bind("remove", this.render, this);
			*/

			this.listenTo(this.model.get("properties"), 'change', this.render);
			this.listenTo(this.model.get("properties"), 'add', this.render);
			this.listenTo(this.model.get("properties"), 'remove', this.render);
		},
		render: function () {
			var template = _.template(_Upfront_Templates.properties, this.model.toJSON()),
				properties = this
			;
			this.$el.html(template);
			this.model.get("properties").each(function (obj) {
				var local_view = new Property({"model": obj});
				local_view.render();
				properties.$el.find("dl").append(local_view.el)
			});
		},

		show_new_property_partial: function () {
			this.$("#add-property").hide();
			this.$("#upfront-new_property").slideDown();
		},
		add_new_property: function () {
			var name = this.$("#upfront-new_property-name").val(),
				value = this.$("#upfront-new_property-value").val()
			;
			this.model.get("properties").add(new Upfront.Models.Property({
				"name": name,
				"value": value
			}));
			this.$("#upfront-new_property")
				.slideUp()
				.find("input").val('').end()
			;
			this.$("#add-property").show();
		}
	});

	var Command = Backbone.View.extend({
		"tagName": "li",
		"events": {
			"click": "on_click"
		},
		on_click: function () { this.render(); },
		add_module: function (module) {
			var region = this.model.get("regions").active_region;
			if (!region) return Upfront.Util.log("select a region");
			Upfront.Events.trigger("entity:module:before_added", module, region);
			var wrappers = this.model.get('wrappers'),
				wrapper_id = Upfront.Util.get_unique_id("wrapper"),
				wrapper = new Upfront.Models.Wrapper({
					"name": "",
					"properties": [
						{"name": "wrapper_id", "value": wrapper_id},
						{"name": "class", "value": "c24 clr"}
					]
				});
			module.set_property('wrapper_id', wrapper_id);
			wrappers.add(wrapper);
			region.get("modules").add(module);
			Upfront.Events.trigger("entity:module:added", module, region);
		}
	});

	var Command_Logo = Command.extend({
		className: "command-logo",
		render: function () {
			var url = Upfront.Settings.site_url;
			if(url[url.length - 1] != '/')
				url += '/';

			if ( Upfront.Application.get_current() != Upfront.Settings.Application.MODE.CONTENT )
				this.$el.html('<a class="upfront-logo" href="' + url + '"></a>');
			else
				this.$el.html('<a class="upfront-logo upfront-logo-small" href="' + url + '"></a>');
		},
		on_click: function () {
			/*var root = Upfront.Settings.site_url;
			root = root[root.length - 1] == '/' ? root : root + '/';

			if(window.location.origin + window.location.pathname != root)
				Upfront.Application.navigate('/' + root.replace(window.location.origin, '') + window.location.search, {trigger: true});*/
		}
	});

	var Command_Exit = Command.extend({
		className: "command-exit upfront-icon upfront-icon-exit",
		render: function () {
		},
		on_click: function () {
			// Upfront.Events.trigger("command:exit");
			var url = window.location.pathname,
				loading = new Upfront.Views.Editor.Loading({
					loading: l10n.exiting_upfront,
					done: l10n.exit_done,
					fixed: true
				})
			;

			loading.render();
			$('body').append(loading.$el);

			if (url.indexOf('/create_new/') !== -1) {
				return (window.location.href = Upfront.Settings.site_url);
			}
			if (url.indexOf('/edit/') !== -1 && _upfront_post_data && _upfront_post_data.post_id) {
				return (window.location.href = Upfront.Settings.site_url + '/?p=' + _upfront_post_data.post_id);
			}
			if (window.location.search.match(/(\?|\&)editmode/)) {
				return window.location.search = window.location.search.replace(/(\?|\&)editmode(=[^?&]+)?/, '');
			}

			window.location.reload(true);
			var tmout = setTimeout(function () {
				loading.cancel();
			}, 1000);
		}
	});


	var Command_NewPost = Command.extend({
		className: "command-new-post",
		postView: false,
		postType: 'post',
		setMode: false,
		initialize: function () {
			this.setMode = Upfront.Application.MODE.CONTENT;
		},
		render: function () {
			Upfront.Events.trigger("command:newpost:start", true);
			// this.$el.addClass('upfront-icon upfront-icon-post');
			this.$el.html(l10n.new_post);
            this.$el.prop("title", l10n.new_post);
		},
		on_click: function (e) {
			e.preventDefault();

			if(Upfront.Settings.LayoutEditor.newpostType == this.postType)
				return Upfront.Views.Editor.notify(l10n.already_creating_post.replace(/%s/, this.postType), 'warning');

			//return Upfront.Application.navigate('/create_new/post' + location.search, {trigger: true}); // DROP THIS INSANITY
			Upfront.Util
				.post({
					action: "upfront-create-post_type",
					data: _.extend({post_type: this.postType}, {})
				}).done(function (resp) {
					//Upfront.Util.log(resp.data);
					Upfront.Application.navigate('/edit/post/' + resp.data.post_id, {trigger: true});
				})
			;
		},
		on_post_loaded: function(view) {
			if(!this.postView){
				this.postView = view;
				view.editPost(view.post);

				Upfront.data.currentEntity = view;

				Upfront.Events.off("elements:this_post:loaded", this.on_post_loaded, this);

				Upfront.Events.on("upfront:application:contenteditor:render", this.select_title, this);
			}
		},
		select_title: function(){
			var input = this.postView.$('.post_title input').focus();

			input.val(input.val()); //Deselect the text
			$('#upfront-loading').remove();

			Upfront.Events.off("upfront:application:contenteditor:render", this.select_title, this);
		}
	});
	var Command_NewPage = Command_NewPost.extend({
		"className": "command-new-page",
		postType: 'page',
		_default_label: l10n.new_page,
		initialize: function () {
			this.setMode = Upfront.Application.MODE.LAYOUT;
		},
		render: function () {
			Upfront.Events.trigger("command:newpage:start", true);
			// this.$el.addClass('upfront-icon upfront-icon-page');
			this.$el.html(this._default_label);
            this.$el.prop("title", this._default_label);
		},
		on_click: function(e){
			e.preventDefault();
			var me = this;

			this.spawn_modal();
			this.modal.render();
			$('body').append(this.modal.el);

			this.modal.open(function () {
				me.render_modal();
				me.trigger("new_page:modal:open");
			}).done(function () {
				me.trigger("new_page:modal:close");
				Upfront.Util.post({
					action: "upfront-create-post_type",
					data: _.extend({post_type: me.postType}, me.modal._data)
				}).done(function (resp) {
					//Upfront.Util.log(resp.data);
					Upfront.Application.navigate('/edit/page/' + resp.data.post_id, {trigger: true});

				});
				//Upfront.Application.navigate('/create_new/page', {trigger: true});
			})
		},
		render_modal: function () {
			var me = this,
				$content = this.modal.$el.find('.upfront-inline-modal-content')
			;
			$content
				.empty()
				.append('<h2>' + l10n.add_new_page + '</h2>')
			;
			_.each(me.modal._fields, function (field) {
				field.render();
				field.delegateEvents();
				$content.append(field.$el);
			});
		},
		spawn_modal: function () {
			if (this.modal) return this.initialize_modal_data();
			var me = this,
				update_modal_data = function () {
					_.each(me.modal._fields, function (field, key) {
						me.modal._data[key] = field.get_value();
					});
					if (!me.modal._fields.permalink.has_been_edited()) {
						var title = $.trim(me.modal._data.title || me._default_label),
							permalink = title
								.replace(/^[^a-z0-9]+/gi, '') // Trim non-alnum off of start
								.replace(/[^a-z0-9]+$/gi, '') // Trim non-alnum off of end
								.replace(/[^-_0-9a-z]/gi, '-')
								.toLowerCase()
						;
						me.modal._fields.permalink.set_value(permalink);
					}
				},
				_initial_templates = [{label: l10n.none, value: ""}],
				templates_request = Upfront.Util.post({
					action: "upfront-wp-model",
					model_action: "get_post_extra",
					postId: "fake", // Stupid walkaround for model handler insanity
					allTemplates: true
				})
			;
			this.modal = new Upfront.Views.Editor.Modal({to: $('body'), button: true, top: 120, width: 540, button_text: l10n.create_page});
			this.modal._fields = {
				title: new Upfront.Views.Editor.Field.Text({
					label: "",
					name: "title",
					default_value: this._default_label,
					change: update_modal_data
				}),
				permalink: new Field_ToggleableText({
					label: '<b>' + l10n.permalink + ':</b> ' + Upfront.Settings.site_url.replace(/\/$/, '') + '/',
					label_style: "inline",
					name: "permalink",
					change: update_modal_data
				}),
				template: new Upfront.Views.Editor.Field.Select({
					label: l10n.page_template,
					name: "template",
					values: _initial_templates
				})
			};
			this.initialize_modal_data();
			this.on("new_page:modal:open", update_modal_data, this);
			this.on("new_page:modal:close", update_modal_data, this);
			templates_request.done(function (response) {
				me.modal._fields.template.options.values = _initial_templates; // Zero out the templates selection
				if (!response.data || !response.data.allTemplates) return false;
				_.each(response.data.allTemplates, function (tpl, title) {
					me.modal._fields.template.options.values.push({label: title, value: tpl});
				});
				me.modal._fields.template.render();
			});
		},
		initialize_modal_data: function () {
			var me = this;
			this.modal._data = {};
			_.each(_.keys(this.modal._fields), function (key) {
				me.modal._data[key] = "";
				if (me.modal._fields[key].reset_state) me.modal._fields[key].reset_state();
			});

		}
	});

	var Command_SaveLayout = Command.extend({
		"className": "command-save",
		render: function () {
			// this.$el.addClass('upfront-icon upfront-icon-save');
			this.$el.html(l10n.save);
            this.$el.prop("title", l10n.save);
		},
		on_click: function () {
			if ( _upfront_post_data.layout.specificity && _upfront_post_data.layout.item && !_upfront_post_data.layout.item.match(/-page/) )
				Upfront.Events.trigger("command:layout:save_as");
			else {
				Upfront.Events.trigger("command:layout:save");
			}
		}

	});
	var Command_SaveLayoutAs = Command.extend({
		render: function () {
			this.$el.html(l10n.save_as);
            this.$el.prop("title", l10n.save_as);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:save_as");
		}

	});

	var Command_SavePostLayout = Command_SaveLayout.extend({
		"className": "command-save",
		render: function () {
                this.$el.addClass('upfront-icon upfront-icon-save');
                this.$el.html(l10n.save_layout);
                this.$el.prop("title", l10n.save_layout);
		},
		on_click: function () {
			Upfront.Events.trigger("post:layout:save");
		}
	});

	var Command_CancelPostLayout = Command.extend({
        className: "command-cancel",
		render: function () {
			this.$el.html(l10n.cancel);
            this.$el.prop("title", l10n.cancel);
		},
		on_click: function () {
            Upfront.Events.trigger("post:layout:cancel");
            if ( Upfront.Application.is_builder() ) {
                Upfront.Events.trigger("post:layout:post:style:cancel");
            }
		}
	});
	var Command_PreviewLayout = Command.extend({
		className: "command-preview",
		can_preview: false,
		render: function () {
			this.$el.addClass('command-save command-preview upfront-icon upfront-icon-save');
			//this.$el.html("Preview");
			this.preview_built();
			Upfront.Events.on("preview:build:start", this.building_preview, this);
			Upfront.Events.on("preview:build:stop", this.preview_built, this);
		},
		on_click: function () {
			if (this.can_preview) Upfront.Events.trigger("command:layout:preview");
		},
		building_preview: function () {
			this.$el.html(l10n.building);
			this.can_preview = false;
		},
		preview_built: function () {
			this.$el.html(l10n.preview);
            this.$el.prop("title", l10n.preview);
			this.can_preview = true;
		}

	});

	var Command_LoadLayout = Command.extend({
		render: function () {
			this.$el.html(l10n.alternate_layout);
            this.$el.prop("title", l10n.alternate_layout);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:load", 2)
		}

	});

	var Command_PublishLayout = Command.extend({
		className: "command-publish-layout",
		render: function () {
			this.$el.html(l10n.publish_layout);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:publish");
		}
	});

	var Command_Undo = Command.extend({
		"className": "command-undo",
		initialize: function () {
			//Upfront.Events.on("entity:activated", this.activate, this);
			//Upfront.Events.on("entity:deactivated", this.deactivate, this);
			Upfront.Events.on("command:undo", this.render, this);
			Upfront.Events.on("command:redo", this.render, this);

			// Re-activate on stored state
			Upfront.Events.on("upfront:undo:state_stored", this.render, this);

			this.deactivate();
		},
		render: function () {
			this.$el.addClass('upfront-icon upfront-icon-undo');
			this.$el.html(l10n.undo);
            this.$el.prop("title", l10n.undo);
			if (this.model.has_undo_states()) this.activate();
			else this.deactivate();
		},
		activate: function () {
			this.$el.css("opacity", 1);
		},
		deactivate: function () {
			this.$el.css("opacity", 0.5);
		},
		on_click: function () {
			var me = this,
				dfr = false,
				loading = new Upfront.Views.Editor.Loading({
					loading: l10n.undoing,
					done: l10n.undoing_done,
					fixed: true
				})
			;
			loading.render();
			$('body').append(loading.$el);

			dfr = me.model.restore_undo_state();
			if (dfr && dfr.done) {
				dfr.done(function () {
					Upfront.Events.trigger("command:undo");
					me.render();
					loading.done();
				});
			} else {
				setTimeout(function () {
					loading.done();
				}, 100);
			}
		}
	});

	var Command_Redo = Command.extend({
		"className": "command-redo",
		initialize: function () {
			//Upfront.Events.on("entity:activated", this.activate, this);
			//Upfront.Events.on("entity:deactivated", this.deactivate, this);
			Upfront.Events.on("command:undo", this.render, this);
			this.deactivate();
		},
		render: function () {
			this.$el.addClass('upfront-icon upfront-icon-redo');
			this.$el.html(l10n.redo);
            this.$el.prop("title", l10n.redo);
			if (this.model.has_redo_states()) this.activate();
			else this.deactivate();
		},
		activate: function () {
			this.$el.css("opacity", 1);
		},
		deactivate: function () {
			this.$el.css("opacity", 0.5);
		},
		on_click: function () {
			var me = this,
				dfr = false,
				loading = new Upfront.Views.Editor.Loading({
					loading: l10n.redoing,
					done: l10n.redoing_done,
					fixed: true
				})
			;
			loading.render();
			$('body').append(loading.$el);

			dfr = me.model.restore_redo_state();
			if (dfr && dfr.done) {
				dfr.done(function () {
					Upfront.Events.trigger("command:redo");
					me.render();
					loading.done();
				});
			} else {
				setTimeout(function () {
					loading.done();
				}, 100);
			}
		}
	});

	var Command_ExportHistory = Command.extend({
		render: function () {
			this.$el.html(l10n.export_history);
		},
		on_click: function () {
			alert("Check console output");
			console.log({
				"undo": Upfront.Util.Transient.get_all("undo"),
				"redo": Upfront.Util.Transient.get_all("redo")
			});
		}
	});

	var Command_Merge = Command.extend({
		render: function () {
			if (!this.model.merge.length) return false;
			this.$el.html(l10n.merge_selected);
		},
		on_click: function () {
			var merge_models = this.model.merge,
				region = this.model.get("regions").active_region,
				collection = region.get("modules"),
				objects = []
			;
			_(merge_models).each(function (module) {
				module.get("objects").each(function (obj) {
					objects.push(obj);
				});
				collection.remove(module);
			});
			var module_id = Upfront.Util.get_unique_id("module"),
				module = new Upfront.Models.Module({
				"name": "Merged module",
				"properties": [
					{"name": "element_id", "value": module_id},
					{"name": "class", "value": "c24"}
				],
				"objects": objects
			});
			this.add_module(module);
			$("#" + module_id).trigger("click"); // Reset selectable and activate the module
			this.remove();
			this.trigger("upfront:command:remove", this);
			Upfront.Events.trigger("command:merge");
		}
	});

	var Command_Delete = Command.extend({
		initialize: function () {
			Upfront.Events.on("entity:activated", this.activate, this);
			Upfront.Events.on("entity:deactivated", this.deactivate, this);
			this.deactivate();
		},
		render: function () {
			this.$el.html(l10n.delete_string);
		},

		on_click: function () {
			var region = this.model.get("regions").active_region,
				modules = region.get("modules"),
				active_module = modules.active_entity
			;
			if (active_module) return this.delete_module(region, active_module);

			modules.each(function (module) {
				var objects = module.get("objects"),
					active_object = objects.active_entity
				;
				if (active_object) objects.remove(active_object);
			});
		},

		activate: function () {
			this.$el.css("text-decoration", "none");
		},
		deactivate: function () {
			this.$el.css("text-decoration", "line-through");
		},

		delete_module: function (region, module) {
			var modules = region.get("modules");
			modules.remove(module);
		}
	});

	var Command_Select = Command.extend({
		initialize: function () {
			Upfront.Events.on("command:merge", this.on_click, this);
		},
		render: function () {
			this.$el.html("Select mode " + (this._selecting ? 'on' : 'off'));
			this.$el.html((
				this._selecting
					? l10n.select_mode_on
					: l10n.select_mode_off
			));
		},
		on_click: function () {
			if (!this._selecting) Upfront.Events.trigger("command:select");
			else Upfront.Events.trigger("command:deselect");
			this._selecting = !this._selecting;
			this.render();
		}
	});

	var Command_ToggleGrid = Command.extend({
		className: "command-grid",
		render: function () {
			this.$el.addClass('upfront-icon upfront-icon-grid');
			//this.$el.html('Toggle grid');
            this.$el.prop("title", l10n.toggle_grid);
			this.listenTo(Upfront.Events, "entity:region:added", this.update_grid);
			this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.update_grid);
            this.listenTo(Upfront.Events, "grid:toggle", this.on_click);
		},
		on_click: function () {
			$('.upfront-overlay-grid').size() || this.create_grid();
			this.toggle_grid();
		},
		create_grid: function () {
			this.update_grid();
			//this.attach_event();
		},
		toggle_grid: function () {
			if(!Upfront.Application.get_gridstate())
				this.show_grid();
			else
				this.hide_grid();
		},
		show_grid: function () {
			this.$el.addClass('upfront-icon-grid-active');
			$('.upfront-overlay-grid').addClass('upfront-overlay-grid-show');
			Upfront.Application.set_gridstate(true);
		},
		hide_grid: function () {
			this.$el.removeClass('upfront-icon-grid-active');
			$('.upfront-overlay-grid').removeClass('upfront-overlay-grid-show');
			Upfront.Application.set_gridstate(false);
		},
		update_grid: function (size) {
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
				grid = Upfront.Settings.LayoutEditor.Grid;
			$('.upfront-overlay-grid').remove();
			$('.upfront-grid-layout, .upfront-region-side-fixed .upfront-modules_container, .upfront-region-side-lightbox .upfront-modules_container').each(function(){
				var columns = grid.size,
					template = _.template(_Upfront_Templates.overlay_grid, {columns: columns, size_class: grid.class, style: 'simple'});
				$(this).prepend(template);

				//Adjust grid rulers position
				Upfront.Application.adjust_grid_padding_settings(this);
			});

			!Upfront.Application.get_gridstate() || this.show_grid();
		}
	});

	var Command_ResetEverything = Command.extend({
		className: 'command-reset-everything',
		render: function () {
			this.$el.html("<span title='" + l10n.destroy_layout + "'>" + l10n.reset_everything + "</span>");
		},
		on_click: function () {
			Upfront.Util.reset()
				.success(function () {
					Upfront.Util.log("layout reset");
					window.location.reload();
				})
				.error(function () {
					Upfront.Util.log("error resetting layout");
				})
			;
		}
	});

	var Command_ToggleMode = Command.extend({
		className: 'command-toggle-mode',
		enabled: true,
		initialize: function () {
			Upfront.Events.on('upfront:element:edit:start', this.disable_toggle, this);
			Upfront.Events.on('upfront:element:edit:stop', this.enable_toggle, this);
		},
		render: function () {
			this.$el.html(_.template(
				"<span title='toggle editing mode'>" + l10n.current_mode + "</span>",
				{mode: Upfront.Application.get_current()}
			));
		},
		on_click: function () {
			if ( !this.enabled )
				return false;
			var mode = Upfront.Application.mode && Upfront.Application.mode.current && Upfront.Application.mode.current != Upfront.Application.MODE.CONTENT
				? Upfront.Application.MODE.CONTENT
				: Upfront.Application.mode.last
			;
			Upfront.Application.start(mode);
		},
		disable_toggle: function () {
			this.$el.css('opacity', 0.5);
			this.enabled = false;
		},
		enable_toggle: function () {
			this.$el.css('opacity', 1);
			this.enabled = true;
		}
	});

	var Command_ToggleMode_Small = Command_ToggleMode.extend({
		className: 'command-toggle-mode upfront-icon',
		current_mode: false,
		render: function () {
			if ( this.current_mode )
				this.$el.removeClass('command-toggle-mode-' + this.current_mode + ' upfront-icon-collapse upfront-icon-expand');
			this.current_mode = Upfront.Application.get_current();
			var icon = ( this.current_mode != Upfront.Application.MODE.CONTENT ) ? 'upfront-icon-collapse' : 'upfront-icon-expand';
			this.$el.addClass('command-toggle-mode-' + this.current_mode + ' ' + icon);
		}
	});


	var Command_EditBackgroundArea = Command.extend({
		"className": "command-edit-background-area",
		events: {
			"click .switch": "on_switch"
		},
		initialize: function() {
			Upfront.Events.on("command:newpage:start", this.switchOff, this);
			Upfront.Events.on("command:newpost:start", this.switchOff, this);
		},
		render: function () {
			var template = _.template(_Upfront_Templates.edit_background_area, {})
			this.$el.html(template);
		},
		on_switch: function () {
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
			if ( this.$el.find('.switch-on').hasClass('active') ){ // Switch off
				this.switchOff();
			}
			else { // Switch on
				this.$el.find('.switch-off').removeClass('active');
				this.$el.find('.switch-on').addClass('active');
				$main.addClass('upfront-region-editing');
				Upfront.Events.trigger("command:region:edit_toggle", true);
			}
		},
		switchOff: function() {
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
			this.$el.find('.switch-off').addClass('active');
			this.$el.find('.switch-on').removeClass('active');
			$main.removeClass('upfront-region-editing');
			$main.removeClass('upfront-region-lightbox-editing');
			Upfront.Events.trigger("command:region:edit_toggle", false);
		}
	});

	/**
	 * DEPRECATED
	 */
	var Command_ThemesDropdown = Command.extend({
		className: 'themes-dropdown',
		enabled: true,
		events: {
			'click .upfront-field-select-value': 'openOptions',
			'mouseup .upfront-field-select': 'onMouseUp',
			'change .upfront-field-select-option input': 'onChange',
			'click .upfront-field-select-option label': 'onOptionClick'
		},
		initialize: function() {
			var themes = _.union([{label: l10n.choose_theme, value: ''}], _.map(Upfront.themeExporter.themes, function(theme) {
				return {
					label: theme.name,
					value: theme.directory
				};
			}));
			this.fields = [
				new Field_Select({
					values: themes,
					default_value: Upfront.themeExporter.currentTheme === 'upfront' ?
						'' : Upfront.themeExporter.currentTheme,
					change: function () {
					  if (this.get_value() === ''
							|| this.get_value() === Upfront.themeExporter.currentTheme) return;

						Upfront.Events.trigger("builder:load_theme", this.get_value());
					}
				})
			];
		},
		render: function () {
			this.fields[0].render();
			this.$el.append(this.fields[0].el);
		},
		// noop for preventing parent class rendering on click behaviour
		openOptions: function(e) {
			this.fields[0].openOptions(e);
		},
		onMouseUp: function(e) {
			this.fields[0].onMouseUp(e);
		},
		onChange: function(e) {
			this.fields[0].onChange(e);
		},
		onOptionClick: function(e) {
			this.fields[0].onOptionClick(e);
		}

	});

	/**
	 * DEPRECATED
	 */
	var Command_NewLayout = Command.extend({
		className: "command-new-layout",
		render: function () {
			this.$el.addClass('upfront-icon upfront-icon-layout');
			this.$el.html(l10n.new_layout);
			this.$el.prop("title", l10n.new_layout);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:create");
		}
	});

	/**
	 * DEPRECATED
	 */
	var Command_BrowseLayout = Command.extend({
		className: "command-browse-layout upfront-icon upfront-icon-browse-layouts",
		render: function () {
			this.$el.html(l10n.layouts);
            this.$el.prop("title", l10n.layouts);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:browse");
		}
	});

	var Command_EditStructure = Command.extend({
		tagName: 'div',
		className: "command-link command-edit-structure",
		render: function (){
			this.$el.html(l10n.edit_grid);
			this.$el.prop("title", l10n.edit_grid);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:edit_structure");
		}
	});

	var Command_EditLayoutBackground = Command.extend({
		tagName: 'div',
		className: "command-link command-edit-bg",
		render: function (){
			this.$el.text(l10n.edit_global_bg);
			this.$el.prop("title", l10n.edit_global_bg);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:edit_background");
		}
	});

	var Command_EditGlobalRegions = Command.extend({
		tagName: 'div',
		className: "command-link command-edit-global-regions",
		render: function (){
			this.$el.text(l10n.edit_global_regions);
			this.$el.prop("title", l10n.edit_global_regions);
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:edit_global_regions");
		}
	});

	var Command_EditCustomCSS = Command.extend({
		tagName: 'div',
		className: "command-edit-css upfront-icon upfront-icon-edit-css",
		render: function (){
			this.$el.html('<span>' + l10n.add_custom_css_rules + '</span>');
            this.$el.prop("title", l10n.add_custom_css_rules);
		},
		on_click: function () {
			var editor = Upfront.Application.cssEditor,
				save_t;

			editor.init({
				model: this.model,
				type: "Layout",
				sidebar: false,
				element_id: 'layout',
				global: true
			});
		}
	});

	var Command_OpenFontManager = Command.extend({
		tagName: 'div',
		className: "command-open-font-manager upfront-icon upfront-icon-open-font-manager",
		render: function (){
			this.$el.html('<span title="'+ l10n.theme_font_manager +'">' + l10n.theme_font_manager + '</span>');
		},
		on_click: function () {
			Upfront.Events.trigger('command:themefontsmanager:open');
		}
	});

	var Command_GeneralEditCustomCSS = Command.extend({
		tagName: 'div',
		className: "command-edit-css upfront-icon upfront-icon-edit-css",
		initialize: function() {
			this.lazy_save_styles = _.debounce(function(styles) {
				this.model.set({ styles: styles });
			}, 1000);
		},
		render: function () {
			this.$el.html('<span title="'+ l10n.add_custom_css_rules +'">' + l10n.add_custom_css_rules + '</span>');
		},
		on_click: function () {
			var editor,
				me = this;

			editor = new GeneralCSSEditor({
				model: this.model,
				page_class: this.model.get('id') + '-breakpoint',
				type: "Layout",
				sidebar: false,
				global: true,
				change: function(content) {
					me.lazy_save_styles(content);
				}
			});

			Upfront.Events.on("upfront:layout_size:change_breakpoint", function() {
				editor.close();
			});
		}
	});

	var Command_GoToTypePreviewPage = Command.extend({
		tagName: 'div',
		className: "command-go-to-type-preview",
		render: function () {
			this.$el.text(l10n.go_to_preview_page);
		},
		on_click: function () {
			alert('This is just placeholder :)');
		}
	});

	var Command_ExportLayout = Command.extend({
		className: "command-export upfront-icon upfront-icon-export",
		render: function (){
			this.$el.text(l10n.export_str);
		},
		on_click: function () {
			$('div.redactor_editor').each(function() {
				var ed = $(this).data('ueditor');
				if(ed)
					ed.stop();
			});
			Upfront.Events.trigger("command:layout:export_theme");
		}
	});

	/* Responsive mode commands */
	var Command_CreateResponsiveLayouts = Command.extend({
		enabled: true,
		className: 'command-create-responsive-layouts upfront-icon upfront-icon-start-responsive',
		render: function () {
			this.$el.html("<span title='"+ l10n.create_responsive_layouts +"'>" + l10n.create_responsive_layouts + "</span>");
		},
		on_click: function () {
			Upfront.Application.start(Upfront.Application.MODE.RESPONSIVE);
		}
	});

	var Command_StartResponsiveMode = Command.extend({
		enabled: true,
		className: 'command-start-responsive upfront-icon upfront-icon-start-responsive',
		render: function () {
			this.$el.html("<span title='"+ l10n.responsive_mode +"'>" + l10n.responsive_mode + "</span>");
		},
		on_click: function () {
			Upfront.Application.start(Upfront.Application.MODE.RESPONSIVE);
		}
	});

	var Command_StopResponsiveMode = Command.extend({
		enabled: true,
		className: 'exit-responsive',
		render: function () {
			this.$el.html("<span title='"+ l10n.exit_responsive  +"'>" + l10n.exit_responsive + "</span>");
		},
		on_click: function () {
			$('li.desktop-breakpoint-activate').trigger('click');
			Upfront.Application.start(Upfront.Application.mode.last);
		}
	});

	var Command_BreakpointDropdown = Command.extend({
		className: 'activate-breakpoints-dropdown',
		enabled: true,
		initialize: function() {
			var breakpoints = breakpoints_storage.get_breakpoints();

			this.fields = [
				new Field_Compact_Label_Select({
					multiple: true,
					label_text: l10n.activate_breakpoints,
					collection: breakpoints
				})
			]
		},
		render: function () {
			this.fields[0].render();
			this.$el.append(this.fields[0].el);
			this.fields[0].delegateEvents();
		},
		on_click: function () {

		}
	});

	var Command_AddCustomBreakpoint = Backbone.View.extend({
		tagName: 'li',
		className: 'upfornt-icon upfront-icon-add',
		id: 'new-custom-breakpoint',
		events: {
			'click': 'add_breakpoint'
		},
		render: function () {
				this.$el.html(l10n.new_breakpoint);
		},
		initialize: function(options) {
			this.collection = breakpoints_storage.get_breakpoints();
		},
		add_breakpoint: function(event) {
			event.preventDefault();
			var popup;
			var new_breakpoint = new Breakpoint_Model({ 'id': this.collection.get_unique_id() });
			this.collection.add(new_breakpoint);
			new_breakpoint.set({ 'enabled': true });
			new_breakpoint.set({ 'active': true });

			popup = Upfront.Popup.open(function (data, $top, $bottom) {
				$top.empty();
				var $content = $(this);
				var editPanel = new BreakpointEditPanel({ model: new_breakpoint });

				$content
				.append(editPanel.render().el);
				$bottom.append('<div class="breakpoint-edit-ok-button">' + l10n.ok + '</div>');
				$('#upfront-popup-close').hide();
				$('.breakpoint-edit-ok-button').on('click', function() {
					Upfront.Popup.close();
					$('#upfront-popup-close').show();
				});
			}, {
				width: 400
			});
		}
	});

	var Command_ResponsiveUndo = Command_Undo.extend({
		on_click: function() {
			alert('This is just placeholder.');
		}
	});

	var Command_ResponsiveRedo = Command_Redo.extend({
		on_click: function() {
			alert('This is just placeholder.');
		}
	});

	/**
	 * DEPRECATED
	 */
	var ResponsiveCommand_BrowseLayout = Command.extend({
		className: "command-browse-layout command-browse-layout-responsive",
		render: function () {
			this.$el.html('<span title="'+ l10n.browse_layouts +'">' + l10n.browse_layouts + '</span>');
		},
		on_click: function () {
			Upfront.Events.trigger("command:layout:browse");
		}
	});


	/* End responsive mode commands */

	var Commands = Backbone.View.extend({
		"tagName": "ul",

		initialize: function () {
			this.commands = _([
				new Command_NewPage({"model": this.model}),
				new Command_NewPost({"model": this.model}),
				new Command_SaveLayout({"model": this.model}),
				new Command_SaveLayoutAs({"model": this.model}),
				//new Command_LoadLayout({"model": this.model}),
				new Command_Undo({"model": this.model}),
				new Command_Redo({"model": this.model}),
				new Command_Delete({"model": this.model}),
				new Command_Select({"model": this.model}),
				new Command_ToggleGrid({"model": this.model}),
				new Command_ResetEverything({"model": this.model}),
			]);
			if (Upfront.Settings.Debug.transients) this.commands.push(new Command_ExportHistory({model: this.model}));
		},
		render: function () {
			this.$el.find("li").remove();
			this.commands.each(this.add_command, this);
		},

		add_command: function (command) {
			if (!command) return;
			command.remove();
			command.render();
			this.$el.append(command.el);
			command.bind("upfront:command:remove", this.remove_command, this);
			command.delegateEvents();
		},

		remove_command: function (to_remove) {
			var coms = this.commands.reject(function (com) {
					com.remove();
					return com.cid == to_remove.cid;
				})
			;
			this.commands = _(coms);
			this.render();
		}
	});

	var SidebarPanel = Backbone.View.extend(_.extend({}, Upfront_Scroll_Mixin, {
		"tagName": "li",
		"className": "sidebar-panel",
		events: {
			"click .sidebar-panel-title": "on_click",
			"click .sidebar-panel-tab" : "show_tab"
		},
		get_title: function () {
			return '';
		},
		render: function () {
			if(this.active)
				this.$el.addClass('active');
			else
				this.$el.removeClass('active');
			this.$el.html('<h3 class="sidebar-panel-title">' + this.get_title() + '</h3>');
			this.$el.append('<div class="sidebar-panel-content" />');
			this.stop_scroll_propagation(this.$el.find('.sidebar-panel-content'));
			if ( this.on_render ) this.on_render();
			// Make first tab active
			this.$el.find(".sidebar-panel-tab").first().addClass("active");
			// show first tab content
			this.$el.find(".sidebar-tab-content").first().show();
		},
		on_click: function () {
			$('.sidebar-panel').not(this.$el).removeClass('expanded');
			this.$el.addClass('expanded');

			// take care of tabs if any
			$('.sidebar-panel').not(this.$el).find(".sidebar-panel-tabspane").hide();
			this.$el.find(".sidebar-panel-tabspane").show();
		},
		show_tab : function( e ){
			var tab = "#" + $(e.target).data("target");
			// Set current tab active
			this.$el.find(".sidebar-panel-tab").removeClass("active");
			$(e.target).addClass("active");
			//Show current tab's content
			this.$el.find(".sidebar-tab-content").hide();
			this.$el.find(tab).show();
		}
	}));

	var DraggableElement = Backbone.View.extend({
		"tagName": "span",
		"className": "draggable-element upfront-no-select",
		"shadow_id": '',
		"draggable": true,
		"priority": 10000,
		initialize: function(opts){
			this.options = opts;
			this.title = opts.title || l10n.no_title;
		},

		render: function(){
			this.$el.html(this.title);
		},

		add_module: function (module) {
			// Add module to shadow region so it's available to add by dragging
			var region = this.model.get("regions").get_by_name('shadow');
			if (!region || !region.get) return false; // Let's break out if we can't find the shadow region
			this.shadow_id = Upfront.Util.get_unique_id("shadow");
			module.set({"shadow": this.shadow_id}, {silent: true});
			region.get("modules").add(module);
		}
	});

	var SidebarPanel_DraggableElements = SidebarPanel.extend({
		"className": "sidebar-panel sidebar-panel-elements",
		initialize: function () {
			this.active = true;
			this.elements = _([]);
			Upfront.Events.on("command:layout:save", this.on_save, this);
			Upfront.Events.on("command:layout:save_as", this.on_save, this);
			Upfront.Events.on("command:layout:publish", this.on_save, this);
			//Upfront.Events.on("command:layout:preview", this.on_preview, this); // Do NOT drop shadow region from layout on preview build
			Upfront.Events.on("command:layout:save_success", this.on_save_after, this);
			Upfront.Events.on("command:layout:save_error", this.on_save_after, this);
			Upfront.Events.on("entity:drag_stop", this.reset_modules, this);
			Upfront.Events.on("layout:render", this.apply_state_binding, this);
		},
		get_title: function () {
			return l10n.draggable_elements;
		},
		on_save: function () {
			var regions = this.model.get('regions');
			this._shadow_region = regions.get_by_name('shadow');
			regions.remove(this._shadow_region, {silent: true});
		},
		on_preview: function () { return this.on_save(); },
		apply_state_binding: function () {
			Upfront.Events.on("command:undo", this.reset_modules, this);
			Upfront.Events.on("command:redo", this.reset_modules, this);
		},
		on_render: function () {
			this.elements.each(this.render_element, this);
			this.reset_modules();
			if ( Upfront.Application.get_current() != Upfront.Settings.Application.MODE.THEME )
				this.$el.find('.sidebar-panel-title').trigger('click');
		},
		on_save_after: function () {
			var regions = this.model.get('regions');
			if ( this._shadow_region )
				regions.add(this._shadow_region, {silent: true});
			else
				this.reset_modules();
		},
		reset_modules: function () {
			var regions = this.model.get("regions"),
				region = regions ? regions.get_by_name('shadow') : false
			;
			if (!regions) return false;
			if ( ! region ){
				region = new Upfront.Models.Region({
					"name": "shadow",
					"container": "shadow",
					"title": "Shadow Region"
				});
				this.model.get('regions').add( region );
			}
			if ( region.get("modules").length != this.elements.size() ) {
				var modules = region.get("modules");
				this.elements.each(function (element) {
					var found = false;
					modules.forEach(function(module){
						if ( module.get('shadow') == element.shadow_id )
							found = true;
					});
					if ( ! found ){
						element.add_element();
					}
				}, this);
			}
		},
		render_element: function (element) {
			if(! element.draggable)
				return;

			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
				me = this;
			element.remove();
			element.render();
			this.$el.find('.sidebar-panel-content').append(element.el);
			element.$el.on('mousedown', function (e) {
				// Trigger shadow element drag
				var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
					$shadow = $('[data-shadow='+element.shadow_id+']'),
					main_off = $main.offset(),
					pos = $shadow.position(),
					off = $shadow.offset(),
					target_off = element.$el.offset(),
					h = $shadow.outerHeight(),
					w = $shadow.outerWidth(),
					$clone = element.$el.clone(),
					clone_h = element.$el.outerHeight(),
					clone_w = element.$el.outerWidth(),
					$element_drag_wrapper = $('<div id="element-drag-wrapper" class="upfront-ui" />'),
					$gutter = $('.upfront-grid-layout-gutter-left:first, .upfront-grid-layout-gutter-right:first');
				$shadow.css({
					position: "absolute",
					top: ( e.pageY-( off.top-pos.top )-(h/2) ) ,
					left: ( e.pageX-( off.left-pos.left )-(w/2) ),
					visibility: "hidden",
					zIndex: -1
				})
				.one('mousedown', function(e){
					// console.log('Shadow mousing down');
				})
				.trigger(e)
				.one('dragstart', function (e, ui) {
					element.$el.addClass('element-drag-active');
					$('body').append($element_drag_wrapper);
					$clone.appendTo($element_drag_wrapper);
					$clone.addClass('element-dragging');
					$clone.css({
						position: "absolute",
						top: e.pageY - ( clone_h/2 ),
						left: e.pageX - ( clone_w/2 ),
						zIndex: 999
					});
				})
				.on('drag', function (e, ui) {
					var in_gutter = false;
					$gutter.each(function(){
						if ( in_gutter )
							return;
						var off = $(this).offset(),
							w = $(this).width();
						if ( e.pageX >= main_off.left && e.pageX >= off.left+10 && e.pageX <= off.left+w-10 )
							in_gutter = true;
					});
					if ( in_gutter )
						$clone.addClass('element-dragging-no-drop');
					else
						$clone.removeClass('element-dragging-no-drop');
					$clone.css({
						top: e.pageY - ( clone_h/2 ),
						left: e.pageX - ( clone_w/2 )
					});
				})
				.one('dragstop', function (e, ui) {
					element.$el.removeClass('element-drag-active');
					$clone.remove();
					$element_drag_wrapper.remove();
				});
			});
		}
	});

	var SidebarPanel_Posts = SidebarPanel_DraggableElements.extend({
		className: "sidebar-panel upfront-panel-post_panel",
		parts: ['Title', 'Contents', 'Excerpt', 'Featured Image', 'Author', 'Author Gravatar', 'Date', 'Update', 'Comments Count', 'Tags', 'Categories'],
		partElements: [],
		initialize: function (opts) {
			//SidebarPanel_DraggableElements.prototype.constructor.call(this, opts);
			this.active = false;
			this.elements = _([]);
			Upfront.Events.on("entity:drag_stop", this.reset_modules, this);
			Upfront.Events.on("layout:render", this.apply_state_binding, this);
		},
		get_title: function () {
			return l10n.post_components;
		},

		loadElements: function(){
			this.elements =  _([]);

			var me = this,
				PostPartElement = Upfront.Content.PostElement,
				editorObjects = Upfront.Application.LayoutEditor.Objects
			;

			_.each(this.parts, function(part){
				var element = new PostPartElement({title: part, model: Upfront.Application.layout}),
					elementSlug = 'PostPart_' + element.slug
				;

				me.elements.push(element);
				if(!editorObjects[elementSlug]){
					editorObjects[elementSlug] = {
						Model: element.Model,
						View: element.View,
						Element: PostPartElement,
						Settings: element.Settings
					};

					Upfront.Models[elementSlug + 'Model'] = element.Model;
					Upfront.Views[elementSlug + 'View'] = element.View;
				}

				me.partElements.push(element);
			});

			Upfront.Events.trigger('sidebar:postparts:loaded');

			return this;
		},

		unloadElements: function(){
			var me = this,
				editorObjects = Upfront.Application.LayoutEditor.Objects
			;

			_.each(this.partElements, function(element){
				var elementSlug = 'PostPart_' + element.slug;
				element.remove();
				delete(editorObjects[elementSlug]);
				delete(Upfront.Models[elementSlug + 'Model']);
				delete(Upfront.Views[elementSlug + 'View']);
			});

			this.partElements = [];


			Upfront.Events.trigger('sidebar:postparts:unloaded');

			return this;
		}
	});

	var SidebarPanel_Settings_Item = Backbone.View.extend({
		"tagName": "div",
		"className": "panel-setting upfront-no-select",
		render: function () {
			if ( this.on_render ) this.on_render();
		}
	});

	var SidebarPanel_Settings_Section = Backbone.View.extend({
		"tagName": "div",
		"className": "panel-section",
		initialize: function () {
			this.settings = _([]);
		},
		get_title: function () {},
		render: function () {
			var me = this;
//			this.$el.html('<h4 class="panel-section-title">' + this.get_title() + '</h4>');
            this.$el.html("");
			this.$el.append('<div class="panel-section-content" />');
			this.settings.each(function (setting) {
				setting.render();
				setting.delegateEvents();
				me.$el.find('.panel-section-content').append(setting.el);
			});
			if ( this.on_render ) this.on_render();
		}
	});

	var SidebarPanel_Settings_Item_Typography_Editor = SidebarPanel_Settings_Item.extend({
		fields: {},
		current_element: 'h1',
		elements: ["h1", "h2", "h3", "h4", "h5", "h6", "p", "a", "a:hover", "ul", "ol", "blockquote", 'blockquote.upfront-quote-alternative'],
		inline_elements: ["a", "a:hover"],
		typefaces: {},
		styles: {},
		sizes: {},
		colors: {},
		line_heights: {},
		initialize: function () {
			var me = this;
			SidebarPanel_Settings_Item.prototype.initialize.call(this);
			var fonts = google_fonts_storage.get_fonts();
			if (fonts && fonts.state) { // Is this a promise object? If not, DON'T try to re-render when it's "done", because we already have fonts
				$.when(fonts).done(function() {
					me.render();
				});
			}
			this.listenTo(Upfront.Events, 'upfront:render_typography_sidebar', this.render);
			this.listenTo(Upfront.Events, 'entity:object:after_render', this.update_typography_elements);
			this.listenTo(Upfront.Events, "theme_colors:update", this.update_typography_elements, this);
		},
		on_render: function () {
			var me = this,
				styles_list = [], // this will change with every font family change
				$wrap_left = $('<div class="upfront-typography-fields-left" />'),
				$wrap_right = $('<div class="upfront-typography-fields-right" />'),
				typography = this.model.get_property_value_by_name('typography'),
				layout_typography = _.findWhere(
					Upfront.Application.current_subapplication.get_layout_data().properties,
					{ 'name': 'typography' }
				),
				default_typography = $.parseJSON('{}'); //$.parseJSON('{\"h1\":{\"weight\":\"100\",\"style\":\"normal\",\"size\":\"72\",\"line_height\":\"1\",\"font_face\":\"Arial\",\"font_family\":\"sans-serif\",\"color\":\"rgba(0,0,0,1)\"},\"h2\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"50\",\"line_height\":\"1\",\"font_face\":\"Georgia\",\"font_family\":\"serif\"},\"h3\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"36\",\"line_height\":\"1.3\",\"font_face\":\"Georgia\",\"font_family\":\"serif\"},\"h4\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"30\",\"line_height\":\"1.2\",\"font_face\":\"Arial\",\"font_family\":\"sans-serif\"},\"h5\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"25\",\"line_height\":\"1.2\",\"font_face\":\"Georgia\",\"font_family\":\"serif\"},\"h6\":{\"weight\":\"400\",\"style\":\"italic\",\"size\":\"22\",\"line_height\":\"1.3\",\"font_face\":\"Georgia\",\"font_family\":\"serif\"},\"p\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"18\",\"line_height\":\"1.4\",\"font_face\":\"Georgia\",\"font_family\":\"serif\"},\"a\":{\"weight\":\"400\",\"style\":\"italic\",\"size\":false,\"line_height\":false,\"font_face\":\"Georgia\",\"font_family\":\"serif\",\"color\":\"rgba(0,206,141,1)\"},\"a:hover\":{\"weight\":\"400\",\"style\":\"italic\",\"size\":false,\"line_height\":false,\"font_face\":\"Georgia\",\"font_family\":\"serif\",\"color\":\"rgba(0,165,113,1)\"},\"ul\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"16\",\"line_height\":\"1.5\",\"font_face\":\"Arial\",\"font_family\":\"sans-serif\",\"color\":\"rgba(0,0,0,1)\"},\"ol\":{\"weight\":\"400\",\"style\":\"normal\",\"size\":\"16\",\"line_height\":\"1.5\",\"font_face\":\"Arial\",\"font_family\":\"sans-serif\"},\"blockquote\":{\"weight\":\"400\",\"style\":\"italic\",\"size\":\"20\",\"line_height\":\"1.5\",\"font_face\":\"Georgia\",\"font_family\":\"serif\",\"color\":\"rgba(103,103,103,1)\"},\"blockquote.upfront-quote-alternative\":{\"weight\":\"400\",\"style\":\"italic\",\"size\":\"20\",\"line_height\":\"1.5\",\"font_face\":\"Georgia\",\"font_family\":\"serif\",\"color\":\"rgba(103,103,103,1)\"}}');

			layout_typography = layout_typography ? layout_typography.value : default_typography;
			var big_tablet_breakpoint,
				tablet_breakpoint,
				switcheroo;

			// Breakpoint's typography should initialize like this:
			// - if there is no typography for current breakpoint it should inherit settings from
			//   wider one, if wider one is not defined inherit from one above, last one is default
			//   typography
			// - in case of widest (usually tablet for now, big-tablet in some themes) it should
			//   inherit from default typography
			if (_.isEmpty(typography) || _.isUndefined(typography.h2)) {
				if (_.contains(['tablet', 'mobile'], this.model.get('id')) || this.model.get('name') === 'big-tablet') {
					switcheroo = this.model.get('name') === 'big-tablet' ? 'big-tablet' : this.model.get('id');

					switch (switcheroo) {
						case 'big-tablet':
							// We look into the default typography and get those
							typography = layout_typography;
							break;
						case 'tablet':
							// We look to big-tablet typography, if it's undefined we take default typography
							big_tablet_breakpoint = breakpoints_storage.get_breakpoints().findWhere({name:'big-tablet'});
							if (_.isUndefined(big_tablet_breakpoint) || _.isUndefined(big_tablet_breakpoint.get('typography')) || _.isUndefined(big_tablet_breakpoint.get('typography').h2)) {
								typography = layout_typography;
							} else {
								typography = big_tablet_breakpoint.get('typography');
							}
							break;
						case 'mobile':
							// We look to tablet typography, if it's undefined we take default typography
							tablet_breakpoint = breakpoints_storage.get_breakpoints().findWhere({id:'tablet'});
							if (_.isUndefined(tablet_breakpoint) || _.isUndefined(tablet_breakpoint.get('typography')) || _.isUndefined(tablet_breakpoint.get('typography').h2)) {
								typography = layout_typography;
							} else {
								typography = tablet_breakpoint.get('typography');
							}
					}
				} else {
					// ensures that when theme is created there will be reasonable values for typography
					typography = layout_typography || default_typography;
				}
			}

			this.typography = typography;

			//Pass global typography settings to typography module
			Upfront.mainData.global_typography = typography;

			// Check for theme fonts if no theme fonts just return string
			var currentMode = Upfront.Application.get_current();
			var builderMode = Upfront.Settings.Application.MODE.THEME;
			var doneIntro = Upfront.mainData.userDoneFontsIntro;
			var showChooseFontsButton = (currentMode === builderMode && !doneIntro) ||
				(currentMode !== builderMode && theme_fonts_collection.length === 0 && !doneIntro);

			var chooseButton;
			if (showChooseFontsButton) {
				chooseButton = new Field_Button({
					label: l10n.select_fonts_to_use,
					compact: true,
					classname: 'open-theme-fonts-manager',

					on_click: function(e){
						Upfront.Events.trigger('command:themefontsmanager:open');
					}
				});
			} else {
				chooseButton = new Command_OpenFontManager();
			}

			if (theme_fonts_collection.length === 0 && Upfront.mainData.userDoneFontsIntro === false) {
				this.$el.html('<p class="sidebar-info-notice upfront-icon">' + l10n.no_defined_fonts + '</p>');
				chooseButton.render();
				this.$el.append(chooseButton.el);
				return;
			}

			// Load saved styles for all elements
			_.each(typography, function (value, element) {
				me.typefaces[element] = value.font_face;
				me.colors[element] = value.color;

				me.styles[element] = Font_Model.get_variant(value.weight, value.style);

				if ( value.size )
					me.sizes[element] = value.size;
				if ( value.line_height )
					me.line_heights[element] = value.line_height;
			});

			if ( !this.fields.length ) {
				this.fields = {
					start_font_manager: chooseButton,
					element: new Upfront.Views.Editor.Field.Select({
						label: l10n.type_element,
						default_value: 'h1',
						values: [
							{ label: l10n.h1, value: "h1" },
							{ label: l10n.h2, value: "h2" },
							{ label: l10n.h3, value: "h3" },
							{ label: l10n.h4, value: "h4" },
							{ label: l10n.h5, value: "h5" },
							{ label: l10n.h6, value: "h6" },
							{ label: l10n.p, value: "p" },
							{ label: l10n.a, value: "a" },
							{ label: l10n.ahover, value: "a:hover" },
							{ label: l10n.ul, value: "ul" },
							{ label: l10n.ol, value: "ol" },
							{ label: l10n.bq, value: "blockquote" },
							{ label: l10n.bqalt, value: "blockquote.upfront-quote-alternative" },
						],
						change: function () {
							var value = this.get_value(),
								is_inline = _.contains(me.inline_elements, value);
							me.current_element = value;
							me.fields.typeface.set_value( me.typefaces[value] );
							me.update_styles_field();
							if ( is_inline ){
								$([me.fields.size.el, me.fields.line_height.el]).hide();
							} else {
								$([me.fields.size.el, me.fields.line_height.el]).show();
								me.fields.size.set_value( me.sizes[value] );
								me.fields.line_height.set_value( me.line_heights[value] || '1.1' );
							}
							me.fields.color.set_value( me.colors[value] );
							me.fields.color.update_input_border_color(me.colors[value]);
						}
					}),
					typeface: new Field_Typeface_Chosen_Select({
						label: l10n.typeface,
						values: theme_fonts_collection.get_fonts_for_select(),
						default_value: me.typefaces['h1'],
						select_width: '225px',
						change: function () {
							var value = this.get_value(),
							element = me.current_element;
							if ( me.typefaces[element] != value ){
								me.typefaces[element] = value;
								me.styles[element] = Font_Model.get_default_variant(value);
								me.update_typography();
								me.update_styles_field();
							}
						}
					}),
					style: this.get_styles_field(),
					color: new Upfront.Views.Editor.Field.Color({
							label: l10n.color,
							default_value: me.colors['h1'],
							autoHide: true,
							spectrum: {
								choose: function (color) {
									var rgb = color.toRgb(),
										rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')',
										element = me.current_element;
										rgba_string = color.get_is_theme_color() !== false ? color.theme_color: rgba_string;
									if ( me.colors[element] != rgba_string ){
										me.colors[element] = rgba_string;
										me.update_typography(color);
									}
								}
							}
					}),
					size: new Upfront.Views.Editor.Field.Number({
						label: l10n.size,
						min: 0,
						max: 100,
						suffix: 'px',
						default_value: me.sizes['h1'],
						change: function () {
							var value = this.get_value(),
								element = me.current_element;
							if ( me.sizes[element] != value ){
								me.sizes[element] = value;
								me.update_typography();
							}
						}
					}),
					line_height: new Upfront.Views.Editor.Field.Number({
						label: l10n.line_height,
						min: 0,
						max: 10,
						step: .1,
						default_value: me.line_heights['h1'],
						change: function () {
							var value = this.get_value(),
								element = me.current_element;
							if ( me.line_heights[element] != value ){
								me.line_heights[element] = value;
								me.update_typography();
							}
						}
					})
				};
			}
			this.$el.html('');
			this.$el.addClass('typography-panel');
			_.each( this.fields, function(field){
				field.render();
				field.delegateEvents();
			});
			this.$el.append([this.fields.start_font_manager.el, this.fields.element.el, this.fields.typeface.el]);
			$('.upfront-chosen-select', this.$el).chosen({
				width: '230px'
			});
			$wrap_left.append([this.fields.style.el, this.fields.size.el]);
			this.$el.append($wrap_left);
			$wrap_right.append([this.fields.color.el, this.fields.line_height.el]);
			this.$el.append($wrap_right);
			this.update_typography(undefined, true);
		},
		/*
		 * Style field needs some special treatment since options are completely changed
		 * on every element dropdown or typeface dropdown value change.
		 */
		update_styles_field: function() {
			this.fields.style.remove();
			this.fields.style = this.get_styles_field(this.typefaces[this.current_element]);
			this.fields.style.render();
			this.fields.style.delegateEvents();
			$('.upfront-typography-fields-left').prepend(this.fields.style.el);
		},
		get_styles_field: function(typeface) {
			var me = this;
			return new Field_Typeface_Style_Chosen_Select({
					label: l10n.weight_style,
					values: this.get_styles(),
					default_value: me.get_styles_field_default_value(),
					font_family: typeface,
					select_width: '120px',
					change: function () {
						var value = this.get_value(),
							element = me.current_element;
						if ( me.styles[element] != value ){
							me.styles[element] = value;
							me.update_typography();
						}
					},
					show: function (value) {
						me.fields.style.set_option_font(value);
					}
			});
		},
		get_styles_field_default_value: function() {
			var availableStyles = this.get_styles(),
				elementTypeface = this.typefaces[this.current_element],
				elementStyle = this.styles[this.current_element],
				style;

			if (elementStyle) {
				style = elementStyle;
			} else if (elementTypeface) {
				style = Font_Model.get_default_variant(elementTypeface);
			} else {
				style = 'regular';
			}

			// Make sure style is in available styles, this is needed because:
			// - regular is also noted as "400 normal" in system fonts
			// - italic is also noted as "400 italic" in system fonts
			if (style === 'regular' && !_.findWhere(availableStyles, { value: 'regular'}) && _.findWhere(availableStyles, { value: '400 normal'})) {
				style = '400 normal';
			} else if (style === '400 normal' && !_.findWhere(availableStyles, { value: '400 normal'}) && _.findWhere(availableStyles, { value: 'regular'})) {
				style = 'regular';
			}
			if (style === 'italic' && !_.findWhere(availableStyles, { value: 'italic'}) && _.findWhere(availableStyles, { value: '400 italic'})) {
				style = '400 italic';
			} else if (style === '400 italic' && !_.findWhere(availableStyles, { value: '400 italic'}) && _.findWhere(availableStyles, { value: 'italic'})) {
				style = 'italic';
			}

			return style;
		},
		get_styles: function() {
			var typography = this.typography,
				element = this.current_element,
				styles = [],
				variants;

			if (typography == false) typography = {};

			if (_.isUndefined(typography[element]) || _.isUndefined(typography[element].font_face)) typography[element] = { font_face: 'Arial' };

			variants = theme_fonts_collection.get_variants(typography[element].font_face);
			styles = [];
			_.each(variants, function(variant) {
				styles.push({ label: variant, value: variant });
			});
			return styles;
		},
		update_typography: function (color, updateSilently) {
			var me = this,
				css = [],
				breakpointCss = [],
				options = {};

			_.each(this.elements, function(element) {
				var rules = [],
					url,
					is_inline = _.contains(me.inline_elements, element),
					typeface = me.typefaces[element],
					font_rule_value = false,
					style = false,
					weight = false,
					selector = false,
					$this_el = $('.upfront-object-content ' + element ),
					font_family,
					style_base,
					theme_color_class;

				style_base = Font_Model.parse_variant(me.styles[element] || 'regular');
				weight = style_base.weight;
				style = style_base.style;

				if (typeface === '') {
					font_family = system_fonts_storage.get_fonts().models[0];// default to first system font
				}
				// Try to get font family from system fonts.
				if (_.isUndefined(font_family)) {
					font_family = system_fonts_storage.get_fonts().findWhere({family: typeface});
				}
				// Try to get font family from additional fonts
				if (_.isUndefined(font_family)) {
					font_family = theme_fonts_collection.get_additional_font(typeface);
				}
				if (_.isUndefined(font_family)) {
					// This is a Google font
					var ggfonts = google_fonts_storage.get_fonts();
					if (ggfonts && ggfonts.findWhere) {
						font_family = ggfonts.findWhere({family: typeface});
					}
					if (!font_family) return true; // Missing typeface family, pretend we're normal
					// If so, let's do this - load up the font
					url = '//fonts.googleapis.com/css?family=' + font_family.get('family').replace(/ /g, '+');
					if (400 !== parseInt("" + weight, 10) && 'inherit' !== weight) url += ':' + weight; // If not default weight, DO include the info
					$("head").append('<link href="' + url + '" rel="stylesheet" type="text/css" />');
				}

				font_rule_value = '"' + font_family.get('family') + '",' + font_family.get('category');

				 // Don't include "inherit", as that's the default
				if ('inherit' !== font_rule_value) {
					rules.push('font-family: ' + font_rule_value);
				}
				if ('inherit' !== weight) {
					rules.push('font-weight: ' + weight);
				}
				if ('inherit' !== style) {
					rules.push('font-style: ' + style);
				}

				if ( !is_inline ){
					rules.push('font-size: ' + me.sizes[element] + 'px');
					rules.push('line-height: ' + me.line_heights[element] + 'em');
				}

				if( !_.isEmpty(me.colors[element]) && Upfront.Views.Theme_Colors.colors.is_theme_color( me.colors[element] ) ){
					 theme_color_class = Upfront.Views.Theme_Colors.colors.get_css_class( me.colors[element]);
				} else {
					rules.push('color: ' + me.colors[element]);
				}
				if ('blockquote' === element) {
					selector = '.upfront-object-content blockquote, .upfront-object-content blockquote p';
				} else if ('a' === element) {
					selector = '.upfront-object-content:not(.upfront-output-button):not(.upfront-output-ubutton):not(.upfront-output-unewnavigation) a, .upfront-object-content:not(.upfront-output-button):not(.upfront-output-ubutton):not(.upfront-output-unewnavigation) a:link, .upfront-object-content:not(.upfront-output-button):not(.upfront-output-ubutton):not(.upfront-output-unewnavigation) a:visited';
				} else {
					selector = '.upfront-object-content ' + element  + ', .upfront-ui ' + element + '.tag-list-tag';
				}
				css.push(selector + '{ ' + rules.join("; ") + '; }');

				if (_.contains(['tablet', 'mobile'], me.model.get('id'))) {
					breakpointCss.push('.' + me.model.get('id') + '-breakpoint ' + selector + '{ ' + rules.join("; ") + '; }');
				}

				options[element] = {
					weight: weight,
					style: style,
					size: !is_inline ? me.sizes[element] : false,
					line_height: !is_inline ? (me.line_heights[element] || '1.1') : false,
					font_face: font_family.get('family'),
					font_family: font_family.get('category'), //todo this font_family is inconsistent. It should be called font_category
					color: me.colors[element],
					theme_color_class : theme_color_class
				};
			});
			this.update_typography_elements();
			// Update silently when update_typography is called from on_render, otherwise
			// though tablet/mobile breakpoints do not have typography defined it will be
			// written to theme/db with defaults. This happens because for typography sidebar
			// to show something we have to load defaults (which is explained in initialize method),
			// so even if breakpoint does not have anything defined we have to load defaults from
			// next wider breakpoint to show what gets applied to current breakpoint.
			if (!updateSilently) {
				this.model.set_property('typography', options);
				this.typography = options;
			}
			if (_.contains(['tablet', 'mobile'], this.model.get('id'))) {
				var styleId = this.model.get('id') + '-breakpoint-typography';
				var cssText = breakpointCss.join("\n");

				if ( $('#' + styleId).length ) {
					$('#' + styleId).html(cssText);
				} else {
					$('body').find('style').first().before('<style id="' + styleId + '">' + cssText + '</style>');
				}
			} else {
				if ( $('head').find('#upfront-default-typography-inline').length ) {
					$('head').find('#upfront-default-typography-inline').html( css.join("\n") );
				} else {
					$('<style id="upfront-default-typography-inline">' +css.join("\n") + '</style>').insertAfter($('head').find('link[rel="stylesheet"]').first());
				}
			}
		},
		update_typography_elements: function (view) {
			var me = this;
			var css = [],
				$style = false
			;
			$style = $("style#typography-colors");
			if (!$style.length) {
				$("body").append('<style id="typography-colors" />');
				$style = $("style#typography-colors");
			}
			_.each(this.elements, function (element) {
				if (me.colors[element]) {
                    css.push('.upfront-object-content ' + element + '{ color:' + Upfront.Util.colors.to_color_value(me.colors[element]) + '; }');
                }
			});
			$style.empty().append(css.join("\n"));
		}
	});

	var SidebarPanel_Settings_Section_Typography = SidebarPanel_Settings_Section.extend({
		initialize: function () {
			this.settings = _([
			    new SidebarPanel_Settings_Item_Typography_Editor({"model": this.model})
			]);

			//if (!Upfront.mainData.userDoneFontsIntro) return;

			this.edit_css = new Command_EditCustomCSS({"model": this.model});
			this.edit_background = new Command_EditLayoutBackground({"model": this.model});
			this.edit_global_regions = new Command_EditGlobalRegions({"model": this.model});
			if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.THEME ) {
				this.edit_structure = new Command_EditStructure({"model": this.model});
			}
		},
		get_title: function () {
			return l10n.typography;
		},
		on_render: function () {
			this.$el.find('.panel-section-content').addClass('typography-section-content');

			//if (!Upfront.mainData.userDoneFontsIntro) return;

			this.edit_css.render();
			this.edit_css.delegateEvents();
			this.$el.find('.panel-section-content').append(this.edit_css.el);
			if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.THEME ) {
				this.edit_structure.render();
				this.edit_structure.delegateEvents();
				this.$el.find('.panel-section-content').append(this.edit_structure.el);
			}
			this.edit_background.render();
			this.edit_background.delegateEvents();
			this.$el.find('.panel-section-content').append(this.edit_background.el);
			this.edit_global_regions.render();
			this.edit_global_regions.delegateEvents();
			this.$el.find('.panel-section-content').append(this.edit_global_regions.el);
		}
	});

	var SidebarPanel_Responsive_Settings_Section_Typography = SidebarPanel_Settings_Section.extend({
		initialize: function () {
			this.settings = _([
					new SidebarPanel_Settings_Item_Typography_Editor({"model": this.model})
			]);
			this.edit_css = new Command_GeneralEditCustomCSS({"model": this.model});
		},
		get_title: function () {
			return l10n.typography_and_colors;
		},
		on_render: function () {
			this.edit_css.render();
			this.edit_css.delegateEvents();
			this.$el.find('.panel-section-content').append(this.edit_css.el);
		}
	});

    var Theme_Color = Backbone.Model.extend({
        defaults : {
            color : "",
            prev : "",
            highlight : "",
            shade : "",
            selected : "",
            luminance : "",
            alpha: 1
        },
        get_hover_color : function(){
            var self = this;
            if( this.get("selected") !== "" ){
                return  this.get( self.get("selected") );
            }
            return this.get("color") === '#000000' && this.get("alpha") == 0 ? 'inherit' : this.get("color");
        }
    });
    var Theme_Colors_Collection = Backbone.Collection.extend({
        model : Theme_Color,
        get_colors : function(){
            return this.pluck("color") ? this.pluck("color") : [];
        },
        is_theme_color : function(color){
            color = this.color_to_hex( color );
            return _.indexOf(this.get_colors(), color) !== -1 ? _.indexOf(this.get_colors(), color) + 1 /* <== indexOf can easily return 0 :( */ : false;
        },
        get_css_class : function(color, bg){
            color = this.color_to_hex( color );
            var prefix = _.isUndefined( bg ) || bg === false ? "upfront_theme_color_" : "upfront_theme_bg_color_";
            if( this.is_theme_color(color) ){
                var model = this.findWhere({
                    color : color
                });
                if( model ){
                    var index = this.indexOf( model );
                    return prefix + index;
                }
            }
            return false
        },
        get_all_classes : function( bg ){
        	var prefix = _.isUndefined( bg ) || bg === false ? "upfront_theme_color_" : "upfront_theme_bg_color_";
            var classes = [];
            _.each( this.get_colors(), function(item, index){
                classes.push(prefix + index);
            });
            return classes;
        },
        remove_theme_color_classes :  function( $el, bg ){
            _.each(this.get_all_classes( bg ), function(cls){
                $el.removeClass(cls);
            });
        },
        color_to_hex : function(color) {
        	if( typeof tinycolor === "function" ){
        		color = tinycolor(color);
                return color.toHexString() === '#000000' && color.alpha == 0 ? 'inherit' : color.toHexString();
        	}

            if (color.substr(0, 1) === '#') {
                return color;
            }
            color = color.replace(/\s+/g, '');
            var digits = /(.*?)rgb\((\d+),(\d+),(\d+)\)/.exec(color);
            digits = _.isEmpty(digits) ?  /(.*?)rgba\((\d+),(\d+),(\d+),([0-9.]+)\)/.exec(color) : digits;
            var red = parseInt(digits[2]);
            var green = parseInt(digits[3]);
            var blue = parseInt(digits[4]);

            var rgb = blue | (green << 8) | (red << 16);
            return digits[1] + '#' + rgb.toString(16);
        }
    });
    var Theme_Colors = {
        colors : new Theme_Colors_Collection(Upfront.mainData.themeColors.colors),
        range  : Upfront.mainData.themeColors.range || 0
    };
    var SidebarPanel_Settings_Item_Colors_Editor = SidebarPanel_Settings_Item.extend({
        initialize : function(){
            var self = this;
            this.template = _.template(_Upfront_Templates.sidebar_settings_theme_colors);
            //this.bottomTemplate = _.template( $(_Upfront_Templates.sidebar_settings_theme_colors).find(".panel-setting-theme-colors-bottom").html() );
            Upfront.Events.on("command:layout:save", this.on_save, this);
            Upfront.Events.on("command:layout:save_as", this.on_save, this);
            if (Upfront.Settings.Application.NO_SAVE) Upfront.Events.on("preview:build:start", this.on_save, this); // Also build colors on preview, only in anonymous mode
            this.update_styles();
            Theme_Colors.colors.bind('change reset add', this.update_styles, this);
        },
        events : {
          "change .panel-setting-theme-colors-shades-range": "change_range",
          "click .theme-colors-color-box" : "select_variation"
        },
        on_save : function(){
            var post_data = {
                action: 'upfront_update_theme_colors',
                theme_colors: Theme_Colors.colors.toJSON(),
                range : Theme_Colors.range
            };

            Upfront.Util.post(post_data)
                .error(function(){
                    return notifier.addMessage(l10n.theme_colors_save_fail);
            });
            var styles_post_data = {
                action: 'upfront_save_theme_colors_styles',
                styles: this.styles
            };
            Upfront.Util.post(styles_post_data)
                .error(function(){
                    return notifier.addMessage(l10n.theme_color_style_save_fail);
            });

        },
        update_styles : function(){
            // Update the styles
            this.styles = "";
            var self = this;
            Theme_Colors.colors.each(function( item, index ){
                var color = item.get("color") === '#000000' && item.get("alpha") == 0 ? 'inherit' : item.get("color");
                self.styles += " .upfront_theme_color_" + index +"{ color: " + color + ";}";
                self.styles += " a .upfront_theme_color_" + index +":hover{ color: " + item.get_hover_color() + ";}";
                self.styles += " button .upfront_theme_color_" + index +":hover{ color: " + item.get_hover_color() + ";}";
                self.styles += " .upfront_theme_bg_color_" + index +"{ background-color: " + color + ";}";
                self.styles += " a .upfront_theme_bg_color_" + index +":hover{ background-color: " + item.get_hover_color() + ";}";
                self.styles += " button .upfront_theme_bg_color_" + index +":hover{ background-color: " + item.get_hover_color() + ";}";
				Upfront.Util.colors.update_colors_in_dom(item.get("prev"), color, index);
            });
            $("#upfront_theme_colors_dom_styles").remove();
            $("<style id='upfront_theme_colors_dom_styles' type='text/css'>" + this.styles + "</style>").appendTo("body");


			Upfront.Events.trigger("theme_colors:update");


        },
        on_render : function(){
            var self = this,
                unset_color_index;
            this.theme_colors = Theme_Colors,
            this.theme_color_range = Theme_Colors.range;
            this.$el.html( this.template({
                colors :  this.theme_colors.colors.toJSON(),
                range  :  Theme_Colors.range
            } ) );

            if( this.theme_colors.colors.length < 10 ){
                this.add_empty_picker(this.theme_colors.colors.length);
            }
            unset_color_index = this.theme_colors.colors.length + 1;
            while( unset_color_index < 10 ){
                this.add_unset_color(unset_color_index);
                unset_color_index++;
            }
            this.add_previous_pickers();
            this.add_slider();
        },
        add_empty_picker : function(index){
            var self = this,
                empty_picker = new Field_Color({
                className : 'upfront-field-wrap upfront-field-wrap-color sp-cf theme_color_swatch theme_color_swatch_empty',
                hide_label : true,
                default_value: '#ffffff',
                blank_alpha: 0,
                spectrum: {
                    choose: function (color) {
                    	if (!_.isObject(color)) return false;
                    	var value = empty_picker.get_value();
                        if (value && "undefined" !== typeof tinycolor) {
                        	color = tinycolor(value);
                        }
                        self.add_new_color(color);
                    },
                    change: function (color) {
                    	if (!_.isObject(color)) return false;
						empty_picker.update_input_val(color.toHexString())
                    }
                }
            });
            empty_picker.render();
            this.$(".theme_colors_empty_picker").html(empty_picker.$el)
                .prepend('<span class="theme-colors-color-name">ufc' + index + '</span>');
        },
        add_unset_color : function(index){
            this.$('#theme-colors-swatches').append(
                '<span class="theme_colors_unset_color">' +
                    '<span class="theme-colors-color-name">ufc' + index + '</span>' +
                    '<span class="theme-colors-color-no-color"><span></span></span>' +
                '</span>'
            );
        },
        add_previous_pickers : function(){
            var self = this;
            this.$(".theme-colors-color-picker").each(function(index){
                var picker = this,
                    $this = $(this),
                    color = $this.data("color"),
                    model = self.theme_colors.colors.at(index),
                    picker = new Field_Color({
                        className : 'upfront-field-wrap upfront-field-wrap-color sp-cf theme_color_swatch',
                        hide_label : true,
                        default_value: color,
                        blank_alpha: 0,
                        spectrum: {
                        	change: function (color) {
                                self.update_colors(this, color, index);
                        	},
                            move: function (color) {
	                            picker.$(".sp-preview").css({
                                    backgroundColor : color.toRgbString(),
                                    backgroundImage : "none"
                                });
                        	},
                        	hide: function (color) {
	                            picker.$(".sp-preview").css({
                                    backgroundColor : color.toRgbString(),
                                    backgroundImage : "none"
                                });
                        	}
                        }
                    });
                picker.render();
                picker.$(".sp-preview").css({
                    backgroundColor : color,
                    backgroundImage : "none"
                });
                if( model.get( 'color' ) === '#000000' && model.get( 'alpha' ) == 0 ) {
                    picker.$(".sp-preview").addClass( 'uf-unset-color' );
                }
                else {
                    picker.$(".sp-preview").removeClass( 'uf-unset-color' );
                }
                $this.html( picker.$el );
                $this.prepend('<span class="theme-colors-color-name">ufc' + index + '</span>')
           });
        },
        add_new_color : function( color ){
            var percentage = parseInt( Theme_Colors.range, 10) / 100 || 0;

            var self = this,
                model = this.theme_colors.colors.add({
                    color : color.toHexString(),
                    prev : color.toHexString(),
                    highlight : self.color_luminance( color.toHex(), percentage ),
                    shade : self.color_luminance( color.toHex(), (percentage * -1) ),
                    alpha: color.alpha
                }),
                new_color_picker = new Field_Color({
                    className : 'upfront-field-wrap upfront-field-wrap-color sp-cf theme_color_swatch theme-colors-color-picker',
                    hide_label : true,
                    default_value: color.toRgbString(),
                    blank_alpha: 0,
                    change: function (color){
                        var percentage = parseInt( Theme_Colors.range, 10) / 100 || 0;
                        color = tinycolor( color );
                        model.set({
                            color : color.toHexString(),
                            highlight : self.color_luminance( color.toHex(), percentage ),
                            shade : self.color_luminance( color.toHex(), (percentage * -1) ),
                            alpha: color.alpha
                        });
                        $(this).parent().find(".sp-preview").css({
                            backgroundColor : color.toRgbString(),
                            backgroundImage : "none"
                        });
                        this.default_value = color.toRgbString();
                        self.render_bottom();
                    }
                }),
                colorIndex = Theme_Colors.colors.length - 1,
                $wrapper = $('<span class="theme-colors-color-picker color-' + colorIndex + '" data-index="' + colorIndex + '" data-color="' + color.toHexString() + '"><span class="theme-colors-color-name">ufc' + colorIndex + '</span></span>')
            ;

            new_color_picker.render();
            new_color_picker.$(".sp-preview").css({
                backgroundColor : color.toRgbString(),
                backgroundImage : "none"
            });
            if( color.toHexString() === '#000000' && color.alpha == 0 ) {
                new_color_picker.$(".sp-preview").addClass( 'uf-unset-color' );
            }
            else {
                new_color_picker.$(".sp-preview").removeClass( 'uf-unset-color' );
            }
            $wrapper.append(new_color_picker.$el);

            this.$(".theme_colors_empty_picker").before($wrapper);
            this.$(".theme_colors_empty_picker").next().remove();

            this.$(".theme_colors_empty_picker").find('.theme-colors-color-name').html( 'ufc' + ( colorIndex + 1 ) );

            this.$(".theme_colors_empty_picker").find('.sp-preview').css({
                backgroundColor: 'inherit'
            });

            if ( Theme_Colors.colors.length === 10 ) {
                this.$(".theme_colors_empty_picker").remove();
            }
            this.$("#theme-colors-no-color-notice").hide();
            this.render_bottom();
			this.on_save();
        },
        render_bottom : function(){
			return;
            this.$(".panel-setting-theme-colors-bottom").html(
                this.bottomTemplate( {
                    colors : Theme_Colors.colors.toJSON(),
                    range  : Theme_Colors.range
                } )
            );
            this.add_slider();
        },
        color_luminance : function (hex, lum) {
            // validate hex string
            hex = String(hex).replace(/[^0-9a-f]/gi, '');
            if (hex.length < 6) {
                hex = hex[0]+hex[0]+hex[1]+hex[1]+hex[2]+hex[2];
            }
            lum = lum || 0;
            // convert to decimal and change luminosity
            var rgb = "#", c, i;
            for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i*2,2), 16);
                c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                rgb += ("00"+c).substr(c.length);
            }
            return rgb;
        },
        change_range : function(range){
            var self = this;
            Theme_Colors.range = range;
            percentage = parseInt( range, 10 ) / 100 || 0;
            Theme_Colors.colors.each(function(model){
                var original_color = model.get("color");
                model.set("highlight", self.color_luminance( original_color, percentage ));
                model.set("shade", self.color_luminance( original_color, (percentage * -1) ));
            });
            this.render_bottom();
        },
        select_variation : function(e){
            var self = this,
                $this = $(e.target),
                type = $this.data("type"),
                index = $this.data("index"),
                color = $this.data("color"),
                model = Theme_Colors.colors.at(index);
            if( model.get("selected") ){
                model.set("selected", "");
                model.set("luminance", self.luminance( color ) );
            }else{
                model.set("selected", type);
                model.set("luminance", self.luminance( color ) );
            }
            this.render_bottom();
        },
        luminance : function(color){
            color = color.substring(1);
            var rgb = parseInt(color, 16);
            var r = (rgb >> 16) & 0xff;
            var g = (rgb >>  8) & 0xff;
            var b = (rgb >>  0) & 0xff;

            var luma = 0.2126 * r + 0.7152 * g + 0.0722 * b;
            return (luma < 80) ? "dark" : "light";
        },
        add_slider : function(){
            var self = this;
            this.$(".panel-setting-theme-colors-shades-range").slider({
                value :  Theme_Colors.range,
                min : 0,
                max : 50,
                change: function( event, ui ) {
                    self.change_range(ui.value);
                }
            });
        },
        update_colors : function(picker, color, index){
            var model = Theme_Colors.colors.at(index),
                percentage = parseInt( Theme_Colors.range, 10) / 100 || 0;
            if( model ){
                model.set({
                    color : color.toHexString(),
                    prev : model.get("color"),
                    highlight : this.color_luminance( color.toHex(), percentage ),
                    shade : this.color_luminance( color.toHex(), (percentage * -1) ),
                    alpha : color.alpha
                });
                $(picker).parent().find(".sp-preview").css({
                    backgroundColor : color.toRgbString(),
                    backgroundImage : "none"
                });
                if( color.toHexString() === '#000000' && color.alpha == 0 ) {
                    $(picker).parent().find(".sp-preview").addClass( 'uf-unset-color' );
                }
                else {
                    $(picker).parent().find(".sp-preview").removeClass( 'uf-unset-color' );
                }
                picker.default_value = color.toRgbString();
                this.render_bottom();
            }
        }
    });
    var SidebarPanel_Settings_Section_Colors = SidebarPanel_Settings_Section.extend({
        initialize: function () {
            this.settings = _([]);
            this.edit_colors = new SidebarPanel_Settings_Item_Colors_Editor({"model": this.model});
        },
        get_title: function () {
            return l10n.colors_section;
        },
        on_render: function () {
            this.edit_colors.render();
            this.edit_colors.delegateEvents();
            this.$el.find('.panel-section-content').append(this.edit_colors.el);
			this.$el.addClass('colors-panel-section');
        }
    });
	var SidebarPanel_Settings = SidebarPanel.extend({
		"className": "sidebar-panel sidebar-panel-settings",
		initialize: function () {
			this.active = true;
			this.sections = _([
				new SidebarPanel_Settings_Section_Typography({"model": this.model}),
				new SidebarPanel_Settings_Section_Colors({"model": this.model})
			]);
		},
		get_title: function () {
			return l10n.theme_settings;
		},
		on_render: function () {
			var me = this;
			if( this.sections){
					me.$el.find('.sidebar-panel-title').after("<ul class='sidebar-panel-tabspane'></ul>");
			}
			this.sections.each(function (section) {
					section.render();
					me.$el.find('.sidebar-panel-tabspane').append( "<li data-target='" + section.cid +  "' class='sidebar-panel-tab'>" +  section.get_title() +  "</li>");
					me.$el.find('.sidebar-panel-content').append("<div class='sidebar-tab-content' id='" + section.cid +"'></div>");
					me.$el.find(".sidebar-panel-content").find(".sidebar-tab-content").last().html(section.el);
			});
			if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.THEME )
				this.$el.find('.sidebar-panel-title').trigger('click');
		}
	});

	var SidebarPanels = Backbone.View.extend({
		"tagName": "ul",
		"className": "sidebar-panels",
		initialize: function () {
			this.panels = {
				posts: new SidebarPanel_Posts({"model": this.model}),
				elements: new SidebarPanel_DraggableElements({"model": this.model}),
				settings: new SidebarPanel_Settings({"model": this.model})
			};
			// Dev feature only
			//if ( Upfront.Settings.Debug.dev )
			//	this.panels.settings = new SidebarPanel_Settings({"model": this.model});
		},
		render: function () {
			var me = this;
			_.each(this.panels, function(panel){
				panel.render();
				me.$el.append(panel.el);
				panel.delegateEvents();
			});
		}
	});

	var SidebarCommands_PrimaryPostType = Commands.extend({
		"className": "sidebar-commands sidebar-commands-primary clearfix",
		initialize: function () {
			this.commands = _([]);
			if (Upfront.Settings.Application.MODE.ALLOW.match(Upfront.Settings.Application.MODE.CONTENT)) {
				this.commands.push(new Command_NewPost({"model": this.model}));
				this.commands.push(new Command_NewPage({"model": this.model}));
			}
			this.commands.push(new Command_PopupList({"model": this.model}));
			this.commands.push(new Command_OpenMediaGallery());
		}
	});

	/**
	 * DEPRECATED
	 */
	var SidebarCommands_PrimaryLayout = Commands.extend({
		"className": "sidebar-commands sidebar-commands-primary clearfix",
		initialize: function () {
			this.commands = _([
				new Command_ThemesDropdown({"model": this.model}),
			]);
			if ( Upfront.themeExporter.currentTheme !== 'upfront') {
				this.commands.push(new Command_NewLayout({"model": this.model}));
				this.commands.push(new Command_BrowseLayout({"model": this.model}));
			}
		}
	});

	var SidebarCommands_AdditionalPostType = Commands.extend({
		"className": "sidebar-commands sidebar-commands-additional",
		initialize: function () {
			this.commands = _([]);
		},
		render: function () {

		}

	});

	var SidebarCommands_Control = Commands.extend({
		className: function() {
			 var className = "sidebar-commands sidebar-commands-control";
			 if (Upfront.Application.get_current() === Upfront.Settings.Application.MODE.THEME) {
				className += ' sidebar-commands-theme';
			 }
			 return className;
		},
		initialize: function () {
		  var MODE = Upfront.Settings.Application.MODE;
			var current_app = Upfront.Application.get_current();

			if ( current_app !== MODE.THEME ) {
				this.commands = _([
					new Command_Undo({"model": this.model}),
					new Command_Redo({"model": this.model}),
					new Command_ToggleGrid({"model": this.model}),
				]);
			} else {
				this.commands = _([
					new Command_ToggleGrid({"model": this.model}),
				]);
			}

			if (MODE.ALLOW.match(MODE.RESPONSIVE) && current_app === MODE.THEME) {
				this.commands.push(
					new Command_CreateResponsiveLayouts({model: this.model})
				);
			}
			if ( current_app == MODE.THEME ) {
				this.commands.push(new Command_ExportLayout({"model": this.model}));
			}
			if (!Upfront.Settings.Application.NO_SAVE && current_app !== MODE.THEME) {
				this.commands.push(new Command_SaveLayout({"model": this.model}));
			} else if (current_app !== MODE.THEME && Upfront.Settings.Application.PERMS.REVISIONS) {
				this.commands.push(new Command_PreviewLayout({"model": this.model}));
			}
			if (MODE.ALLOW.match(MODE.RESPONSIVE) && current_app !== MODE.THEME) {
				this.commands.push(
					new Command_StartResponsiveMode({model: this.model})
				);
			}
			// Dev feature only
			if ( Upfront.Settings.Debug.dev ) {
				if (!Upfront.Settings.Application.NO_SAVE && current_app !== MODE.THEME) {
					this.commands.push(new Command_ResetEverything({"model": this.model}));
				}
				//if (current_app !== MODE.THEME) this.commands.push(new Command_ToggleMode({"model": this.model}));
				if (!Upfront.Settings.Application.DEBUG && current_app !== MODE.THEME && !Upfront.Settings.Application.NO_SAVE) {
					this.commands.push(new Command_PublishLayout({"model": this.model}));
				}
			}
		}
	});

	var SidebarCommands_Header = Commands.extend({
		className: "sidebar-commands sidebar-commands-header",
		initialize: function () {
			this.commands = _([
				new Command_Logo({"model": this.model}),
			]);
			//if ( !Upfront.Settings.Application.NO_SAVE ) this.commands.push(new Command_Exit({"model": this.model}));
			this.commands.push(new Command_Exit({"model": this.model})); // *Always* show exit
		}
	});

	/* Responsive */
	var SidebarPanel_ResponsiveSettings = Backbone.View.extend({
		tagName: 'li',
		className: 'sidebar-panel sidebar-panel-settings expanded',
		template: '<div class="sidebar-panel-content"></div>',
		initialize: function() {
			this.collection = breakpoints_storage.get_breakpoints();
			this.listenTo(this.collection, 'change:active', this.render);
		},
		render: function() {
			var breakpoint_model = breakpoints_storage.get_breakpoints().get_active();

			if(breakpoint_model.get('default'))
				this.model.attributes.id = 'default';

			var typography_section = new SidebarPanel_Responsive_Settings_Section_Typography({
				"model": breakpoint_model.get('default') ? this.model : breakpoint_model // If default, use layout model instead
			});

			typography_section.render();

			this.$el.html(this.template);
			this.$el.find('.sidebar-panel-content').html(typography_section.el);
		}
	});

	var SidebarCommands_Responsive = Backbone.View.extend({
		tagName: 'ul',
		className: 'sidebar-commands sidebar-commands-responsive',
		initialize: function () {
			this.views = [
				new Command_BreakpointDropdown(),
				new Command_AddCustomBreakpoint()
			];
			/*
			if ("themeExporter" in Upfront) {
				this.views.push(new ResponsiveCommand_BrowseLayout());
			}
			*/
			this.views.push(new SidebarPanel_ResponsiveSettings({"model": this.model}));
		},
		render: function() {
			_.each(this.views, function(view) {
				view.render();
				this.$el.append(view.el);
			}, this);

			return this;
		},
		destroy: function() {
			this.remove();
			_.each(this.views, function(view) {
				view.remove();
			});
		}
	});

	var SidebarCommands_ResponsiveControl = Commands.extend({
		"className": "sidebar-commands sidebar-commands-responsive-control sidebar-commands-control",
		initialize: function () {
			this.commands = _([
				new Command_ResponsiveUndo({"model": this.model}),
				new Command_ResponsiveRedo({"model": this.model}),
				new Command_ToggleGrid({"model": this.model}),
				new Command_SaveLayout(),
				new Command_StopResponsiveMode()
			]);
		},
		render: function () {
			this.$el.find("li").remove();
			this.commands.each(this.add_command, this);
		}
	});
	/* End Responsive */

	var SidebarProfile = Backbone.View.extend({
		className: "sidebar-profile",
		render: function () {
			var user = Upfront.data.currentUser;
			if ( !user ) user = new Backbone.Model();
			var data = user.get('data') || {},
				roles = user.get('roles') || [],
				tpl
			;
			tpl = '<div class="sidebar-profile-avatar"><img src="//www.gravatar.com/avatar/{{ gravatar ? gravatar : "gravatar" }}?s=25" /></div>' +
				'<div class="sidebar-profile-detail"><span class="sidebar-profile-name">{{name}}</span><span class="sidebar-profile-role">{{role}}</span></div>' +
				(roles.length ? '<div class="sidebar-profile-edit"><a class="upfront-icon upfront-icon-edit" data-bypass="true" title="'+  l10n.edit_profile +'" href="{{edit_url}}">' + l10n.edit_profile + '</a></div>' : '');
			this.$el.html(_.template(tpl,
				{
					gravatar: data.gravatar,
					name: data.display_name || l10n.anonymous,
					role: roles[0] || l10n.none,
					edit_url: Upfront.Settings.admin_url + 'profile.php'
				}
			));
		}
	});

	/*var SidebarEditorMode = Backbone.View.extend({
		"className": "sidebar-editor-mode",
		events: {
			"click .switch-mode-simple": "switch_simple",
			"click .switch-mode-advanced": "switch_advanced"
		},
		render: function () {
			this.$el.html(
				'<div class="sidebar-editor-mode-label">Editor mode:</div>' +
				'<div class="switch-mode-ui">' +
					'<span class="switch-mode switch-mode-simple">simple <i class="upfront-icon upfront-icon-simple"></i></span>' +
					'<span class="switch-slider"><span class="knob"></span></span>' +
					'<span class="switch-mode switch-mode-advanced">advanced <i class="upfront-icon upfront-icon-advanced"></i></span>' +
				'</div>'
			);
			this.switch_simple();
		},
		switch_simple: function () {
			this.$el.find('.switch-mode-simple').addClass('active');
			this.$el.find('.switch-mode-advanced').removeClass('active');
			this.$el.find('.switch-slider').removeClass('switch-slider-full');
		},
		switch_advanced: function () {
			this.$el.find('.switch-mode-advanced').addClass('active');
			this.$el.find('.switch-mode-simple').removeClass('active');
			this.$el.find('.switch-slider').addClass('switch-slider-full');
		}
	});*/

	var Sidebar = Backbone.View.extend({
		"tagName": "div",
		visible: 1,
		events: {
			'click #sidebar-ui-toggler-handle': 'toggleSidebar'
		},
		initialize: function () {
			var is_theme = Upfront.Application.get_current() == Upfront.Settings.Application.MODE.THEME;
			//this.editor_mode = new SidebarEditorMode({"model": this.model});
			this.sidebar_profile = new SidebarProfile({"model": this.model});
			this.sidebar_commands = {
				header: new SidebarCommands_Header({"model": this.model}),
				primary: is_theme ? new SidebarCommands_PrimaryLayout({"model": this.model}) : new SidebarCommands_PrimaryPostType({"model": this.model}), // DEPRECATED
				additional: is_theme ? false : new SidebarCommands_AdditionalPostType({"model": this.model}), // DEPRECATED
				control: new SidebarCommands_Control({"model": this.model}),
				responsive: new SidebarCommands_Responsive({"model": this.model})
			};
			this.sidebar_panels = new SidebarPanels({"model": this.model});

			this.fetch_current_user();

			if ( Upfront.Application.get_current() != Upfront.Settings.Application.MODE.CONTENT ){
				Upfront.Events.on('upfront:element:edit:start', this.preventUsage, this);
				Upfront.Events.on('upfront:element:edit:stop', this.allowUsage, this);
			}
			Upfront.Events.on("application:mode:after_switch", this.render, this);
			Upfront.Events.on("application:user:fetch", this.render, this); // Re-build when we're ready
		},
		preventUsage: function(type) {
			var preventUsageText = l10n.not_available_in_text_edit;
			if (type === 'media-upload') {
				preventUsageText = l10n.not_available_in_media_upload;
			}
	 		if (type === 'write') {
				this.writingIsOn = true;
				preventUsageText = l10n.publish_first_nag;
			}
			if (!this.prevented_usage_type) this.prevented_usage_type = type; // don't stack up on prevented types, keep the original
			$('#preventUsageOverlay span').html(preventUsageText);
			$('#preventUsageOverlay').show();
		},
		allowUsage: function(type) {
			if (this.writingIsOn && type !== 'write') {
				this.preventUsage('write');
				return;
			}
			this.prevented_usage_type = false;
			this.writingIsOn = false;
			$('#preventUsageOverlay').hide();
		},
		render: function () {
			var current_app = Upfront.Application.get_current();
			var is_responsive_app = current_app === Upfront.Settings.Application.MODE.RESPONSIVE;
			var output = $('<div id="sidebar-ui-wrapper" class="upfront-ui"></div>');
			if ( current_app == Upfront.Settings.Application.MODE.THEME ) {
				output.addClass('create-theme-sidebar');
			}

			// Header
			this.sidebar_commands.header.render();
			output.append(this.sidebar_commands.header.el);

			// Editor Mode
			//this.editor_mode.render();
			//this.$el.append(this.editor_mode.el);

			if ( current_app !== Upfront.Settings.Application.MODE.THEME && !is_responsive_app) {
				// Profile
				this.sidebar_profile.render();
				output.append(this.sidebar_profile.el);
			}

			// Primary commands
			if ( !is_responsive_app ) {
				this.sidebar_commands.primary.render();
				output.append(this.sidebar_commands.primary.el);
			}

			if ( this.sidebar_commands.additional && !is_responsive_app ) {
				// Additional commands
				this.sidebar_commands.additional.render();
				output.append(this.sidebar_commands.additional.el);
			}

			// Responsive
			if ( is_responsive_app ) {
				this.sidebar_commands.responsive.render();
				output.append(this.sidebar_commands.responsive.el);
			}

			if ( current_app !== Upfront.Settings.Application.MODE.CONTENT && !is_responsive_app ) {
				// Sidebar panels
				this.sidebar_panels.render();
				output.append(this.sidebar_panels.el);
				// Control
				this.sidebar_commands.control.render();
				output.append(this.sidebar_commands.control.el);

				output.append('<div id="preventUsageOverlay"><span></span></div>');
			} else if (is_responsive_app) {
				// Responsvie Control
				var responsive_controls = new SidebarCommands_ResponsiveControl({"model": this.model});
				responsive_controls.render();
				output.append(responsive_controls.el);
			}

			this.$el.html(output);

			Upfront.Events.trigger('sidebar:rendered');
		},
		get_panel: function ( panel ) {
			if ( ! this.sidebar_panels.panels[panel] )
				return false;
			return this.sidebar_panels.panels[panel];
		},
		get_commands: function ( commands ) {
			if ( ! this.sidebar_commands[commands] )
				return false;
			return this.sidebar_commands[commands];
		},
		to_content_editor: function () {
			/*
			var panel = this.sidebar_panels.panels.posts,
				post_model = Upfront.data.currentPost
			;
			if(!panel.commands){
				panel.commands = _([
					new Command_PopupStatus({"model": post_model}),
					new Command_PopupVisibility({"model": post_model}),
					new Command_PopupSchedule({model: post_model}),

					new Command_PopupTax({"model": this.model}),
					new Command_PopupSlug({"model": this.model}),
					//new Command_PopupMeta({"model": this.model}),
					new Command_SaveDraft({"model": this.model}),
					new Command_SavePublish({"model": this.model}),
					new Command_Trash({"model": this.model})
				]);
				panel.render();
			}
			else
				panel.show();

			panel.$el.find(".sidebar-panel-title").trigger("click");
			*/
			//console.log("to_content_editor got called");
		},
		from_content_editor: function () {
			/*
			var panel = this.sidebar_panels.panels.posts;
			//panel.commands = _([]);
			panel.hide();//render();
			$(".sidebar-panel-title.upfront-icon.upfront-icon-panel-elements").trigger("click");
			*/
			//console.log("from_content_editor got called")
		},
		fetch_current_user: function() {
			var user = Upfront.data.currentUser;

			if(!user){
				user = new Upfront.Models.User();
				Upfront.data.loading.currentUser = user.fetch().done(function(){
					Upfront.data.currentUser = user;
					Upfront.Events.trigger("application:user:fetch");
				});
			}
		},
		addCollapsibleEvents: function(){
			var me = this;
			this.$el.append('<div id="sidebar-ui-toggler"><div id="sidebar-ui-toggler-handle" class="sidebar-ui-hide"></div></div>');
			$('body').on('mousemove', function(e){
				if(me.visible * 300 + 100 > e.pageX){
					if(!me.collapsibleHint){
						$('#sidebar-ui-toggler').fadeIn();
						me.collapsibleHint = true;
					}
				}
				else {
					if(me.collapsibleHint){
						$('#sidebar-ui-toggler').fadeOut();
						me.collapsibleHint = false;
					}
				}
			});

			this.resizeCollapseHandle();
			$(window).on('resize', function(){
				me.resizeCollapseHandle();
			});
		},

		resizeCollapseHandle: function(){
			var height = $(window).height();
			this.$('#sidebar-ui-toggler').height(height);
		},

		toggleSidebar: function(instant){
			var me = this;
			if(!this.visible){
				$('#sidebar-ui').removeClass('collapsed').stop().animate({width: '260px'}, 300);
				//Remove collapsed class always after region editor is closed
				$('#element-settings-sidebar').removeClass('collapsed');

				//Bring back element-settings only if it was opened before
				if($('#element-settings-sidebar').contents().length !== 0) {
					$('#element-settings-sidebar').removeClass('collapsed').stop().animate({width: '260px'}, 300);
				}

				$('#page').animate({'margin-left': '260px'}, 300, function(){ Upfront.Events.trigger('sidebar:toggle:done', me.visible); });
				this.$('#sidebar-ui-toggler-handle').removeClass().addClass('sidebar-ui-hide');
				this.visible = 1;
			}
			else {
				$('#sidebar-ui, #element-settings-sidebar').stop().animate({width: '0px'}, 300, function(){
					$('#sidebar-ui, #element-settings-sidebar').addClass('collapsed');
				});
				$('#page').animate({'margin-left': '0px'}, 300, function(){ Upfront.Events.trigger('sidebar:toggle:done', me.visible); });
				this.$('#sidebar-ui-toggler-handle').removeClass().addClass('sidebar-ui-show');
				this.visible = 0;
			}
			Upfront.Events.trigger('sidebar:toggle', this.visible);
		}

	});

	var ContentEditor_SidebarCommand = Command.extend({
		tagName: "div",
		className: "upfront-sidebar-content_editor-sidebar_command",
		post: false,
		initialize: function(){
			this.setPost();
			Upfront.Events.on("data:current_post:change", this.setPost, this);
		},
		setPost: function(){
			var currentPost = Upfront.data.currentPost;

			if(!currentPost)
				this.post = new Upfront.Models.Post({post_type: 'post', id: '0'});
			else if(!this.post || this.post.id !=  currentPost.id){
				this.post = Upfront.data.currentPost;
			    if(this.onPostChange)
			    	this.onPostChange();
			}

			return this;
		}
	});

	var Command_PopupList = ContentEditor_SidebarCommand.extend({
		tagName: 'li',
		className: 'command-popup-list',
		$popup: {},
		views: {},
		currentPanel: false,
		render: function () {
			this.$el.addClass("upfront-entity_list upfront-icon upfront-icon-browse");
			if ( Upfront.Application.get_current() == Upfront.Settings.Application.MODE.LAYOUT )
				this.$el.html('<a title="'+ l10n.posts_pages_comments +'">' + l10n.posts_pages_comments + '</a>');
			else
				this.$el.html('<a title="'+ l10n.posts_pages +'">' + l10n.posts_pages + '</a>');
		},
		on_click: function () {
			var me = this,
				popup = Upfront.Popup.open(function (data, $top, $bottom) {
					var $me = $(this);
					$me.empty()
						.append('<p class="upfront-popup-placeholder">' + l10n.popup_preloader + '</p>')
					;
					me.$popup = {
						"top": $top,
						"content": $me,
						"bottom": $bottom
					};
				})
			;
			var has_comments = false,
				current_post_id = Upfront.data.currentPost && Upfront.data.currentPost.id
					? Upfront.data.currentPost.id
					: _upfront_post_data.post_id
			;
			has_comments = !!current_post_id;
			if (current_post_id && Upfront.data.posts && Upfront.data.posts.length) {
				has_comments = Upfront.data.posts[current_post_id] && Upfront.data.posts[current_post_id].get
					? !!(parseInt(Upfront.data.posts[current_post_id].get("comment_count"), 10))
					: false
				;
			}
			me.$popup.top.html(
				'<ul class="upfront-tabs">' +
					'<li data-type="posts" class="active">' + l10n.posts + '</li>' +
					'<li data-type="pages">' + l10n.pages + '</li>' +
					(has_comments ? '<li data-type="comments">' + l10n.comments + '</li>' : '') +
				'</ul>' +
				me.$popup.top.html()
			).find('.upfront-tabs li').on("click", function () {
				me.dispatch_panel_creation(this);
			} );

			me.dispatch_panel_creation();

			popup.done(function () {
				Upfront.Events.off("upfront:posts:sort");
				Upfront.Events.off("upfront:posts:post:expand");
				Upfront.Events.off("upfront:pages:sort");
				Upfront.Events.off("upfront:comments:sort");
			});
		},
		dispatch_panel_creation: function (data) {
			var me = this,
				$el = data ? $(data) : me.$popup.top.find('.upfront-tabs li.active'),
				panel = $el.attr("data-type"),
				class_suffix = panel.charAt(0).toUpperCase() + panel.slice(1).toLowerCase(),
				send_data = data || {},
				collection = false,
				postId = this.post.id,
				fetchOptions = {}
			;

			me.$popup.top.find('.upfront-tabs li').removeClass('active');
			$el.addClass('active');

			this.currentPanel = panel;

			//Already loaded?
			if(me.views[panel]){
				if(panel != 'pages' && panel != 'posts') {
					if(panel != 'comments' || (Upfront.data.currentPost && Upfront.data.currentPost.id && me.views[panel].view.collection.postId == Upfront.data.currentPost.id))
						return this.render_panel(me.views[panel]);
				}
			}

			if(panel == 'posts'){
				collection = new Upfront.Collections.PostList([], {postType: 'post'});
				collection.orderby = 'post_date';
				fetchOptions = {filterContent: true, withAuthor: true, limit: 15}
			}
			else if(panel == 'pages'){
				collection = new Upfront.Collections.PostList([], {postType: 'page'});
				fetchOptions = {limit: 15}
			}
			else{
				var post_id = Upfront.data.currentPost && Upfront.data.currentPost.id
					? Upfront.data.currentPost.id
					: _upfront_post_data.post_id
				;
				collection = new Upfront.Collections.CommentList([], {postId: post_id});
				collection.orderby = 'comment_date';
			}

			collection.fetch(fetchOptions).done(function(response){
				switch(panel){
					case "posts":
						//Check if we have rendered the panel once
						var cachedElements = null;
						if(typeof me.views[panel] !== "undefined") {
							cachedElements = me.views[panel].view.collection.pagination.totalElements;
						}
						//Check collection total elements
						var collectionElements = collection.pagination.totalElements;

						//Compare total items, if same return cached panel
						if(cachedElements == collectionElements) {
							return me.render_panel(me.views[panel]);
						}

						collection.on('reset sort', me.render_panel, me);
						views = {
							view: new ContentEditorPosts({collection: collection, $popup: me.$popup}),
							search: new ContentEditorSearch({collection: collection}),
							pagination: new ContentEditorPagination({collection: collection})
						}
						me.views.posts = views;
						break;
					case "pages":
						//Check if we have rendered the panel once
						var cachedElements = null;
						if(typeof me.views[panel] !== "undefined") {
							cachedElements = me.views[panel].view.collection.pagination.totalElements;
						}
						//Check collection total elements
						var collectionElements = collection.pagination.totalElements;

						//Compare total items, if same return cached panel
						if(cachedElements == collectionElements) {
							return me.render_panel(me.views[panel]);
						}

						collection.on('reset sort', me.render_panel, me);
						views = {
							view: new ContentEditorPages({collection: collection, $popup: me.$popup}),
							search: new ContentEditorSearch({collection: collection}),
							pagination: new ContentEditorPagination({collection: collection})
						}
						me.views.pages = views;
						break;
					case "comments":
						collection.on('reset sort', me.render_panel, me);
						views = {
							view: new ContentEditorComments({collection: collection, $popup: me.$popup}),
							search: new ContentEditorSearch({collection: collection}),
							pagination: new ContentEditorPagination({collection: collection})
						}
						me.views.comments = views;
						break;
				}
				me.render_panel();
			});

			return false;
		},

		render_panel: function(){
			var me = this,
				views = this.views[this.currentPanel];

			views.view.render();
			me.$popup.content.html(views.view.$el);
			views.view.setElement(views.view.$el);

			me.$popup.bottom.empty();

			if (views.pagination) {
				views.pagination.render();
				me.$popup.bottom.html(views.pagination.$el);
				views.pagination.setElement(views.pagination.$el);
			}

			views.search.render();
			me.$popup.bottom.append(views.search.$el);
			views.search.setElement(views.search.$el);
		}
	});

	var Command_OpenMediaGallery = Command.extend({
		tagName: 'li',
		className: 'command-open-media-gallery upfront-icon upfront-icon-open-gallery',
		render: function () {
				this.$el.html('<a title="'+ l10n.media +'">' + l10n.media + '</a>');
		},
		on_click: function () {
			Upfront.Media.Manager.open({
				media_type: ["images", "videos", "audios", "other"]
			});
		}
	});

	var ContentEditorSearch = Backbone.View.extend({
		id: "upfront-entity_list-search",
		searchTpl: _.template($(_Upfront_Templates.popup).find('#upfront-search-tpl').html()),
		events: {
			"click #upfront-search_action": "dispatch_search_click",
			"keydown #upfront-list-search_input": "dispatch_search_enter"
		},
		render: function () {
			var query = this.collection.lastFetchOptions ? this.collection.lastFetchOptions.search : false;
			this.$el.html(this.searchTpl({query: query}));
		},
		dispatch_search_click: function (e) {
			if ($("#upfront-search_container").is(":visible"))
				return this.handle_search_request(e);
			else return this.handle_search_reveal(e);
		},
		dispatch_search_enter: function (e) {
			if(e.which == 13)
				return this.handle_search_request(e);
		},
		handle_search_request: function (e) {
			e.preventDefault();
			var text = $("#upfront-search_container input").val();
			this.collection.fetch({search: text});
		},
		handle_search_reveal: function () {
			$("#upfront-search_container").show();
		}
	});

	var ContentEditorPagination = Backbone.View.extend({
		paginationTpl: _.template($(_Upfront_Templates.popup).find('#upfront-pagination-tpl').html()),
		events: {
			"click .upfront-pagination_page-item": "handle_pagination_request",
			"click .upfront-pagination_item-next": "handle_next",
			"click .upfront-pagination_item-prev": "handle_prev",
			"click .upfront-pagination_page-item": "set_page",
			"keypress .upfront-pagination_page-current": "set_page_keypress",
		},
		initialize: function(opts){
			this.options = opts;
		},
		render: function () {

			this.$el.html(this.paginationTpl(this.collection.pagination));
		},
		handle_pagination_request: function (e, page) {
			var me = this,
				pagination = this.collection.pagination,
				page = page ? page : parseInt($(e.target).attr("data-page_idx"), 10) || 0
			;
			this.collection.fetchPage(page).
				done(function(response){
					me.collection.trigger('reset');
				});
		},
		handle_next: function(e) {
			var pagination = this.collection.pagination,
				nextPage = pagination.currentPage == pagination.pages - 1 ? false : pagination.currentPage + 1;

			if(nextPage)
				this.handle_pagination_request(e, nextPage);
		},
		handle_prev: function(e) {
			var pagination = this.collection.pagination,
				prevPage = pagination.currentPage == 0 ? false : pagination.currentPage - 1;

			if(prevPage !== false)
				this.handle_pagination_request(e, prevPage);
		},
		set_page: function (e) {
			e.preventDefault();
			e.stopPropagation();
			/*
			var me = this;
			this.collection.fetchPage($(e.target).data("idx")-1).
				done(function(response){
					me.collection.trigger('reset');
				});
			*/
			var page = this.collection.pagination.pages - 1;
			this.handle_pagination_request(e, page);
		},
		set_page_keypress: function (e) {
			//var me = this;
			e.stopPropagation();
			if (13 !== e.which) return true;

			var string = $.trim($(e.target).val()),
				num = parseInt(string, 10)
			;
			if (!num || num < 1) return false;
			if (num > this.collection.pagination.pages) num = this.collection.pagination.pages;
/*
			this.collection.fetchPage(num-1).
				done(function(response){
					me.collection.trigger('reset');
				});
*/
			this.handle_pagination_request(e, num-1);
		}
	});

	var ContentEditorPosts = Backbone.View.extend({
		className: "upfront-entity_list-posts bordered-bottom",
		postListTpl: _.template($(_Upfront_Templates.popup).find('#upfront-post-list-tpl').html()),
		postSingleTpl: _.template($(_Upfront_Templates.popup).find('#upfront-post-single-tpl').html()),
		paginationTpl: _.template($(_Upfront_Templates.popup).find('#upfront-pagination-tpl').html()),
		events: {
			"click #upfront-list-meta .upfront-list_item-component": "handle_sort_request",
			"click .editaction.edit": "handle_post_edit",
			"click .editaction.view": "handle_post_view",
			"click #upfront-list-page-path a.upfront-path-back": "handle_return_to_posts",
			"click .editaction.trash": "trash_post",
		},
		initialize: function(options){
			this.collection.on('change reset', this.render, this);
		},
		render: function () {
			this.$el.empty().append(
				this.postListTpl({
					posts: this.collection.getPage(this.collection.pagination.currentPage),
					orderby: this.collection.orderby,
					order: this.collection.order
				})
			);
			//this.mark_sort_order();
		},

		handle_sort_request: function (e) {
			var $option = $(e.target),
				sortby = $option.attr('data-sortby'),
				order = this.collection.order;
			if(sortby){
				if(sortby == this.collection.orderby)
					order = order == 'desc' ? 'asc' : 'desc';
				this.collection.reSort(sortby, order);
			}
		},
/*
		handle_post_reveal: function (e) {
			var me = this,
				postId = $(e.currentTarget).closest('.upfront-list_item-post').attr('data-post_id');

			e.preventDefault();

			me.$('#upfront-list').after(me.postSingleTpl({post: me.collection.get(postId)}));
			me.expand_post(me.collection.get(postId));
		},
*/
		handle_post_edit: function (e) {
			e.preventDefault();
			var postId = $(e.currentTarget).closest('.upfront-list_item-post').attr('data-post_id');
			Upfront.Application.navigate('/edit/post/' + postId, {trigger: true});
		},
		handle_post_view: function (e) {
			e.preventDefault();
			var postId = $(e.currentTarget).closest('.upfront-list_item-post').attr('data-post_id');
			window.location.href = this.collection.get(postId).get('permalink');
		},
		trash_post: function (e) {
			var me = this;
			var postelement = $(e.currentTarget).closest('.upfront-list_item-post.upfront-list_item');
			var postId = postelement.attr('data-post_id');
			if(confirm( Upfront.Settings.l10n.global.content.delete_confirm.replace(/%s/, this.collection.get(postId).get('post_type')))) {
				this.collection.get(postId).set('post_status', 'trash').save().done(function(){
					me.collection.remove(me.collection.get(postId));

				});
			}
		},
		expand_post: function(post){
			var me = this;
			if(!post.featuredImage){
				this.collection.post({action: 'get_post_extra', postId: post.id, thumbnail: true, thumbnailSize: 'medium'})
					.done(function(response){
						if(response.data.thumbnail && response.data.postId == post.id){
							me.$('#upfront-page_preview-featured_image img').attr('src', response.data.thumbnail[0]).show();
							me.$('.upfront-thumbnailinfo').hide();
							post.featuredImage = response.data.thumbnail[0];
						}
						else{
							me.$('.upfront-thumbnailinfo').text(l10n.no_image);
							me.$('.upfront-page_preview-edit_feature a').html('<i class="icon-plus"></i> ' + l10n.add);
						}

					})
				;
			}
			$("#upfront-list-page").show('slide', { direction: "right"}, 'fast');
			this.$el.find("#upfront-list").hide();
			$("#upfront-page_preview-edit button").one("click", function () {
				//window.location = Upfront.Settings.Content.edit.post + post.id;
				var path = '/edit/post/' + post.id;
				// Respect dev=true
				if (window.location.search.indexOf('dev=true') > -1) path += '?dev=true';
				Upfront.Popup.close();
				Upfront.Application.navigate(path, {trigger: true});
			});

			this.bottomContent = $('#upfront-popup-bottom').html();

			$('#upfront-popup-bottom').html(
				$('<a href="#" id="upfront-back_to_posts">' + l10n.back_to_posts + '</a>').on('click', function(e){
					me.handle_return_to_posts();
				})
			);
		},

		handle_return_to_posts: function () {
			var me = this;
			this.$el.find("#upfront-list").show('slide', { direction: "left"}, function(){
				me.collection.trigger('reset');
			});
			$("#upfront-list-page").hide();
		}
	});


	var ContentEditorPages = Backbone.View.extend({
		events: {
			"click .upfront-list-page_item": "handle_page_activate",
			"click .upfront-page-path-item": "handle_page_activate",
			"change #upfront-page_template-select": "template_change",
			"click .editaction.trash": "trash_page",
			"click .editaction.view": "handle_post_view",
		},
		currentPage: false,
		pageListTpl: _.template($(_Upfront_Templates.popup).find('#upfront-page-list-tpl').html()),
		pageListItemTpl: _.template($(_Upfront_Templates.popup).find('#upfront-page-list-item-tpl').html()),
		pagePreviewTpl: _.template($(_Upfront_Templates.popup).find('#upfront-page-preview-tpl').html()),
		allTemplates: [],
		render: function () {
			var pages = this.collection.getPage(this.collection.pagination.currentPage);//this.collection.where({'post_parent': 0});
			// Render
			this.$el.html(
				this.pageListTpl({
					pages: pages,
					pageItemTemplate: this.pageListItemTpl,
					orderby: this.collection.orderby,
					order: this.collection.order
				})
			);
		},

		renderPreview: function (page) {
			var $root = this.$el.find("#upfront-list-page-preview");

			$root.html(this.pagePreviewTpl({
				page: page,
				template: page.template ? page.template : 'Default',
				allTemplates: this.allTemplates ? this.allTemplates : []
			}));
			this.$el.find("#upfront-page_preview-edit button").one("click", function () {
				//window.location = Upfront.Settings.Content.edit.page + page.get('ID');
				var path = '/edit/page/' + page.get('ID');
				// Respect dev=true
				if (window.location.search.indexOf('dev=true') > -1) path += '?dev=true';
				Upfront.Popup.close();
				Upfront.Application.navigate(path, {trigger: true});
			});
		},
		handle_post_view: function (e) {
			e.preventDefault();
			var postId = $(e.currentTarget).closest('.upfront-list_item-post').attr('data-post_id');
			window.location.href = this.collection.get(postId).get('permalink');
		},
		handle_page_activate: function (e) {
			var page = this.collection.get($(e.target).attr("data-post_id"));
			e.preventDefault();
			e.stopPropagation();

			this.$(".upfront-list-page_item").removeClass("active");
			this.$("#upfront-list-page_item-" + page.id).addClass("active").toggleClass('closed');

			this.update_path(page);
			this.update_page_preview(page);

			this.currentPage = page;
		},
		trash_page: function (e) {
			var me = this;
			var postelement = $(e.currentTarget).closest('.upfront-list_item-post.upfront-list_item');
			var postId = postelement.attr('data-post_id');
			if(confirm( Upfront.Settings.l10n.global.content.delete_confirm.replace(/%s/, this.collection.get(postId).get('post_type')))) {
				this.collection.get(postId).set('post_status', 'trash').save().done(function(){

					me.collection.remove(me.collection.get(postId));
					postelement.remove();
				});
			}
		},
		update_path: function (page) {
			var current = page,
				fragments = [{id: page.get('ID'), title: page.get('post_title')}],
				$root = this.$el.find("#upfront-list-page-path"),
				output = ''
			;

			while(current.get('post_parent')){
				current = this.collection.get(current.get('post_parent'));
				fragments.unshift({id: current.get('ID'), title: current.get('post_title')});
			}

			_.each(fragments, function(p){
				if(output)
					output += '&nbsp;Â»&nbsp;'
				if(p.id == page.id)
					output += '<span class="upfront-page-path-current last">' + p.title + '</span>';
				else
					output += '<a href="#" class="upfront-page-path-item" data-post_id="' + p.id + '">' + p.title + '</a>';
			})
			$root.html(output);
		},

		update_page_preview: function (page) {
			var me = this,
				getExtra = !page.thumbnail || !me.allTemplates || !page.template,
				extra = getExtra ?
					{
						thumbnail: !page.thumbnail,
						thumbnailSize: 'medium',
						allTemplates: !me.allTemplates,
						template: !page.template,
						action: 'get_post_extra',
						postId: page.get('ID')
					} : {}
			;

			if(getExtra){
				this.collection.post(extra)
					.done(function(response){
						if(response.data.thumbnail && response.data.postId == page.get('ID')){
							me.$('#upfront-page_preview-featured_image img').attr('src', response.data.thumbnail[0]).show();
							me.$('.upfront-thumbnailinfo').hide();
							page.thumbnail = response.data.thumbnail[0];
						}
						else{
							me.$('.upfront-thumbnailinfo').text(l10n.no_image);
							me.$('.upfront-page_preview-edit_feature a').html('<i class="icon-plus"></i> ' + l10n.add);
						}

						if(response.data.allTemplates)
							me.allTemplates = response.data.allTemplates;
						if(response.data.template){
							page.template = response.data.template;
							me.renderPreview(page);
						}
					})
				;
			}

			this.renderPreview(page);
		},

		template_change: function(e){
			var me = this,
				$target = $(e.target),
				value = $target.val()
			;

			this.currentPage.post({
				action: 'update_page_template',
				postId: this.currentPage.get('ID'),
				template: value
			}).done(function(response){
				if(me.currentPage.get('ID') == response.data.postId)
					me.currentPage.template = response.data.template;
			});
		}
	});


	var ContentEditorComments = Backbone.View.extend({
		events: {
			"click #upfront-list-meta .upfront-list_item-component": "handle_sort_request",
			"mouseenter .upfront-list_item-comment": "start_reveal_counter",
			"mouseleave .upfront-list_item-comment": "stop_reveal_counter",
			"click .upfront-list_item-comment": "toggle_full_post",
			"click .upfront-comments-approve": "handle_approval_request",
			"click .upfront-comment_actions-wrapper a": "handle_action_bar_request",
			"click .comment-edit-ok": "edit_comment",
			"click .comment-reply-ok": "reply_to_comment",
			"click .comment-reply-cancel": "cancel_edit",
			"click .comment-reply-cancel": "cancel_edit",
			"click .comment-edit-box": "stop_propagation"
		},
		excerptLength: 60,
		commentsTpl: _.template($(_Upfront_Templates.popup).find('#upfront-comments-tpl').html()),
		commentTpl: _.template($(_Upfront_Templates.popup).find('#upfront-comment-single-tpl').html()),
		initialize: function(options){
			this.collection.on('change', this.renderComment, this);
			this.collection.on('add', this.addComment, this);
		},

		render: function () {
			//Parse comment meta data
			var comments = this.collection.postId == 0 ? [] : this.collection.getPage(this.collection.pagination.currentPage);
			this.$el.html(
				this.commentsTpl({
					comments: comments,
					excerptLength: 45,
					commentTpl: this.commentTpl,
					orderby: this.collection.orderby,
					order: this.collection.order
				})
			);
		},

		renderComment: function(comment) {
			this.$('#upfront-list_item-comment-' + comment.get('comment_ID')).html(
				this.commentTpl({comment: comment, excerptLength: 60})
			);
		},

		addComment: function(comment){
			var parentId = comment.get('comment_parent'),
				tempId = comment.get('comment_ID'),
				commentTpl = $('<div class="upfront-list_item-comment upfront-list_item clearfix expanded" id="upfront-list_item-comment-' + tempId + '" data-comment_id="' + tempId + '">' +
					this.commentTpl({comment: comment, excerptLength: this.excerptLength}) +
					'</div>').hide()
			;
			this.$('div.upfront-list_item-comment').removeClass('expanded');
			this._currently_working = false;

			if(parentId)
				this.$('#upfront-list_item-comment-' + parentId).after(commentTpl);
			else
				this.$('div.upfront-list-comment-items').append(commentTpl);
			commentTpl.slideDown();
		},

		handle_sort_request: function (e) {
			var $option = $(e.target),
				sortby = $option.attr('data-sortby'),
				order = this.collection.order;
			if(sortby){
				if(sortby == this.collection.orderby)
					order = order == 'desc' ? 'asc' : 'desc';
				this.collection.reSort(sortby, order);
			}
		},

		start_reveal_counter: function (e) {
			var me = this;
			if ($(e.target).is(".upfront-comment-approved") || $(e.target).parents(".upfront-comment-approved").length) return false; // Not expanding on quick reveal
			if (this._currently_working) return false;

			clearTimeout(me._reveal_counter);

			me._reveal_counter = setTimeout(function () {
				me.reveal_comment(e);
			}, 500);
		},

		reveal_comment: function (e) {
			this.$(".upfront-list-comments .upfront-list_item").removeClass("expanded");
			$(e.currentTarget).addClass("expanded");
			clearTimeout(this._reveal_counter);
		},

		revert_comment: function (e) {
			$(e.currentTarget).removeClass("expanded");
			clearTimeout(this._reveal_counter);
		},

		toggle_full_post: function (e) {
			$(e.currentTarget).toggleClass("expanded");
		},

		stop_reveal_counter: function (e) {
			if (this._currently_working) return false;
			this.revert_comment(e);
		},

		handle_approval_request: function (e, comment) {
			var comment = comment ? comment : this.collection.get($(e.target).attr("data-comment_id"));
			this.$('#upfront-list_item-comment-' + comment.id + ' i.upfront-comments-approve')
				.animate({'font-size': '1px', opacity:0}, 400, 'swing', function(){
					comment.approve(true).save();
				})
		},

		handle_action_bar_request: function (e) {
			var me = this,
				$el = $(e.currentTarget),
				comment = this.collection.get($el.parents(".upfront-list_item-comment").attr("data-comment_id"))
			;
			if ($el.is(".edit"))
				this._edit_comment(comment);
			else if ($el.is(".reply"))
				this._reply_to_comment(comment);
			else if ($el.is(".approve"))
				this.handle_approval_request(false, comment);
			else if ($el.is(".unapprove"))
				comment.approve(false).save();
			else if ($el.is(".thrash"))
				comment.trash(true).save();
			else if ($el.is(".unthrash"))
				comment.trash(false).save();
			else if ($el.is(".spam"))
				comment.spam(true).save();
			else if ($el.is(".unspam"))
				comment.spam(false).save();

			return false;
		},

		edit_comment: function(e){
			var $container = $(e.target).parent(),
				comment = this.collection.get($container.attr('data-comment_id'))
			;

			comment.set('comment_content', $container.find('textarea').attr('disabled', true).val()).save();
		},
		reply_to_comment: function(e){
			var me = this,
				$container = $(e.target).parent(),
				comment = this.collection.get($container.attr('data-comment_id')),
				$comment = this.$('#upfront-list_item-comment-' + comment.get('comment_ID')),
				text = $container.find('textarea').val(),
				currentUser = Upfront.data.currentUser
			;


			if(text){
				var reply = new Upfront.Models.Comment({
						comment_author: currentUser.get('data').display_name,
						comment_post_ID	: this.collection.postId,
						comment_parent: comment.get('comment_ID'),
						comment_content: text,
						comment_approved: '1',
						user_id: currentUser.get('ID')
					}),
					tempId = (new Date()).getTime()
				;

				$comment.find("textarea").attr('disabled', true);

				reply.save().done(function(response){
					me.renderComment(comment);
					reply.set('comment_ID', response.data.comment_ID);
					me.collection.add(reply);
					me.$('#upfront-list_item-comment-' + response.data.comment_ID).hide().slideDown();
				});
			}
		},

		cancel_edit: function(e) {
			var $container = $(e.target).parent(),
				comment = this.collection.get($container.attr('data-comment_id'))
			;
			this.renderComment(comment);
		},

		stop_propagation: function(e) {
			e.stopPropagation();
		},

		_edit_comment: function (comment) {
			var $comment = this.$('#upfront-list_item-comment-' + comment.get('comment_ID'));

			$comment.find('.upfront-comment_togglable').hide();
			$comment.find('.upfront-comment_edit').show();

			this._currently_working = true;
		},

		_reply_to_comment: function (comment) {
			var $comment = this.$('#upfront-list_item-comment-' + comment.get('comment_ID'));

			$comment.find('.upfront-comment_togglable').show();
			$comment.find('.upfront-comment_edit').hide();

			this._currently_working = true;
		},
	});


// ----- Done bringing things back

	var Upfront_Icon_Mixin = {
		get_icon_html: function (src, classname) {
			if ( ! src )
				return '';
			if ( src.match(/^https?:\/\//) ) {
				var attr = {
					'src': src,
					'alt': '',
					'class': 'upfront-field-icon-img'
				}
				return '<img ' + this.get_field_attr_html(attr) + ' />';
			}
			else {
				var classes = ['upfront-field-icon'];
				if ( ! classname ){
					classes.push('upfront-field-icon-' + src);
				}
				else{
					classes.push(classname);
					classes.push(classname + '-' + src);
				}
				return '<i class="' + classes.join(' ') + '"></i>';
			}
		}
	};


	var Field = Backbone.View.extend({
		className: 'upfront-field-wrap',
		initialize: function (opts) {
			this.options = opts;
			this.multiple = typeof this.options.multiple != 'undefined' ? this.options.multiple : (typeof this.multiple != 'undefined' ? this.multiple : false);
			this.label = typeof this.options.label != 'undefined' ? this.options.label : '';
			this.default_value = typeof this.options.default_value != 'undefined' ? this.options.default_value : (this.multiple ? [] : '');
			if ( this.options.property ) {
				this.property = this.model.get_property_by_name(this.options.property);
				if ( this.property === false ) {
					this.model.init_property(this.options.property, this.default_value);
					this.property = this.model.get_property_by_name(this.options.property);
				}
				this.property_name = this.options.property;
				if ( typeof this.options.use_breakpoint_property != 'undefined' )
					this.use_breakpoint_property = this.options.use_breakpoint_property;
			}
			else {
				this.property = false;
			}
			this.name = this.options.name ? this.options.name : this.cid;
			this.selected_state = this.selected_state ? this.selected_state : '';
			if ( this.init )
				this.init();
			if ( this.options.change )
				this.on('changed', this.options.change, this);
			if ( this.options.show )
				this.on('changed rendered', this.dispatch_show, this);
			if ( this.options.focus )
				this.on('focus', this.options.focus, this);
			if ( this.options.blur )
				this.on('blur', this.options.blur, this);
			if ( this.options.rendered )
				this.on('rendered', this.options.rendered, this);
			if (this.options.on_click)
				this['on_click'] = this.options.on_click;
			this.once('rendered', function(){
				var me = this;
				this.get_field().on('focus', function(){
					me.trigger('focus');
				}).on('blur', function(){
					me.trigger('blur');
				});
			}, this);
		},
		dispatch_show: function () {
			var me = this;
			setTimeout(function() {
				me.options.show(me.get_value(), me.$el);
			}, 100);
		},
		get_name: function () {
			return this.property ? this.property.get('name') : this.name;
		},
		get_saved_value: function () {
			if ( this.property ){
				if ( this.use_breakpoint_property )
					return this.model.get_breakpoint_property_value(this.property_name, true);
				else
					return this.property.get('value');
			}
			else if ( this.model ){
				var value = this.model.get(this.name);
				return value ? value : this.default_value;
			}
			return this.default_value;
		},
		get_value: function () {
			var $field = this.get_field();
			if ( ! this.multiple || ($field.size() == 1 && $field.is('select')) )
				return $field.val();
			else
				return _.map($field, function (el) { return $(el).val(); });
			return false;
		},
		set_value: function (value) {
		    this.get_field().val(value);
		},
		get_field_id: function () {
			return this.cid + '-' + this.get_name();
		},
		get_field_name: function () {
			return this.get_name();
		},
		get_field: function () {
			return this.$el.find( '[name=' + this.get_field_name() + ']' + (this.selected_state ? ':'+this.selected_state : '') );
		},
		get_label_html: function () {
			if (this.options.hide_label === true) return '';
			var attr = {
				'for': this.get_field_id(),
				'class': 'upfront-field-label ' + ( this.options.label_style == 'inline' ? 'upfront-field-label-inline' : 'upfront-field-label-block' )
			};
			return '<label ' + this.get_field_attr_html(attr) + '>' + this.label + '</label>';
		},
		get_field_attr_html: function (attr) {
			return _.map(attr, function(value, att){
				return att + '="' + value + '"';
			}).join(' ');
		}
	});

	var Field_Text = Field.extend({
		className: 'upfront-field-wrap upfront-field-wrap-text',
		render: function () {
			this.$el.html('');
			if ( !this.options.compact )
				this.$el.append(this.get_label_html());
			this.$el.append(this.get_field_html());
			var me = this;
			this.get_field().keyup(function(){
				if ( $(this).val() == '' ){
					$(this).addClass('upfront-field-empty');
				}
				else if ( $(this).hasClass('upfront-field-empty') ) {
					$(this).removeClass('upfront-field-empty');
				}
			}).trigger('keyup').change(function(){
				me.trigger('changed', me.get_value());
			});
			this.trigger('rendered');
		},
		get_field_html: function () {
			var attr = {
				'type': 'text',
				'class': 'upfront-field upfront-field-text',
				'id': this.get_field_id(),
				'name': this.get_field_name(),
				'value': this.get_saved_value()
			};
			if ( this.options.compact ) {
				attr.placeholder = this.label;
				this.$el.attr('title', this.label);
			}
			else if ( this.options.placeholder ) {
				attr.placeholder = this.options.placeholder;
			}
			return '<input ' + this.get_field_attr_html(attr) + ' />';
		}
	});

/**
 * Start in initially not editable state.
 * Used for things such as permalink fields in "New Page" dialog.
 * Not exposed globally.
 */
var Field_ToggleableText = Field_Text.extend({
	is_edited: false,
	className: 'upfront-field-wrap upfront-field-wrap-text upfront-field-wrap-toggleable',
	render: function () {
		Field_Text.prototype.render.call(this);
		if (this.is_edited) return false;
		this.$el.append(
			' ' +
			'<a href="#" class="upfront-toggleable-button">Edit</a>'
		);
		var me = this;
		this.$el.on('click', '.upfront-toggleable-button', function (e) {
			e.preventDefault();
			e.stopPropagation();
			var $me = $(this),
				$el = me.get_field()
			;
			$me.hide();
			$el.replaceWith(me.get_editable_html());
			me.is_edited = true;
		});
	},
	has_been_edited: function () {
		return this.is_edited;
	},
	reset_state: function () {
		this.is_edited = Field_ToggleableText.prototype.is_edited;
	},
	get_field_html: function () {
		return this.is_edited
			? this.get_editable_html()
			: this.get_toggleable_html()
		;
	},
	get_field: function () {
		return this.is_edited
			? Field_Text.prototype.get_field.call(this)
			: this.$el.find(".upfront-field-toggleable-value")
		;
	},
	get_value: function () {
		return this.is_edited
			? Field_Text.prototype.get_value.call(this)
			: $.trim(this.get_field().text())
		;
	},
	set_value: function (value) {
		return this.is_edited
			? this.get_field().val(value)
			: this.get_field().text(value)
		;
	},
	get_toggleable_html: function () {
		var value = this.get_value() || this.get_saved_value();
		return '<span class="upfront-field-toggleable-value">' + value + '</span>';
	},
	get_editable_html: function () {
		var attr = {
				'type': 'text',
				'class': 'upfront-field upfront-field-text upfront-field-toggleable',
				'id': this.get_field_id(),
				'name': this.get_field_name(),
				'value': this.get_value() || this.get_saved_value()
			};
			if ('inline' === this.options.label_style) attr.class += ' upfront-has_inline_label';
			if ( this.options.compact ) {
				attr.placeholder = this.label;
				this.$el.attr('title', this.label);
			}
			else if ( this.options.placeholder ) {
				attr.placeholder = this.options.placeholder;
			}
			return '<input ' + this.get_field_attr_html(attr) + ' />';
	}
});

	var Field_Button = Field.extend({
		className: 'upfront-field-wrap upfront-field-wrap-button',
		events: {
			'click': 'on_click'
		},
		render: function () {
			this.$el.html('');
			if ( !this.options.compact )
				this.$el.append(this.get_label_html());
			if ( this.options.info) {
				this.$el.append(this.get_info_html());
			}
			this.$el.append(this.get_field_html());
			var me = this;

			if (this.options.classname) this.$el.addClass(this.options.classname);

			this.trigger('rendered');
		},
		get_info_html: function() {
			return '<span class="button-info">' + this.options.info + '</span>';
		},
		get_field_html: function () {
			var attr = {
				'type': 'button',
				'class': 'upfront-field upfront-field-button',
				'id': this.get_field_id(),
				'name': this.get_field_name(),
				'value': this.label
			};
			if ( this.options.compact ) {
				attr.placeholder = this.label;
				this.$el.attr('title', this.label);
			}
			else if ( this.options.placeholder ) {
				attr.value = this.options.placeholder;
			}
			return '<input ' + this.get_field_attr_html(attr) + ' />';
		}
	});

	var Field_Email = Field_Text.extend({
		get_field_html: function () {
			var attr = {
				'type': 'email',
				'class': 'upfront-field upfront-field-text upfront-field-email',
				'id': this.get_field_id(),
				'name': this.get_field_name(),
				'value': this.get_saved_value()
			};
			if ( this.options.compact ) {
				attr.placeholder = this.label;
				this.$el.attr('title', this.label);
			}
			else if ( this.options.placeholder ) {
				attr.placeholder = this.options.placeholder;
			}
			return '<input ' + this.get_field_attr_html(attr) + ' />';
		}
	});

	var Field_Textarea = Field_Text.extend({
		className: 'upfront-field-wrap upfront-field-wrap-text upfront-field-wrap-textarea',
		get_field_html: function () {
			var attr = {
				'cols': '40',
				'rows': '5',
				'class': 'upfront-field upfront-field-text upfront-field-textarea',
				'id': this.get_field_id(),
				'name': this.get_field_name()
			};
			if ( this.options.compact ) {
				attr.placeholder = this.label;
				this.$el.attr('title', this.label);
			}
			else if ( this.options.placeholder ) {
				attr.placeholder = this.options.placeholder;
			}
			return '<textarea ' + this.get_field_attr_html(attr) + '>' + this.get_saved_value() + '</textarea>';
		}
	});

	var Field_Number = Field_Text.extend({
		className: 'upfront-field-wrap upfront-field-wrap-number',
		get_field_html: function () {
			var attr = {
				'type': 'number',
				'class': 'upfront-field upfront-field-number',
				'id': this.get_field_id(),
				'name': this.get_field_name(),
				'value': this.get_saved_value()
			};
			if ( typeof this.options.min != 'undefined' )
				attr.min = this.options.min;
			if ( typeof this.options.max != 'undefined' )
				attr.max = this.options.max;
			if ( typeof this.options.step != 'undefined' )
				attr.step = this.options.step;
			return ' <input ' + this.get_field_attr_html(attr) + ' /> ' + (this.options.suffix ? this.options.suffix : '');
		}
	});


	var Field_Slider = Field_Text.extend(_.extend({}, Upfront_Icon_Mixin, {
		className: 'upfront-field-wrap upfront-field-wrap-slider',
		initialize: function(opts) {
			this.options = opts;
			Field_Slider.__super__.initialize.apply(this, arguments);

			var me = this,
				options = {
					range: this.getOption('range', 'min'),
					min: this.getOption('min', 0),
					max: this.getOption('max', 0),
					step: this.getOption('step', 1),
					orientation: this.getOption('orientation', 'horizontal'),
					value: this.get_saved_value()
				}
			;

			this.value = this.get_saved_value();
			if(typeof this.value == 'undefined')
				this.value = options.min;

			if(this.options.callbacks)
				_.extend(options, this.options.callbacks);

			options.slide = function(e, ui){
				var valueText = ui.value;
				me.value = valueText;

				me.$('input').val(me.value).trigger('change');

				if(me.options.valueTextFilter)
					valueText = me.options.valueTextFilter(valueText);

				me.$('.upfront-field-slider-value').text(valueText);

				if(me.options.callbacks && me.options.callbacks.slide)
					me.options.callbacks.slide(e, ui);
			}

			this.on('rendered', function(){
				var $field = me.$('#' + me.get_field_id());
				if ( options.orientation == 'vertical' ){
					$field.addClass('upfront-field-slider-vertical');
				}
				$field.slider(options);
			});
		},
		get_field_html: function () {
			var output = '<input type="hidden" name="' + this.get_field_name() + '" value="' + this.value + '">',
				value = this.value
			;

			if(this.options.info)
				output += '<div class="upfront-field-info">' + this.options.info + '</div>'

			output += '<div class="upfront-field upfront-field-slider" id="' + this.get_field_id() + '"></div>';

			if(this.options.valueTextFilter)
				value = this.options.valueTextFilter(value);

			output += '<div class="upfront-field-slider-value"> ' + value + '</div>';
			return output;
		},

		getOption: function(option, def){
			return this.options[option] ? this.options[option] : def;
		}
	}));

	var Field_Hidden = Field_Text.extend({
		className: 'upfront-field-wrap upfront-field-wrap-hidden',
		get_field_html: function(){
			var attr = {
				type: 'hidden',
				id: this.get_field_id(),
				name: this.get_field_name(),
				'class': 'upfront-field upfront-field-hidden',
				'value': this.get_saved_value()
			};
			return ' <input ' + this.get_field_attr_html(attr) + ' /> ';
		}
	});

	var Field_Color = Field_Text.extend({
		className: 'upfront-field-wrap upfront-field-wrap-color sp-cf',
		defaults : {
			blank_alpha : 1,
			autoHide: true
		},
		spectrumDefaults: {
			clickoutFiresChange: false,
			chooseText: 'OK',
			showSelectionPalette: true,
			showAlpha: true,
			showPalette: true,
            localStorageKey: "spectrum.recent_colors",
			palette: Theme_Colors.colors.pluck("color").length ? Theme_Colors.colors.pluck("color") : [],
			maxSelectionSize: 10,
			preferredFormat: "hex",
			showInput: true,
			allowEmpty:true,
			appendTo : "parent"
		},
		events : {
			'change .upfront_color_picker_rgba input' : 'rgba_sidebar_changed',
			'change .sp-input' : 'sp_input_changed',
			'click .upfront_color_picker_reset' : 'set_to_blank'
		},
		initialize: function(opts){
			this.options = _.extend({}, this.defaults, opts);
			this.options.blank_alpha = _.isUndefined( this.options.blank_alpha ) ? 1 : this.options.blank_alpha;
			this.sidebar_template = _.template(_Upfront_Templates.color_picker);
			var me = this,
			spectrumOptions = typeof this.options.spectrum == 'object' ? _.extend({}, this.spectrumDefaults, this.options.spectrum) : this.spectrumDefaults
			;
			this.rgba = {
				r : 0,
				g : 0,
				b : 0,
				a : 0
			};
			this.spectrumOptions = spectrumOptions;

			spectrumOptions.move = function(color, e){
				if( !_.isEmpty( color ) ){
					me.color = color;
					var rgb = color.toHexString();
					$('.sp-dragger').css({
						'border-top-color': rgb,
						'border-right-color': rgb
					});
					me.update_input_border_color( color.toRgbString() );
					me.update_input_val( rgb );
					me.rgba = _.extend(me.rgba, color.toRgb());
					me.render_sidebar_rgba(me.rgba);
				}

				if(me.options.spectrum && me.options.spectrum.move)
					me.options.spectrum.move(color);

				me.toggle_alpha_selector(color, e);
			};

			spectrumOptions.show = function(color){
				var $input = $(".sp-input"),
					input_val = $input.val();

				if( !_.isEmpty( color ) ){
					this.color = color;
					var rgb = color.toHexString();
					me.rgba = _.extend(me.rgba, color.toRgb());
					me.update_input_border_color( color.toRgbString() );
					me.render_sidebar_rgba(me.rgba);
					me.update_input_val( rgb );
				}
				if( !_.isEmpty( input_val) && !me.is_hex( input_val )){
					var t_color = tinycolor( input_val );
					$input.val(t_color.toHexString());
				}
				me.spectrumOptions = spectrumOptions;

				if(me.options.spectrum && me.options.spectrum.show)
					me.options.spectrum.show(color);

				/**
				 * Dont allow more than one top be open
				 */
				$(".sp-container").not( me.$(".sp-container")).each(function(){
					var $this = $(this),
						options = $this.data("sp-options");
					if( !options || !options.flat  ){
						$this.addClass("sp-hidden");
					}

				});

				if( !_.isEmpty( input_val ) ){
					var input_val_color = tinycolor( input_val );
					me.toggle_alpha_selector( input_val_color );
				}

			};

			spectrumOptions.beforeShow = function(color){
				if( color instanceof Object ){
					$.extend(color, tinycolor.prototype);
				}
				me.color = color;
				me.update_palette(); // Make sure we're up to date
				me.$('input[name=' + me.get_field_name() + ']').spectrum("option", "palette", me.options.palette);
				if(me.options.spectrum && me.options.spectrum.beforeShow) me.options.spectrum.beforeShow(color);

				me.$(".sp-container").data("sp-options", me.options.spectrum );
			};

			/**
			 * Wrap the hide callback so we can re-use it.
			 */
			var hide = function (color) {
				if (me.options.spectrum && me.options.spectrum.hide) {
					me.options.spectrum.hide(color);
				}
			};
			// Add wrapped hide callback
			spectrumOptions.hide = hide;
			if( !spectrumOptions.autoHide  ){
				spectrumOptions.hide = function(color){
					me.color = color;
					// And if we override the hide callback, re-apply it in overridden method
					hide(color);
					me.$(".sp-replacer").addClass("sp-active");
					me.$(".sp-container").removeClass("sp-hidden");
				};
			}

			var l10n_update = _.debounce(function () {
				// Let's fix the strings
				$(".sp-container").each(function () {
					$(this)
						.find(".sp-input-container").attr("data-label", l10n.current_color).end()
						.find(".sp-palette-container").attr("data-label", l10n.theme_colors).end()
						.find(".sp-palette-row:last").attr("data-label", l10n.recent_colors)
					;
				})
			});


			Field_Color.__super__.initialize.apply(this, arguments);

			this.on('rendered', function(){
				me.$('input[name=' + me.get_field_name() + ']').spectrum(spectrumOptions);
				me.$spectrum = me.$('input[name=' + me.get_field_name() + ']');

				// Listen to spectrum events and fire off l10n labels update
				me.$spectrum.on("reflow.spectrum move.spectrum change", l10n_update);

				me.$(".sp-container").append("<div class='color_picker_rgb_container'></div>");
				me.update_input_border_color(me.get_saved_value());
				me.$(".sp-container").data("field_color", me);
				me.$(".sp-container").data("$spectrum", me.$spectrum );
				me.$(".sp-container").find(".sp-choose").on("click.spectrum", function(e){
					if(me.options.spectrum && me.options.spectrum.choose && me.color)
						me.options.spectrum.choose(me.color);

					if( me.autoHide !== true ){
						me.$(".sp-replacer").removeClass("sp-active");
						me.$(".sp-container").addClass("sp-hidden");
					}
				});

			});

		},

		render: function () {
			Field_Color.__super__.render.apply(this, arguments);
			// Re-bind debounced listeners for theme color updates
			this.stopListening(Upfront.Events, "theme_colors:update");
			var cback = _.debounce(this.update_palette, 200);
			this.listenTo(Upfront.Events, "theme_colors:update", cback, this);
		},

		update_palette: function () {
			if (this.$spectrum && this.$spectrum.spectrum) {
				this.$spectrum.spectrum("option", "palette", Theme_Colors.colors.pluck("color").length ? Theme_Colors.colors.pluck("color") : []);
			}
		},

		is_hex : function(color_code){
			return color_code.indexOf( "#" ) === -1 ? false : true;
		},
		get_field_html: function () {
			var attr = {
				'type': 'text',
				'class': 'upfront-field upfront-field-color',
				'id': this.get_field_id(),
				'name': this.get_field_name(),
				'value': this.get_saved_value()
			};
			return ' <input ' + this.get_field_attr_html(attr) + ' /> ' + (this.options.suffix ? this.options.suffix : '');
		},
		update_input_border_color : function(rgb){
            var spPreview = this.$el.find(".sp-preview");
			$(".sp-input").css({
				borderColor : rgb
			});

            spPreview.css({
                backgroundColor: rgb
            })

            if( rgb !== 'rgba(0, 0, 0, 0)' ) {
                spPreview.removeClass('uf-unset-color');
            }
            else if( spPreview.closest( '.theme_colors_empty_picker' ).length === 0 ) {
                spPreview.addClass('uf-unset-color');
            }
		},
		update_input_val : function(hex){
			this.$(".sp-input").val(hex);
		},
		render_sidebar_rgba : function(rgba){
			var self = this;
			this.$(".color_picker_rgb_container").html(this.sidebar_template(rgba));
			this.$(".upfront_color_picker_reset").on("click", function(e){
				e.preventDefault();
				self.set_to_blank();
			});
		},
		rgba_sidebar_changed : function(e){
			var $el = $(e.target),
				type = $el.data("type"),
				val = parseFloat($el.val()),
				color = this.$spectrum.spectrum("get"),
				selection = {};
				selection[type] = val;
				color = tinycolor(_.extend(color.toRgb(), selection));
				// Set the new color
				this.$spectrum.spectrum("set", color.toRgbString());
				this.update_input_border_color( color.toRgbString() );
				this.update_input_val( color.toHexString() );
				this.render_sidebar_rgba(  color.toRgb() );
				// Trigger move event
				if(this.options.spectrum && typeof this.options.spectrum.move === "function"){
					this.options.spectrum.move(color);
				}
				// Trigger change event
				if(this.options.spectrum && typeof this.options.spectrum.change === "function"){
					this.options.spectrum.change(color);
				}
				e.stopPropagation();
				e.preventDefault();
				this.$spectrum.trigger("dragstop.spectrum");
		},
		sp_input_changed : function(e){
			var color = tinycolor($(e.target).val());
			// Trigger move event
			if(this.options.spectrum && typeof this.options.spectrum.move === "function"){
				this.options.spectrum.move(color);
			}
			// Trigger change event
			if(this.options.spectrum && typeof this.options.spectrum.change === "function"){
				this.options.spectrum.change(color);
			}
			//Update preview color
			this.update_input_border_color(color.toRgbString);
		},
		set_to_blank : function(){
            var blank_color = 'rgba(0, 0, 0, ' + ( _.isUndefined( this.options.blank_alpha ) ? 1 : this.options.blank_alpha ) + ')',
				color = tinycolor(blank_color);
			color.reset = true;
			this.rgba = {r: 0, g: 0, b:0, a: 0};
			this.$spectrum.spectrum("set", color.toRgbString() );
			this.update_input_border_color( blank_color );
			this.update_input_val( "#000000" );
			this.render_sidebar_rgba(  this.rgba );

			// Trigger move event
			if(this.options.spectrum && typeof this.options.spectrum.move === "function"){
				this.options.spectrum.move(color);
			}

			// Trigger change event
			if(this.options.spectrum && typeof this.options.spectrum.change === "function"){
				this.options.spectrum.change(color);
			}

			// Trigger move event in Theme Color Swatches
			if(this.options && typeof this.options.move === "function"){
				this.options.move(color);
			}

			// Trigger change event in Theme Color Swatches
			if(this.options && typeof this.options.change === "function"){
				this.options.change(color);
			}
		},
		get_value : function() {
			return this.$el.find(".sp-preview-inner").css('background-color');
		},
		set_value : function(rgba) {
			if (Upfront.Util.colors.is_theme_color(rgba)) rgba = Upfront.Util.colors.get_color(rgba);
			var color = tinycolor(rgba);
			this.color = color;
			this.$spectrum.spectrum("set", color );
		},
		toggle_alpha_selector: function(color){
			if( _.isEmpty( color ) ) return;

			var $alpha = this.$(".sp-alpha");

			if( Upfront.Views.Theme_Colors.colors.is_theme_color( color ) ){

				$alpha.addClass("sp-alpha-disabled sp-alpha-lower-opacity");
				$overlay = $("<span class='sp-alpha-overlay' title='"+ l10n.theme_colors_opacity_disabled +"'></span>")
				.on("click", function(e){
					e.stopPropagation();
					e.preventDefault();
				});
				if( !this.$(".sp-alpha-overlay").length ){
					$alpha.before($overlay);
				}

			}else{
				$alpha.removeClass("sp-alpha-disabled sp-alpha-lower-opacity");
				this.$(".sp-alpha-overlay").remove();
			}
		}

	});


	var Field_Multiple = Field.extend(_.extend({}, Upfront_Icon_Mixin, {
		get_values_html: function () {
			return _.map(this.options.values, this.get_value_html, this).join('');
		},
		set_value: function (value) {
			this.$el.find('[value="'+value+'"]').trigger('click');
		}
	}));

	var Field_Select = Field_Multiple.extend(_.extend({}, Upfront_Scroll_Mixin, {
		events: {
			'click .upfront-field-select-value': 'openOptions',
			'mouseup .upfront-field-select': 'onMouseUp',
			'change .upfront-field-select-option input': 'onChange',
			'click .upfront-field-select-option label': 'onOptionClick'
		},

		onOptionClick: function(e) {
			if ( !this.multiple ) {
				e.stopPropagation();
				if ( $(this).closest('.upfront-field-select-option').hasClass('upfront-field-select-option-disabled') ) {
					return;
				}

				// Make sure that input is clicked (for some reason in redactor toolbar this does not work naturally)
				if ( $(e.currentTarget).siblings('input').not(':checked')) {
					$(e.currentTarget).siblings('input').click();
				}

				this.$el.find('.upfront-field-select').removeClass('upfront-field-select-expanded');
				this.trigger('blur');
			}
		},

		openOptions: function(e) {
			if(e)
				e.stopPropagation();
			if ( this.options.disabled )
				return;
			$('.upfront-field-select-expanded').removeClass('upfront-field-select-expanded');
			this.$el.find('.upfront-field-select').css('min-width', '').css('min-width', this.$el.find('.upfront-field-select').width());
			this.$el.find('.upfront-field-select').addClass('upfront-field-select-expanded');

			// Make sure all select options are visible in scroll panel i.e. scroll scroll panel as needed
			var me = this;
			_.delay(function() { // Delay because opening animation causes wrong outerHeight results
				var in_sidebar = me.$el.parents('#sidebar-ui').length,
					in_settings = me.$el.parents('#element-settings-sidebar').length,
					settingsTitleHeight = 46;

				// Apply if select field is in sidebar or settings sidebar
				if(in_sidebar == 1 || in_settings == 1) {
					var select_dropdown = me.$el.find('.upfront-field-select-options'),
						select = select_dropdown.parent(),
						dropDownTop = select.offset().top - $('#element-settings-sidebar').offset().top;
						dropDownTop = dropDownTop + settingsTitleHeight;

					select_dropdown.css("width", select.width() + 3);
					select_dropdown.css('top', dropDownTop + "px");
					select_dropdown.css('left', select.offset().left + "px");
					select_dropdown.css('display', 'block');
				}
			}, 10);

			$('.sidebar-panel-content, #sidebar-scroll-wrapper').on('scroll', this, this.on_scroll);

			this.trigger('focus');
		},
		on_scroll: function(e) {
			var me = e.data;
			me.$el.find('.upfront-field-select').removeClass('upfront-field-select-expanded');
			me.trigger('blur');
		},
		onMouseUp: function(e){
			e.stopPropagation();
		},

		onChange: function() {
			this.update_select_display_value();
			this.trigger('changed', this.get_value());
		},

		selected_state: 'checked',

		className: 'upfront-field-wrap upfront-field-wrap-select',

		render: function () {
			this.$el.html('');

			if ( this.label ) {
				this.$el.append(this.get_label_html());
			}
			this.$el.append(this.get_field_html());

			this.stop_scroll_propagation(this.$el.find('.upfront-field-select-options'));

			if ( ! this.multiple && ! this.get_saved_value() ) {
				this.$el.find('.upfront-field-select-option:eq(0) input').prop('checked', true);
			}

			this.update_select_display_value();

			if ( this.options.width ) {
				this.$el.find('.upfront-field-select').css('width', this.options.width);
			}

			if (this.options.additional_classes) {
				this.$el.addClass(this.options.additional_classes);
			}

			this.trigger('rendered');
		},

		update_select_display_value: function() {
			var select_label = ( this.options.select_label ) ? this.options.select_label : ( this.options.placeholder ? this.options.placeholder : '' );
			var $select_value = this.$el.find('.upfront-field-select-value');
			var $checked = this.$el.find('.upfront-field-select-option input:checked');
			if ( $checked.size() == 1 && !this.multiple ) {
				var $option = $checked.closest('.upfront-field-select-option'),
					select_text = $option.text(),
					$select_icon = $option.find('.upfront-field-icon').clone();
				$select_value.html('');
				if ( $select_icon )
					$select_value.append($select_icon);
				$select_value.append('<span>'+select_text+'</span>');
			} else {
				var select_texts = [];
				$checked.each(function(){
					select_texts.push( $(this).closest('.upfront-field-select-option').text() );
				});
				$select_value.text( $checked.size() == 0 ? select_label : select_texts.join(', ') );
			}
			this.$el.find('.upfront-field-select-option').each(function(){
				if ( $(this).find('input:checked').size() > 0 )
					$(this).addClass('upfront-field-select-option-selected');
				else
					$(this).removeClass('upfront-field-select-option-selected');
			});
		},
		get_field_html: function () {
			var attr = {
				'class': 'upfront-field-select upfront-no-select',
				'id': this.get_field_id()
			};
			attr.class += ' upfront-field-select-' + ( this.options.multiple ? 'multiple' : 'single' );
			if ( this.options.disabled )
				attr.class += ' upfront-field-select-disabled';
			if ( this.options.style == 'zebra' )
				attr.class += ' upfront-field-select-zebra';
			//return '<select ' + this.get_field_attr_html(attr) + '>' + this.get_values_html() + '</select>';
			return '<div ' + this.get_field_attr_html(attr) + '><div class="upfront-field-select-value"></div><ul class="upfront-field-select-options">' + this.get_values_html() + '</ul></div>';
		},
		get_value_html: function (value, index) {
			var id = this.get_field_id() + '-' + index;
			var attr = {
				'type': ( this.multiple ? 'checkbox' : 'radio' ),
				'id': id,
				'name': this.get_field_name(),
				'class': 'upfront-field-' + ( this.multiple ? 'checkbox' : 'radio' ),
				'value': value.value
			};
			var saved_value = this.get_saved_value();
			var classes = 'upfront-field-select-option';
			if ( value.disabled ) {
				attr.disabled = 'disabled';
				classes += ' upfront-field-select-option-disabled';
			}
			var icon_class = this.options.icon_class ? this.options.icon_class : null;
			if ( this.multiple && _.contains(saved_value, value.value) )
				attr.checked = 'checked';
			else if ( ! this.multiple && saved_value == value.value )
				attr.checked = 'checked';
			if ( attr.checked )
				classes += ' upfront-field-select-option-selected';
			classes += ' upfront-field-select-option-' + ( index%2 == 0 ? 'odd' : 'even' );
			//return '<option ' + this.get_field_attr_html(attr) + '>' + value.label + '</option>';
			var input = '<input ' + this.get_field_attr_html(attr) + ' />';
			return '<li class="' + classes + '">' + '<label for="' + id + '">' + this.get_icon_html(value.icon, icon_class) + '<span class="upfront-field-label-text">' + value.label + '</span></label>' + input + '</li>';
		}
	}));

	var Field_Chosen_Select = Field_Select.extend({
		events: {
			'change select': 'on_change',
			'click .chosen-container .chosen-single': 'openOptions'
		},
		multiple: false,

		initialize: function(options) {
			Field.prototype.initialize.call(this, options);
			//Close dropdown on parent scroll
			$('.sidebar-panel-content, #sidebar-scroll-wrapper').on('scroll', this, this.closeChosen);

			//Disable scroll when chosen is opened
			$('.sidebar-panel-content .sidebar-tab-content').bind('mousewheel', function() {
				 return false
			});
		},

		get_field_html: function() {
			var multiple = this.multiple ? 'multiple' : '';
			return ['<select class="upfront-chosen-select"' , multiple, ' data-placeholder="', this.options.placeholder,  '">', this.get_values_html(), '</select>'].join('');
		},
		get_value_html: function (value, index) {
			var selected = '';
			if (value.value === this.options.default_value) selected = ' selected="selected"';
			return ['<option value="', value.value, '"', selected, '>', value.label, '</option>'].join('');
		},
		on_change: function(e) {
			this.$el.find('.chosen-drop').css('display', 'none');
			this.trigger('changed');
		},
		get_value: function() {
			return this.$el.find('select').val();
		},
		set_value: function(value) {
			this.$el.find('select').val(value).trigger('chosen:updated');
		},
		openOptions: function(e) {
			var me = this;
			_.delay(function() { // Delay because opening animation causes wrong outerHeight results
				var in_sidebar = me.$el.parents('#sidebar-ui').length,
					in_settings = me.$el.parents('#element-settings-sidebar').length,
					settingsTitleHeight = 44;

				// Apply if select field is in sidebar or settings sidebar
				if(in_sidebar == 1 || in_settings == 1) {
					var select_dropdown = me.$el.find('.chosen-drop'),
						select = select_dropdown.parent(),
						dropDownTop = (select.offset().top - $('#element-settings-sidebar').offset().top) + select.height();
						dropDownTop = dropDownTop + settingsTitleHeight;

					select_dropdown.css("width", select.width());
					select_dropdown.css('top', dropDownTop + "px");
					select_dropdown.css('left', select.offset().left + "px");
					select_dropdown.css('display', 'block');
				}
			}, 20);

			me.$el.find('.chosen-drop').show();
		},
		closeChosen: function(e) {
			var me = e.data;
			var in_sidebar = me.$el.parents('#sidebar-ui').length,
				in_settings = me.$el.parents('#element-settings-sidebar').length;

			if(in_sidebar == 1 || in_settings == 1) {
				me.$el.find('.chosen-drop').css('display', 'none');
			}
			me.$el.find('select').trigger("chosen:close");

			//Enable scroll when chosen is closed
			$('.sidebar-panel-content .sidebar-tab-content').unbind('mousewheel');
		}
	});

	var Field_Typeface_Chosen_Select = Field_Chosen_Select.extend({
		events: {
			'change select': 'on_change',
			'click .chosen-container .chosen-single': 'openOptions'
		},
		multiple: false,
		get_field_html: function() {
			var multiple = this.multiple ? 'multiple' : '';
			return ['<div class="upfront-select-font"><select class="upfront-chosen-select-typeface"' , multiple, ' data-placeholder="', this.options.placeholder,  '">', this.get_values_html(), '</select></div>'].join('');
		},
		get_value_html: function (value, index) {
			var selected = '';
			var saved_value = this.get_saved_value();
			if (value.value === saved_value) {
				selected = ' selected="selected"';
			}
			return ['<option value="', value.value, '"', selected, ' style="font-family: ', value.value ,'">', value.label, '</option>'].join('');
		},
		render: function() {
			Field_Chosen_Select.prototype.render.call(this);

			var me = this;
			$('.upfront-chosen-select-typeface', this.$el).chosen({
				width: this.options.select_width
			});

			//Wait for Chosen to be initialized
			setTimeout(function(){
				me.set_option_font(me.get_saved_value());
			}, 50);

		},
		on_change: function(event) {
			this.trigger('changed', this.get_value());
			this.$el.find('.chosen-drop').css('display', 'none');
			this.set_option_font(this.get_value());
		},
		set_option_font: function(value) {
			this.$el.find('.chosen-single').css( "font-family", value );
		},
		openOptions: function(e) {
			Field_Chosen_Select.prototype.openOptions.call(this);
		}
	});

	var Field_Typeface_Style_Chosen_Select = Field_Chosen_Select.extend({
		events: {
			'change select': 'on_change',
			'click .chosen-container .chosen-single': 'openOptions'
		},
		multiple: false,
		get_field_html: function() {
			var multiple = this.multiple ? 'multiple' : '';
			return ['<div class="upfront-select-font"><select class="upfront-chosen-select-style"' , multiple, ' data-placeholder="', this.options.placeholder,  '">', this.get_values_html(), '</select></div>'].join('');
		},
		get_value_html: function (value, index) {
			var selected = '';
			var font_family = this.options.font_family;
			var parsed_variant = Upfront.Views.Font_Model.parse_variant(value.value);
			var saved_value = this.get_saved_value();
			if (value.value === saved_value) {
				selected = ' selected="selected"';
			}
			var label =  this.map_labels(parsed_variant.weight, parsed_variant.style);
			return ['<option value="', value.value, '"', selected, ' style="font-family: ', font_family ,'; font-weight: ', parsed_variant.weight ,'; font-style: ', parsed_variant.style ,' ">', label, '</option>'].join('');
		},
		render: function() {
			Field_Chosen_Select.prototype.render.call(this);

			var me = this;
			$('.upfront-chosen-select-style', this.$el).chosen({
				width: this.options.select_width,
				disable_search: true
			});

			//Wait for Chosen to be initialized
			setTimeout(function(){
				me.set_option_font(me.get_saved_value());
			}, 50);

		},
		map_labels: function(weight, style) {
			//Map font weight to labels
			var label, labels = {
				'100': l10n.label_thin,
				'200': l10n.label_extra_light,
				'300': l10n.label_light,
				'400': l10n.label_regular,
				'500': l10n.label_medium,
				'600': l10n.label_semi_bold,
				'700': l10n.label_bold,
				'800':  l10n.label_extra_bold,
				'900': l10n.label_ultra_bold
			}

			//Check if weight is number or string
			if (!_.isUndefined( weight ) && weight.match(/^(\d+)/)) {
				label = labels[weight];
			} else {
				label = weight;
			}

			//Display style only if style is Italic
			if(style == "italic") {
				label += ' ' + style;
			}

			return label;
		},
		on_change: function(event) {
			this.trigger('changed', this.get_value());
			this.$el.find('.chosen-drop').css('display', 'none');
			this.set_option_font(this.get_value());
		},
		set_option_font: function(value) {
			var font_family = this.$el.parent().parent().find('.upfront-chosen-select-typeface').val();
			var parsed_variant = Upfront.Views.Font_Model.parse_variant(value);
			this.$el.find('.chosen-single').css( {"font-family": font_family, "font-weight": parsed_variant.weight, "font-style": parsed_variant.style });
		},
		openOptions: function(e) {
			Field_Chosen_Select.prototype.openOptions.call(this);
		}
	});

	var Field_Multiple_Chosen_Select = Field_Chosen_Select.extend({
		events: {
			'change select': 'on_change',
			'click .chosen-container-multi': 'openOptions'
		},
		multiple: true,
		get_field_html: function() {
			var multiple = this.multiple ? 'multiple' : '';
			return ['<select class="upfront-chosen-select-multiple"' , multiple, ' data-placeholder="', this.options.placeholder,  '">', this.get_values_html(), '</select>'].join('');
		},
		get_value_html: function (value, index) {
			var selected = '';
			var saved_value = this.get_saved_value();
			if (_.contains(saved_value, value.value) ) {
				selected = ' selected="selected"';
			}
			return ['<option value="', value.value, '"', selected, '>', value.label, '</option>'].join('');
		},
		render: function() {
			Field_Chosen_Select.prototype.render.call(this);

			var me = this;
			$('.upfront-chosen-select-multiple', this.$el).chosen({
				width: this.options.select_width,
			});

		},
		on_change: function(event) {
			this.trigger('changed', this.get_value());
			this.$el.find('.chosen-drop').css('display', 'none');
		},
		openOptions: function(e) {
			Field_Chosen_Select.prototype.openOptions.call(this);
		}
	});

	var Field_Multiple_Input = Field_Multiple.extend({
		selected_state: 'checked',
		render: function () {
			var me = this;

			this.$el.html('');

			if ( this.label ) {
				this.$el.append(this.get_label_html());
			}

			this.$el.append(this.get_field_html());

			this.$el.on('change', '.upfront-field-multiple input', function(){
				me.$el.find('.upfront-field-multiple').each(function(){
					if ( $(this).find('input:checked').size() > 0 ) {
						$(this).addClass('upfront-field-multiple-selected');
					} else {
						$(this).removeClass('upfront-field-multiple-selected');
					}
				});

				me.trigger('changed', me.get_value());
			});

			this.trigger('rendered');
		},
		get_field_html: function () {
			return this.get_values_html();
		},
		get_value_html: function (value, index) {
			var id = this.get_field_id() + '-' + index;
			var classes = "upfront-field-multiple";
			var attr = {
				'type': this.type,
				'id': id,
				'name': this.get_field_name(),
				'value': value.value,
				'class': 'upfront-field-' + this.type
			};
			var saved_value = this.get_saved_value();
			var icon_class = this.options.icon_class ? this.options.icon_class : null;
			if ( this.options.layout ) classes += ' upfront-field-multiple-'+this.options.layout;
			if ( value.disabled ) {
				attr.disabled = 'disabled';
				classes += ' upfront-field-multiple-disabled';
			}
			if ( this.multiple && _.contains(saved_value, value.value) ) {
				attr.checked = 'checked';
			} else if ( ! this.multiple && saved_value == value.value ) {
				attr.checked = 'checked';
			}
			if (value.checked) attr.checked = 'checked';
			if ( attr.checked ) {
				classes += ' upfront-field-multiple-selected';
			}
			return '<span class="' + classes + '"><input ' + this.get_field_attr_html(attr) + ' />' + '<label for="' + id + '">' + this.get_icon_html(value.icon, icon_class) + '<span class="upfront-field-label-text">' + value.label + '</span></label></span>';
		}
	});

	var Field_Radios = Field_Multiple_Input.extend({
		className: 'upfront-field-wrap upfront-field-wrap-multiple upfront-field-wrap-radios',
		type: 'radio'
	});

	var Field_Checkboxes = Field_Multiple_Input.extend({
		className: 'upfront-field-wrap upfront-field-wrap-multiple upfront-field-wrap-checkboxes',
		type: 'checkbox',
		multiple: true
	});

	var OptionalField = Field_Checkboxes.extend({
		className: 'upfront-field-wrap upfront-field-wrap-multiple upfront-field-wrap-checkboxes upfront-field-wrap-optional',
		events: {
			'change input': 'onChange'
		},

		initialize: function(opts){
			var me = this;
			OptionalField.__super__.initialize.apply(this, arguments);

			this.options = opts;

			this.on('panel:set', function(){
				this.panel.on('rendered', function(){
					me.onChange();
				});
			});

			if(opts.onChange) this.onChange = opts.onChange;
		},

		onChange: function(){
			var check = this.$('input'),
				related = this.panel.$('input[name=' + this.options.relatedField + ']').closest('.upfront-field-wrap')
			;
			if(check.is(':checked')) {
				related.show();
			} else {
				related.hide();
			}

			$('#settings').height(this.panel.$('.upfront-settings_panel').outerHeight());
			this.model.set_property(this.options.property, this.get_value());
		}
	});

	var Field_Multiple_Suggest = Field.extend(_.extend({}, Upfront_Scroll_Mixin, {
		events: {
			"click .upfront-suggest-add": "add_list",
			"focus .upfront-field-text-suggest": "reveal_suggest",
			"keyup .upfront-field-text-suggest": "update_suggest"
		},
		multiple: true,
		selected_state: 'checked',
		added_list: [],
		checked_list: [],
		suggest_list: [],
		render: function () {
			var me = this;
			this.$el.html('');
			if ( this.label ) this.$el.append(this.get_label_html());
			this.$el.append('<div class="upfront-suggest-wrap" />');
			var $wrap = this.$el.find('.upfront-suggest-wrap')
			$wrap.append(this.get_field_html());
			$wrap.append('<div class="upfront-suggest-list-wrap upfront-no-select" />');
			this.checked_list = this.get_saved_value();
			var $list_wrap = this.$el.find('.upfront-suggest-list-wrap');
			$list_wrap.append('<ul class="upfront-suggest-lists">' + this.get_suggest_list_html() + '</ul>');
			$list_wrap.append('<div class="upfront-suggest-add-wrap"><span class="upfront-suggest-add-value"></span><span class="upfront-suggest-add">' + l10n.add_new + '</span></div>');
			this.stop_scroll_propagation(this.$el.find('.upfront-suggest-lists'));
			this.$el.on('change', '.upfront-suggest-list input', function () {
				var value = $(this).val();
				if ( !$(this).is(':checked') && _.contains(me.checked_list, value) ) {
					me.checked_list = _.without(me.checked_list, value);
				} else {
					me.checked_list.push(value);
				}
				me.trigger('changed');
			});
			this.$el.on('click', function (e) {
				e.stopPropagation();
			});
			$('#settings').on('click', '.upfront-settings_panel', function(){
				me.$el.find('.upfront-suggest-list-wrap').removeClass('upfront-suggest-list-wrap-expanded');
			});

			this.trigger('rendered');
		},
		reveal_suggest: function () {
			this.$el.find('.upfront-suggest-list-wrap').addClass('upfront-suggest-list-wrap-expanded');
			this.update_suggest();
		},
		update_suggest: function () {
			var value = this.get_field_input_value();
			this.$el.find('.upfront-suggest-lists').html(this.get_suggest_list_html());
			if ( value ){
				this.$el.find('.upfront-suggest-add-wrap').show()
				this.$el.find('.upfront-suggest-add-value').text(value);
				this.$el.find('.upfront-suggest-add').toggle( !(_.contains(this.suggest_list, value)) );
			}
			else {
				this.$el.find('.upfront-suggest-add-wrap').hide();
			}
		},
		get_field_html: function () {
			var attr = {
				'type': 'text',
				'class': 'upfront-field upfront-field-text upfront-field-text-suggest',
				'id': this.get_field_id()
			};
			if ( this.options.placeholder ) attr['placeholder'] = this.options.placeholder;
			return '<input ' + this.get_field_attr_html(attr) + ' />';
		},
		get_suggest_list_html: function () {
			var value = this.get_field_input_value();
			var rgx = value ? new RegExp('('+value+')', 'ig') : false;
			var lists = this.get_suggest_list(rgx);
			var me = this;
			return _.map(lists, function(list, index){
				var id = me.get_field_id() + '-' + index;
				var attr = {
					'type': 'checkbox',
					'id': id,
					'name': me.get_field_name(),
					'value': list,
					'class': 'upfront-field-checkbox'
				};
				if ( _.contains(me.checked_list, list) ) attr.checked = 'checked';
				var label = rgx ? list.replace(rgx, '<span class="upfront-suggest-match">$1</span>') : list;
				return '<li class="upfront-suggest-list"><input ' + me.get_field_attr_html(attr) + ' /><label for="' + id + '">' + label +'</label></li>';
			}).join('');
		},
		get_suggest_list: function (rgx) {
			var suggest = [];
			_.each([this.options.source, this.added_list, this.get_saved_value()], function(list, index){
				_.each(list, function(value){
					if ( !( index == 2 && _.contains(suggest, value) ) && ( ( rgx && value.match(rgx) ) || !rgx ) ) {
						suggest.push(value);
					}
				});
			});
			this.suggest_list = suggest;
			return suggest;
		},
		get_field_input_value: function () {
			return this.$el.find('#'+this.get_field_id()).val();
		},
		empty_field_input_value: function () {
			return this.$el.find('#'+this.get_field_id()).val('');
		},
		add_list: function (e) {
			var value = this.get_field_input_value();
			this.added_list.push(value);
			this.checked_list.push(value);
			this.empty_field_input_value();
			this.update_suggest();
		}
	}));


	var SettingsItem = Backbone.View.extend({
		group: true,
		get_name: function () {
			if ( this.fields.length == 1 ) {
				return this.fields[0].get_name();
			} else if ( this.fields.length > 1 ) {
				return this.fields.map(function(field){ return field.get_name(); });
			}
		},
		get_value: function () {
			if ( this.fields.length == 1 ) {
				return this.fields[0].get_value();
			} else if ( this.fields.length > 1 ) {
				return this.fields.map(function(field){ return field.get_value(); });
			}
		},

		get_title: function () {
			return this.options.title ? this.options.title : '';
		},

		initialize: function (opts) {
			var me = this;
			me.options = opts;
			this.fields = opts.fields ? _(opts.fields) : _([]);
			this.group = typeof opts.group != 'undefined' ? opts.group : this.group;
			this.on('panel:set', function(){
				me.fields.each(function(field){
					field.panel = me.panel;
					field.trigger('panel:set');
				});
			});
		},

		render: function () {
			if (this.group) {
				this.$el.append(
					'<div class="upfront-settings-item">' +
						'<div class="upfront-settings-item-title"><span>' + this.get_title() + '</span></div>' +
						'<div class="upfront-settings-item-content"></div>' +
					'</div>'
				);
			} else {
				this.$el.append('<div class="upfront-settings-item-content"></div>');
			}

			var $content = this.$el.find('.upfront-settings-item-content');
			this.fields.each(function(field){
				field.render();
				field.delegateEvents();
				$content.append(field.el);
			});

			this.trigger('rendered');
		},

		save_fields: function () {
			var changed = _([]);
			this.fields.each(function(field, index, list){
				if (field.property) {
					var value = field.get_value() || [];
					var saved_value = field.get_saved_value();
					if ( ! field.multiple && value != saved_value ) {
						changed.push(field);
					} else if ( field.multiple && (value.length != saved_value.length || _.difference(value, saved_value).length != 0) ) {
						changed.push(field);
					}
				}
			});
			changed.each(function(field, index, list){
				if ( field.use_breakpoint_property ) {
					field.model.set_breakpoint_property(field.property_name, field.get_value(), true);
				} else {
					field.property.set({'value': field.get_value()}, {'silent': true});
				}
			});
			if ( changed.size() > 0 ) this.panel.is_changed = true;
		},

		//@TODO remove wrap method below when all elements have changed to use setting fields API
		wrap: function (wrapped) {
			if (!wrapped) return false;
			var title = wrapped.title || '',
				markup = wrapped.markup || wrapped
			;
			this.$el.append(
				'<div id="usetting-' + this.get_name() + '" class="upfront-settings-item">' +
					'<div class="upfront-settings-item-title"><span>' + title + '</span></div>' +
					'<div class="upfront-settings-item-content">' + markup + '</div>' +
				'</div>'
			);
		},

		remove: function(){
			if(this.fields) {
				this.fields.each(function(field){
					field.remove();
				});
			}
			Backbone.View.prototype.remove.call(this);
		}
	});

	var SettingsItemTabbed = Backbone.View.extend(_.extend({}, Upfront_Icon_Mixin, {
		className: 'upfront-settings-item-tab-wrap',
		radio: false,
		is_default: false,
		events: {
			"click .upfront-settings-item-tab": "reveal"
		},
		initialize: function (opts) {
			this.options = opts;
			this.settings = opts.settings ? _(opts.settings) : _([]);
			this.radio = ( typeof opts.radio != 'undefined' ) ? opts.radio : this.radio;
			this.is_default = ( typeof opts.is_default != 'undefined' ) ? opts.is_default : this.is_default;
		},
		get_title: function () {
			return this.options.title ? this.options.title : '';
		},
		get_icon: function () {
			return this.options.icon ? this.options.icon : '';
		},
		get_property: function () {
			return this.options.property ? this.options.property : '';
		},
		get_value: function () {
			return this.options.value ? this.options.value : '';
		},
		get_property_model: function () {
			var property = this.get_property();
			if ( !property ) return false;
			return this.model.get_property_by_name(property);
		},
		get_property_value: function () {
			var property_model = this.get_property_model();
			return property_model ? property_model.get('value') : '';
		},
		render: function () {
			var me = this;
			this.$el.html('');
			this.$el.append('<div class="upfront-settings-item-tab" />');
			this.$el.append('<div class="upfront-settings-item-tab-content" />');
			var $tab = this.$el.find('.upfront-settings-item-tab'),
				$tab_content = this.$el.find('.upfront-settings-item-tab-content');
			if ( this.radio ) {
				var property_model = this.get_property_model();
				if ( ! property_model ) {
					if ( this.is_default ) this.model.init_property(this.get_property(), this.get_value());
				}
				var id = this.cid + '-' + this.get_property();
				var $label = $('<label for="' + id + '" />')
				var checked = ( this.get_property_value() == this.get_value() );
				$label.append(this.get_icon_html(this.get_icon()));
				$label.append('<span class="upfront-settings-item-tab-radio-text">' + this.get_title() + '</span>');
				$tab.append($label);
				$tab.append('<input type="radio" id="' + id + '" class="upfront-field-radio" name="' + this.get_property() + '" value="' + this.get_value() + '" ' + ( checked ? 'checked="checked"' : '' ) +  ' />');
				this.$el.addClass('upfront-settings-item-tab-radio');
			} else {
				$tab.text(this.get_title());
			}
			this.settings.each(function(setting){
				setting.panel = me.panel;
				setting.render();
				$tab_content.append(setting.el);
			});
			//this.panel.on('rendered', this.panel_rendered, this);
			this.listenTo(this.panel, 'rendered', this.panel_rendered);

			this.trigger('rendered');
		},
		conceal: function () {
			this.$el.removeClass('upfront-settings-item-tab-active');
		},
		reveal: function () {
			this.panel.settings.invoke('conceal');
			this.$el.addClass('upfront-settings-item-tab-active');
			if ( this.radio ) {
				this.$el.find('.upfront-settings-item-tab input').prop('checked', true).trigger('change');
			}
		},
		panel_rendered: function () {
			if ( this.radio && (this.get_property_value() == this.get_value()) ) {
				this.reveal();
			}
		},
		save_fields: function () {
			this.settings.invoke('save_fields');
			if ( this.radio && this.$el.find('.upfront-settings-item-tab input:checked').size() > 0 ) {
				var property_model = this.get_property_model();
				if ( property_model ) {
					property_model.set({'value': this.get_value()}, {silent: true});
				} else {
					this.model.init_property(this.get_property(), this.get_value());
				}
				if ( this.get_property_value() != this.get_value() ) {
					this.panel.is_changed = true;
				}
			}
		},
		remove: function(){
			if(this.settings) {
				this.settings.each(function(setting){
					setting.remove();
				});
			}
			Backbone.View.prototype.remove.call(this);
		}
	}));

	var SettingsPanel = Backbone.View.extend(_.extend({}, Upfront_Scroll_Mixin, {
		className: 'upfront-settings_panel_wrap',
		// For Anchor & Styles settings
		hide_common_anchors: false,
		hide_common_fields: false,

		events: {
			"click .upfront-save_settings": "on_save",
			"click .upfront-cancel_settings": "on_cancel",
			"click .upfront-settings_label": "on_toggle",
    		"click .upfront-settings-common_panel .upfront-settings-item-title": "on_toggle_common",
    		"click .upfront-settings-padding_panel .upfront-settings-item-title": "on_toggle_padding"
		},

		get_title: function () {
			return this.options.title ? this.options.title : '';
		},

		get_label: function () {
			return this.options.label ? this.options.label : '';
		},

		initialize: function (options) {
			var me = this;
			this.hide_common_fields = _.isUndefined(options.hide_common_fields) ? false : options.hide_common_fields;
			this.hide_common_anchors = _.isUndefined(options.hide_common_anchors) ? false : options.hide_common_anchors;
			me.options = options;
			this.settings = options.settings ? _(options.settings) : _([]);
			this.settings.each(function(setting){
				setting.panel = me;
				setting.trigger('panel:set');
			});
			this.tabbed = ( typeof options.tabbed != 'undefined' ) ? options.tabbed : this.tabbed;
		},

		tabbed: false,
		is_changed: false,

		render: function () {
			this.$el.html('<div class="upfront-settings_label" /><div class="upfront-settings_panel" ><div class="upfront-settings_panel_scroll" />');

			var $label = this.$el.find(".upfront-settings_label"),
				$panel = this.$el.find(".upfront-settings_panel"),
				$panel_scroll = this.$el.find(".upfront-settings_panel_scroll"),
				$common_panel,
				me = this
			;

			$label.append(this.get_label());
			this.settings.each(function (setting) {
				if ( ! setting.panel ) {
					setting.panel = me;
				}
				setting.render();
				$panel_scroll.append(setting.el)
			});
			if ( this.options.min_height ) {
				$panel_scroll.css('min-height', this.options.min_height);
			}
			if ( this.tabbed ) {
				var first_tab = this.settings.first();
				if ( !first_tab.radio ) {
					first_tab.reveal();
				}
				$panel_scroll.append('<div class="upfront-settings-tab-height" />');
			}
			this.stop_scroll_propagation($panel_scroll);
			// Add common fields
			if (this.hide_common_fields === false) {
				this.$el.find('.upfront-settings_panel_scroll').after('<div class="upfront-settings-common_panel"></div>');
				$common_panel = this.$el.find(".upfront-settings-common_panel");
				// Let's disable CSS settings panel as this is not used anymore
				/*if (typeof this.cssEditor == 'undefined' || this.cssEditor) {
					// Adding CSS item
					var css_settings = new _Settings_CSS({
						model: this.model,
						title: (false === this.hide_common_anchors ? l10n.css_and_anchor : l10n.css_styles)
					});
					css_settings.panel = me;
					css_settings.render();
					$common_panel.append(css_settings.el);
				}*/
				// Adding anchor trigger
				//todo should add this check again// if (this.options.anchor && this.options.anchor.is_target) {

				if (this.hide_common_anchors === false) {
					var anchor_settings = new _Settings_AnchorSetting({
						model: this.model,
						title: l10n.anchor_settings
					});
					anchor_settings.panel = me;
					anchor_settings.render();
					$common_panel.append(anchor_settings.el);
				}

				// this.listenTo(anchor_settings, "anchor:item:updated", function () {
					// this.toggle_panel(first); //todo don't know what this was for should investigate
				// });
			}
			// Padding panel
			this.$el.find('.upfront-settings_panel_scroll').after('<div class="upfront-settings-padding_panel"></div>');
			$padding_panel = this.$el.find(".upfront-settings-padding_panel");
			if(typeof this.paddingEditor == 'undefined' || this.paddingEditor){
				// Adding Padding item
				this.paddingEditor = new _Settings_Padding({
					model: this.model,
					title: l10n.padding_settings
				});
				this.paddingEditor.panel = me;
				this.paddingEditor.render();
				$padding_panel.append(this.paddingEditor.el);
			}
			// Save button
			$panel.append(
				"<div class='upfront-settings-button_panel'>" +
					"<button type='button' class='upfront-save_settings'><i class='icon-ok'></i> " + l10n.ok + "</button>" +
				'</div>'
			);

			this.$el.fadeIn('fast', function() {
				// Scroll the window if settings box clips vertically
				var parent = me.$el.parent();
				var elementbottom = (parent.offset() ? parent.offset().top : 0) + parent.height();
				var winheight = jQuery(window).height();

				if( (elementbottom +60) > (winheight+jQuery('body').scrollTop())) {
					jQuery('body').animate({scrollTop:(elementbottom - winheight + 60)}, 'slow');
				}

			});
			this.trigger('rendered');
		},

		on_toggle_common: function () {
			var me = this;
			var panel = this.$el.find('.upfront-settings-common_panel');
			panel.toggleClass('open');
			/*if(panel.is('.open')) {
				this.$el.find('.upfront-settings-common_panel .upfront-settings-item-title span').first().html(l10n.element_css_styles);
			} else {
				this.$el.find('.upfront-settings-common_panel .upfront-settings-item-title span').first().html(
					(false === me.hide_common_anchors ? l10n.css_and_anchor : l10n.css_styles)
				);
			}*/
		},

		on_toggle_padding: function () {
			var me = this;
			var panel = this.$el.find('.upfront-settings-padding_panel');
			panel.toggleClass('open');
		},

		conceal: function () {
			this.$el.find(".upfront-settings_panel").hide();
			this.$el.find(".upfront-settings_label").removeClass("active");
			//this.$el.find(".upfront-settings_label").show();
			this.trigger('concealed');
		},

		reveal: function () {
			this.$el.find(".upfront-settings_label").addClass("active");
			//this.$el.find(".upfront-settings_label").hide();
			this.$el.find(".upfront-settings_panel").show();
			if ( this.tabbed ) {
				var tab_height = 0;
				this.$el.find('.upfront-settings-item-tab-content').each(function(){
					var h = $(this).outerHeight(true);
					tab_height = h > tab_height ? h : tab_height;
				});
				this.$el.find('.upfront-settings-tab-height').css('height', tab_height);
			}
			this.trigger('revealed');
		},

		show: function () {
			this.$el.show();
		},

		hide: function () {
			this.$el.hide();
		},

		is_active: function () {
			return this.$el.find(".upfront-settings_panel").is(":visible");
		},

		on_toggle: function () {
			this.trigger("upfront:settings:panel:toggle", this);
			this.show();
		},
		//@Furqan and this for Loading for pnaels
		start_loading: function (loading_message, loading_complete_message) {
			this.loading = new Upfront.Views.Editor.Loading({
				loading: loading_message,
				done: loading_complete_message
			});
			this.loading.render();
			this.$el.find(".upfront-settings_panel").append(this.loading.$el);
		},
		end_loading: function (callback) {
			if ( this.loading ) {
				this.loading.done(callback);
			} else {
				callback();
			}
		},
		//end
		on_save: function () {
			var any_panel_changed = false;
			this.parent_view.panels.each(function(panel){
				panel.save_settings();
				if ( panel.is_changed ) {
					any_panel_changed = true;
					panel.is_changed = false;
				}
			});
			if ( any_panel_changed ) {
				this.parent_view.model.get("properties").trigger('change');
			}
			this.trigger("upfront:settings:panel:saved", this);
			Upfront.Events.trigger("entity:settings:deactivate");
		},
		save_settings: function () {
			if (!this.settings) return false;

			var me = this;
			this.settings.each(function (setting) {
				if ( (setting.fields || setting.settings).size() > 0 ) {
					setting.save_fields();
				} else {
					var value = me.model.get_property_value_by_name(setting.get_name());
					if ( value != setting.get_value() ) {
						me.model.set_property(
							setting.get_name(),
							setting.get_value()
						);
					}
				}
			});
			Upfront.Events.trigger("entity:settings:saved");
		},

		on_cancel: function () {
			this.trigger("upfront:settings:panel:close", this);
		},
		remove: function(){
			if (this.settings) {
				this.settings.each(function(setting){
					setting.remove();
				});
			}
			this.$el.off();
			Backbone.View.prototype.remove.call(this);
		}

	}));

	var Settings = Backbone.View.extend({
   	has_tabs: true,

		initialize: function(opts) {
			this.options = opts;
			this.panels = _([]);
		},
		get_title: function () {
			return l10n.settings;
		},

		render: function () {
			var me = this,
				$view = me.for_view.$el.hasClass('upfront-editable_entity') ? me.for_view.$el : me.for_view.$el.find(".upfront-editable_entity:first"),
				view_pos = $view.offset(),
				view_outer_width = $view.outerWidth(),
				view_pos_right = view_pos.left + view_outer_width,
				$button = ($view.hasClass('upfront-object') ? $view.closest('.upfront-module') : $view).find("> .upfront-element-controls .upfront-icon-region-settings"),
				button_pos = $button.offset(),
				button_pos_right = button_pos.left + $button.outerWidth(),
				$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
				main_pos = $main.offset(),
				main_pos_right = main_pos.left + $main.outerWidth()
			;
			me.$el
				.empty()
				.show()
				.html(
					'<div class="upfront-settings_title">' + this.get_title() + '</div>'
				)
			;

			/*
			 * This event is broadcast so that other plugins can register their
			 * own Upfront element for the CSS Editor before the settings panel
			 * is displayed.
			 *
			 * Example:
			 * Upfront.Events.on( 'settings:prepare', function() {
			 *   args = {label: 'My Element', id: 'my_element'};
			 *   Upfront.Application.cssEditor.elementTypes['ElementModel'] = args;
			 * });
			 */
			Upfront.Events.trigger("settings:prepare");

			me.panels.each(function (panel) {
				panel.render();

				me.listenTo(panel, "upfront:settings:panel:toggle", me.toggle_panel);
				me.listenTo(panel, "upfront:settings:panel:close", me.close_panel);
				me.listenTo(panel, "upfront:settings:panel:refresh", me.refresh_panel);

				panel.parent_view = me;
				me.$el.append(panel.el);
			});

			this.toggle_panel(this.panels.first());

			var label_width = this.panels.first().$el.find('.upfront-settings_label').outerWidth(),
				panel_width = this.panels.first().$el.find('.upfront-settings_panel').outerWidth();

			// This will remove tabs from left side if element settings have specified so.
			// Default is to show tabs.
			if (!this.has_tabs) {
				label_width = 0;
				this.$el.addClass('settings-no-tabs');
			}

			this.$el
				.css({
					"position": "absolute",
					"z-index": 10000000
				})
				.offset({
					"top": view_pos.top /*+ $view.height() + 16*/,
					"left": view_pos.left + view_outer_width - ((view_pos_right+label_width+panel_width > main_pos_right) ? label_width+panel_width+(view_pos_right-button_pos.left)+5 : 0)
				})
				.addClass('upfront-ui')
			;

			this.trigger('open');
		},

		set_title: function (title) {
			if (!title || !title.length) return false;
			this.$el.find(".upfront-settings_title").html(title);
		},
		toggle_panel: function (panel) {
			this.panels.invoke("conceal");
			panel.$el.find(".upfront-settings_panel").css('height', '');
			panel.show();
			panel.reveal();
			this.set_title(panel.get_title());
			var min_height = 0;
			this.panels.each(function(p){
				min_height += p.$el.find(".upfront-settings_label").outerHeight();
			});
			var panel_height = panel.$el.find(".upfront-settings_panel").outerHeight() - 1;
			if ( panel_height >= min_height ) {
				this.$el.css('height', panel_height);
			} else {
				panel.$el.find(".upfront-settings_panel").css('height', min_height);
				this.$el.css('height', min_height);
			}
		},

		refresh_panel: function (panel) {
			if (panel.is_active()) this.toggle_panel(panel);
		},

		close_panel: function (panel) {
			this.panels.invoke("conceal");
			this.panels.invoke("show");
			this.set_title(this.get_title());
		},
		remove: function(){
			if (this.panels) {
				this.panels.each(function(panel){
					panel.remove();
				});
			}
			Backbone.View.prototype.remove.call(this);
		}
	});


var _Settings_Padding = SettingsItem.extend({
	className: 'upfront-settings-padding',
	initialize: function(options) {
		var column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding,
			is_group = this.model instanceof Upfront.Models.ModuleGroup,
			top_padding_use = new Field_Checkboxes({
				model: this.model,
				use_breakpoint_property: true,
				property: 'top_padding_use',
				label: '',
				multiple: false,
				values: [{ label: l10n.top_padding, value: 'yes' }],
				default_value: this.model.get_breakpoint_property_value('top_padding_use') || false,
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('top_padding_use', value ? value : 0);
				},
				show: function (value, $el) {
					if(value === 'yes') {
						$(top_padding_slider.$el).css('display', 'inline-block');
						$(top_padding_num.$el).css('display', 'inline-block');
					}
					else {
						$(top_padding_slider.$el).hide();
						$(top_padding_num.$el).hide();
					}
				}
			}),
			top_padding_slider = new Field_Slider({
				model: this.model,
				use_breakpoint_property: true,
				property: 'top_padding_slider',
				label: '',
				default_value: this.model.get_breakpoint_property_value('top_padding_slider') || column_padding,
				min: 0,
				max: 200,
				step: 5,
				valueTextFilter: function () {return '';},
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('top_padding_slider', value);
					top_padding_num.get_field().val(value);
					this.model.set_breakpoint_property('top_padding_num', value, true);
				}
			}),
			top_padding_num = new Field_Number({
				model: this.model,
				use_breakpoint_property: true,
				property: 'top_padding_num',
				label: '',
				default_value: this.model.get_breakpoint_property_value('top_padding_num') || column_padding,
				suffix: 'px',
				min: 0,
				step: 5,
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('top_padding_num', value);
					this.model.set_breakpoint_property('top_padding_slider', value, true);
					top_padding_slider.$el.find('#'+top_padding_slider.get_field_id()).slider('value', value);
				}
			}),
			bottom_padding_use = new Field_Checkboxes({
				model: this.model,
				use_breakpoint_property: true,
				property: 'bottom_padding_use',
				label: '',
				multiple: false,
				values: [{ label: l10n.bottom_padding, value: 'yes' }],
				default_value: this.model.get_breakpoint_property_value('bottom_padding_use') || false,
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('bottom_padding_use', value ? value : 0);
				},
				show: function (value, $el) {
					if(value === 'yes') {
						$(bottom_padding_slider.$el).css('display', 'inline-block');
						$(bottom_padding_num.$el).css('display', 'inline-block');
					}
					else {
						$(bottom_padding_slider.$el).hide();
						$(bottom_padding_num.$el).hide();
					}
				}
			}),
			bottom_padding_slider = new Field_Slider({
				model: this.model,
				use_breakpoint_property: true,
				property: 'bottom_padding_slider',
				label: '',
				default_value: this.model.get_breakpoint_property_value('bottom_padding_slider') || column_padding,
				min: 0,
				max: 200,
				step: 5,
				valueTextFilter: function () {return '';},
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('bottom_padding_slider', value);
					bottom_padding_num.get_field().val(value);
					this.model.set_breakpoint_property('bottom_padding_num', value, true);
				}
			}),
			bottom_padding_num = new Field_Number({
				model: this.model,
				use_breakpoint_property: true,
				property: 'bottom_padding_num',
				label: '',
				default_value: this.model.get_breakpoint_property_value('bottom_padding_num') || column_padding,
				suffix: 'px',
				min: 0,
				step: 5,
				change: function () {
					var value = this.get_value();

					this.model.set_breakpoint_property('bottom_padding_num', value);
					this.model.set_breakpoint_property('bottom_padding_slider', value, true);
					bottom_padding_slider.$el.find('#'+bottom_padding_slider.get_field_id()).slider('value', value);
				}
			})
		;
		if ( !is_group ) {
			var	left_padding_use = new Field_Checkboxes({
					model: this.model,
					use_breakpoint_property: true,
					property: 'left_padding_use',
					label: '',
					multiple: false,
					values: [{ label: l10n.left_padding, value: 'yes' }],
					default_value: this.model.get_breakpoint_property_value('left_padding_use') || false,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('left_padding_use', value ? value : 0);
					},
					show: function (value, $el) {
						if(value === 'yes') {
							$(left_padding_slider.$el).css('display', 'inline-block');
							$(left_padding_num.$el).css('display', 'inline-block');
						}
						else {
							$(left_padding_slider.$el).hide();
							$(left_padding_num.$el).hide();
						}
					}
				}),
				left_padding_slider = new Field_Slider({
					model: this.model,
					use_breakpoint_property: true,
					property: 'left_padding_slider',
					label: '',
					default_value: this.model.get_breakpoint_property_value('left_padding_slider') || column_padding,
					min: 0,
					max: 200,
					step: 5,
					valueTextFilter: function () {return '';},
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('left_padding_slider', value);
						left_padding_num.get_field().val(value);
						this.model.set_breakpoint_property('left_padding_num', value, true);
					}
				}),
				left_padding_num = new Field_Number({
					model: this.model,
					use_breakpoint_property: true,
					property: 'left_padding_num',
					label: '',
					default_value: this.model.get_breakpoint_property_value('left_padding_num') || column_padding,
					suffix: 'px',
					min: 0,
					step: 5,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('left_padding_num', value);
						this.model.set_breakpoint_property('left_padding_slider', value, true);
						left_padding_slider.$el.find('#'+left_padding_slider.get_field_id()).slider('value', value);
					}
				}),
				right_padding_use = new Field_Checkboxes({
					model: this.model,
					use_breakpoint_property: true,
					property: 'right_padding_use',
					label: '',
					multiple: false,
					values: [{ label: l10n.right_padding, value: 'yes' }],
					default_value: this.model.get_breakpoint_property_value('right_padding_use') || false,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('right_padding_use', value ? value : 0);
					},
					show: function (value, $el) {
						if(value === 'yes') {
							$(right_padding_slider.$el).css('display', 'inline-block');
							$(right_padding_num.$el).css('display', 'inline-block');
						}
						else {
							$(right_padding_slider.$el).hide();
							$(right_padding_num.$el).hide();
						}
					}
				}),
				right_padding_slider = new Field_Slider({
					model: this.model,
					use_breakpoint_property: true,
					property: 'right_padding_slider',
					label: '',
					default_value: this.model.get_breakpoint_property_value('right_padding_slider') || column_padding,
					min: 0,
					max: 200,
					step: 5,
					valueTextFilter: function () {return '';},
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('right_padding_slider', value);
						right_padding_num.get_field().val(value);
						this.model.set_breakpoint_property('right_padding_num', value, true);
					}
				}),
				right_padding_num = new Field_Number({
					model: this.model,
					use_breakpoint_property: true,
					property: 'right_padding_num',
					label: '',
					default_value: this.model.get_breakpoint_property_value('right_padding_num') || column_padding,
					suffix: 'px',
					min: 0,
					step: 5,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('right_padding_num', value);
						this.model.set_breakpoint_property('right_padding_slider', value, true);
						right_padding_slider.$el.find('#'+right_padding_slider.get_field_id()).slider('value', value);
					}
				})
			;
		}

		SettingsItem.prototype.initialize.call(this, options);

		if ( !is_group ){
			this.fields = _([
				top_padding_use,
				top_padding_slider,
				top_padding_num,
				bottom_padding_use,
				bottom_padding_slider,
				bottom_padding_num,
				left_padding_use,
				left_padding_slider,
				left_padding_num,
				right_padding_use,
				right_padding_slider,
				right_padding_num
			]);
		}
		else {
			this.fields = _([
				top_padding_use,
				top_padding_slider,
				top_padding_num,
				bottom_padding_use,
				bottom_padding_slider,
				bottom_padding_num
			]);
		}
	}
});

var _Settings_CSS = SettingsItem.extend({
	className: 'upfront-settings-css',
	events: {
		'click .upfront-css-edit': 'openEditor',
	},
	initialize: function(options) {
		SettingsItem.prototype.initialize.call(this, options);
		if (!Upfront.Application.cssEditor) return false;

		var styleType = Upfront.Application.cssEditor.getElementType(this.model),
			values = [{label: l10n.default_str, value: '_default'}];

		if (Upfront.data.styles[styleType.id]) {
			_.each(Upfront.data.styles[styleType.id], function(styleName){
				if (styleName.indexOf('_default') > -1) return;
				values.push({label: styleName, value: styleName});
			});
		}

		this.fields = _([
			new Upfront.Views.Editor.Field.Button({
				model: this.model,
				className: 'edit-preset-css-label',
				compact: true,
				label: l10n.edit_css_label,
			}),

			new Upfront.Views.Editor.Field.Button({
				model: this.model,
				className: 'upfront-css-edit',
				compact: true,
				name: 'preset_css',
				label: l10n.edit_css,
			})
		]);
	},

	openEditor: function(e){
		e.preventDefault();

		Upfront.Events.trigger("entity:settings:beforedeactivate");

		Upfront.Application.cssEditor.init({
			model: this.model,
			stylename: '_default' // Let's make sure we have *something* to work with
		});

		Upfront.Events.trigger("entity:settings:deactivate");

		//$('#settings').find('.upfront-save_settings').click();
	},
});

var ButtonPresetModel = Backbone.Model.extend({
	initialize: function(attributes) {
		this.set({ presets: attributes });
	}
});
var ButtonPresetsCollection = Backbone.Collection.extend({
	model: ButtonPresetModel
});

var button_presets_collection = new ButtonPresetsCollection(Upfront.mainData.buttonPresets);

var Button_Presets_Storage = function(stored_presets) {
	var button_presets;

	var initialize = function() {
		// When more than one weights are added at once don't send bunch of server calls
		var save_button_presets_debounced = _.debounce(save_button_presets, 100);
		button_presets_collection.on('add remove edit', save_button_presets_debounced);
	};

	var save_button_presets = function() {
		var postData = {
			action: 'upfront_update_button_presets',
			button_presets: button_presets_collection.toJSON()
		};

		Upfront.Util.post(postData)
			.error(function(){
				return notifier.addMessage(l10n.button_presets_save_fail);
			});
	};

	initialize();
};
var button_presets_storage = new Button_Presets_Storage();

// THEME FONTS START HERE //
var Font_Model = Backbone.Model.extend({}, {
	/*
	 * Parsing variant to get style and weight for font.
	 * @return Object { style: style, weight: weight }
	 */
	parse_variant: function(variant) {
		var parsed_variant;
		// For system fonts there are variants in format "{number} {style}" where {number} is
		// 100-900 with step of 100, and {style} is "normal", "italic" or "oblique"
		//
		// Fog google fonts variants can be in format "regular", "italic", "100" to "900",
		// "100italic" to "900italic".
		//
		// From browser font-weight[s] we'll use: 100 to 900, normal.
		// From browser font-style we'll use: italic, normal, oblique.
		//
		// Regular variant means that both font-weight and font-style are normal or not set.
		// Always set both style and weight to make everything easier.
		// Always use numbers for weight to make everything easier.
		if (variant === 'inherit') {
			return {
				weight: 'inherit',
				style: 'inherit'
			};
		}

		// Cover both '100italic' and '100 italic'
		if (!_.isUndefined( variant ) && variant.match(/^(\d+) *(normal|italic|oblique)$/)) {
			parsed_variant =  variant.match(/^(\d+) *(normal|italic|oblique)/);
			return {
				weight: parsed_variant[1],
				style: parsed_variant[2]
			};
		}

		if (variant === 'italic') {
			return {
				weight: '400',
				style: 'italic'
			};
		}

		// Cover 100, 200, 500 etc styles
		if ( !_.isUndefined( variant ) && variant.match(/^\d+$/)) {
			return {
				weight: variant,
				style: 'normal'
			};
		}

		// Default return value, also covers "regular" variant
		return {
			weight: '400',
			style: 'normal'
		};
	},
	/*
	 * Constructs variant from weight and style.
	 *
	 * Variant should always be displayed as:
	 * "{weight} {style}"
	 * where weight is {number} from 100 to 900 step 100 and {style} is
	 * "normal", "italic" or "oblique".
	 * Unless:
	 * 1. weight is 400(normal) and style is "normal" than variant is "regular".
	 * 2. weight is 400(normal) and style is "italic" than variant is "italic",
	 *
	 * @return String variant
	 */
	get_variant: function(weight, style) {
		if (weight === 'inherit' || style === 'inherit') {
			return 'inherit';
		}

		weight = this.normalize_weight(weight);
		if (style === '') style = 'normal';

		if (weight === '400' && style === 'normal') return 'regular';
		if (weight === '400' && style === 'italic') return 'italic';

		return weight + ' ' + style;
	},
	/*
	 * @see get_variant()
	 */
	normalize_variant: function(variant) {
		var parsed_variant = this.parse_variant(variant);
		return this.get_variant(parsed_variant.weight, parsed_variant.style);
	},
	/*
	 * Convert weight to number for comparison.
	 */
	normalize_weight: function (weight) {
		if ( weight == 'normal' || weight == '' ) return 400;
		if ( weight == 'lighter' ) return 100; // either 100-300 depend to the available weight
		if ( weight == 'bold' ) return 700;
		if ( weight == 'bolder' ) return 900; // either 800-900 depend to the available weight
		return weight;
	},
	get_default_variant: function(family) {
		return 'inherit';
	}
});

var Fonts_Collection = Backbone.Collection.extend({
	model: Font_Model
});

/**
 * Takes care about Google fonts.
 */
var Google_Fonts_Storage = function() {
	var fonts = false;

	/*
	 * Returns deferred that resolves to fonts collection containing all Google fonts.
	 */
	this.get_fonts = function() {
		if (fonts) return fonts;

		var request = Upfront.Util.post({action: "upfront_list_google_fonts"});

		// We're gonna pipe response since we need to convert it to fonts collection first.
		request = request.pipe(
			function(response) {
				fonts = new Fonts_Collection(response.data);
				// Return collection instead original response
				return fonts;
			}
		);

		return request;
	};
};

var google_fonts_storage = new Google_Fonts_Storage();

var System_Fonts_Storage = function() {
	var font_families = [
		{ family: "Andale Mono", category:'monospace' },
		{ family: "Arial", category:'sans-serif' },
		{ family: "Arial Black", category:'sans-serif' },
		{ family: "Courier New", category:'monospace' },
		{ family: "Georgia", category:'serif' },
		{ family: "Impact", category:'sans-serif' },
		{ family: "Times New Roman", category:'serif' },
		{ family: "Trebuchet MS", category:'sans-serif' },
		{ family: "Verdana", category:'sans-serif' }
	];

	var system_fonts = new Fonts_Collection();

	var initialize = function() {
		var variants;

		// Default variants for system fonts
		variants = ['Inherit', '400', '400 italic', '700', '700 italic'];

		// Add variants
		_.each(font_families, function(font_family) {
				font_family.variants = variants;
				system_fonts.add(font_family);
		});
	};

	this.get_fonts = function() {
		return system_fonts;
	}

	initialize();
}

var system_fonts_storage = new System_Fonts_Storage();

var ButtonPresetModel = Backbone.Model.extend();
var ButtonPresetsCollection = Backbone.Collection.extend({
	model: ButtonPresetModel
});

var button_presets_collection = new ButtonPresetsCollection(Upfront.mainData.buttonPresets);

var Button_Presets_Storage = function(stored_presets) {
	var button_presets;

	var initialize = function() {
		// When more than one weights are added at once don't send bunch of server calls
		var save_button_presets_debounced = _.debounce(save_button_presets, 100);
		button_presets_collection.on('add remove edit', save_button_presets_debounced);
	};

	var save_button_presets = function() {
		var postData = {
			action: 'upfront_update_button_presets',
			button_presets: button_presets_collection.toJSON()
		};

		Upfront.Util.post(postData)
			.error(function(){
				return notifier.addMessage(l10n.button_presets_save_fail);
			});
	};

	initialize();
};
var button_presets_storage = new Button_Presets_Storage();

var ThemeFontModel = Backbone.Model.extend({
	initialize: function(attributes) {
		this.set({ displayVariant: Font_Model.normalize_variant(attributes.variant) }, { silent: true });
	}
});

var ThemeFontsCollection = Backbone.Collection.extend({
	model: ThemeFontModel,
	get_fonts_for_select: function() {
		var typefaces_list = [{ label: l10n.choose_font, value:'' }],
			google_fonts = [];


		_.each(theme_fonts_collection.models, function(theme_font) {
			google_fonts.push(theme_font.get('font').family);
		});
		_.each(_.uniq(google_fonts), function(google_font) {
			typefaces_list.push({label: google_font, value: google_font});
		});
		_.each(Upfront.mainData.additionalFonts, function(font) {
			typefaces_list.push({label: font.family, value: font.family});
		});
		_.each(system_fonts_storage.get_fonts().models, function(font)	{
			typefaces_list.push({ label: font.get('family'), value: font.get('family') });
		});

		return typefaces_list;
	},

	get_variants: function(font_family) {
		var variants;

		_.each(system_fonts_storage.get_fonts().models, function(font) {
			if (font_family === font.get('family')) {
				variants = font.get('variants');
			}
		});
		if (variants) {
			return variants;
		}

		_.each(Upfront.mainData.additionalFonts, function(font) {
			if (font_family === font.family) {
				variants = ['inherit'].concat(font.variants);
			}
		});

		if (variants) {
			return variants;
		}

		variants = [];
		_.each(theme_fonts_collection.models, function(theme_font) {
			if (font_family === theme_font.get('font').family) {
				variants.push(theme_font.get('displayVariant'));
			}
		});

		variants.unshift('inherit');
		return variants;
	},

	get_variants_for_select: function(font_family) {
		var variants;
		var typefaces_list = [];

		_.each(system_fonts_storage.get_fonts().models, function(font) {
			if (font_family === font.get('family')) {
				_.each(font.get('variants'), function(font_style) {
					typefaces_list.push({ label: font_style, value: font_style });
				});
			}
		});

		_.each(Upfront.mainData.additionalFonts, function(font) {
			if (font_family === font.family) {
				_.each(font.variants, function(font_style) {
					typefaces_list.push({ label: font_style, value: font_style });
				});
			}
		});

		_.each(theme_fonts_collection.models, function(theme_font) {
			if (font_family === theme_font.get('font').family) {
				var font_style = theme_font.get('displayVariant');
				typefaces_list.push({ label: font_style, value: font_style });
			}
		});

		return typefaces_list;
	},


	get_additional_font: function(font_family) {
		var font = _.findWhere(Upfront.mainData.additionalFonts, {family: font_family});
		if (font) return new Backbone.Model(font);
		return;
	}
});

var theme_fonts_collection = new ThemeFontsCollection(Upfront.mainData.themeFonts);

var IconFont = Backbone.Model.extend({
	getUploadStatus: function() {
		if (_.keys(this.get('files')).length === 4) {
			return true;
		}
		var text = 'Please upload:';
		_.each(['eot', 'woff', 'svg', 'ttf'], function(type) {
			if (_.isUndefined(this.get('files')[type])) {
				text += ' ' + type + ',';
			}
		}, this);
		return text.substring(0, text.length - 1) + ' file(s).';
	}
});
var IconFontCollection = Backbone.Collection.extend({
	model: IconFont
});
var icon_fonts_collection = new IconFontCollection(Upfront.mainData.iconFonts);

var Theme_Fonts_Storage = function(stored_fonts) {
	var theme_fonts;

	var initialize = function() {
		// When more than one weights are added at once don't send bunch of server calls
		var save_theme_fonts_debounced = _.debounce(save_theme_fonts, 100);
		theme_fonts_collection.on('add remove', save_theme_fonts_debounced);
	};

	var save_theme_fonts = function() {
		var postData = {
			action: 'upfront_update_theme_fonts',
			theme_fonts: theme_fonts_collection.toJSON()
		};

		Upfront.Util.post(postData)
			.error(function(){
				return notifier.addMessage(l10n.theme_fonts_save_fail);
			});
	};

	initialize();
};

var theme_fonts_storage = new Theme_Fonts_Storage();

var ThemeFontListItem = Backbone.View.extend({
	className: 'theme-font-list-item',
	events: {
		'click': 'on_click',
		'click .delete': 'on_delete'
	},
	template: $(_Upfront_Templates.popup).find('#theme-font-list-item').html(),
	render: function() {
		this.$el.html(_.template(this.template, {
			family: this.model.get('font').family,
			variant: this.model.get('displayVariant')
		}));

		return this;
	},
	on_click: function() {
		this.$el.siblings().removeClass('theme-font-list-item-selected');
		this.$el.addClass('theme-font-list-item-selected');

		this.trigger('selected', this.model.toJSON());
	},
	on_delete: function() {
		theme_fonts_collection.remove(this.model);
		this.remove();
	}
});

var ThemeFontsPanel = Backbone.View.extend({
	className: 'theme-fonts-panel panel',
	template: _.template($(_Upfront_Templates.popup).find('#theme-fonts-panel').html()),
	initialize: function(options) {
		this.options = options || {};
		this.listenTo(this.collection, 'add remove', this.update_stats);
		this.listenTo(this.collection, 'add remove', this.render);
	},
	render: function() {
		this.$el.html('');
		this.$el.html(this.template({show_no_styles_notice: this.collection.length === 0}));

		if (this.collection.length > 0) this.$el.find('.font-list').css('background', 'white');

		_.each(this.collection.models, function(model) {
			this.add_one(model);
		}, this);

		this.update_stats();

		return this;
	},
	update_stats: function() {
		var msg = l10n.font_styles_selected.replace(/%d/, this.collection.length);
		this.$el.find('.font-stats').html('<strong>' + msg + '</strong>');
	},
	add_one: function(model) {
		var themeFontView = new ThemeFontListItem({ model: model });
		this.options.parent_view.listenTo(themeFontView, 'selected', this.options.parent_view.replaceFont);
		this.$el.find('.font-list').append(themeFontView.render().el);
	}
});

var Variant_View = Backbone.View.extend({
	initialize: function(options){
		this.options = options || {};
	},
	className: function() {
		var className = 'font-variant-preview';
		if (this.model.get('already_added')) {
			className += ' font-variant-already-added';
		}
		return className;
	},
	template: _.template('<span class="font-family">{{family}} â€” {{name}}</span>{[ if(already_added) { ]} <span class="already-added">' + l10n.already_added + '</span>{[ } ]}' +
			'{[ if(heading_preview) { ]}<h1 style="font-family: {{family}}; font-weight: {{weight}}; font-style: {{style}};" class="heading-font-preview font-preview">' + l10n.header_preview_quote + '</h1>{[ } else { ]}' +
			'<p style="font-family: {{family}}; font-weight: {{weight}}; font-style: {{style}};" class="paragraph-font-preview font-preview">' + l10n.body_preview_quote + '</p>{[ } ]}'),
	events: {
		'click': 'on_click'
	},
	render: function() {
		this.$el.html(this.template(_.extend({heading_preview: this.options.heading_preview}, this.model.toJSON())));
		return this;
	},
	on_click: function() {
		if (this.model.get('already_added')) return;
		this.model.set({selected: !this.model.get('selected')});
		this.$el.toggleClass('font-variant-selected');
	}
});

var Font_Variants_Preview = Backbone.View.extend({
	id: 'font-variants-preview',
	initialize: function(options) {
		this.options = options || {};
	},
	addOne: function(model) {
		var variant_view = new Variant_View({model: model, heading_preview: this.options.heading_preview});
		this.$el.append(variant_view.render().el);
	},
	render: function() {
		_.each(this.collection.models, function(model) {
			this.addOne(model);
		}, this);

		return this;
	},
	get_selected: function() {
		var selected = [];
		_.each(this.collection.models, function(model) {
			if (model.get('selected')) selected.push(model.get('variant'));
		});
		return selected;
	}
});

var Icon_Fonts_Manager = Backbone.View.extend({
	id: 'icon-fonts-manager',
	className: 'clearfix',
	template: _.template($(_Upfront_Templates.popup).find('#icon-fonts-manager-tpl').html()),

	events: {
		'click .upload-icon-font': 'triggerFileChooser',
		'click .icon-font-upload-status': 'triggerFileChooser',
		'click .icon-fonts-list-item': 'makeFontActive'
	},

	triggerFileChooser: function() {
		this.$el.find('#upfront-icon-font-input').click();
	},

	render: function() {
		this.$el.html(this.template({
			url: Upfront.mainData.ajax,
			show_no_fonts_notice: false,
			fonts: this.collection.models
		}));

		if (_.isUndefined(this.collection.findWhere({active: true}))) {
			this.$el.find('[data-family="icomoon"]').addClass('icon-fonts-list-item-active');
		}

		if (!this.fileUploadInitialized) {
			this.fileUploadInitialized = true;
			this.initializeFileUpload();
		}

		return this;
	},

	initializeFileUpload: function() {
		if (!jQuery.fn.fileupload) return false; // No file upload, carry on

		var me = this;
		this.$el.find('#upfront-upload-icon-font').fileupload({
			dataType: 'json',
			done: function (e, data) {
				var font = data.result.data.font;
				var fontObject;

				if (_.keys(font.files).length === 1) {
					me.$el.find('.icon-fonts-list').append('<div data-family="' + font.family + '" class="icon-fonts-list-item">' + font.name + '</div>');
					me.collection.add(font);
				} else {
					fontObject = me.collection.findWhere({'family': font.family});
					fontObject.set({files: font.files});
					if (fontObject.get('active') === true) {
						me.updateActiveFontStyle(font.family);
					}
				}

				fontObject = me.collection.findWhere({'family': font.family});
				var listItem = me.$el.find('[data-family=' + font.family + ']');
				listItem.find('.icon-font-upload-status').remove();
				if (fontObject.getUploadStatus() !== true) {
					listItem.append('<span class="icon-font-upload-status" title="' + fontObject.getUploadStatus() + '">*</span>');
				}
			}
		});
	},

	makeFontActive: function(event) {
		var fontItem = $(event.currentTarget);
		fontItem.siblings().removeClass('icon-fonts-list-item-active');
		fontItem.addClass('icon-fonts-list-item-active');

		var postData = {
			action: 'upfront_update_active_icon_font',
			family: fontItem.data('family')
		};


		Upfront.Util.post(postData)
			.error(function(){
				return notifier.addMessage('Could not update active icon font');
			});

		$('#active-icon-font').remove();
		_.each(this.collection.models, function(model) {
			model.set({'active': false});
		});

		if (fontItem.data('family') === 'icomoon') {
			return; // this is default font, no need to add style for it
		}

		this.collection.findWhere({family: fontItem.data('family')}).set({active: true});
		this.updateActiveFontStyle(fontItem.data('family'));
	},

	updateActiveFontStyle: function(family) {
		var font = this.collection.findWhere({family: family});
		var longSrc = '';
		_.each(font.get('files'), function(file, type) {
			longSrc += "url('" + Upfront.mainData.currentThemeUrl + '/icon-fonts/' + file + "') format('";
			switch(type) {
				case 'eot':
					longSrc += 'embedded-opentype';
					break;
				case 'woff':
					longSrc += 'woff';
					break;
				case 'ttf':
					longSrc += 'truetype';
					break;
				case 'svg':
					longSrc += 'svg';
					break;
			}
			longSrc += "'),";
		});
		var icon_font_style = "@font-face {" +
			"	font-family: '" + font.get('family') + "';";
		if (font.get('files').eot) {
			icon_font_style += "src: url('" + Upfront.mainData.currentThemeUrl + '/icon-fonts/' + font.get('files').eot + "');";
		}
		icon_font_style += "	src:" + longSrc.substring(0, longSrc.length - 1) + ';';

		icon_font_style +=
			"	font-weight: normal;" +
			"	font-style: normal;" +
			"}" +
			".uf_font_icon, .uf_font_icon * {" +
			"	font-family: '" + font.get('family') + "'!important;" +
			"}";

		$('body').append('<style id="active-icon-font">' + icon_font_style + '</style>');
	}
});

var Text_Fonts_Manager = Backbone.View.extend({
	id: 'text-fonts-manager',
	className: 'clearfix',
	template: _.template($(_Upfront_Templates.popup).find('#text-fonts-manager-tpl').html()),
	events: {
		'click .add-font-button': 'add_font',
		'click .preview-size-p': 'on_p_click',
		'click .preview-size-h1': 'on_h1_click'
	},
	initialize: function() {
		this.theme_fonts_panel = new ThemeFontsPanel({
			collection: this.collection,
			parent_view: this
		});
		this.listenTo(this.collection, 'remove', this.update_variants_on_remove);
	},
	render: function() {
		var me = this;

		this.$el.html(this.template({show_no_styles_notice: this.collection.length === 0}));
		$.when(google_fonts_storage.get_fonts()).done(function(fonts_collection) {
			me.load_google_fonts(fonts_collection);
		});

		this.$el.find('.add-font-panel').after(this.theme_fonts_panel.render().el);
		if (!Upfront.mainData.userDoneFontsIntro) this.$el.addClass('no-styles');

		this.$el.find('.choose-font').after('<div class="preview-type"><span class="preview-type-title">Preview Size</span><span class="preview-size-p selected-preview-size">P</span><span class="preview-size-h1">H1</span></div>');

		return this;
	},
	on_p_click: function() {
		this.$el.find('.preview-size-h1').removeClass('selected-preview-size');
		this.$el.find('.preview-size-p').addClass('selected-preview-size');
		this.heading_preview = false;
		this.update_variants();
	},
	on_h1_click: function() {
		this.$el.find('.preview-size-h1').addClass('selected-preview-size');
		this.$el.find('.preview-size-p').removeClass('selected-preview-size');
		this.heading_preview = true;
		this.update_variants();
	},
	add_font: function() {
		var variants;
		var font = google_fonts_storage.get_fonts().findWhere({ 'family': this.font_family_select.get_value() });
		if (_.isEmpty(font)) {
			alert(l10n.choose_font_weight);
			return;
		}

		variants = this.choose_variants.get_selected();
		if (_.isEmpty(variants)) {
			alert(l10n.choose_one_font_weight);
			return;
		}
		_.each(variants, function(variant) {
			theme_fonts_collection.add({
				id: font.get('family') + variant,
				font: font.toJSON(),
				variant: variant
			});
		});
		this.update_variants();
	},
	load_google_fonts: function(fonts_collection) {
		var add_font_panel = this.$el.find('.add-font-panel');
		var typefaces_list = [{ label: l10n.click_to_pick_google_font, value: ''}];
		_.each(fonts_collection.pluck('family'), function(family) {
			typefaces_list.push({ label: family, value: family });
		});
		add_font_panel.find('.loading-fonts').remove();
		// Select font
		this.font_family_select = new Field_Chosen_Select({
			label: l10n.typeface,
			values: typefaces_list,
			placeholder: l10n.choose_font,
			additional_classes: 'choose-font'
		});
		this.font_family_select.render();
		add_font_panel.find('.font-weights-list').before(this.font_family_select.el);
		$('.upfront-chosen-select', this.$el).chosen({
			width: '289px'
		});
		this.listenTo(this.font_family_select, 'changed', this.update_variants);
	},
	update_variants_on_remove: function() {
		this.update_variants();
	},
	update_variants: function(model) {
		this.$el.find('.font-weights-list').css('background', 'white');
		if (!model) model = google_fonts_storage.get_fonts().findWhere({ 'family' : this.font_family_select.get_value() });
		if (!model) return;
		// Choose variants
		var variants = new Backbone.Collection();
		_.each(model.get('variants'), function(variant) {
			// Add font to page so we can make preview with real fonts
			if ($('#' + model.get('family').toLowerCase() + variant + '-css').length === 0) {
				$('head').append('<link rel="stylesheet" id="' + model.get('family').toLowerCase() + '-' + variant + '-css" href="//fonts.googleapis.com/css?family=' + model.get('family') + '%3A' + variant + '" type="text/css" media="all">');
			}
			var weight_style = Font_Model.parse_variant(variant);
			variants.add({
				family: model.get('family'),
				name: Font_Model.normalize_variant(variant),
				variant: variant,
				already_added: !!theme_fonts_collection.get(model.get('family') + variant),
				weight: weight_style.weight,
				style: weight_style.style
			});
		});
		if (this.choose_variants) this.choose_variants.remove();

		this.choose_variants = new Font_Variants_Preview({
			collection: variants,
			heading_preview: this.heading_preview
		});
		this.choose_variants.render();
		this.$el.find('.font-weights-list-wrapper').html(this.choose_variants.el);
	},
	set_ok_button: function(button) {
		button.on('click', this.on_ok_click);
	},
	on_ok_click: function(event) {
		Upfront.Events.trigger("upfront:render_typography_sidebar");

		if (Upfront.mainData.userDoneFontsIntro) return;

		Upfront.Util.post({action: "upfront_user_done_font_intro"});
		Upfront.mainData.userDoneFontsIntro = true;
	}
});

var Insert_Font_Widget = Backbone.View.extend({
	initialize: function() {
		var me = this;
		this.fields = [
			new Field_Typeface_Chosen_Select({
				label: '',
				compact: true,
				values: theme_fonts_collection.get_fonts_for_select(),
				additional_classes: 'choose-typeface',
				select_width: '230px'
			}),
			new Field_Typeface_Style_Chosen_Select({
				label: '',
				compact: true,
				values: [],
				additional_classes: 'choose-variant',
				select_width: '120px'
			}),
			new Field_Button({
				label: l10n.insert_font,
				compact: true,
				on_click: function(){
					me.finish();
				}
			})
		];
	},
	render: function() {
		$('#insert-font-widget').html('').addClass('open');
		this.$el.html('');
		_.each(this.fields, function(field) {
			field.render();
			this.$el.append(field.el);
		}, this);

		this.listenTo(this.fields[0], 'changed', function() {
			var variants = theme_fonts_collection.get_variants(this.fields[0].get_value());
			this.render_variants(variants);
		});
		this.listenTo(this.fields[1], 'changed', function() {
			this.preview_font();
		});

		$('.choose-typeface select', this.$el).chosen({
			width: '230px',
			disable_search: true
		});
		$('.choose-variant select', this.$el).chosen({
			width: '120px',
			disable_search: true
		});

		return this;
	},
	render_variants: function(variants) {
		var $variant_field = this.$el.find('.choose-variant select');
		$variant_field.find('option').remove();
		$variant_field.append('<option value="">' + l10n.choose_variant + '</option>');
		_.each(variants, function(variant) {
			$variant_field.append('<option value="' + variant + '">' + variant + '</option>');
		});
		$variant_field.trigger('chosen:updated');
	},
	preview_font: function() {
		this.replaceFont({
			font_family: this.fields[0].get_value(),
			variant: Font_Model.parse_variant(this.fields[1].get_value())
		});
	},
	replaceFont: function(font) {
		var lines;
		this.editor = Upfront.Application.cssEditor.editor;
		this.style_doc = this.editor.getSession().getDocument();

		this.last_selected_font = font;

		// Insert selected font family
		if (!this.font_family_range) {
			this.font_family_range = this.editor.getSelection().getRange();
		} else {
			this.font_family_range.end = this.end_point;
		}
		this.end_point = this.style_doc.replace(this.font_family_range, font.font_family);

		// Insert selected weight and style, first reset them
		this.reset_properties();
		lines = [];
		if (font.variant.weight) {
			lines.push('    font-weight: ' + font.variant.weight + ';');
		}
		if (font.variant.style) {
			lines.push('    font-style: ' + font.variant.style + ';');
		}
		if (lines.length > 0) {
			this.style_doc.insertLines(this.font_family_range.start.row + 1, lines);
		}
	},
	reset_properties: function() {
		var row, line, result;
		this.editor = Upfront.Application.cssEditor.editor;
		this.style_doc = this.editor.getSession().getDocument();
		// Search forward only from font family row since lower properties override upper
		result = {};
		row = this.font_family_range.start.row + 1;
		line = this.style_doc.getLine(row);
		while (line.indexOf('}') < 0) {
			if (line.indexOf('font-weight') !== -1) {
				result.weight = row;
				if (!this.starting_weight) this.starting_weight = line;
			}
			if (line.indexOf('font-style') !== -1) {
				result.style = row;
				if (!this.starting_style) this.starting_style = line;
			}

			row++;
			line = this.style_doc.getLine(row);
			if (!line) {
				// Fix missing closing paren
				//this.style_doc.insertLines(row, ['}']); // This adds a standalone new brace for some reason
				break;
			}
		}

		// Reset properties. This is complicated. If both font style and font weight properties are in current style rule
		// we need to remove them carefully because when we remove first, seconds' row number might change
		// so first remove one with higher row number.
		if (result.weight && result.style) {
			if (result.weight > result.style) {
				this.style_doc.removeLines(result.weight, result.weight);
				this.style_doc.removeLines(result.style, result.style);
			} else {
				this.style_doc.removeLines(result.style, result.style);
				this.style_doc.removeLines(result.weight, result.weight);
			}
			result.weight = false;
			result.style = false;
		}
		if (result.weight) {
			this.style_doc.removeLines(result.weight, result.weight);
		}
		if (result.style) {
			this.style_doc.removeLines(result.style, result.style);
		}
	},
	finish: function() {
		$('#insert-font-widget').html('<a class="upfront-css-font" href="#">' + l10n.insert_font + '</a>').removeClass('open');
	}
});

var CSSEditor = Backbone.View.extend({
	className: 'upfront-ui',
	id: 'upfront-csseditor',
	tpl: _.template($(_Upfront_Templates.popup).find('#csseditor-tpl').html()),
	prepareAce: false,
	ace: false,
	events: {
		'click .upfront-css-save-ok': 'save',
		'click .upfront-css-close': 'close',
		'click .upfront-css-theme_image': 'openThemeImagePicker',
		'click .upfront-css-media_image': 'openImagePicker',
		'click .upfront-css-font': 'startInsertFontWidget',
		'click .upfront-css-selector': 'addSelector',
		'click .upfront-css-type' : 'scrollToElement',
		'click .upfront-css-delete': 'deleteStyle',
		'change .upfront-css-save-name-field': 'updateStylename',
		'mouseenter .upfront-css-selector': 'hiliteElement',
		'mouseleave .upfront-css-selector': 'unhiliteElement',
		'keyup .upfront-css-save-name-field': 'checkDeleteToggle'
	},

	//elemenTypes' element id matches model's 'id_slug' attribute
	elementTypes: {
		UaccordionModel: {label: l10n.accordion, id: 'uaccordion'},
		UcommentModel: {label: l10n.comments, id: 'ucomment'},
		UcontactModel: {label: l10n.contact_form, id: 'ucontact'},
		UgalleryModel: {label: l10n.gallery, id: 'ugallery'},
		UimageModel: {label: l10n.image, id: 'image'},
		LoginModel: {label: l10n.login, id: 'upfront-login_element'},
		LikeBox: {label: l10n.like_box, id: 'Like-box-object'},
		MapModel: {label: l10n.map, id: 'upfront-map_element'},
		UnewnavigationModel: {label: l10n.navigation, id: 'unewnavigation'},
		ButtonModel: {label: l10n.button, id: 'ubutton'},
		//UpostsModel: {label: l10n.posts, id: 'uposts'},
		PostsModel: {label: l10n.posts, id: 'uposts'},
		UsearchModel: {label: l10n.search, id: 'usearch'},
		USliderModel: {label: l10n.slider, id: 'uslider'},
		SocialMediaModel: {label: l10n.social, id: 'SocialMedia'},
		UtabsModel: {label: l10n.tabs, id: 'utabs'},
		ThisPageModel: {label: l10n.page, id: 'this_page'},
		ThisPostModel: {label: l10n.post, id: 'this_post'},
		UwidgetModel: {label: l10n.widget, id: 'uwidget'},
		UyoutubeModel: {label: l10n.youtube, id: 'uyoutube'},
		PlainTxtModel: {label: l10n.text, id:'plain_text'},
		CodeModel: {label: l10n.code, id: 'upfront-code_element'},
		Layout: {label: l10n.body, id: 'layout'},
		GalleryLightbox: {label: l10n.body, id: 'gallery-lightbox'},
		RegionContainer: {label: l10n.region, id: 'region-container'},
		Region: {label: l10n.inner_region, id: 'region'},
		RegionLightbox: {label: l10n.ltbox_region, id: 'region'},
		ModuleGroup: {label: l10n.group, id: 'module-group'},
		PostPart_titleModel: {label: l10n.postpart_title, id: 'PostPart_title'},
		PostPart_contentsModel: {label: l10n.postpart_content, id: 'PostPart_contents'},
		PostPart_excerptModel: {label: l10n.postpart_excerpt, id: 'PostPart_excerpt'},
		PostPart_featured_imageModel: {label: l10n.postpart_featured, id: 'PostPart_featured_image'},
		PostPart_authorModel: {label: l10n.postpart_author, id: 'PostPart_author'},
		PostPart_author_gravatarModel: {label: l10n.postpart_author_gravatar, id: 'PostPart_author_gravatar'},
		PostPart_dateModel: {label: l10n.postpart_date, id: 'PostPart_date'},
		PostPart_updateModel: {label: l10n.postpart_update, id: 'PostPart_update'},
		PostPart_comments_countModel: {label: l10n.postpart_comments, id: 'PostPart_comments_count'},
		PostPart_tagsModel: {label: l10n.postpart_tags, id: 'PostPart_tags'},
		PostPart_categoriesModel: {label: l10n.postpart_categories, id: 'PostPart_categories'}
	},
	initialize: function() {
		if (!$('#' + this.id).length) $('body').append(this.el);
		Upfront.Events.on("command:region:edit_toggle", this.close, this);
	},
	init: function(options) {
		var me = this,
			deferred = $.Deferred(),
			modelType;

		if (this.$style) this.close();

		// Don't render the editor, only makes the API available
		this.no_render = ( options.no_render === true );
		this.no_stylename_fallback = ( options.no_stylename_fallback === true );

		this.model = options.model;
		this.sidebar = ( options.sidebar !== false );
		this.toolbar = ( options.toolbar !== false );
		this.readOnly = ( options.readOnly === true );
		this.global = ( options.global === true );

		this.modelType = options.type ? options.type : this.model.get_property_value_by_name('type');
		this.elementType = this.elementTypes[this.modelType] || {label: 'Unknown', id: 'unknown'};

		// CSS editor treats global stylesheet as a separate case. When options.type is "Layout"
		// and options.element_id is "layout" than global stylesheet is edited.
		this.is_global_stylesheet = options.type === 'Layout' && options.element_id === 'layout';

		if (this.is_global_stylesheet) this.sidebar = true;

		this.resolve_stylename(options);

		this.ensure_style_element();

		this.selectors = this.elementSelectors[this.modelType] || {};

		this.element_id = options.element_id ? options.element_id : this.model.get_property_value_by_name('element_id');

		if ( !this.no_render ) {
			this.prepareAce = deferred.promise();
			require([Upfront.Settings.ace_url], function() {
				deferred.resolve();
			});

			this.resizeHandler = this.resizeHandler || function(){
				me.$el.width($(window).width() - $('#sidebar-ui').width() -1);
			};

			$(window).on('resize', this.resizeHandler);

			if ( typeof options.change == 'function' ) this.on('change', options.change);

			this.render();

			Upfront.Events.on("command:undo", function () {
				setTimeout(function () {
					var styles = Upfront.Util.Transient.pop('css-' + me.element_id);
					if (styles) {
						me.get_style_element().html(styles.replace(/#page/g, 'div#page.upfront-layout-view .upfront-editable_entity.upfront-module'));
						me.render();
					}
				}, 200);
			});

			this.startResizable();

			Upfront.Events.trigger('csseditor:open', this.element_id);
		}
	},
	resolve_stylename: function(options) {
		// Style name will be used to identify style element inserted to page by id and
		// to add class to elements that are using this style.
		this.stylename = ''; // reset
		if (this.is_global_stylesheet) this.stylename = 'layout-style';
		else this.stylename = options.stylename;

		// Check for regions
		if (this.is_region_style()) {
			var layout_id = _upfront_post_data.layout.specificity || _upfront_post_data.layout.item || _upfront_post_data.layout.type,
				is_global = ( this.model.get('scope') == 'global' ),
				default_stylename = this.elementType.id + '-' + this.model.get('name') + '-style',
				layout_stylename = layout_id + '-' + this.model.get('name') + '-style';
			if (is_global){
				this.stylename = default_stylename;
			} else {
				this.stylename = layout_stylename;
				if (
					_.isArray(Upfront.data.styles[this.elementType.id])
					&& Upfront.data.styles[this.elementType.id].indexOf(default_stylename) !== -1
					&& Upfront.data.styles[this.elementType.id].indexOf(layout_stylename) === -1
					&& !this.no_stylename_fallback
				) {
					this.stylename = default_stylename;
				}
			}
		}


		// If stylename is still empty than editor is creating new style and user have not
		// yet assigned name to style. Create temporary style name.
		if (this.stylename === '') {
			// User is adding element style so assign name according to element type
			// and add class to element on which editor is started so changes to style
			// reflect as edited.
			this.stylename = this.get_temp_stylename();
			$('#' + this.model.get_property_value_by_name('element_id')).addClass(this.stylename);
		}

		// For default styles saving and loading process is a bit different hence this flag
		this.is_default_style = this.stylename === '_default';
	},
	is_region_style: function() {
		return this.elementType.id === 'region-container'
			|| this.elementType.id === 'region';
	},
	get_style_id: function() {
		// Prepend element type if this is default style
		return this.is_default_style ?
			this.elementType.id + '_default' : this.stylename;
	},
	get_css_selector: function() {
		if (this.is_global_stylesheet) return '';

		if (this.is_region_style()) return '.upfront-' + this.elementType.id + '-' + this.model.get('name');

		// Add some specificity so this style would go over other
		if (this.is_default_style === false) return '#page .' + this.stylename;

		return '.upfront-output-' + this.elementType.id;
	},
	ensure_style_element: function() {
		var $style_el = this.get_style_element();
		if($style_el.length !== 0) {
			this.$style = $style_el;
			return;
		}

		this.$style = $('<style id="' + this.get_style_id() + '"></style>');
		$('body').append(this.$style);
	},
	get_style_element: function() {
		return $('style#' + this.get_style_id());
	},
	close: function(e){
		if(e && _.isFunction(e.preventDefault)) e.preventDefault();

		$(window).off('resize', this.resizeHandler);
		this.off('change');

		this.$style = false;
		if (this.editor) this.editor.destroy();

		$('#page').css('padding-bottom', 0);
		this.$el.hide();

		Upfront.Events.trigger('csseditor:closed', this.element_id);
	},
	render: function(){
		var me = this;

		if (!$('#' + this.id).length) $('#page').append(this.$el);

		if (!this.sidebar) {
			this.$el.addClass('upfront-css-no-sidebar');
		} else {
			this.$el.removeClass('upfront-css-no-sidebar');
		}

		this.$el.html(this.tpl({
			name: this.stylename,
			elementType: this.elementType.label,
			selectors: this.selectors,
			show_style_name: this.is_region_style() === false && this.is_global_stylesheet === false && this.sidebar !== true,
			showToolbar: this.toolbar
		}));

		this.resizeHandler('.');

		var bodyHeight = this.$el.height() - this.$('.upfront-css-top').outerHeight();
		this.$('.upfront-css-body').height(bodyHeight);

		this.prepareAce.done(function(){
			me.startAce();
		});

		this.prepareSpectrum();

		this.checkDeleteToggle(this.stylename);

		this.$el.show();
	},
	startAce: function() {
		var me = this,
			editor = ace.edit(this.$('.upfront-css-ace')[0]),
			session = editor.getSession(),
			scrollerDisplayed = false,
			scope,
			styles
		;

		session.setUseWorker(false);
		editor.setShowPrintMargin(false);

		editor.setReadOnly(this.readOnly);

		session.setMode("ace/mode/css");
		editor.setTheme('ace/theme/monokai');

		editor.on('change', function(e){
			if (me.timer) clearTimeout(me.timer);
			me.timer = setTimeout(function(){
				me.updateStyles(editor.getValue());
			},800);
			me.trigger('change', editor);

			if(typeof me.editor !== "undefined") {
				var aceOuterWidth = $(me.editor.container).get(0).scrollWidth;
				var aceInnerWidth = $(me.editor.container).find('.ace_content').innerWidth();

				if(aceOuterWidth < aceInnerWidth + 40) {
					if(!scrollerDisplayed) {
						me.startResizable();
					}
					scrollerDisplayed = true;
				} else {
					scrollerDisplayed = false;
				}
			}
		});

		styles = Upfront.Util.colors.convert_string_color_to_ufc(this.get_style_element().html().replace(/div#page.upfront-layout-view .upfront-editable_entity.upfront-module/g, '#page'));
		if (this.is_global_stylesheet === false) {
			scope = new RegExp(this.get_css_selector() + '\\s*', 'g');
			styles = styles.replace(scope, '');
		}
		editor.setValue($.trim(styles), -1);

		// Set up the proper vscroller width to go along with new change.
		editor.renderer.scrollBar.width = 5;
		editor.renderer.scroller.style.right = "5px";

		editor.focus();
		this.editor = editor;

		if(me.timer) clearTimeout(me.timer);
		me.timer = setTimeout(function(){
			me.startResizable();
		},300);

	},
	prepareSpectrum: function(){
		var me = this,
			color_picker = new Field_Color({
				default_value: '#ffffff',
				showAlpha: true,
				showPalette: true,
				maxSelectionSize: 9,
				localStorageKey: "spectrum.recent_bgs",
				preferredFormat: "hex",
				chooseText: "Ok",
				showInput: true,
				allowEmpty:true,
				autohide: false,
				spectrum: {
					show: function(){
						//spectrum = $('.sp-container:visible');
					},
					choose: function(color) {
						var colorString = color.alpha < 1 ? color.toRgbString() : color.toHexString();
						me.editor.insert(colorString);
						me.editor.focus();
					}
				}
			})
		;
		color_picker.render();
		me.$('.upfront-css-color').html(color_picker.el);
	},
	startResizable: function(){
		// Save the fetching inside the resize
		var me = this,
			$cssbody = me.$('.upfront-css-body'),
			topHeight = 0,
			$selectors = me.$('.upfront-css-selectors'),
			$saveform = me.$('.upfront-css-save-form'),
			$rsz = this.$('.upfront-css-resizable'),
			onResize = function(e, ui){
				var height = ui ? ui.size.height : me.$('.upfront-css-resizable').height(),
					bodyHeight = height  - topHeight;
				$cssbody.height(bodyHeight);
				if(me.editor)
					me.editor.resize();
				$selectors.outerHeight(bodyHeight - $saveform.outerHeight());
				// Clean unneeded CSS
				$rsz.css({
					width: "",
					height: "",
					left: "",
					top: ""
				});
				$('#page').css('padding-bottom', height);
			}
		;
		// Add appropriate handle classes
		$rsz.find(".upfront-css-top")
			.removeClass("ui-resizable-handle").addClass("ui-resizable-handle")
			.removeClass("ui-resizable-n").addClass("ui-resizable-n")
		;
		topHeight = me.$('.upfront-css-top').outerHeight();
		onResize();
		$rsz.resizable({
			handles: {n: '.upfront-css-top'},
			resize: onResize,
			minHeight: 200,
			delay: 100
		});
	},
	scrollToElement: function(){
		var $element = $('#' + this.element_id);

		if(!$element.length) return;

		var offset = $element.offset().top - 50;
		$(document).scrollTop(offset > 0 ? offset : 0);

		this.blink($element, 4);
	},

	blink: function(element, times) {
		var me = this;
		element.css('outline', '3px solid #3ea');
		setTimeout(function(){
			element.css('outline', 'none');

			times--;
			if (times > 0) {
				setTimeout(function(){
					me.blink(element, times - 1);
				}, 100);
			}

		}, 100);
	},

	hiliteElement: function(e){
		var selector = $(e.target).data('selector');

		if (!selector.length) return;

		var element = this.is_region_style() === false ? $('#' + this.element_id).parent() : $('#' + this.element_id);
		element.find(selector).addClass('upfront-css-hilite');
	},

	unhiliteElement: function(e){
		var selector = $(e.target).data('selector');

		if(!selector.length) return;

		var element = this.is_region_style() === false ? $('#' + this.element_id).parent() : $('#' + this.element_id);
		element.find(selector).removeClass('upfront-css-hilite');
	},

	remove: function(){
		Backbone.View.prototype.remove.call(this);
		$(window).off('resize', this.resizeHandler);
	},

	updateStyles: function(contents){
		var $el = this.get_style_element();
		Upfront.Util.Transient.push('css-' + this.element_id, $el.html());
		contents = Upfront.Util.colors.convert_string_ufc_to_color( contents);
		$el.html(
			this.stylesAddSelector(
				contents, (this.is_default_style ? '' : this.get_css_selector())
			).replace(/#page/g, 'div#page.upfront-layout-view .upfront-editable_entity.upfront-module')
		);
		this.trigger('updateStyles', this.element_id);
	},

	stylesAddSelector: function(contents, selector) {
		if (this.is_global_stylesheet && empty(selector)) return contents;

		var me = this,
			rules = contents.split('}'),
			processed = ''
		;

		_.each(rules, function (rl) {
			var src = $.trim(rl).split('{');

			if (src.length != 2) return true; // wtf

			var individual_selectors = src[0].split(','),
				processed_selectors = []
			;
			_.each(individual_selectors, function (sel) {
				sel = $.trim(sel);
				var clean_selector = sel.replace(/:[^\s]+/, ''); // Clean up states states such as :hover, so as to not mess up the matching
				var	is_container = clean_selector[0] === '@' || me.recursiveExistence(selector, clean_selector),
					spacer = is_container
						? '' // This is not a descentent selector - used for containers
						: ' ' // This is a descentent selector
				;

				processed_selectors.push('' +
					selector + spacer + sel +
				'');
			});
			processed += processed_selectors.join(', ') + ' {' +
				src[1] + // Actual rule
			'\n}\n';
		});
		return processed;
	},

	recursiveExistence: function(selector, clean_selector) {
		var splitted = clean_selector.split(' ');
		var me = this;
		while(splitted.length > 0) {
			try{
				if(!!$(selector + splitted.join(' ')).closest('#' + me.element_id).length)
					return true;
			}
			catch (err) {

			}
			splitted.pop();
		}

		return false;
	},
	// When stylename changes upfront needs to update element model theme_style property
	// and also to save style under new stylename.
	updateStylename: function() {
		var new_name =  $.trim(this.$('.upfront-css-save-name-field').val()),
			old_name = this.stylename;

		// Strict filtering on stylename
		new_name = new_name.replace(/\s/g, '-').replace(/[^A-Za-z0-9_-]/gi, '').replace(/-+/g, '-').toLowerCase();

		if (old_name === '_default') {
			this.$('.upfront-css-save-name-field').val('_default');
			Upfront.Views.Editor.notify(l10n.default_style_name_nag, 'error');
			return;
		}

		// Update class on element on which editor was called
		$('#' + this.model.get_property_value_by_name('element_id')).removeClass(this.stylename);
		$('#' + this.model.get_property_value_by_name('element_id')).addClass(new_name);

		// Replace id on style element
		this.get_style_element().attr('id', new_name);
		this.stylename = new_name;

		// Replace selector in style element htnl
		this.get_style_element().html(
			this.get_style_element().html().replace(new RegExp(old_name, 'g'), new_name)
		);

		// Update element on which editor is called to have appropriate theme style
		this.model.set_breakpoint_property('theme_style', new_name);

		// If this is change of name from temp don't do anything
		if (old_name === this.get_temp_stylename) return;

		// TODO Delete old style from database/files
		// this.delete(undefined, true);
		// Need to save with new name and delete old name
		this.save();
	},

	get_temp_stylename: function() {
		return this.modelType.toLowerCase().replace('model', '') + '-new-style';
	},

	save: function(event) {
		if (event) event.preventDefault();
		var me = this,
			styles = $.trim(this.editor.getValue()),
			data;

		if (this.is_global_stylesheet === false && this.stylename === this.get_temp_stylename())
			return notifier.addMessage(l10n.style_name_nag, 'error');

		styles = this.stylesAddSelector(styles, (this.is_default_style ? '' : this.get_css_selector()));
		data = {
			styles: styles,
			elementType: this.elementType.id,
			global: this.global
		};
		// If in exporter mode, export instead of saving
		if (Upfront.Application.is_builder()) {
			data.stylename = this.get_style_id();
			if (this.is_global_stylesheet) {
				var props = Upfront.Application.current_subapplication.layout.get('properties'),
					layout_styles = props && props.findWhere ? props.findWhere({name: 'layout_style'}) : false
				;
				if (layout_styles && layout_styles.set) {
					layout_styles.set({'value': styles});
				} else {
					props.add({name: "layout_style", value: styles});
				}
			}
			Upfront.Behaviors.LayoutEditor.export_element_styles(data);
			return;
		}

		data.name = this.get_style_id();
		data.action = 'upfront_save_styles';

		Upfront.Util.post(data)
			.success(function(response) {
				var data = response.data,
					elementType = me.elementType.id;

				if (!Upfront.data.styles[elementType]) {
					Upfront.data.styles[elementType] = [];
				}

				if (Upfront.data.styles[elementType].indexOf(me.get_style_id()) === -1) {
					Upfront.data.styles[elementType].push(me.get_style_id());
				}

				Upfront.Events.trigger('upfront:themestyle:saved', me.get_style_id());

				me.checkDeleteToggle(data.name);

				return notifier.addMessage(l10n.style_saved_as.replace(/%s/,  me.get_style_id()));
			})
			.error(function(response){
				return notifier.addMessage(l10n.there_was_an_error);
			});
	},

	/* API to call save style without loading editor */
	saveCall: function (notify) {
		var me = this,
			styles = $.trim(this.get_style_element().html()),
			data;

		data = {
			styles: styles,
			elementType: this.elementType.id,
			global: this.global
		};
		// If in exporter mode, export instead of saving
		if (Upfront.Application.is_builder()) {
			data.stylename = this.get_style_id();
			Upfront.Behaviors.LayoutEditor.export_element_styles(data);
			return;
		}

		data.name = this.get_style_id();
		data.action = 'upfront_save_styles';

		Upfront.Util.post(data)
			.success(function(response) {
				var data = response.data,
					elementType = me.elementType.id;

				if (!Upfront.data.styles[elementType]) Upfront.data.styles[elementType] = [];

				if (Upfront.data.styles[elementType].indexOf(me.get_style_id()) === -1) {
					Upfront.data.styles[elementType].push(me.get_style_id());
				}

				Upfront.Events.trigger('upfront:themestyle:saved', me.get_style_id());

				return notify ? notifier.addMessage(l10n.style_saved_as.replace(/%s/,  me.get_style_id())) : true;
			})
			.error(function(response){
				return notify ? notifier.addMessage(l10n.there_was_an_error) : true;
			});

	},

	checkDeleteToggle: function(e){
		if (_.isUndefined(e)) return;

		if(!this.deleteToggle) {
			this.deleteToggle = $('<a href="#" class="upfront-css-delete">' + l10n.delete_style + '</a>');
		}

		var value = _.isString(e) ? e : e.target.value,
			elementType = this.elementType.id,
			styles = Upfront.data.styles[elementType],
			showdelete = styles && styles.indexOf(elementType + '-' + value) != -1,
			inDom = this.deleteToggle.parent().length
		;

		if(showdelete && !inDom) {
			this.$('.upfront-css-save-form').append(this.deleteToggle);
		} else if(!showdelete && inDom) {
			this.deleteToggle.detach();
		}
	},

	deleteStyle: function(e){
		e.preventDefault();
		var me = this,
			elementType = this.elementType.id,
			styleName = elementType + '-' + this.$('.upfront-css-save-name-field').val()
		;

		if(!confirm(l10n.delete_stylename_nag.replace(/%s/, styleName)))
			return;

		var deleteData = {
			elementType: elementType,
			styleName: styleName,
			action: 'upfront_delete_styles'
		};

		Upfront.Util.post(deleteData)
			.done(function(){
				var styleIndex = Upfront.data.styles[elementType].indexOf(styleName);
				notifier.addMessage(l10n.stylename_deleted.replace(/%s/, styleName));

				//Clean the editor up
				me.$('.upfront-css-save-name-field').val('');
				me.editor.setValue('');

				//Remove the styles from the available styles
				if(styleIndex != -1)
					Upfront.data.styles[elementType].splice(styleIndex, 1);

				//Remove the styles from the dom
				$('#upfront-style-' + styleName).remove();

				//Unset the styles of the element if they are the same as the deleted ones.
				if(me.model.get_property_value_by_name('theme_style') == styleName)
					me.model.set_property('theme_style', '');

				//Remove the delete link
				me.deleteToggle.detach();
			});
		;
	},

	/* Used by upfront application */
	fetchThemeStyles: function(separately){
		var fetchData = {
				action:'upfront_theme_styles',
				separately: separately
			},
			deferred = $.Deferred()
		;

		Upfront.Util.post(fetchData)
			.success(function(response){
				deferred.resolve(response.data.styles);
			});
		return deferred.promise();
	},

	createSelectors: function(objects){
		var me = this,
			selectors = {}
		;

		_.each(objects, function(object){
			selectors[object.cssSelectorsId] = object.cssSelectors || {};
		});
		me.elementSelectors = selectors;
	},

	createSelector: function(model_class, view_class, id) {
		var model = new model_class(),
			view = new view_class({model: model});
		this.elementSelectors[id] = view.cssSelectors || {};
		view.remove();
	},

	openThemeImagePicker: function () {
		this._open_media_popup({themeImages: true});
	},

	openImagePicker: function(){
		this._open_media_popup();
	},

	/**
	 * Handles media popups.
	 * In this context, used for both theme and media images list.
	 *
	 * @param object opts Boot-time options to be passed to Upfront.Media.Manager
	 */
	_open_media_popup: function (opts) {
		opts = _.isObject(opts) ? opts : {};
		var me = this,
			options = _.extend({}, opts)
		;

		Upfront.Media.Manager.open(options).done(function(popup, result){
			Upfront.Events.trigger('upfront:element:edit:stop');
			if (!result) return;

			var imageModel = result.models[0],
				img = imageModel.get('image') ? imageModel.get('image') : result.models[0],
				url = 'src' in img ? img.src : ('get' in img ? img.get('original_url') : false)
			;

			me.editor.insert('url("' + url + '")');
			me.editor.focus();
		});
	},

	startInsertFontWidget: function() {
		var insertFontWidget = new Insert_Font_Widget({ collection: theme_fonts_collection });
		$('#insert-font-widget').html(insertFontWidget.render().el);
	},

	getElementType: function(model){
		var type = model.get_property_value_by_name('type'),
			styleType = this.elementTypes[type]
		;
		return styleType || type;
	},

	addSelector: function(e){
		var selector = $(e.target).data('selector');
		if( !_.isUndefined( this.editor ) ){
			this.editor.insert(selector);
			this.editor.focus();
		}

	}
});

/**
 * Like css editor but does not do saving and managing of styles.
 * Takes initial css from models "styles" property and fires change
 * event with new css.
 */
var GeneralCSSEditor = Backbone.View.extend({
	className: 'upfront-ui',
	id: 'upfront-general-csseditor',
	tpl: _.template($(_Upfront_Templates.popup).find('#csseditor-tpl').html()),
	prepareAce: false,
	ace: false,
	events: {
		'click .upfront-css-save-ok': 'fire_save',
		'click .upfront-css-close': 'close',
		'click .upfront-css-image': 'openImagePicker',
		'click .upfront-css-selector': 'addSelector'
	},
	initialize: function(options) {
		var me = this,
			deferred = $.Deferred(),
			style_selector,
			$style;

		this.options = options || {};
		this.model = options.model;
		this.sidebar = options.sidebar !== false;
		this.global = options.global === true;
		this.toolbar = ( options.toolbar !== false );
		this.prepareAce = deferred.promise();
		require([Upfront.Settings.ace_url], function(){
			deferred.resolve();
		});

		this.resizeHandler = this.resizeHandler || function(){
			me.$el.width($(window).width() - $('#sidebar-ui').width() -1);
		};

		$(window).on('resize', this.resizeHandler);

		style_selector = this.model.get('id') + '-breakpoint-style';
		$style = $('#' + style_selector);
		if ($style.length === 0) {
			this.$style = $('<style id="' + style_selector + '"></style>');
			$('body').append(this.$style);
		} else {
			this.$style = $style
		}

		if (options.cssSelectors) {
			this.selectors = options.cssSelectors;
		}


		if ( typeof options.change == 'function' ) this.listenTo(this, 'change', options.change);
		if ( typeof options.onClose == 'function' ) this.listenTo(this, 'close', options.onClose);

		this.render();

		this.startResizable();
	},
	close: function(event) {
		if(event)
			event.preventDefault();

		$(window).off('resize', this.resizeHandler);

		if(this.editor)
			this.editor.destroy();

		$('#page').css('padding-bottom', 0);
		this.remove();
	},
	render: function() {
		var me = this;

		$('#page').append(this.$el);

		if (!this.sidebar)
			this.$el.addClass('upfront-css-no-sidebar');
		else
			this.$el.removeClass('upfront-css-no-sidebar');

		this.$el.html(this.tpl({
			selectors: this.selectors,
			elementType: false,
			show_style_name: false,
			showToolbar: this.toolbar
		}));

		this.resizeHandler('.');

		var bodyHeight = this.$el.height() - this.$('.upfront-css-top').outerHeight();
		this.$('.upfront-css-body').height(bodyHeight);

		this.prepareAce.done(function(){
			me.startAce();
		});

		this.prepareSpectrum();

		this.$el.show();
	},
	startAce: function() {
		var me = this,
			editor = ace.edit(this.$('.upfront-css-ace')[0]),
			session = editor.getSession()
		;

		session.setUseWorker(false);
		editor.setShowPrintMargin(false);

		session.setMode("ace/mode/css");
		editor.setTheme('ace/theme/monokai');

		editor.on('change', function(event){
			var styles_with_selector;
			var rules = editor.getValue().split('}'),
				separator = '\n\n.' + me.options.page_class + ' ';

			rules = _.map(rules, function(rule){return $.trim(rule);});
			rules.pop();

			styles_with_selector = separator + rules.join('\n}' + separator) + '\n}';

			me.$style.html(styles_with_selector);
			me.trigger('change', styles_with_selector);
		});

		var scope = new RegExp('\.' + this.options.page_class + '\s*', 'g'),
			styles = this.model.get('styles') ? this.model.get('styles').replace(scope, '') : ''
		;
		var scope = new RegExp('\.' + this.options.page_class + '\s*', 'g');
		var styles;
		if (this.options.type === 'GalleryLightbox') {
			styles = this.model.get('properties').get('styles').get('value').replace(scope, '');
		} else {
			styles = this.model.get('styles').replace(scope, '');
		}
		editor.setValue($.trim(styles), -1);

		// Set up the proper vscroller width to go along with new change.
		editor.renderer.scrollBar.width = 5;
		editor.renderer.scroller.style.right = "5px";

		editor.focus();
		this.editor = editor;
	},
	prepareSpectrum: function() {
		var me = this;

		me.$('.upfront-css-color').spectrum({
			showAlpha: true,
			showPalette: true,
			palette: Theme_Colors.colors.pluck("color").length ? Theme_Colors.colors.pluck("color") : ['fff', '000', '0f0'],
			maxSelectionSize: 9,
			localStorageKey: "spectrum.recent_bgs",
			preferredFormat: "hex",
			chooseText: l10n.ok,
			showInput: true,
			allowEmpty:true,
			show: function(){
				spectrum = $('.sp-container:visible');
			},
			change: function(color) {
				var colorString = color.alpha < 1 ? color.toRgbString() : color.toHexString();
				me.editor.insert(colorString);
				me.editor.focus();
			},
			move: function(color) {
				var rgba = color.toRgbString();
				spectrum.find('.sp-dragger').css('border-top-color', rgba);
				spectrum.parent().find('.sp-dragger').css('border-right-color', rgba);
			}
		});
	},
	startResizable: function() {
		// Save the fetching inside the resize
		var me = this,
			$cssbody = me.$('.upfront-css-body'),
			topHeight = me.$('.upfront-css-top').outerHeight(),
			$selectors = me.$('.upfront-css-selectors'),
			$saveform = me.$('.upfront-css-save-form'),
			onResize = function(e, ui){
				var height = ui ? ui.size.height : me.$('.upfront-css-resizable').height(),
					bodyHeight = height  - topHeight;
				$cssbody.height(bodyHeight);
				if(me.editor)
					me.editor.resize();
				$selectors.height(bodyHeight - $saveform.outerHeight());
				$('#page').css('padding-bottom', height);
			}
		;
		onResize();
		this.$('.upfront-css-resizable').resizable({
			handles: {n: '.upfront-css-top'},
			resize: onResize,
			minHeight: 200,
			delay: 100
		});
	},
	remove: function() {
		this.trigger('close');
		Backbone.View.prototype.remove.call(this);
		$(window).off('resize', this.resizeHandler);
	},
	openImagePicker: function() {
		var me = this;
		Upfront.Media.Manager.open({}).done(function(popup, result){
			Upfront.Events.trigger('upfront:element:edit:stop');
			if(!result)
				return;

			var url = result.models[0].get('image').src;//.replace(document.location.origin, '');
			me.editor.insert('url("' + url + '")');
			me.editor.focus();
		});
	},
	addSelector: function(e) {
		var selector = $(e.target).data('selector');
		this.editor.insert(selector);
		this.editor.focus();
	}
});

	var Field_Complex_Toggleable_Text_Field = Field.extend({
		className: "upfront-field-complex_field-boolean_toggleable_text upfront-field-multiple",
		tpl: '<input type="checkbox" class = "upfront-field-checkbox" /> <label><span class="upfront-field-label-text">{{element_label}}</span></label> <div class="upfront-embedded_toggleable" style="display:none">{{field}}<div class="upfront-embedded_toggleable-notice">' + l10n.anchor_nag + '</div></div>',
		initialize: function (opts) {
			Field.prototype.initialize.call(this, opts);
			this.options.field = new Field_Text(this.options);
		},
		render: function () {
			var me = this;
			this.$el.empty();
			this.$el.append(this.get_field_html());

			this.$el.on("click", ':checkbox', function (e) {
				e.stopPropagation();
				me.field_toggle.apply(me);
			});
			if (this.model.get_property_value_by_name(this.options.field.get_name())) {
				this.$el.find(':checkbox').attr("checked", true);
				this.check_value();
				this.field_toggle();
			}

			this.$el.on("keyup", '[name="' + this.options.field.get_name() + '"]', function (e) {
				e.stopPropagation();
				me.check_value.apply(me);
			});

			setTimeout(function () {
				me.trigger("anchor:updated");
			}, 50);
		},
		field_toggle: function () {
			if (this.$el.find(":checkbox").is(":checked")) {
				this.$el.find(".upfront-embedded_toggleable").show();
			} else {
				this.$el.find(".upfront-embedded_toggleable").hide();
			}
			this.property.set({value: this.get_value()});
			this.trigger("anchor:updated");
		},
		check_value: function () {
			var $field = this.$el.find('[name="' + this.options.field.get_name() + '"]'),
				$root = this.$el.find(".upfront-embedded_toggleable"),
				val = $field.length && $field.val ? $field.val() : ''
			;
			$root.removeClass("error").removeClass("ok");
			if (val.length && !val.match(/^[a-zA-Z]+$/)) {
				$root.addClass("error");
			} else if (val.length) {
				$root.addClass("ok");
			}
			this.property.set({value: this.get_value()});
		},
		get_field_html: function () {
			this.options.field.render();
			var $input = this.options.field.$el;
			return _.template(this.tpl, _.extend({}, this.options, {field: $input.html()}));
		},
		get_value: function () {
			var data = {},
				$field = this.$el.find(":checkbox"),
				$subfield = this.$el.find('[name="' + this.options.field.get_name() + '"]'),
				value = $subfield.val().replace(/[^a-zA-Z]/g, '')
			;
			return $field.is(":checked") && value ? value : ''; // was false
		}
	});

var _Settings_AnchorSetting = SettingsItem.extend({
	className: "upfront-settings-item-anchor",
	//group: false,
	initialize: function (opts) {
		this.options = opts;
		SettingsItem.prototype.initialize.call(this, this.options);
		var item = new Field_Complex_Toggleable_Text_Field({
			element_label: l10n.make_element_anchor,
			className: 'upfront-field-complex_field-boolean_toggleable_text upfront-field-multiple checkbox-title',
			model: this.model,
			property: 'anchor'
		});
		item.on("anchor:updated", function () {
			this.trigger("anchor:item:updated");
		}, this);
		this.fields = _([item]);
	},
	save_fields: function () {
		this.fields.invoke("check_value");
		SettingsItem.prototype.save_fields.call(this);
	}
});

var Settings_LightboxTrigger = SettingsItem.extend({
	//className: "upfront-settings-item upfront-settings-item-lightbox",
	initialize: function (opts) {
		this.options = opts;
		var lightboxes = this.get_lightboxes()
		;

		this.options.fields = _([
			new Field_Select({
				model: this.model, property: 'lightbox_target',
				values: lightboxes
			})
		]);

		SettingsItem.prototype.initialize.call(this, this.options);
	},
	get_lightboxes: function () {
		var regions = Upfront.Application.layout.get("regions"),
			lightboxes = ['']
		;

		_.each(regions.models, function(model) {
			if(model.attributes.sub == 'lightbox')
				lightboxes.push({label: model.attributes.title, value: model.attributes.name});
		});


		return lightboxes;
	},
	get_values: function () {
        return this.fields._wrapped[0].get_value();
    }
});

var Settings_LabeledLightboxTrigger = Settings_LightboxTrigger.extend({
	//className: "upfront-settings-item upfront-settings-item-anchor",
	initialize: function (opts) {
		this.options = opts;
		Settings_LightboxTrigger.prototype.initialize.call(this, this.options);
		this.options.fields.push(
			new Field_Text({
				model: this.model,
				property: 'lightbox_label',
				label: l10n.label
			})
		);
	},
	get_values: function () {
		return {
			anchor: this.fields._wrapped[0].get_value(),
			label: this.fields._wrapped[1].get_value()
		}
	}
});

var Settings_AnchorTrigger = SettingsItem.extend({
	//className: "upfront-settings-item upfront-settings-item-anchor",
	initialize: function (opts) {
		this.options = opts;
		var anchors = [],
			raw = this.get_anchors()
		;
		_(raw).each(function (idx) {
			anchors.push({label: idx, value: idx});
		});
		this.options.fields = _([
			new Field_Select({
				model: this.model, property: 'anchor_target',
				values: anchors
			})
		]);
		SettingsItem.prototype.initialize.call(this, this.options);
	},
	get_anchors: function () {
		var regions = Upfront.Application.layout.get("regions"),
			anchors = ['']
		;
		regions.each(function (r) {
			r.get("modules").each(function (module) {
				module.get("objects").each(function (object) {
					var anchor = object.get_property_value_by_name("anchor");
					if (anchor && anchor.length) anchors.push(anchor);
				});
			});
		});
		return anchors;
	},
	get_values: function () {
        return this.fields._wrapped[0].get_value();
    }
});

var Settings_LabeledAnchorTrigger = Settings_AnchorTrigger.extend({
	//className: "upfront-settings-item upfront-settings-item-anchor",
	initialize: function (opts) {
		this.options = opts;
		Settings_AnchorTrigger.prototype.initialize.call(this, this.options);
		this.options.fields.push(
			new Field_Text({
				model: this.model,
				property: 'anchor_label',
				label: l10n.label
			})
		);
	},
	get_values: function () {
		return {
			anchor: this.fields._wrapped[0].get_value(),
			label: this.fields._wrapped[1].get_value()
		}
	}
});

var Field_Anchor = Field_Select.extend({
	initialize: function (opts) {
		Field_Select.prototype.initialize.call(this, opts);
		this.options.values = this.get_anchors();
	},
	get_anchors: function () {
		var raw = Settings_AnchorTrigger.prototype.get_anchors.call(this),
			anchors = []
		;
		_(raw).each(function (idx) {
			anchors.push({label: idx, value: idx});
		});
		return anchors;
	}
});


/**
 * This is ordinary select that will render first option as label which
 * is disabled, has no hover effect and has no value.
 * Specify label text with options.label_text
 */
var Field_Compact_Label_Select_Option = Backbone.View.extend({
	tagName: 'li',
	events: {
		'change input': 'on_change'
	},
	className: function() {
		var className = 'upfront-field-select-option';
		if (this.model.get('default')) className += ' upfront-field-select-option-disabled';
		if (this.model.get('enabled')) className += ' upfront-field-select-option-selected';
		// select-option-odd
		return className;
	},
	template: '<label><span class="upfront-field-label-text">{{ name }} {[ if (width > 0) { ]}({{width}}px){[ } ]}</span></label>' +
		'<input type="checkbox" class="upfront-field-checkbox" value="{{ id }}" ' +
		'{[ if (is_default) { ]} disabled="disabled"{[ } ]}' +
		'{[ if (enabled) { ]} checked="checked"{[ } ]}>',
	initilize: function(options) {
		this.options = options || {};
		this.listenTo(this.model, 'change', this.render);
	},
	on_change: function(event) {
		this.model.set({'enabled': this.$el.find('input').is(':checked')});
	},
	render: function() {
		var properties = this.model.toJSON();
		// "default" is reserved word can't use it in template rendering. //todo fix this in model
		properties.is_default = properties.default;
		this.$el.append(_.template(this.template, properties));
		return this;
	}
});
var Field_Compact_Label_Select = Field_Select.extend({
	className: 'upfront-field-select upfront-no-select upfront-field-compact-label-select',
	template: '' +
		'<ul class="upfront-field-select-options">' +
			'<li class="upfront-field-select-option">' +
				'<label><span class="upfront-field-label-text">{{ label_text }}</span></label>' +
			'</li>' +
		'</ul></div>' +
	'',

	initialize: function(options) {
		this.options = options || {};
		this.listenTo(this.collection, 'add remove change:name change:width', this.render);
	},

	render: function () {
		var me = this;
		this.$el.html('');
		this.$el.append(_.template(this.template, this.options));
		this.$el.addClass(' upfront-field-select-' + ( this.options.multiple ? 'multiple' : 'single' ));

		if (this.options.disabled) {
			this.$el.addClass('upfront-field-select-disabled');
		}

		if (this.options.style == 'zebra') {
			this.$el.addClass('upfront-field-select-zebra');
		}

		// Add option views
		_.each(this.collection.models, function(breakpoint) {
			var option = new Field_Compact_Label_Select_Option({ model: breakpoint });
			option.render();
			this.$el.find('ul').append(option.el);
		}, this);
	},

	onOptionClick: function (e) {
		this.$el.toggleClass('compact-label-select-open');
		Field_Select.prototype.onOptionClick.call(this, e);
	}
});

/*
	var ContentEditorUploader = Backbone.View.extend({

		initialize: function () {
			window.send_to_editor = this.add_to_editor;
			Upfront.Events.on("upfront:editor:init", this.rebind_ckeditor_image, this);
		},
		open: function () {
			var height = $(window).height()*0.67;
			tb_show("Upload Image", Upfront.Settings.admin_url + "media-upload.php?type=image&TB_iframe=1&width=640&height="+height);
			return false;
		},
		close: function () {
			tb_remove();
			this.remove();
		},
		rebind_ckeditor_image: function () {
			var me = this;
			_(CKEDITOR.instances).each(function (editor) {
				var img = editor.getCommand('image');
				if (img && img.on) img.on("exec", me.open, me);
			});
		},
		add_to_editor: function (html) {
			var instance = CKEDITOR.currentInstance,
				el = CKEDITOR.dom.element.createFromHtml(html)
			;
			if (instance) instance.insertElement(el);
			tb_remove();
		}
	});
*/
	var NotifierView = Backbone.View.extend({
		notices: new Backbone.Collection([]),
		elId: 'upfront-notice',
		timer: false,
		timeoutTime: 5000,
		$notice: false,
		tpl: _.template($(_Upfront_Templates.popup).find('#upfront-notifier-tpl').html()),
		initialize: function(options){
			this.notices.on('add', this.messageAdded, this);
			this.notices.on('remove', this.messageRemoved, this);

			$('body').append(this.tpl({}));

			this.setElement($('#' + this.elId));
			/*
			// Hey admin bar!
			var $bar = $('#wpadminbar'); // We'll use it a couple of times, so cache
			if($bar.length && $bar.is(":visible")) // Check existence *and* visibility
				$('#upfront-notifier').css({top: 28});
			*/
		},
		addMessage: function(message, type, duration){
			var notice = {
				message: message ? message : l10n.no_message,
				type: type ? type : 'info',
				duration: duration
			};

			this.notices.add(notice);
		},
		show: function(notice) {
			var me = this;
			this.setMessage(notice);
			this.$el.addClass('notify open')
				.removeClass('out')
			;
			this.timer = setTimeout(function(){
				me.notices.remove(notice);
			}, notice.get('duration') || this.timeoutTime)
		},
		replace: function(notice) {
			var me = this;
			this.setMessage(notice);
			this.timer = setTimeout(function(){
				me.notices.remove(notice);
			}, this.timeoutTime);

			this.$el.removeClass('notify').
				addClass('shake');

			setTimeout(function(){
				me.$el.removeClass('shake');
			}, this.timeoutTime / 2);
		},
		setMessage: function(notice) {
			this.$el.removeClass('info warning error')
				.addClass(notice.get('type'))
				.html(notice.get('message'))
			;
		},
		close: function() {
			this.$el.addClass('out');
			this.$el.removeClass('notify shake open');
		},
		messageAdded: function(notice){
			if(! this.$el.hasClass('notify')){
				this.show(notice);
			}
		},
		messageRemoved: function(notice){
			if(this.notices.length)
				this.replace(this.notices.at(0));
			else
				this.close();
		}
	});

	var notifier = new NotifierView();

	var PostSelectorNavigation = ContentEditorPagination.extend({
		className: 'upfront-selector-navigation',
		handle_pagination_request: function (e, page) {
			var me = this,
				pagination = this.collection.pagination,
				page = page ? page : parseInt($(e.target).attr("data-page_idx"), 10) || 0
			;
			this.options.pageSelection(page);
		},
	});

	var PostSelector = Backbone.View.extend({
		postTypeTpl: _.template($(_Upfront_Templates.popup).find('#selector-post_type-tpl').html()),
		postListTpl: _.template($(_Upfront_Templates.popup).find('#selector-post-tpl').html()),
		postType: 'post',
		posts: [],
		pagination: false,
		selected: false,
		deferred: false,
		popup: false,
		defaultOptions: {
			// Title for the top
			title: l10n.select_content_to_link,
			postTypes: [
				{name: 'post', label: l10n.posts},
				{name: 'page', label: l10n.pages}
			]
		},
		events: {
			'click .upfront-field-select-value': 'openTypesSelector',
			'click .upfront-field-select-option': 'selectType',
			'click .upfront-selector-post': 'selectPost',
			'click .use': 'postOk',
			'click #upfront-search_action': 'search',
			'keyup .search_container>input': 'inputSearch'
		},
        initialize: function () {
            if (("post_types" in Upfront.mainData.content_settings ? Upfront.mainData.content_settings : {post_types: []}).post_types.length) {
                this.defaultOptions.postTypes = Upfront.mainData.content_settings.post_types;
            }
        },
		open: function(options){
			var me = this
				bindEvents = false
			;

			options = _.extend({}, this.defaultOptions, options);

			if(!$("#upfront-popup").length && this.$el.attr('id') != 'upfront-popup')
				bindEvents = true;

			this.popup = Upfront.Popup.open(function(){});

			this.deferred = $.Deferred();

			this.posts = new Upfront.Collections.PostList([], {postType: 'page'});

			this.posts.pagination.pageSize = 20;
			this.pagination = new PostSelectorNavigation({
				collection: this.posts,
				pageSelection: function(page){
					me.fetch({page: page});
				}
			});

			this.setElement($('#upfront-popup'));

			this.$('#upfront-popup-top').html('<h3 class="upfront-selector-title">' + options.title +'</h3>');
			this.$('#upfront-popup-content').html(this.postTypeTpl(options));

			this.fetch({});

			this.$('#upfront-popup-bottom')
				.html('<div class="use_selection_container inactive"><a href="#use" class="use">Ok</a></div><div class="search_container clearfix"><input type="text" placeholder="' + l10n.search + '" value=""><div class="search upfront-icon upfront-icon-popup-search" id="upfront-search_action"></div></div>')
				.append(this.pagination.$el)
			;
			$('#upfront-popup').addClass('upfront-postselector-popup');

			this.$('.upfront-field-select-value').text(l10n.pages);
			return this.deferred.promise();
		},

		openTypesSelector: function(){
			var selector = this.$('.upfront-field-select');
			if(!selector.hasClass('open')) {
				selector.addClass('open');
			}
			else {
					selector.removeClass('open');
			}
		},

		selectType: function(e){
			var type = $(e.target).attr('rel');
			if(type != this.posts.postType){
				this.$('.upfront-field-select-value').text($(e.target).text());
				this.$('.upfront-field-select').removeClass('open');
				this.fetch({postType: type});
			}
		},

		selectPost: function(e){
			var post = $(e.currentTarget);
			this.$('.upfront-selector-post.selected').removeClass('selected');

			this.selected = $(e.currentTarget).addClass('selected').attr('rel');
			this.$('.use_selection_container').removeClass('inactive');
		},

		postOk: function(e){
			e.preventDefault();
			if(!this.selected)
				return;

			Upfront.Popup.close();
			return this.deferred.resolve(this.posts.get(this.selected));
		},

		fetch: function(options){
			var me = this,
				loading = new Upfront.Views.Editor.Loading({
					loading: l10n.loading,
					done: l10n.thank_you_for_waiting,
					fixed: false
				})
			;

			this.$('.use_selection_container').addClass('inactive');
			this.selected = false;

			loading.render();
			this.$('#upfront-selector-posts').append(loading.$el);

			if(options.postType && options.postType != this.posts.postType){
				options.flush = true;
				this.posts.postType = options.postType;
			}

			var page = options.page;
			if(!page)
				page = 0;

			this.posts.fetchPage(page, options).done(function(pages){
				loading.done();
				me.$('#upfront-selector-posts').find('table').remove();
				me.$('#upfront-selector-posts').append(me.postListTpl({posts: me.posts.getPage(page)}));
				me.pagination.render();
			});
		},

		search: function(e){
			e.preventDefault();
			var s = this.$('.search_container input').val();
			if(s){
				this.fetch({search: s, flush: true});
			}
			else
				this.$('.search_container input').focus();
		},
		inputSearch: function(e){
			if(e.which == 13)
				this.search(e);
		}
	});



	var Loading = Backbone.View.extend({
		className: 'upfront-loading',
		is_done: false,
		done_callback: [],
		done_timeout: false,
		initialize: function (opts) {
			this.options = opts;
		},
		render: function () {
			var me = this;

			this.$el.html('<div class="upfront-loading-ani" />');

			if (this.options.fixed) this.$el.addClass('upfront-loading-fixed');
			if (this.options.loading_type) this.$el.addClass(this.options.loading_type);
			if (this.options.loading)this.$el.append('<p class="upfront-loading-text">' + this.options.loading + '</p>');

			this.$el.find('.upfront-loading-ani').on('animationend webkitAnimationEnd MSAnimationEnd oAnimationEnd', function(){
				var state = me.$el.hasClass('upfront-loading-repeat') ? 'repeat' : (me.$el.hasClass('upfront-loading-done') ? 'done' : 'start');
				if ( state == 'start' ){
					if ( me.is_done ){
						var done = me.done_text || me.options.done;
						me.$el.addClass('upfront-loading-done');
						me.$el.find('.upfront-loading-text').text(done);
					}
					else
						me.$el.addClass('upfront-loading-repeat');
				}
				else if ( state == 'repeat' ) {
					me.$el.removeClass('upfront-loading-repeat');
				}
				else if ( state == 'done' ) {
					me.remove();
					clearTimeout(me.done_timeout);
					if ( me.done_callback ) _(me.done_callback).each(function(cbk) { if (cbk && cbk.call) cbk.call(me); });
				}
			});
		},
		update_loading_text: function (loading) {
			this.$el.find('.upfront-loading-text').text(loading);
		},
		on_finish: function (callback) {
			this.done_callback.push(callback);
		},
		done: function (callback, done) {
			var me = this;
			this.is_done = true;
			this.done_timeout = setTimeout(function(){
				if ( me ){
					me.remove();
					_(me.done_callback).each(function(cbk) {
						if (cbk && cbk.call) cbk.call(me);
					});
				}
			}, 6000);
			if (callback) callback.call(me);
			this.done_text = done;
		},
		cancel: function (callback, canceled) {
			this.remove();
			if ( callback ) callback();
		}
	});

	var Modal = Backbone.View.extend({
		attributes: function () {
			return {
				class: "upfront-inline-modal upfront-ui upfront-no-select",
				id: "upfront-inline-modal-"+this.cid
			};
		},
		initialize: function (opts) {
			this.options = opts;
			this.$to = opts.to;
			this.button_text = opts.button_text ? opts.button_text : "Ok";
			this.button = typeof opts.button != 'undefined' ? opts.button : true;
			this.width = typeof opts.width != 'undefined' ? opts.width : '50%';
			this.top = typeof opts.top != 'undefined' ? opts.top : -1;
			this.left = typeof opts.left != 'undefined' ? opts.left : -1;
			this.right = typeof opts.right != 'undefined' ? opts.right : -1;
			this.keep_position = typeof opts.keep_position != 'undefined' ? opts.keep_position : true;
		},
		events: {
			"click": "on_click",
			"click .upfront-inline-modal-content": "on_click_content",
			"click .upfront-inline-modal-save": "on_click_save"
		},
		render: function () {
			this.$el.html(
				'<div class="upfront-inline-modal-wrap">' +
					'<div class="upfront-inline-modal-content"></div>' +
				'</div>'
			);
			this.$el.hide();
		},
		open: function (render_callback, context, button) {
			var me = this,
				$wrap = this.$el.find('.upfront-inline-modal-wrap'),
				$content = this.$el.find('.upfront-inline-modal-content'),
				$button = $('<button type="button" class="upfront-inline-modal-save">' + this.button_text + '</button>'),
				css = {},
				height, parent_height,
				is_lightbox = context && context.for_view && context.for_view.$el.hasClass('upfront-region-side-lightbox');


			this._deferred = $.Deferred();
			this.$el.show();
			render_callback.apply(context, [$content, this.$el]);
			button = typeof button != 'undefined' ? button : this.button;
			if ( button )
				$button.appendTo($content);
			// this.listenTo(Upfront.Events, "entity:region:deactivated", function(){
				// me.close(false);
			// });

			css.width = this.width;
			// if it is a lightbox, it is going to be a fixed position, no need to take scroll into calcs
			if (!is_lightbox && this.top >= 0 ) {
				css.top = this.top;
				css.bottom = 'auto';
			}
			else {
				parent_height = this.$el.height() > $(window).height() ? $(window).height() : this.$el.height();
				height = $content.outerHeight();
				this.top = parent_height-height > 0 ? (parent_height-height)/2 : 0;

				// if it is a lightbox, just add manual margin from top, rest is static.
				if(is_lightbox)
					this.top = 22;

				css.top = this.top;
				css.bottom = 'auto';
			}

			if ( this.left >= 0 ) {
				css.left = this.left;
				css.right = 'auto';
			}
			else if ( this.right >= 0 ) {
				css.left = 'auto';
				if (css.width > 0 && this.right + css.width <= $(window).width()) { // We need this for smaller screens, such as laptops
					css.right = this.right;
				}
			}
			$wrap.css(css);
			if ( this.keep_position ) {
				this.update_pos();
				$(window).on('scroll', this, this.on_scroll);
			}
			this.trigger('modal:open');
			return this._deferred.promise();
		},
		close: function (save) {
			this.$el.hide();
			$(window).off('scroll', this.on_scroll);
			this.trigger('modal:close');
			if ( ! this._deferred )
				return;
			if ( save )
				this._deferred.resolve(this);
			else
				this._deferred.reject(this);
		},
		on_scroll: function (e) {
			var me = e.data;
			me.update_pos();
		},
		on_click: function () {
			this.close(false);
		},
		on_click_content: function (e) {
			e.stopPropagation();
		},
		on_click_save: function () {
			this.close(true);
		},
		update_pos: function () {
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
			if ( this.$el.css('display') == 'none' )
				return;
			var	$wrap = this.$el.find('.upfront-inline-modal-wrap'),
				offset = this.$to.offset(),
				top = offset.top,
				bottom = top + this.$to.outerHeight(),
				win_height = $(window).height(),
				scroll_top = $(document).scrollTop(),
				scroll_bottom = scroll_top + win_height,
				rel_top = $main.offset().top,
				rel_bottom = 50,
				modal_offset = this.$el.offset(),
				modal_right = modal_offset.left+this.$el.width(),
				modal_height = this.$el.find('.upfront-inline-modal-wrap').outerHeight(),
				modal_bottom = top + modal_height
			;
			if ( scroll_top >= top-rel_top ) {
				if ( this.$el.css('position') != 'fixed' ){
					this.$el.css({
						position: 'fixed',
						top: 0,
						bottom: 0,
						left: modal_offset.left,
						right: $(window).width()-modal_right
					});
					$wrap.css({
						top: rel_top + this.top
					});
				}
			}
			else if ( ( bottom > modal_bottom ? bottom : modal_bottom )+rel_bottom > scroll_bottom ) {
				if ( this.$el.css('position') != 'fixed' ){
					this.$el.css({
						position: 'fixed',
						top: 0,
						bottom: 0,
						left: modal_offset.left,
						right: $(window).width()-modal_right
					});
					$wrap.css({
						top: ( bottom > modal_bottom ? win_height-(bottom-top > win_height ? win_height : bottom-top)-rel_bottom : win_height-modal_height-rel_bottom ) + this.top
					});
				}
			}
			else {
				this.$el.css({
					position: '',
					top: '',
					bottom: '',
					left: '',
					right: ''
				});
				$wrap.css({
					top: this.top
				});
			}
		}
	});

	var ModalBgSetting = Modal.extend({
		open: function () {
			return this.constructor.__super__.open.call(this, this.render_modal, this, true);
		},
		render_modal: function ($content, $modal) {
			var me = this,
				grid = Upfront.Settings.LayoutEditor.Grid,
				breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
				is_responsive = ( breakpoint && !breakpoint.default ),
				is_layout = ( this.model instanceof Upfront.Models.Layout ),
				is_region = ( this.model instanceof Upfront.Models.Region ),
				sub = is_region && this.model.is_main() ? false : this.model.get('sub'),
				bg_image = this.model.get_breakpoint_property_value('background_image', true),
				$template = $(_Upfront_Templates.region_edit_panel),
				setting_cback = _.template($template.find('#upfront-region-bg-setting').html()),
				setting = setting_cback(),
				region_types = [
					{ label: l10n.solid_color, value: 'color', icon: 'color' },
					{ label: l10n.image, value: 'image', icon: 'image' },
					{ label: l10n.video, value: 'video', icon: 'video' }
				]
			;

			if ( !is_layout ) {
				region_types.push({ label: l10n.image_slider, value: 'slider', icon: 'slider' });
				region_types.push({ label: l10n.map, value: 'map', icon: 'map' });
			}
			if (
				_upfront_post_data.post_id
				||
				(Upfront.Application.get_current() === Upfront.Application.MODE.THEME && 'type' in _upfront_post_data.layout && 'single' === _upfront_post_data.layout.type)
			) {
				if (!('item' in _upfront_post_data.layout && _upfront_post_data.layout.item.match(/single-404/))) region_types.push({ label: l10n.featured_image, value: 'featured', icon: 'feat' });
			}

			var	bg_type = new Field_Select({
					model: this.model,
					property: 'background_type',
					use_breakpoint_property: true,
					default_value: !bg_image ? 'color' : 'image',
					icon_class: 'upfront-region-field-icon',
					values: region_types,
					change: function () {
						var value = this.get_value();
						$content.find('.upfront-region-bg-setting-tab').not('.upfront-region-bg-setting-tab-'+value).hide();
						$content.find('.upfront-region-bg-setting-tab-'+value).show();
						me.render_modal_tab(value, $content.find('.upfront-region-bg-setting-tab-'+value), $content);
						this.model.set_breakpoint_property(this.property_name, value);
					}
				}),
				bg_item = new Upfront.Views.Editor.BgSettings.BgItem({
					model: this.model
				}),
				$region_header, $region_name, $region_global, $region_type, $region_nav, $region_behavior, $region_restrict, $region_sticky, $theme_body;

			if ( !is_responsive && is_region ) {
				var region_name = new Field_Text({
						model: this.model,
						name: 'title',
						placeholder: l10n.region_name_placeholder,
						compact: true,
						change: function () {
						},
						blur: function () {
							var collection = this.model.collection,
								prev_title = this.model.get('title'),
								prev_name = this.model.get('name'),
								title = $.trim(this.get_value().replace(/[^A-Za-z0-9\s_-]/g, '')), // strict filtering to prevent unwanted character
								name = title.toLowerCase().replace(/\s/g, '-'),
								new_title, sub_regions, region_css;
							if ( prev_title != title ) {
								// Check if the region name exists
								if ( collection.get_by_name(name) ) {
									new_title = collection.get_new_title(title + " ", 2);
									title = new_title.title;
									name = new_title.name;
								}

								// Let's keep old CSS content
								region_css = me.get_region_css_styles(this.model);

								// Also update the container attribute on sub regions
								if ( this.model.is_main() ) {
									sub_regions = this.model.get_sub_regions();
									_.each(sub_regions, function(sub_model, sub){
										if ( _.isArray(sub_model) )
											_.each(sub_model, function(sub_model2){ sub_model2.set({container: name}, {silent:true}); });
										else if ( _.isObject(sub_model) )
											sub_model.set({container: name}, {silent:true});
									});
									this.model.set({title: title, name: name, container: name}, {silent: true});
								}
								else {
									this.model.set({title: title, name: name}, {silent: true});
								}
								$region_name.find('.upfront-region-name-edit-value').text(title);

								// Save to the new CSS
								me.set_region_css_styles(this.model, region_css.styles, region_css.selector);

								this.model.get('properties').trigger('change');
							}
						},
						rendered: function () {
							var me = this;
							this.get_field().on('keyup', function(e){
								if ( e.which === 13 )
									me.trigger('blur');
							});
						}
					}),
					make_global = new Field_Checkboxes({
						model: this.model,
						name: 'scope',
						multiple: false,
						values: [
							{ label: l10n.make_global, value: 'global' }
						],
						change: function(){
							var value = this.get_value();
							if ( value == 'global' ){
								me.apply_region_scope(this.model, 'global');
								$region_name.find('.upfront-region-bg-setting-is-global').show();
							}
							//else {
							//	me.apply_region_scope(this.model, 'local');
							//}
						}
					}),
					localize_region = new Field_Button({
						model: this.model,
						name: 'localize',
						label: l10n.localize_region,
						classname: 'upfront-region-bg-setting-localize',
						compact: true,
						on_click: function () {
							me.apply_region_scope(this.model, 'local');
							$region_name.find('.upfront-region-bg-setting-name-wrap').show();
							$region_auto.show();
							$region_name.find('.upfront-region-bg-setting-name-edit').hide();
							$region_name.find('.upfront-region-bg-setting-is-global').hide();
							make_global.$el.find('[value=global]').prop('checked', false);
							make_global.$el.show();
							this.$el.hide();
						},
						rendered: function () {
							this.$el.attr('title', l10n.localize_region_info);
						}
					}),
					name_save = new Field_Button({
						model: this.model,
						name: 'save',
						label: l10n.save,
						compact: true,
						classname: 'upfront-region-bg-setting-name-save',
						on_click: function () {
							//region_name.trigger('blur');
							$region_name.find('.upfront-region-bg-setting-name-wrap').show();
							$region_auto.show();
							$region_name.find('.upfront-region-bg-setting-name-edit').hide();
							if ( this.model.get('scope') == 'global' ) {
								make_global.$el.hide();
								if ( !localize_region._no_display )
									localize_region.$el.show();
							}
							else {
								make_global.$el.show();
							}
						}
					})
				;
			}
			if ( is_layout ){
				var contained_region = new Field_Number({
					model: this.model,
					property: 'contained_region_width',
					label: l10n.contained_region_width,
					label_style: "inline",
					default_value: grid.size*grid.column_width,
					min: grid.size*grid.column_width,
					max: 5120,
					step: 1,
					suffix: 'px',
					change: function () {
						var value = this.get_value();
						value = ( value < this.options.min ) ? this.options.min : value;
						this.property.set({value: value});
						Upfront.Events.trigger('upfront:layout:contained_region_width', value);
					}
				});
			}
			if ( is_region && this.model.is_main() ){
				var global_regions = _.findWhere(Upfront.Application.current_subapplication.get_layout_data().properties, {name: 'global_regions'});
				var global_header_defined = _.isUndefined(global_regions) ?
					false : _.findWhere(global_regions.value, {name: 'header'});
				var global_footer_defined = _.isUndefined(global_regions) ?
					false : _.findWhere(global_regions.value, {name: 'footer'});

				var collection = this.model.collection,
					index = collection.indexOf(this.model),
					index_container = collection.index_container(this.model, ['shadow', 'lightbox']),
					total_container = collection.total_container(['shadow', 'lightbox']), // don't include shadow and lightbox region
					is_top = index_container == 0,
					is_bottom = index_container == total_container-1,
					has_sticky = collection.findWhere({sticky: '1'}),
					types = [
						{ label: l10n.full_width, value: 'wide' },
						{ label: l10n.contained, value: 'clip' }
					],
					types = index_container > 0 ? types : _.union( [
						{ label: l10n.full_screen, value: 'full' }
					], types)
					region_global = new Field_Checkboxes({
						model: this.model,
						name: 'scope',
						multiple: false,
						values: [
							{ label: (is_top ? l10n.use_as_global_header : (is_bottom ? l10n.use_as_global_footer : '')), value: 'global' }
						],
						change: function(){
							var value = this.get_value(),
								sub_regions = this.model.get_sub_regions(),
								new_title = false,
								title = false,
								name = false,
								related_region = false;
							if ( value == 'global' ){
								title = ( is_top ? l10n.header : ( is_bottom ? l10n.footer : '' ) );
								name = ( is_top ? 'header' : ( is_bottom ? 'footer' : '' ) );
								if ( title && name ){
									related_region = this.model.collection.get_by_name(name);
									if ( related_region && related_region != this.model ){ // make sure to rename other region with the same name and change the scope to local
										new_title = this.model.collection.get_new_title("Region ", total_container);
										me.apply_region_scope(related_region, 'local', new_title.name, new_title.title);
									}
									me.apply_region_scope(this.model, 'global', name, title);
								}
							}
							else {
								me.apply_region_scope(this.model, 'local');
							}
						}
					}),
					add_global_region = new Field_Button({
						model: this.model,
						label: is_top ? l10n.add_global_header : l10n.add_global_footer,
						info: (is_top ? l10n.layout_no_global_header : l10n.layout_no_global_footer),
						compact: true,
						on_click: function(e){
							e.preventDefault();
							var new_region = new Upfront.Models.Region( is_top ? global_header_defined : global_footer_defined ),
								related_region = this.model.collection.get_by_name( is_top ? 'header' : 'footer' ),
								new_title = false;
							if ( related_region ) {// make sure to rename other region with the same name and change the scope to local
								new_title = this.model.collection.get_new_title("Region ", total_container);
								me.apply_region_scope(related_region, 'local', new_title.name, new_title.title);
							}
							Upfront.Events.once('entity:region:added', function(view){
								view.trigger("activate_region", view);
							}, this);
							new_region.add_to( this.model.collection, ( is_top ? 0 : index+1 ) );
							me.close();
						}
					}),
					region_type = new Field_Radios({
						model: this.model,
						name: 'type',
						default_value: 'wide',
						layout: 'horizontal-inline',
						values: types,
						change: function () {
							var value = this.get_value();
							this.model.set({type: value}, {silent: true});
							if ( value == 'full' ){
								$region_nav.show();
								$region_behavior.show();
							}
							else {
								$region_nav.hide();
								$region_behavior.hide();
							}
							this.model.get('properties').trigger('change');
							me.update_pos();
							// Re-toggle editing
							Upfront.Events.trigger('command:region:edit_toggle', false);
							Upfront.Events.trigger('command:region:edit_toggle', true);
						}
					}),
					// backward compatible with old nav_region property
					region_nav_value = this.model.get_property_value_by_name('nav_region'),
					region_nav = new Field_Checkboxes({
						model: this.model,
						property: 'sub_regions',
						default_value: !this.model.get_property_value_by_name('sub_regions') ? [region_nav_value] : [],
						layout: 'horizontal-inline',
						multiple: true,
						values: [
							{ label: l10n.top, value: 'top' },
							{ label: l10n.bottom, value: 'bottom' }
						],
						change: function () {
							var value = this.get_value(),
								sub_regions = me.model.get_sub_regions(),
								copy_data = false;
							index = collection.indexOf(me.model);

							if ( !_.contains(value, 'top') && sub_regions.top ) {
								copy_data = Upfront.Util.model_to_json(sub_regions.top);
								me._sub_region_top_copy = new Upfront.Models.Region(copy_data);
								collection.remove(sub_regions.top);
							}
							if ( !_.contains(value, 'bottom') && sub_regions.bottom ) {
								copy_data = Upfront.Util.model_to_json(sub_regions.bottom);
								me._sub_region_bottom_copy = new Upfront.Models.Region(copy_data);
								collection.remove(sub_regions.bottom);
							}

							_.each(value, function(sub){
								if ( sub_regions[sub] )
									return;
								var add_region = false,
									region_model = false;
								if ( sub == 'bottom' ) {
									if ( me._sub_region_bottom_copy )
										region_model = me._sub_region_bottom_copy;
									add_region = sub_regions.right ? index+2 : index+1;
								}
								else if ( sub == 'top' ) {
									if ( me._sub_region_top_copy )
										region_model = me._sub_region_top_copy;
									add_region = sub_regions.left ? index-1 : index;
								}
								if ( add_region !== false ) {
									var name = me.model.get('name') + '_' + sub,
										title = me.model.get('title') + ' ' + sub;
									if ( region_model === false ){
										region_model = new Upfront.Models.Region(_.extend(_.clone(Upfront.data.region_default_args), {
											"name": name,
											"title": title,
											"container": me.model.get('name'),
											"sub": sub,
											"scope": me.model.get('scope')
										}));
									}
									region_model.add_to(collection, add_region, {sub: sub});
									Upfront.Events.trigger('command:region:edit_toggle', true);
								}
							});
							this.property.set({value: value});
						}
					}),
					region_behavior = new Field_Radios({
						model: this.model,
						name: 'behavior',
						default_value: 'keep-position',
						layout: 'horizontal-inline',
						values: [
							{ label: l10n.keep_position, value: 'keep-position' },
							{ label: l10n.keep_ratio, value: 'keep-ratio' }
						],
						change: function () {
							var value = this.get_value();
							this.model.set({behavior: value}, {silent: true});
							this.model.get('properties').trigger('change');
						}
					});
			}
			else if ( is_region && sub == 'fixed' ) {
				var region_restrict = new Field_Checkboxes({
						model: this.model,
						name: 'restrict_to_container',
						default_value: '',
						layout: 'horizontal-inline',
						values: [
							{ label: l10n.restrict_to_parent, value: '1' }
						],
						change: function () {
							var value = this.get_value();
							this.model.set({restrict_to_container: value}, {silent: true});
							this.model.trigger('restrict_to_container', value);
							this.model.get('properties').trigger('change');
						},
						multiple: false
					});
			}

			// Padding Settings
			var bg_padding_type = new Field_Radios({
					model: this.model,
					use_breakpoint_property: true,
					property: 'bg_padding_type',
					label: '',
					values: [{ label: l10n.varied_padding, value: 'varied' }, { label: l10n.equal_padding, value: 'equal' }],
					default_value: this.model.get_breakpoint_property_value('bg_padding_type') || 'varied',
					change: function () {
						this.model.set_breakpoint_property('bg_padding_type', this.get_value());
					},
					show: function (value, $el) {
						if(value === 'varied') {
							$('.upfront-region-bg-setting-padding-top', $content).show();
							$('.upfront-region-bg-setting-padding-bottom', $content).show();
							$('.upfront-region-bg-setting-equal-padding', $content).hide();
						}
						else {
							$('.upfront-region-bg-setting-equal-padding', $content).show();
							$('.upfront-region-bg-setting-padding-top', $content).hide();
							$('.upfront-region-bg-setting-padding-bottom', $content).hide();
						}
					}
				}),
				top_bg_padding_slider = new Field_Slider({
					model: this.model,
					use_breakpoint_property: true,
					property: 'top_bg_padding_slider',
					label: '',
					default_value: this.model.get_breakpoint_property_value('top_bg_padding_slider') || 0,
					min: 0,
					max: 200,
					step: 5,
					valueTextFilter: function () {return '';},
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('top_bg_padding_slider', value);
						top_bg_padding_num.get_field().val(value);
						this.model.set_breakpoint_property('top_bg_padding_num', value, true);
					}
				}),
				top_bg_padding_num = new Field_Number({
					model: this.model,
					use_breakpoint_property: true,
					property: 'top_bg_padding_num',
					label: '',
					default_value: this.model.get_breakpoint_property_value('top_bg_padding_num') || 0,
					prefix: l10n.bottom_padding,
					suffix: 'px',
					min: 0,
					step: 5,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('top_bg_padding_num', value);
						this.model.set_breakpoint_property('top_bg_padding_slider', value, true);
						top_bg_padding_slider.$el.find('#'+top_bg_padding_slider.get_field_id()).slider('value', value);
					}
				}),
				bottom_bg_padding_slider = new Field_Slider({
					model: this.model,
					use_breakpoint_property: true,
					property: 'bottom_bg_padding_slider',
					label: '',
					default_value: this.model.get_breakpoint_property_value('bottom_bg_padding_slider') || 0,
					min: 0,
					max: 200,
					step: 5,
					valueTextFilter: function () {return '';},
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('bottom_bg_padding_slider', value);
						bottom_bg_padding_num.get_field().val(value);
						this.model.set_breakpoint_property('bottom_bg_padding_num', value, true);
					}
				}),
				bottom_bg_padding_num = new Field_Number({
					model: this.model,
					use_breakpoint_property: true,
					property: 'bottom_bg_padding_num',
					label: '',
					default_value: this.model.get_breakpoint_property_value('bottom_bg_padding_num') || 0,
					suffix: 'px',
					min: 0,
					step: 5,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('bottom_bg_padding_num', value);
						this.model.set_breakpoint_property('bottom_bg_padding_slider', value, true);
						bottom_bg_padding_slider.$el.find('#'+bottom_bg_padding_slider.get_field_id()).slider('value', value);
					}
				}),
				bg_padding_slider = new Field_Slider({
					model: this.model,
					use_breakpoint_property: true,
					property: 'bg_padding_slider',
					label: '',
					default_value: this.model.get_breakpoint_property_value('bg_padding_slider') || 0,
					min: 0,
					max: 200,
					step: 5,
					valueTextFilter: function () {return '';},
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('bg_padding_slider', value);
						this.model.set_breakpoint_property('top_bg_padding_slider', value, true);
						this.model.set_breakpoint_property('bottom_bg_padding_slider', value, true);
						top_bg_padding_slider.$el.find('#'+top_bg_padding_slider.get_field_id()).slider('value', value);
						bottom_bg_padding_slider.$el.find('#'+bottom_bg_padding_slider.get_field_id()).slider('value', value);
						bg_padding_num.get_field().val(value);
						top_bg_padding_num.get_field().val(value);
						bottom_bg_padding_num.get_field().val(value);
						this.model.set_breakpoint_property('bg_padding_num', value, true);
						this.model.set_breakpoint_property('top_bg_padding_num', value, true);
						this.model.set_breakpoint_property('bottom_bg_padding_num', value, true);
					}
				}),
				bg_padding_num = new Field_Number({
					model: this.model,
					use_breakpoint_property: true,
					property: 'bg_padding_num',
					label: '',
					default_value: this.model.get_breakpoint_property_value('bg_padding_num') || 0,
					suffix: 'px',
					min: 0,
					step: 5,
					change: function () {
						var value = this.get_value();

						this.model.set_breakpoint_property('bg_padding_num', value);
						top_bg_padding_num.get_field().val(value);
						bottom_bg_padding_num.get_field().val(value);
						this.model.set_breakpoint_property('top_bg_padding_num', value, true);
						this.model.set_breakpoint_property('bottom_bg_padding_num', value, true);
						this.model.set_breakpoint_property('bg_padding_slider', value, true);
						this.model.set_breakpoint_property('top_bg_padding_slider', value, true);
						this.model.set_breakpoint_property('bottom_bg_padding_slider', value, true);
						bg_padding_slider.$el.find('#'+bg_padding_slider.get_field_id()).slider('value', value);
						top_bg_padding_slider.$el.find('#'+top_bg_padding_slider.get_field_id()).slider('value', value);
						bottom_bg_padding_slider.$el.find('#'+bottom_bg_padding_slider.get_field_id()).slider('value', value);
					}
				})
			;

			// Preserve background settings element event binding by detaching them before resetting html
			$content.find('.upfront-region-bg-setting-tab-primary, .upfront-region-bg-setting-tab-secondary').children().detach();

			$content.html(setting);
			$modal.addClass('upfront-region-modal-bg');
			$fixed = $content.find('.upfront-region-bg-setting-fixed-region');
			$fixed.hide();
			$lightbox = $content.find('.upfront-region-bg-setting-lightbox-region');

			$lightbox.hide();
			$region_header = $content.find('.upfront-region-bg-setting-header');
			$region_name = $content.find('.upfront-region-bg-setting-name');
			$region_global = $content.find('.upfront-region-bg-setting-region-global');
			$add_global_region = $content.find('.upfront-region-bg-setting-add-global-region');
			$region_type = $content.find('.upfront-region-bg-setting-region-type');
			$region_nav = $content.find('.upfront-region-bg-setting-region-nav');
			$region_behavior = $content.find('.upfront-region-bg-setting-region-behavior');
			$region_restrict = $content.find('.upfront-region-bg-setting-floating-restrict');
			$region_sticky = $content.find('.upfront-region-bg-setting-sticky');
			$region_auto = $content.find('.upfront-region-bg-setting-auto-resize');
			$region_padding_type = $content.find('.upfront-region-bg-setting-padding-type');
			$region_equal_padding = $content.find('.upfront-region-bg-setting-equal-padding');
			$region_top_padding = $content.find('.upfront-region-bg-setting-padding-top');
			$region_bottom_padding = $content.find('.upfront-region-bg-setting-padding-bottom');

			if ( !is_responsive && is_region ) {
				region_name.render();
				make_global.render();
				localize_region.render();
				name_save.render();
				$region_name.find('.upfront-region-bg-setting-name-edit').append([region_name.$el, make_global.$el, localize_region.$el, name_save.$el]).hide();
				$region_name.find('.upfront-region-name-edit-value').text(this.model.get('title'));
				if ( this.model.get('scope') == 'global' ) {
					$region_name.find('.upfront-region-bg-setting-is-global').show();
					make_global.$el.hide()
					if ( !this.model.is_main() && sub ) {
						var main_region = this.model.collection.get_by_name(this.model.get('container'));
						if ( main_region && main_region.get('scope') == 'global' ){
							localize_region.$el.hide();
							localize_region._no_display = true;
						}
					}
				}
				else {
					$region_name.find('.upfront-region-bg-setting-is-global').hide();
					localize_region.$el.hide();
				}
				// Let's not allow name change for header/footer, as the name is reserved for global region
				//if ( this.model.get('name') == 'header' || this.model.get('name') == 'footer' ){
				//	$region_name.find('.upfront-region-name-edit-trigger').hide();
				//}
				//else {
					$region_name.on('click', '.upfront-region-name-edit-trigger', function(e){
						e.preventDefault();
						$region_name.find('.upfront-region-bg-setting-name-wrap').hide();
						$region_auto.hide();
						$region_name.find('.upfront-region-bg-setting-name-edit').show();
						if ( me.model.get('scope') != 'global' )
							region_name.get_field().prop('disabled', false).trigger('focus').select();
						else
							region_name.get_field().prop('disabled', true);
					});
				//}
			}
			else {
				$region_header.hide();
			}

			if ( !is_responsive && is_region && this.model.is_main() ) {
				/*if ( is_top || is_bottom ){
					// This is global header or footer, or there is no global header/footer - show checkbox
					if (
						(is_top && ( this.model.get('name') == 'header' || !global_header_defined ))
						|| (!is_top && is_bottom && ( this.model.get('name') == 'footer' || !global_footer_defined ) )
					) {
						region_global.render();
						$region_global.append(region_global.$el);
					} else {
						// There are global header/footer but not used on this layout yet
						add_global_region.render();
						$add_global_region.append(add_global_region.$el);
					}
				}*/
				region_type.render();
				$region_type.append(region_type.$el);
				region_nav.render();
				$region_nav.append(region_nav.$el);
				region_behavior.render();
				$region_behavior.append(region_behavior.$el);
			}
			else {
				$region_global.hide();
				$region_type.hide();
				$region_nav.hide();
				$region_behavior.hide();
				$region_auto.hide();
			}
			$region_restrict.hide();
			$region_sticky.hide();

			if ( !is_responsive && is_region && ( this.model.is_main() || sub == 'top' || sub == 'bottom' ) ) {
				// Show the sticky option if there's no sticky region yet AND the region is <= 300px height
				if ( ( !has_sticky && this.for_view.$el.height() <= 300 ) || this.model.get('sticky') ) {
					var region_sticky = new Field_Checkboxes({
						model: this.model,
						name: 'sticky',
						default_value: '',
						layout: 'horizontal-inline',
						values: [
							{ label: l10n.sticky_region, value: '1' }
						],
						change: function () {
							var value = this.get_value();
							this.model.set({sticky: value}, {silent: true});
							this.model.get('properties').trigger('change');
						},
						multiple: false
					});
					region_sticky.render();
					$region_sticky.append(region_sticky.$el).show();
				}
			}

			$theme_body = $content.find('.upfront-region-bg-setting-theme-body');
			if ( is_layout ) {
				contained_region.render();
				$theme_body.append(contained_region.$el);
				$content.find('.upfront-region-bg-setting-edit-css').hide();
			}
			else {
				$theme_body.hide();
			}

			if(this.model.attributes.sub != 'lightbox') { /* dont need too many background options for the lightbox */
				bg_type.render();
				$content.find('.upfront-region-bg-setting-type').append(bg_type.$el);
				/*$content.find('.upfront-region-bg-setting-change-image').on('click', function (e) {
					e.preventDefault();
					e.stopPropagation();
					me.upload_image();
				});*/

			}
			else {
				$content.find('.upfront-region-bg-setting-type').remove();
				//$content.find('.upfront-region-bg-setting-change-image').remove();
			}

			$content.find('.upfront-region-bg-setting-edit-css').on('click', function(e){
				e.preventDefault();
				e.stopPropagation();
				me.trigger_edit_css();
			});

			if ( is_region && this.model.is_main() ){
				var $auto_resize = $content.find('.upfront-region-bg-setting-auto-resize');
				$auto_resize.on('click', function (e) {
					e.preventDefault();
					e.stopPropagation();
					me.trigger_expand_lock($(this));
				});
				this.render_expand_lock($auto_resize);
				this.listenTo(region_type, 'changed', function(){
					me.render_expand_lock($auto_resize);
				});
				if ( !is_responsive )
					region_type.trigger('changed');
			}
			else if ( is_region && sub == 'fixed' ) {
				this.render_fixed_settings($fixed);
				$fixed.show();
				region_restrict.render();
				$region_restrict.append(region_restrict.$el).show();
			}
			else if ( is_region && sub == 'lightbox' ) {
				this.render_lightbox_settings($lightbox);
				$lightbox.show();
			}
			else {
				$content.find('.upfront-region-bg-setting-auto-resize').hide();
			}

			// Padding Settings
			bg_padding_type.render();
			$region_padding_type.append(bg_padding_type.$el);
			top_bg_padding_slider.render();
			$region_top_padding.append(top_bg_padding_slider.$el);
			top_bg_padding_num.render();
			$region_top_padding.append(top_bg_padding_num.$el);
			bottom_bg_padding_slider.render();
			$region_bottom_padding.append(bottom_bg_padding_slider.$el);
			bottom_bg_padding_num.render();
			$region_bottom_padding.append(bottom_bg_padding_num.$el);
			bg_padding_slider.render();
			$region_equal_padding.append(bg_padding_slider.$el);
			bg_padding_num.render();
			$region_equal_padding.append(bg_padding_num.$el);

			bg_type.trigger('changed');
		},
		on_close_modal: function () {
			var me = this;
			me._active = false;
			me.render_icon();
		},
		notify: function () {
			Upfront.Views.Editor.notify(l10n.bg_updated);
		},
		apply_region_scope: function (model, scope, name, title) {
			var me = this,
				sub_regions = model.get_sub_regions(),
				prev_title = model.get('title'),
				prev_name = model.get('name'),
				set_sub = function (region) {
					var css = me.get_region_css_styles(region);
					region.set({scope: scope}, {silent: true});
					if ( name && prev_name != name ){
						var title_rx = new RegExp('^' + prev_title, 'i'),
							name_rx = new RegExp('^' + prev_name, 'i'),
							sub_title = region.get('title').replace( title_rx, title ),
							sub_name = region.get('name').replace( name_rx, name );
						region.set({
							container: name,
							title: sub_title,
							name: sub_name
						}, {silent: true});
					}
					me.set_region_css_styles(region, css.styles, css.selector);
					region.get('properties').trigger('change');
				},
				region_css;
			if ( model.is_main() ){
				_.each(sub_regions, function(sub){
					if ( _.isArray(sub) )
						_.each(sub, function(each){ set_sub(each); })
					else if ( sub )
						set_sub(sub);
				});
			}
			region_css = me.get_region_css_styles(model);
			model.set({ scope: scope }, {silent: true});
			if ( name && prev_name != name ){
				model.set({
					title: title,
					name: name,
					container: name
				}, {silent: true});
			}
			me.set_region_css_styles(model, region_css.styles, region_css.selector);
			model.get('properties').trigger('change');
		},
		get_region_css_styles: function (model) {
			Upfront.Application.cssEditor.init({
				model: model,
				type: model.is_main() ? "RegionContainer" : "Region",
				element_id: model.is_main() ? "region-container-" + model.get('name') : "region-" + model.get('name'),
				no_render: true
			});
			return {
				styles: $.trim(Upfront.Application.cssEditor.get_style_element().html()),
				selector: Upfront.Application.cssEditor.get_css_selector()
			};
		},
		set_region_css_styles: function (model, styles, prev_selector) {
			if ( styles ) {
				Upfront.Application.cssEditor.init({
					model: model,
					type: model.is_main() ? "RegionContainer" : "Region",
					element_id: model.is_main() ? "region-container-" + model.get('name') : "region-" + model.get('name'),
					no_stylename_fallback: true,
					no_render: true
				});
				selector = Upfront.Application.cssEditor.get_css_selector();
				if ( prev_selector != selector )
					styles = styles.replace(new RegExp(prev_selector.replace(/^\./, '\.'), 'g'), selector);
				Upfront.Application.cssEditor.get_style_element().html(styles);
				Upfront.Application.cssEditor.saveCall(false);
			}
		},
		render_fixed_settings: function ($content) {
			var me = this,
				grid = Upfront.Settings.LayoutEditor.Grid,
				top = this.model.get_property_value_by_name('top'),
				is_top = ( typeof top == 'number' ),
				left = this.model.get_property_value_by_name('left'),
				is_left = ( typeof left == 'number' ),
				bottom = this.model.get_property_value_by_name('bottom'),
				is_bottom = ( typeof bottom == 'number' ),
				right = this.model.get_property_value_by_name('right'),
				is_right = ( typeof right == 'number' ),
				set_value = function () {
					var value = this.get_value(),
						saved = this.get_saved_value();
					if ( value != saved ){
						switch ( this.options.property ){
							case 'top':
								this.model.remove_property('bottom', true); break;
							case 'bottom':
								this.model.remove_property('top', true); break;
							case 'left':
								this.model.remove_property('right', true); break;
							case 'right':
								this.model.remove_property('left', true); break;
						}
						this.property.set({'value': parseInt(value)});
					}
				},
				fields = {
					width: new Upfront.Views.Editor.Field.Number({
						model: this.model,
						property: 'width',
						label: l10n.width + ':',
						label_style: "inline",
						min: 3 * grid.column_width,
						max: Math.floor(grid.size/2) * grid.column_width,
						change: set_value
					}),
					height: new Upfront.Views.Editor.Field.Number({
						model: this.model,
						property: 'height',
						label: l10n.height + ':',
						label_style: "inline",
						min: 3 * grid.baseline,
						change: set_value
					})
				};
			if ( is_top || !is_bottom )
				fields.top = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'top',
					label: l10n.top + ':',
					label_style: "inline",
					min: 0,
					change: set_value
				});
			else
				fields.bottom = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'bottom',
					label: l10n.bottom + ':',
					label_style: "inline",
					min: 0,
					change: set_value
				});
			if ( is_left || !is_right )
				fields.left = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'left',
					label: l10n.left + ':',
					label_style: "inline",
					min: 0,
					change: set_value
				});
			else
				fields.right = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'right',
					label: l10n.right + ":",
					label_style: "inline",
					min: 0,
					change: set_value
				});
			_.each(fields, function(field){
				field.render();
				field.delegateEvents();
				$content.append(field.$el);
			});
		},
		render_lightbox_settings: function ($content) {
			var me = this,
				grid = Upfront.Settings.LayoutEditor.Grid,
				/*top = this.model.get_property_value_by_name('top'),
				is_top = ( typeof top == 'number' ),
				left = this.model.get_property_value_by_name('left'),
				is_left = ( typeof left == 'number' ),
				bottom = this.model.get_property_value_by_name('bottom'),
				is_bottom = ( typeof bottom == 'number' ),
				right = this.model.get_property_value_by_name('right'),
				is_right = ( typeof right == 'number' ),*/
				set_value = function (object) {

					me = object.$spectrum?object:this;

					var value = me.get_value(),
						saved = me.get_saved_value();
					if ( value != saved ){
						me.property.set({'value': value});
					}
				},
				fields = {
					width: new Upfront.Views.Editor.Field.Number({
						model: this.model,
						property: 'col',
						className: 'upfront-field-wrap upfront-field-wrap-number width_cols',
						label: l10n.col_width + ":",
						label_style: "inline",
						min: 3,// * grid.column_width,
						max: 24,//Math.floor(grid.size/2) * grid.column_width,
						change: set_value
					}),
					height: new Upfront.Views.Editor.Field.Number({
						model: this.model,
						property: 'height',
						label: l10n.px_height + ":",
						label_style: "inline",
						min: 3 * grid.baseline,
						max: 99999,
						change: set_value
					}),
					click_out_close: new Upfront.Views.Editor.Field.Checkboxes({
					    model: this.model,
					    property: 'click_out_close',
					    label: "",
				  	    values: [
						    { label: l10n.click_close_ltbox, value: 'yes', checked: this.model.get_property_value_by_name('click_out_close') == 'yes' ? 'checked' : false }
					    ],
						change: set_value
				    }),
					show_close: new Upfront.Views.Editor.Field.Checkboxes({
					    model: this.model,
					    property: 'show_close',
					    label: "",
				  	    values: [
						    { label: l10n.show_close_icon, value: 'yes', checked: this.model.get_property_value_by_name('show_close') == 'yes' ? 'checked' : false }
					    ],
						change: set_value
				    }),
					/*add_close_text: new Upfront.Views.Editor.Field.Checkboxes({
					    model: this.model,
					    property: 'add_close_text',
					    label: "",
				  	    values: [
						    { label: l10n.add_close_text, value: 'yes', checked: this.model.get_property_value_by_name('add_close_text') == 'yes' ? 'checked' : false }
					    ],
						change: set_value
				    }),
					close_text: new Upfront.Views.Editor.Field.Text({
						model: this.model,
						default_value: l10n.close,
						property: 'close_text',
						label_style: "inline",
						change: set_value
					})*/
				};

				fields.overlay_color = new Upfront.Views.Editor.Field.Color({
						model: this.model,
						property: 'overlay_color',
						className: 'upfront-field-wrap upfront-field-wrap-color sp-cf overlay_color',
						default_value: 'rgba(38,58,77,0.75)',
						label: l10n.overlay_bg + ":",
						change: set_value,
						spectrum: {
							move: function(color) {
								var rgb = color.toRgb(),
									rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';
								fields.overlay_color.get_field().val(rgba_string)
								set_value(fields.overlay_color);
							},
							change: function(color) {
								var rgb = color.toRgb(),
									rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';
								fields.overlay_color.get_field().val(rgba_string)
								set_value(fields.overlay_color);
							}
						}
					});

				fields.lightbox_color = new Upfront.Views.Editor.Field.Color({
						model: this.model,
						property: 'lightbox_color',
						default_value: 'rgba(248,254,255,0.9)',
						label: l10n.active_area_bg + ":",
						change: set_value,
						spectrum: {
							move: function(color) {
								var rgb = color.toRgb(),
									rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';
								fields.lightbox_color.get_field().val(rgba_string)
								set_value(fields.lightbox_color);
							},
							change: function(color) {
								var rgb = color.toRgb(),
									rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';
								fields.lightbox_color.get_field().val(rgba_string)
								set_value(fields.lightbox_color);
							},
						}
					});

			_.each(fields, function(field){
				field.render();
				field.delegateEvents();
				$content.append(field.$el);
			});

			this.model.set_property('delete', false);
			var me = this;

			$content.on('click', 'a.upfront-entity-delete_trigger', function() {
				me.model.set_property('delete', true);
				me.close();
			});

			$content.closest('.upfront-inline-modal-wrap').draggable();
		},
		update_lightbox_overlay: function(color) {
			var rgb = color.toRgb(),
				rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';
		},
		render_modal_tab: function (tab, $tab, $content) {
			var $change_image = $content.find('.upfront-region-bg-setting-change-image');
			$change_image.hide();
			switch (tab){
				case 'color':
					this.render_modal_tab_color($tab);
					break;
				case 'image':
					$change_image.show();
					this.render_modal_tab_image($tab, tab);
					break;
				case 'featured':
					this.render_modal_tab_image($tab, tab);
					break;
				case 'slider':
					this.render_modal_tab_slider($tab);
					break;
				case 'map':
					this.render_modal_tab_map($tab);
					break;
				case 'video':
					this.render_modal_tab_video($tab);
					break;
			}
		},
		_render_tab_template: function($target, primary, secondary, template){
			var $template = $(_Upfront_Templates.region_edit_panel),
				$tab = false, tpl = false
			;
			if (template) {
				tpl = _.template($template.find('#upfront-region-bg-setting-tab-'+template).html());
			} else {
				tpl = _.template($template.find('#upfront-region-bg-setting-tab').html());
			}
			if (tpl) $tab = $('<div>' + tpl() + '</div>');
				//$tab = $('<div>'+$template.find( template ? '#upfront-region-bg-setting-tab-'+template : '#upfront-region-bg-setting-tab').html()+'</div>');
			$tab.find('.upfront-region-bg-setting-tab-primary').append(primary);
			if ( secondary )
				$tab.find('.upfront-region-bg-setting-tab-secondary').append(secondary);
			$target.html('');
			$target.append($tab);
		},
		// Color tab
		render_modal_tab_color: function ($tab) {
			if ( ! this._color_item ){
				this._color_item = new Upfront.Views.Editor.BgSettings.ColorItem({
					model: this.model
				});
				this._color_item.render();
			}
			this._color_item.trigger('show');
			this._render_tab_template($tab, this._color_item.$el, '');
		},
		// Image tab
		render_modal_tab_image: function ($tab, value) {
			if ( ! this._image_item ){
				this._image_item = new Upfront.Views.Editor.BgSettings.ImageItem({
					model: this.model
				});
				this._image_item.render();
				this.$_image_primary = this._image_item.$el.find('.uf-bgsettings-image-style, .uf-bgsettings-image-pick');
			}
			this._image_item.trigger('show');
			this._render_tab_template($tab, this.$_image_primary, this._image_item.$el);
		},
		// Slider tab
		render_modal_tab_slider: function ($tab) {
			if ( ! this._slider_item ) {
				this.$_slides = $('<div class="upfront-region-bg-slider-slides"></div>'),
				this._slider_item = new Upfront.Views.Editor.BgSettings.SliderItem({
					model: this.model,
					slides_item_el: this.$_slides
				});
				this._slider_item.render();
				this.$_slider_primary = this._slider_item.$el.find('.uf-bgsettings-slider-transition');
			}
			this._slider_item.trigger('show');
			this._render_tab_template($tab, this.$_slider_primary, [this._slider_item.$el, this.$_slides]);
		},
		// Map tab
		render_modal_tab_map: function ($tab) {
			if ( ! this._map_item ){
				this._map_item = new Upfront.Views.Editor.BgSettings.MapItem({
					model: this.model
				});
				this._map_item.render();
			}
			this._map_item.trigger('show');
			this._render_tab_template($tab, '', this._map_item.$el);
		},
		// Video tab
		render_modal_tab_video: function ($tab) {
			if ( ! this._video_item ) {
				this._video_item = new Upfront.Views.Editor.BgSettings.VideoItem({
					model: this.model
				});
				this._video_item.render();
			}
			this._video_item.trigger('show');
			this._render_tab_template($tab, '', this._video_item.$el);
		},
		// Expand lock trigger
		render_expand_lock: function ($el) {
			var locked = this.model.get_breakpoint_property_value('expand_lock', true),
				type = this.model.get('type'),
				$status = $('<span />');
			if ( type == 'full' ) {
				$el.addClass('upfront-region-bg-setting-auto-resize-disabled');
				$el.attr('title', l10n.auto_resize_disabled_title);
			}
			else {
				$el.removeClass('upfront-region-bg-setting-auto-resize-disabled');
				$el.removeAttr('title');
			}
			if ( locked ){
				$status.addClass('auto-resize-off');
			}
			else {
				$status.addClass('auto-resize-on');
			}
			$el.html('');
			$el.append('<span>' + l10n.auto_resize + '</span>');
			$el.append($status);
		},
		trigger_expand_lock: function ($el) {
			if ( $el.hasClass('upfront-region-bg-setting-auto-resize-disabled') )
				return;
			var locked = this.model.get_breakpoint_property_value('expand_lock');
			this.model.set_breakpoint_property('expand_lock', !locked);
			this.render_expand_lock($el);
		},
		// Edit CSS trigger
		trigger_edit_css: function () {
			Upfront.Application.cssEditor.init({
				model: this.model,
				type: this.model.is_main() ? "RegionContainer" : (this.model.get('type') == 'lightbox')?"RegionLightbox":"Region",
				element_id: this.model.is_main() ? "region-container-" + this.model.get('name') : "region-" + this.model.get('name')
			});

			this.listenTo(Upfront.Application.cssEditor, 'updateStyles', this.adjust_grid_padding);
		},

		adjust_grid_padding: function() {
			var togglegrid = new Upfront.Views.Editor.Command_ToggleGrid();
			togglegrid.update_grid();
		}
	});

	var RegionPanelItem = InlinePanels.Item.extend({
		initialize: function () {
			this.on('modal:open', this.on_modal_open, this);
			this.on('modal:close', this.on_modal_close, this);
		},
		on_modal_open: function () {
			// Disable region changing
			Upfront.Events.trigger('command:region:edit_toggle', false);
		},
		on_modal_close: function () {
			// Re-enable region changing
			Upfront.Events.trigger('command:region:edit_toggle', true);
		}
	});

	var RegionPanelItem_BgSetting = RegionPanelItem.extend({
		events: {
			'click .upfront-icon': 'open_bg_setting'
		},
		className: 'upfront-inline-panel-item upfront-region-panel-item-bg',
		icon: function(){
			return this._active ? 'bg-setting-active' : 'bg-setting';
		},
		tooltip: l10n.change_background,
		_active: false,
		open_bg_setting: function () {
			var type = this.model.get_property_value_by_name('background_type');
			if ( !type ){
				if ( this.model.get_property_value_by_name('background_image') )
					this.model.set_property('background_type', 'image');
			}
			this._active = true;
			this.render_icon();
			this.open_modal(this.render_modal, true).always($.proxy(this.on_close_modal, this)).fail($.proxy(this.notify, this));
		},
	});

	var RegionPanelItem_ExpandLock = RegionPanelItem.extend({
		events: {
			'click .upfront-icon': 'toggle_lock'
		},
		className: 'upfront-inline-panel-item upfront-region-panel-item-expand-lock',
		icon: function () {
			var locked = this.model.get_property_value_by_name('expand_lock');
			return locked ? 'expand-lock' : 'expand-unlock';
		},
		tooltip: function () {
			var locked = this.model.get_property_value_by_name('expand_lock'),
				status = '<span class="' + (locked ? 'expand-lock-active' : 'expand-lock-inactive') + '">' + (locked ? l10n.off : l10n.on) + '</span>';
			return l10n.autoexpand.replace(/%s/, status);
		},
		toggle_lock: function () {
			var locked = this.model.get_property_value_by_name('expand_lock');
			this.model.set_property('expand_lock', !locked);
			this.render_icon();
			this.render_tooltip();
		}
	});

	var RegionPanelItem_AddRegion = RegionPanelItem.extend({
		width: 24,
		height: 24,
		events: {
			'click': 'add_region_modal'
		},
		className: 'upfront-inline-panel-item upfront-region-panel-item-add-region',
		icon: function () {
			var to = this.options.to;
			if ( to.match(/^(top|bottom)-(left|right)$/) )
				return;
			return 'add ' + 'add-' + to;
		},
		tooltip: function () {
			var to = this.options.to;
			switch ( to ){
				case 'bottom':
					var msg = l10n.new_region_below; break;
				case 'left':
					var msg = l10n.new_sidebar_region; break;
				case 'right':
					var msg = l10n.new_sidebar_region; break;
				case 'top':
					var msg = l10n.new_region_above; break;
				case 'top-left':
				case 'top-right':
				case 'bottom-left':
				case 'bottom-right':
					var msg = l10n.add_floating_region; break;
			}
			return msg;
		},
		tooltip_pos: function () {
			var to = this.options.to;
			switch ( to ){
				case 'bottom':
					var pos = 'top'; break;
				case 'left':
				case 'top-left':
				case 'bottom-left':
					var pos = 'right'; break;
				case 'right':
				case 'top-right':
				case 'bottom-right':
					var pos = 'left'; break;
				case 'top':
					var pos = 'bottom'; break;
			}
			return pos;
		},
		initialize: function (opts) {
			this.options = opts;
			if ( ! this.options.to )
				this.options.to = 'top';
			if ( this.options.width )
				this.width = this.options.width;
			if ( this.options.height )
				this.height = this.options.height;
		},
		add_region_modal: function (e) {
			var to = this.options.to,
				me = this,
				modal = new Modal({ to: this.panel_view.panels_view.$el, button: true, width: 422 }),
				disable_global = ( ( to == 'left' || to == 'right' ) && me.model.get('scope') == 'global' );
				var parentContainer = me.$el.parents('.upfront-region-center');
				parentContainer.addClass('upfront-region-editing-modal');
				parentContainer.next().find('.upfront-icon-control-region-resize').hide();
				fields = {
					from: new Field_Radios({
						name: 'from',
						default_value: 'new',
						layout: 'horizontal-inline',
						values: [
							{ label: l10n.new_region, value: 'new' },
							{ label: l10n.choose_global_region, value: 'global', disabled: disable_global }
						],
						change: function(){
							var value = this.get_value();
							me.from = value;
						}
					}),
					region_title: new Field_Text({
						name: 'name',
						placeholder: l10n.region_name_placeholder,
						focus: function () {
							fields.from.set_value('new');
							fields.from.trigger('changed');
						},
						change: function () {
							var value = this.get_value();
							me.region_title = value;
						}
					}),
					make_global: new Field_Checkboxes({
						name: 'make_global',
						multiple: false,
						values: [{ label: l10n.make_this_region_global, value: 1 }],
						focus: function () {
							fields.from.set_value('new');
							fields.from.trigger('changed');
						},
						change: function () {
							var value = this.get_value();
							me.make_global = value == 1 ? true : false;
						}
					}),
					from_region: new Field_Select({
						name: 'from_region',
						values: [{ label: Upfront.Settings.l10n.global.behaviors.loading, value: "" }],
						disabled: disable_global,
						focus: function () {
							fields.from.set_value('global');
							fields.from.trigger('changed');
						},
						change: function () {
							var value = this.get_value();
							me.from_region = value;
						}
					})
				},
				from_region_values = function () {
					var values = [],
						is_main = ( to == 'top' || to == 'bottom' ),
						is_side = ( to == 'left' || to == 'right' );
					values.push( { label: l10n.select_global_region, value: '', disabled: true } )
					_.each(Upfront.data.global_regions, function(region){
						if ( is_main && region.container && region.name != region.container ) // exclude sub-region if main
							return;
						if ( is_side && ( region.sub != 'left' && region.sub != 'right' ) ) // exclude non-side region if it's side region (left/right)
							return;
						var collection = me.model.collection,
							region_exists = collection.get_by_name(region.name);
						values.push( { label: region.title, value: region.name, disabled: ( region_exists !== false ) } );
					});
					return values;
				};
			modal.render();
			this.panel_view.panels_view.$el.append(modal.$el);

			// Set default
			this.from = 'new';
			this.region_title = '';
			this.make_global = false;
			this.from_region = '';

			if ( !Upfront.data.global_regions ){
				Upfront.Util.post({
					action: 'upfront_list_scoped_regions',
					scope: 'global',
					storage_key: _upfront_save_storage_key
				}).done(function(data) {
					Upfront.data.global_regions = data.data;
					fields.from_region.options.values = from_region_values();
					fields.from_region.render();
					fields.from_region.delegateEvents();
				});
			}
			else {
				fields.from_region.options.values = from_region_values();
			}

			modal.open(function($content, $modal){
				var template = _.template(_Upfront_Templates.region_add_panel, {});
				_.each(fields, function(field, id) {
					field.render();
					field.delegateEvents();
				});
				$modal.addClass('upfront-add-region-modal')
				$content.append(template);
				$content.find('.upfront-add-region-choice').append(fields.from.$el);
				$content.find('.upfront-add-region-new').append(fields.region_title.$el);
				if ( !disable_global )
					$content.find('.upfront-add-region-new').append(fields.make_global.$el);
				$content.find('.upfront-add-region-global').append(fields.from_region.$el);
			}, this)
			.done(function(modal_view){
				if ( me.from == 'new' || !me.from_region ) {
					me.add_region();
				}
				else {
					me.add_region_from_global(me.from_region);
				}
			})
			.always(function(modal_view){
				parentContainer.removeClass('upfront-region-editing-modal');
				parentContainer.next().find('.upfront-icon-control-region-resize').show();
				modal_view.remove();
			});

			e.stopPropagation();
		},
		add_region: function () {
			var to = this.options.to,
				collection = this.model.collection,
				total = collection.size()-1, // total minus shadow region
				index = collection.indexOf(this.model),
				position = this.model.get('position'),
				sub_model = this.model.get_sub_regions(),
				is_new_container = ( to == 'top' || to == 'bottom' ),
				is_before = ( to == 'top' || to == 'left' ),
				region_title = this.region_title ? this.region_title.replace(/[^A-Za-z0-9\s_-]/g, '') : ( is_new_container ? "Region " : this.model.get('title') + ' ' + to.charAt(0).toUpperCase() + to.slice(1) ),
				region_name = region_title.toLowerCase().replace(/\s/g, '-'),
				new_title = collection.get_by_name(region_name) || (!this.region_title && is_new_container) ? collection.get_new_title(region_title, 1) : false,
				title = new_title !== false ? new_title.title : region_title,
				name = new_title !== false ? new_title.name : region_name,
				new_region = new Upfront.Models.Region(_.extend(_.clone(Upfront.data.region_default_args), {
					"name": name,
					"container": is_new_container ? name : this.model.get('name'),
					"title": title
				})),
				options = {},
				sub_index_func = function(model){
					if ( !model || !model.cid )
						return -1;
					return collection.indexOf(model);
				};

			if ( ! is_new_container ) {
				new_region.set_property('col', 5);
				if ( to == 'left' || to == 'right' ){
					new_region.set('sub', is_before ? 'left' : 'right');
					new_region.set('position', is_before ? position-1 : position+1 );
					options.sub = is_before ? 'left' : 'right';
				}
				else if ( to == 'top-left' || to == 'top-right' || to == 'bottom-left' || to == 'bottom-right' ) {
					new_region.set('type', 'fixed');
					new_region.set('sub', 'fixed');
					new_region.set_property('width', 225);
					new_region.set_property('height', 225);
					if ( to.match(/^top/) )
						new_region.set_property('top', 30);
					if ( to.match(/^bottom/) )
						new_region.set_property('bottom', 30);
					if ( to.match(/left$/) )
						new_region.set_property('left', 30);
					if ( to.match(/right$/) )
						new_region.set_property('right', 30);
					new_region.set_property('background_type', 'color');
					new_region.set_property('background_color', '#aeb8c2');
					options.sub = 'fixed';
				}
				if ( this.make_global )
					new_region.set({scope: 'global'});
				else
					new_region.set({scope: this.model.get('scope')});
			}
			else {
				new_region.set_property('row', Upfront.Util.height_to_row(300)); // default to 300px worth of rows
				var sub_model_index = _.filter(_.map(sub_model, sub_index_func), function(i){ return i >= 0; }),
					sub_model_fixed_index = sub_model.fixed.length > 0 ? _.map(sub_model.fixed, sub_index_func) : [];
				sub_model_index = _.union(sub_model_index, sub_model_fixed_index, [index]);
				if ( sub_model_index.length > 0 ){
					if ( to == 'top' )
						index = _.min(sub_model_index);
					else if ( to == 'bottom' )
						index = _.max(sub_model_index);
				}
				if ( this.make_global )
					new_region.set({scope: 'global'});
			}
			if ( new_region.get('clip') || !is_new_container ){
				Upfront.Events.once('entity:region:before_render', this.before_animation, this);
				Upfront.Events.once('entity:region:added', this.run_animation, this);
			}
			else {
				Upfront.Events.once('entity:region_container:before_render', this.before_animation, this);
				Upfront.Events.once('entity:region:added', this.run_animation, this);
			}
			new_region.add_to(collection, (is_before ? index : index+1), options);

			var wide_regions = collection.where({ type : 'wide'});
			if(wide_regions.length > 0) {
				$('div.upfront-regions a#no_region_add_one').remove();

			}
		},
		add_region_from_global: function (from_region) {
			var me = this,
				to = this.options.to,
				collection = this.model.collection,
				total = collection.size()-1, // total minus shadow region
				index = collection.indexOf(this.model),
				position = this.model.get('position'),
				sub_model = this.model.get_sub_regions(),
				is_new_container = ( to == 'top' || to == 'bottom' ),
				is_before = ( to == 'top' || to == 'left' ),
				sub_index_func = function(model){
					if ( !model || !model.cid )
						return -1;
					return collection.indexOf(model);
				};
			if ( is_new_container ){
				var sub_model_index = _.filter(_.map(sub_model, sub_index_func), function(i){ return i >= 0; }),
					sub_model_fixed_index = sub_model.fixed.length > 0 ? _.map(sub_model.fixed, sub_index_func) : [];
				sub_model_index = _.union(sub_model_index, sub_model_fixed_index, [index]);
				if ( sub_model_index.length > 0 ){
					if ( to == 'top' )
						index = _.min(sub_model_index);
					else if ( to == 'bottom' )
						index = _.max(sub_model_index);
				}
			}
			if ( !is_new_container ){
				Upfront.Events.once('entity:region:before_render', this.before_animation, this);
				Upfront.Events.once('entity:region:added', this.run_animation, this);
			}
			else {
				Upfront.Events.once('entity:region_container:before_render', this.before_animation, this);
				Upfront.Events.once('entity:region:added', this.run_animation, this);
			}
			Upfront.Util.post({
				action: 'upfront_get_scoped_regions',
				scope: 'global',
				name: from_region,
				storage_key: _upfront_save_storage_key
			}).done(function(data) {
				var regions = data.data,
					main_add = false,
					to_add = [],
					to_add_run = function(){
						_.each(to_add, function(add){
							add.model.add_to(collection, add.index, add.options);
						})
					};
				_.each(regions, function(region, i){
					var region_model = new Upfront.Models.Region(region),
						options = {};
					if ( ! region_model.is_main() ){
						if ( to == 'left' || to == 'right' ) {
							region_model.set('container', me.model.get('name'));
							region_model.set('sub', is_before ? 'left' : 'right');
							options.sub = is_before ? 'left' : 'right';
						}
						else {
							options.sub = region_model.get('sub');
						}
						to_add.push({
							model: region_model,
							index: (is_before ? index : index+1) + i,
							options: options
						});
					}
					else {
						main_add = {
							model: region_model,
							index: (is_before ? index : index+1),
							options: options
						}
					}
				});
				if ( main_add !== false ){
					Upfront.Events.once('entity:region:added', function(){
						to_add_run();
					});
					main_add.model.add_to(collection, main_add.index, main_add.options);
				}
				else {
					to_add_run();
				}
			});
		},
		before_animation: function (view, model) {
			// prepare to run animation, disable edit
			Upfront.Events.trigger('command:region:edit_toggle', false);
			Upfront.Events.trigger('command:region:fixed_edit_toggle', false);
		},
		run_animation: function (view, model) {
			var to = this.options.to,
				ani_class = 'upfront-add-region-ani upfront-add-region-ani-' + to,
				end_t = setTimeout(end, 500),
				ani_event_start = 'animationstart.region_ani webkitAnimationStart.region_ani MSAnimationStart.region_ani oAnimationStart.region_ani',
				ani_event_end = 'animationend.region_ani webkitAnimationEnd.region_ani MSAnimationEnd.region_ani oAnimationEnd.region_ani'
			;
			view.$el.one(ani_event_start, function () {
				clearTimeout(end_t);
				view.$el.off(ani_event_start); // Make sure to remove any remaining unfired event
			});
			view.$el.one(ani_event_end, function () {
				end();
				view.$el.off(ani_event_end); // Make sure to remove any remaining unfired event
			});
			// add animation class to trigger css animation
			view.$el.addClass(ani_class);
			// scroll if needed
			if ( to == 'top' || to == 'bottom' ){
				var $container = view.$el.hasClass('upfront-region-container') ? view.$el : view.$el.closest('.upfront-region-container'),
					offset = $container.offset(),
					scroll_top = $(document).scrollTop(),
					scroll_to = false,
					height = $container.height(),
					w_height = $(window).height();
				if ( to == 'top' && offset.top < scroll_top )
					scroll_to = offset.top - 50;
				else if ( to == 'bottom' && offset.top+height > scroll_top+w_height )
					scroll_to = offset.top+height-w_height;
				if ( scroll_to !== false )
					$('html,body').animate( {scrollTop: scroll_to}, 600 );
			}
			function end () {
				var baseline = Upfront.Settings.LayoutEditor.Grid.baseline,
					height = view.$el.outerHeight();
				//model.set_property('row', Math.ceil(height/baseline), true);
				view.$el.removeClass(ani_class);
				// enable edit and activate the new region
				Upfront.Events.trigger('command:region:edit_toggle', true);
				Upfront.Events.trigger('command:region:fixed_edit_toggle', true);
				view.trigger("activate_region", view);
			}
		}
	});

	// var RegionPanelItem_DeleteRegion = RegionPanelItem.extend({
	// 	events: {
	// 		'click .upfront-icon': 'delete_region'
	// 	},
	// 	className: 'upfront-inline-panel-item upfront-region-panel-item-delete-region',
	// 	icon: 'delete',
	// 	tooltip: l10n.delete_section,
	// 	//label: "Delete this section",
	// 	delete_region: function () {
	// 		var collection = this.model.collection;
	// 		if ( confirm(l10n.delete_section_nag) ){
	// 			collection.remove(this.model);
	// 		}
	// 	}
	// });

	// var RegionPanel = InlinePanels.Panel.extend({
	// 	className: 'upfront-inline-panel upfront-region-panel upfront-no-select',
	// 	initialize: function () {
	// 		this.items = _([]);
	// 	},
	// 	render: function() {
	// 		var me = this,
	// 			items = typeof this.items == 'function' ? this.items() : this.items,
	// 			classes = [
	// 				'upfront-inline-panel-'+this.position_v,
	// 				'upfront-inline-panel-'+this.position_v+'-'+this.position_h
	// 			],
	// 			width = 0,
	// 			height = 0;
	// 		this.$el.html('');
	// 		items.each(function(item){
	// 			item.panel_view = me;
	// 			item.render();
	// 			item.delegateEvents();
	// 			me.$el.append(item.el);
	// 			if ( me.position_v == 'center' )
	// 				height += item.$el.height();
	// 			else
	// 				width += item.$el.width();
	// 		});
	// 		this.$el.attr('class', this.className + ' ' + classes.join(' '));
	// 	},
	// 	remove: function() {
	// 		var items = typeof this.items == 'function' ? this.items() : this.items;

	// 		if(items)
	// 			items.each(function(item){
	// 				item.remove();
	// 			})
	// 		Backbone.View.prototype.remove.call(this);
	// 	}
	// });

	// var RegionPanel_Edit = InlinePanels.Panel.extend({
	// 	initialize: function () {
	// 		//this.bg = new RegionPanelItem_BgSetting({model: this.model});
	// 		if ( this.model.is_main() ){
	// 			//this.expand_lock = new RegionPanelItem_ExpandLock({model: this.model});
	// 			this.add_region = new RegionPanelItem_AddRegion({model: this.model, to: 'top'});
	// 		}
	// 		//this.delete_region = new RegionPanelItem_DeleteRegion({model: this.model});
	// 	},
	// 	items: function () {
	// 		var items = _([]),
	// 			type = this.model.get_property_value_by_name('background_type'),
	// 			sub = this.model.get('sub');
	// 		//items.push(this.bg);
	// 		//if ( this.expand_lock )
	// 		//	items.push(this.expand_lock);
	// 		if ( this.add_region && type != 'full' )
	// 			items.push(this.add_region);
	// 		if ( this.model.is_main() ) {
	// 			// if ( ! this.model.has_side_region() && ! this.model.get('default') && this.model.get('scope') != 'global' )
	// 				// items.push( this.delete_region );
	// 		}
	// 		else {
	// 			// if ( sub != 'top' && sub != 'bottom' )
	// 				// items.push( this.delete_region );
	// 		}
	// 		return items;
	// 	}
	// });

	var RegionPanel_Add = InlinePanels.Panel.extend({
		initialize: function (opts) {
			this.options = opts;
			if ( ! this.options.to )
				this.options.to = 'bottom';
			var to = this.options.to
				args = {model: this.model, to: to};
			if ( this.options.width )
				args.width = this.options.width;
			if ( this.options.height )
				args.height = this.options.height;
			this.items = _( [ new RegionPanelItem_AddRegion(args) ] );
			if ( to == 'top' || to == 'bottom' ){
				this.position_v = to;
				this.position_h = 'center';
			}
			else if ( to == 'left' || to == 'right' ) {
				this.position_v = 'center';
				this.position_h = to;
			}
			else if ( to == 'top-left' || to == 'top-right' || to == 'bottom-left'  || to == 'bottom-right'){
				this.position_v = to.split('-')[0];
				this.position_h = to.split('-')[1];
			}
		},
		items: function () {
			return _([ this.add_region ]);
		}
	});

	// var RegionPanel_Delete = InlinePanels.Panel.extend({
	// 	position_h: 'right',
	// 	initialize: function () {
	// 		this.items = _( [ new RegionPanelItem_DeleteRegion({model: this.model}) ] );
	// 	}
	// });

	var RegionPanels = InlinePanels.Panels.extend({
		className: 'upfront-inline-panels upfront-region-panels upfront-ui',
		initialize: function () {
			var container = this.model.get('container'),
				name = this.model.get('name');
			this.listenTo(this.model.collection, 'add', this.render);
			this.listenTo(this.model.collection, 'remove', this.render);
			this.listenTo(this.model.get("properties"), 'change', this.render);
			this.listenTo(this.model.get("properties"), 'add', this.render);
			this.listenTo(this.model.get("properties"), 'remove', this.render);
			this.listenTo(Upfront.Events, "upfront:layout_size:change_breakpoint", this.update_padding);
			this.listenTo(Upfront.Events, "layout:after_render", this.update_padding);
			this.listenTo(Upfront.Events, "entity:region:activated", this.on_region_active);
			this.listenTo(Upfront.Events, "entity:region:deactivated", this.on_region_deactive);
			//this.listenTo(Upfront.Events, "command:region:edit_toggle", this.update_pos);
			//this.edit_panel = new RegionPanel_Edit({model: this.model});
			//this.delete_panel = new RegionPanel_Delete({model: this.model});
			this.add_panel_top = new RegionPanel_Add({model: this.model, to: 'top'});
			this.add_panel_bottom = new RegionPanel_Add({model: this.model, to: 'bottom'});
			if ( this.model.is_main() && this.model.get('allow_sidebar') ){
				this.add_panel_left = new RegionPanel_Add({model: this.model, to: 'left'});
				this.add_panel_right = new RegionPanel_Add({model: this.model, to: 'right'});
			}
			//this.listenTo(Upfront.Events, "theme_colors:update", this.update_colors);
			//this.listenTo(Upfront.Events, "entity:region:after_render", this.update_colors);
		},
		panels: function () {
			var panels = _([]),
				collection = this.model.collection
			;
			if (_.isUndefined(collection)) { // The collection can easily be undefined for some reason. This happens e.g. when switching back from post layouts editing mode in exporter
				this._panels = panels; // This is so we don't error out a bit later on
				return panels; // Same as this - "return false" doesn't play well here.
			}
			var // Well, all is goog with the collection, so carry on as intended...
				index_container = collection.index_container(this.model, ['shadow', 'lightbox']),
				total_container = collection.total_container(['shadow', 'lightbox']), // don't include shadow and lightbox region
				is_top = index_container == 0,
				is_bottom = index_container == total_container-1,
				is_full = this.model.get('type') == 'full';
			if ( this.model.is_main() ) {
				var sub_models = this.model.get_sub_regions();
				if ( !(is_full && is_top) )
					panels.push( this.add_panel_top );
				if ( this.model.get('allow_sidebar') ){
					if ( sub_models.left === false )
						panels.push( this.add_panel_left );
					if ( sub_models.right === false )
						panels.push( this.add_panel_right );
				}
				panels.push( this.add_panel_bottom );
			}
			this._panels = panels;
			return panels;
		},
		on_render: function () {
			this.update_pos();
		},
		on_scroll: function (e) {
			var me = e.data;
			me.update_pos();
		},
		on_region_active: function (region) {
			if ( region.model != this.model )
				return;
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
			if ( $main.hasClass('upfront-region-editing') ){
				this.on_active();
				this.listenToOnce(Upfront.Events, 'sidebar:toggle:done', this.update_pos);
				$(window).on('scroll', this, this.on_scroll);
			}
		},
		on_region_deactive: function () {
			$(window).off('scroll', this, this.on_scroll);
		},
		/*
		update_colors: function () {
			var $region = [],
				background = this.model.get_property_value_by_name("background_color")
			;
			if (!background || !background.match(/ufc/)) return false;

			$region = this.$el.closest('.upfront-region-container-bg');
			if (!$region.length) return false;

			$region.css("background-color", Upfront.Util.colors.get_color(background));
		},
		*/
		update_pos: function () {
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
				$container = this.$el.closest('.upfront-region-container'),
				$region = this.$el.closest('.upfront-region'),
				$sub_top = $container.find('.upfront-region-side-top'),
				$sub_bottom = $container.find('.upfront-region-side-bottom');

			if ( ( !$main.hasClass('upfront-region-editing') && !$main.hasClass('upfront-region-fixed-editing') && !$main.hasClass('upfront-region-lightbox-editing') ) || !$container.hasClass('upfront-region-container-active') )
				return;

			var me = this,
				offset = $region.offset(),
				top = offset.top,
				bottom = top + $region.outerHeight(),
				top_height = $sub_top.length ? $sub_top.outerHeight() : 0,
				bottom_height = $sub_bottom.length ? $sub_bottom.outerHeight() : 0,
				win_height = $(window).height(),
				scroll_top = $(document).scrollTop(),
				scroll_bottom = scroll_top + win_height - bottom_height,
				rel_top = $main.offset().top + top_height
			;

			this.add_responsive_items();

			/*this.$el.css({
				top: scroll_top > top ? scroll_top-top+25 : 0,
				bottom: bottom > scroll_bottom ? bottom-scroll_bottom : 0
			});*/
			this._panels.each(function (panel) {
				var panel_offset = panel.$el.offset();
				if ( panel.position_v == 'top' && scroll_top > top-rel_top && scroll_top < bottom-rel_top ){
					if ( panel.$el.css('position') != 'fixed' )
						panel.$el.css({
							position: 'fixed',
							top: rel_top,
							left: panel_offset.left,
							right: 'auto'
						});
				}
				else if ( panel.position_v == 'bottom' && bottom > scroll_bottom && top < scroll_bottom ){
					if ( panel.$el.css('position') != 'fixed' )
						panel.$el.css({
							position: 'fixed',
							bottom: bottom_height,
							left: panel_offset.left,
							right: 'auto'
						});
				}
				else if ( panel.position_v == 'center' && ( scroll_top > top-rel_top || bottom > scroll_bottom ) ){
					var panel_top = scroll_top > top-rel_top ? rel_top : top-scroll_top,
						panel_bottom = bottom > scroll_bottom ? 0 : scroll_bottom-bottom,
						panel_left = panel.position_h == 'left' ? panel_offset.left : 'auto',
						panel_right = panel.position_h == 'right' ? $(window).width()-panel_offset.left-panel.$el.width() : 'auto';
					if ( panel.$el.css('position') != 'fixed' )
						panel.$el.css({
							position: 'fixed',
							top: panel_top,
							bottom: panel_bottom,
							left: panel_left,
							right: panel_right
						});
					else
						panel.$el.css({
							top: panel_top,
							bottom: panel_bottom
						});
				}
				else {
					panel.$el.css({
						position: '',
						top: '',
						bottom: '',
						left: '',
						right: ''
					});
				}
			});

			setTimeout(
				function () { me.update_padding() }
				, 300
			);
		},
		update_padding: function () {
			var props = {},
				$region = this.$el.closest('.upfront-region')
			;

			// Padding settings
			this.model.get("properties").each(function (prop) {
				props[prop.get("name")] = prop.get("value");
			});

			var breakpoints = typeof Upfront.Settings.LayoutEditor.Theme.breakpoints !== 'undefined' ? Upfront.Settings.LayoutEditor.Theme.breakpoints : [],
				current_breakpoint = typeof Upfront.Settings.LayoutEditor.CurrentBreakpoint !== 'undefined' ? Upfront.Settings.LayoutEditor.CurrentBreakpoint : 'desktop',
				current_breakpoint_id = current_breakpoint === 'default' ? current_breakpoint : current_breakpoint.id,
				top_padding,
				bottom_padding
			;

			var breakpoint_obj = (
						typeof props.breakpoint !== 'undefined'
						&& typeof props.breakpoint[current_breakpoint_id] !== 'undefined'
					)
					? props.breakpoint[current_breakpoint_id]
					: false
			;

			top_padding = (typeof breakpoint_obj.top_bg_padding_num !== 'undefined')
				? breakpoint_obj.top_bg_padding_num
				: (typeof props.top_bg_padding_num !== 'undefined')
					? props.top_bg_padding_num
					: false
			;

			bottom_padding = (typeof breakpoint_obj.bottom_bg_padding_num !== 'undefined')
				? breakpoint_obj.bottom_bg_padding_num
				: (typeof props.bottom_bg_padding_num !== 'undefined')
					? props.bottom_bg_padding_num
					: false
			;

			$region.css({
				'padding-top': ( false === top_padding ? '' : top_padding + 'px' ),
				'padding-bottom': ( false === bottom_padding ? '' : bottom_padding + 'px' )
			});
		},
		add_responsive_items: function() {
			var me = this,
				$regionEl = me.$el.parents('.upfront-region'),
				sub_models = me.model.get_sub_regions(),
				openItemControls = $('<span class="open-responsive-item-controls"></span>'),
				itemControls = $('<div class="responsive-item-controls">' + l10n.add_region + '</div>'),
				responsiveAddRegionTop = $('<div class="responsive-item-control responsive-add-region-top">' + l10n.above + '</div>'),
				responsiveAddRegionBottom = $('<div class="responsive-item-control responsive-add-region-bottom">' + l10n.below + '</div>'),
				responsiveAddRegionLeft = $('<div class="responsive-item-control responsive-add-region-left">' + l10n.left_sidebar + '</div>'),
				responsiveAddRegionRight = $('<div class="responsive-item-control responsive-add-region-right">' + l10n.right_sidebar + '</div>')
			;

			if($regionEl.find('.open-responsive-item-controls').length === 0) {
				openItemControls.click(function() {
					$regionEl.toggleClass('controls-visible');
				});
				$regionEl.append(openItemControls);
			}

			responsiveAddRegionTop.click(function() {
				me.add_panel_top.$el.find('.upfront-icon').trigger('click');
				$regionEl.toggleClass('controls-visible');
			});
			itemControls.append(responsiveAddRegionTop);

			responsiveAddRegionBottom.click(function() {
				me.add_panel_bottom.$el.find('.upfront-icon').trigger('click');
				$regionEl.toggleClass('controls-visible');
			});
			itemControls.append(responsiveAddRegionBottom);

			if ( me.model.is_main() && this.model.get('allow_sidebar') ){
				if(sub_models.left === false) {
					responsiveAddRegionLeft.click(function() {
						me.add_panel_left.$el.find('.upfront-icon').trigger('click');
						$regionEl.toggleClass('controls-visible');
					});
					itemControls.append(responsiveAddRegionLeft);
				}
				if(sub_models.right === false) {
					responsiveAddRegionRight.click(function() {
						me.add_panel_right.$el.find('.upfront-icon').trigger('click');
						$regionEl.toggleClass('controls-visible');
					});
					itemControls.append(responsiveAddRegionRight);
				}
			}
			$regionEl.find('.responsive-item-controls').remove();
			$regionEl.append(itemControls);
		},
		remove: function() {
			//this.edit_panel.remove();
			//this.delete_panel.remove();
			this.add_panel_top.remove();
			this.add_panel_bottom.remove();
			this.edit_panel = false;
			this.delete_panel = false;
			this.add_panel_top = false;
			this.add_panel_bottom = false;
			if ( this.model.is_main() && this.model.get('allow_sidebar') ){
				this.add_panel_left.remove();
				this.add_panel_right.remove();
				this.add_panel_left = false;
				this.add_panel_right = false;
			}
			$(window).off('scroll', this, this.on_scroll);
			Backbone.View.prototype.remove.call(this);
		}
	});


	var RegionFixedPanels = RegionPanels.extend({
		className: 'upfront-inline-panels upfront-region-fixed-panels upfront-ui',
		initialize: function () {
			var container = this.model.get('container'),
				name = this.model.get('name');
			this.listenTo(this.model.collection, 'add', this.render);
			this.listenTo(this.model.collection, 'remove', this.render);
			this.listenTo(Upfront.Events, "entity:region:activated", this.on_region_active);
			this.listenTo(Upfront.Events, "entity:region:deactivated", this.on_region_deactive);
			this.add_panel_top_left = new RegionPanel_Add({model: this.model, to: 'top-left', width: 50, height: 50});
			this.add_panel_top_right = new RegionPanel_Add({model: this.model, to: 'top-right', width: 50, height: 50});
			this.add_panel_bottom_left = new RegionPanel_Add({model: this.model, to: 'bottom-left', width: 50, height: 50});
			this.add_panel_bottom_right = new RegionPanel_Add({model: this.model, to: 'bottom-right', width: 50, height: 50});
		},
		panels: function () {
			var panels = _([]);
			panels.push( this.add_panel_top_left );
			panels.push( this.add_panel_top_right );
			panels.push( this.add_panel_bottom_left );
			panels.push( this.add_panel_bottom_right );
			this._panels = panels;
			return panels;
		},
		on_region_active: function (region) {
			if ( region.model != this.model )
				return;
			var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
			if ( $main.hasClass('upfront-region-fixed-editing') ){
				this.on_active();
				this.listenToOnce(Upfront.Events, 'sidebar:toggle:done', this.update_pos);
				$(window).on('scroll', this, this.on_scroll);
			}
		},
		remove: function() {
			this.add_panel_top_left.remove();
			this.add_panel_top_right.remove();
			this.add_panel_bottom_left.remove();
			this.add_panel_bottom_right.remove();
			this.add_panel_top_left = false;
			this.add_panel_top_right = false;
			this.add_panel_bottom_left = false;
			this.add_panel_bottom_right = false;
			Backbone.View.prototype.remove.call(this);
		}
	});

	var RegionFixedEditPosition = Backbone.View.extend({
		className: 'upfront-region-fixed-edit-pos',
		initialize: function () {

		},
		render: function () {
			var me = this,
				grid = Upfront.Settings.LayoutEditor.Grid,
				top = this.model.get_property_value_by_name('top'),
				is_top = ( typeof top == 'number' ),
				left = this.model.get_property_value_by_name('left'),
				is_left = ( typeof left == 'number' ),
				bottom = this.model.get_property_value_by_name('bottom'),
				is_bottom = ( typeof bottom == 'number' ),
				right = this.model.get_property_value_by_name('right'),
				is_right = ( typeof right == 'number' ),
				change = function () {
					var value = this.get_value(),
						saved = this.get_saved_value();
					if ( value != saved )
						this.property.set({'value': value});
				};
			this.fields = {
				width: new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'width',
					label: l10n.width,
					label_style: "inline",
					min: 3 * grid.column_width,
					max: Math.floor(grid.size/2) * grid.column_width
				}),
				height: new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'height',
					label: l10n.height,
					label_style: "inline",
					min: 3 * grid.baseline
				})
			};
			if ( is_top || !is_bottom )
				this.fields.top = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'top',
					label: l10n.top,
					label_style: "inline",
					min: 0
				});
			else
				this.fields.bottom = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'bottom',
					label: l10n.bottom,
					label_style: "inline",
					min: 0
				});
			if ( is_left || !is_right )
				this.fields.left = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'left',
					label: l10n.left,
					label_style: "inline",
					min: 0
				});
			else
				this.fields.right = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					property: 'right',
					label: l10n.right,
					label_style: "inline",
					min: 0
				});
			_.each(this.fields, function(field){
				field.render();
				field.delegateEvents();
				me.$el.append(field.$el);
			});
		},
		update_fields: function () {
			_.each(this.fields, function(field){
				var new_value = field.get_saved_value();
				field.set_value(new_value);
			});
		}
	});

	/** Responsive stuff, breakpoints, UI, etc */

	/**
	 * For easier setup of breakpoints.
	 */
	var Breakpoint_Model = Backbone.Model.extend({
		defaults: {
			'default': false,
			'name': 'Breakpoint',
			'short_name': 'breakpoint',
			'fixed': false,
			'enabled': false,
			'active': false,
			'width': 240,
			'columns': 5,
			'typography': {},
			'styles': ''
		},
		initialize: function() {
			// Fix 0 columns
			if (this.attributes.columns === 0 && this.attributes.width > 0) {
				this.attributes.columns = Math.round(this.attributes.width / 45); //todo get column width from theme
			}

			this.on('change:width', this.update_columns, this);
			this.on('change:columns', this.update_width, this);
			this.on('change:name', this.update_short_name, this);
		},
		update_width: function(me, new_columns) {
			var columns = parseInt(new_columns, 10);

			if (columns > 24) {
				this.set({ 'columns': 24 });
				return;
			}
			if (columns < 5) {
				this.set({ 'columns': 5 });
				return;
			}

			this.attributes.width = columns * 45; //todo get column width from theme
		},
		update_columns: function(me, new_width) {
			var new_columns;
			var width = parseInt(new_width, 10);

			if (width > 1080) {
				this.set({ 'width': 1080 });
				return;
			}
			if (width < 240) {
				this.set({ 'width': 240 });
				return;
			}

			new_columns = Math.round(width / 45); //todo get column width from theme
			if (this.attributes.columns !== new_columns) {
				this.attributes.columns =  new_columns;
			}
		},
		update_short_name: function(me, new_name) {
			this.attributes.short_name = new_name;
		},
		/* For compatibility with typography editor */
		get_property_value_by_name: function(name) {
			return this.get(name);
		},
		/* For compatibility with typography editor */
		set_property: function(name, value) {
			var map = {};
			map[name] = value;
			this.set(map);
		}
	});

	/**
	 * For centralized access to breakpoints for updating and watching on changes.
	 */
	var Breakpoints_Collection = Backbone.Collection.extend({
		model: Breakpoint_Model,
		initialize: function() {
			this.on( 'change:active', this.on_change_active, this);
			this.on( 'change:enabled', this.on_change_enabled, this);
			this.on( 'change:width', this.on_change_width, this);
		},
		on_change_active: function(changed_model) {
			var prev_active_json = this.active ? this.active.toJSON() : false;
			this.prev_active = this.active;
			this.active = changed_model;

			_.each(this.models, function(model) {
				if (model.get('id') === changed_model.get('id')) return;

				model.set({ 'active': false }, { 'silent': true });
			});

			Upfront.Events.trigger("upfront:layout_size:change_breakpoint", changed_model.toJSON(), prev_active_json);

			//todo This should go somewhere else
			if (this.prev_active) {
				$('#page').removeClass(this.prev_active.get('id') + '-breakpoint');
			}
			$('#page').addClass(this.active.get('id') + '-breakpoint');

			if (this.active.get('default'))
				$('#page').removeClass('responsive-breakpoint').addClass('default-breakpoint');
			else
				$('#page').removeClass('default-breakpoint').addClass('responsive-breakpoint');
		},
		on_change_enabled: function(changed_model) {
			// If disabled point was active it will disapear and leave UI in broken state.
			if (changed_model.get('active') === false) return;

			// Activate default breakpoint and fire event.
			var default_breakpoint = this.get_default();

			default_breakpoint.set({ 'active': true });
		},
		on_change_width: function(changed_model, new_width) {
			Upfront.Events.trigger("upfront:layout_size:viewport_width_change", new_width);
		},
		sorted_by_width: function() {
			return _.sortBy(this.models, function(model) {
				return model.get('width')
			});
		},
		get_active: function() {
			var active_breakpoint = this.findWhere({ 'active': true });
			if (_.isUndefined(active_breakpoint) === false) return active_breakpoint;

			active_breakpoint = this.get_default();
			active_breakpoint.set({ 'active': true });
			return active_breakpoint;
		},
		get_enabled: function() {
			var enabled_breakpoints = this.where({ 'enabled': true });
			if (_.isUndefined(enabled_breakpoints) === false && enabled_breakpoints.length > 0) return enabled_breakpoints;

			return [this.get_active()];


		},
		get_default: function() {
			var default_breakpoint = this.findWhere({ 'default': true });
			if (_.isUndefined(default_breakpoint)) {
				default_breakpoint = this.findWhere({ 'id': 'desktop' });
				if (default_breakpoint) default_breakpoint.set({ 'default': true });
			}
			if (_.isUndefined(default_breakpoint)) throw 'Breakpoints are not loaded properly.';

			return default_breakpoint;
		},
		get_unique_id: function() {
			var id = 'custom-' + +(new Date());

			// Ensure id is unique
			while (!_.isUndefined(this.findWhere({ 'id': id }))) {
				id = 'custom-' + +(new Date());
			}

			return id;
		}
	});

	// Breakpoint events tests - uncomment if needed
	// Upfront.Events.on("upfront:layout_size:change_breakpoint", function(breakpoint, prev_breakpoint) {
		// if (prev_breakpoint) console.log(['Breakpoint deactivated', prev_breakpoint.name, prev_breakpoint.width].join(' '));
	// });
	// Upfront.Events.on("upfront:layout_size:viewport_width_change", function(new_width) {
		// console.log(['Viewport width changed:', new_width].join(' '));
	// });

	/**
	 * Wrapper for Breakpoints_Collection since we can't use Backbone.Collection
	 * native saving.
	 */
	var Breakpoints_Storage = function(stored_breakpoints) {
		var breakpoints;

		var initialize = function() {
			breakpoints = new Breakpoints_Collection(stored_breakpoints);
			var default_breakpoint = breakpoints.get_default();
			default_breakpoint.set({ 'active': true });

			breakpoints.on('change:enabled change:width change:name add remove change:typography change:styles', save_breakpoints);

			// This should go somewhere else, just a temp
			_.each(breakpoints.models, function(breakpoint) {
				var $style = $('#' + breakpoint.get('id') + '-breakpoint-style');

				if ($style.length > 0) return;

				$('body').append('<style id="' + breakpoint.get('id') + '-breakpoint-style">' +
					breakpoint.get('styles') +
					'</style>'
				);
			});
		};

		this.get_breakpoints = function() {
			return breakpoints;
		};

		var save_breakpoints = function() {
			var postData = {
				action: 'upfront_update_breakpoints',
				breakpoints: breakpoints.toJSON()
			};

			Upfront.Util.post(postData)
				.error(function(){
					return notifier.addMessage(l10n.breakpoint_save_fail);
				});
		};

		Upfront.Events.once("application:mode:before_switch", initialize);
	};

	var breakpoints_storage = new Breakpoints_Storage(Upfront.mainData.themeInfo.breakpoints);

	/**
	 * Activates breakpoint which will change layout size.
	 */
	var Breakpoint_Activate_Button = Backbone.View.extend({
		tagName: 'li',
		template: '{{ short_name }} ({{ width }}px)',
		className: function() {
			return this.model.get('id') + '-breakpoint-activate';
		},
		events: {
			'click': 'on_click'
		},
		initialize: function(options) {
			this.options = options || {};
		},
		render: function() {
			this.$el.html(_.template(this.template, this.model.toJSON()));
			if (this.model.get('active')) this.$el.addClass('active');
			return this;
		},
		on_click: function() {
			this.model.set({ 'active': true });
		}
	});

	var BreakpointsToggler = Backbone.View.extend({
		tagName: 'ul',
		className: 'breakpoints-toggler',
		initialize: function() {
			this.collection = breakpoints_storage.get_breakpoints();

			this.listenTo(this.collection, 'add remove change', this.render);
		},
		render: function() {
			this.$el.html('');
			_.each(this.collection.sorted_by_width(), function(breakpoint) {
				// Add only enabled breakpoints
				if (breakpoint.get('enabled') === false) return;

				var breakpoint_button = new Breakpoint_Activate_Button({ model: breakpoint});
				this.$el.append(breakpoint_button.render().el);
			}, this);
			return this;
		}
	});

	var BreakpointWidthInput = Backbone.View.extend({
		className: 'breakpoint-width-input',
		initialize: function(options) {
			this.options = options || {};
			this.collection = breakpoints_storage.get_breakpoints();
			this.listenTo(this.collection, 'change:active', this.render);

		},
		render: function() {
			this.$el.html('');
			this.active_breakpoint = this.collection.get_active();
			// Debounce input value change event since it causes some heavy operations to kick in.
			var lazy_propagate_change = _.debounce(this.propagate_change, 1000);

			if (this.active_breakpoint.get('fixed')) return this;

			this.input = new Upfront.Views.Editor.Field.Number({
				className: 'inline-number plaintext-settings',
				min: 1,
				label: l10n.viewport_width,
				suffix: "px",
				default_value: this.active_breakpoint.get('width')
			});

			this.input.render();
			this.$el.html(this.input.el);

			this.listenTo(this.input, 'changed', lazy_propagate_change);

			return this;
		},
		propagate_change: function() {
			this.active_breakpoint.set({ 'width': this.input.get_value() });
		}
	});

	var BreakpointEditPanel = Backbone.View.extend({
		className: 'breakpoint-edit-panel',
		template: '<div><span class="edit-breakpoint-popup-title">' + l10n.set_custom_breakpoint + ':</span></div>' +
			'<div>' +
			'<label for="breakpoint-name">' + l10n.name + ':</label><input type="text" value="{{ name }}" placeholder="' + l10n.custom_breakpoint_placeholder + '" id="breakpoint-name" />' +
			'</div><div>' +
			'<label for="breakpoint-width">' + l10n.width + ':</label><input type="number" min="240" max="1080" value="{{ width }}" id="breakpoint-width" /><label>px</label>' +
			'<label for="breakpoint-columns">' + l10n.number_of_columns + ':</label><input min="5" max="24" type="number" value="{{ columns }}" id="breakpoint-columns" />' +
			'</div>',
		events: {
			'change #breakpoint-name': 'on_name_change',
			'change #breakpoint-width': 'on_width_change',
			'change #breakpoint-columns': 'on_columns_change'
		},
		initialize: function(options) {
			this.options = options || {};
			if (_.isUndefined(this.model)) {
				this.model = breakpoints_storage.get_breakpoints().get_active();
			}

			this.listenTo(this.model, 'change', this.update_values);

			// When changing width to fast there is too much rendering
			this.lazy_change_width = _.debounce(function(width) {
				this.model.set({ 'width': width });
			}, 500);
		},
		render: function() {
			this.$el.html(_.template(this.template, this.model.toJSON()));

			return this;
		},
		update_values: function() {
			this.$el.find('#breakpoint-name').val(this.model.get('name'));
			this.$el.find('#breakpoint-width').val(this.model.get('width'));
			this.$el.find('#breakpoint-columns').val(this.model.get('columns'));
		},
		on_name_change: function(event) {
			this.model.set({ 'name': $(event.currentTarget).val() });
		},
		on_width_change: function(event) {
			this.lazy_change_width($(event.currentTarget).val());
		},
		on_columns_change: function(event) {
			this.model.set({ 'columns': $(event.currentTarget).val() });
		}
	});

	var BreakpointEditButton = Backbone.View.extend({
		className: 'breakpoint-edit',
		events: {
			'click #edit-breakpoint': 'edit_breakpoint'
		},
		initialize: function(options) {
			this.options = options || {};
			this.collection = breakpoints_storage.get_breakpoints();
			this.listenTo(this.collection, 'change:active', this.render);
		},
		render: function() {
			this.$el.html('');
			this.active_breakpoint = this.collection.get_active();

			if (this.active_breakpoint.get('fixed')) return this;

			this.$el.html('<a href="" id="edit-breakpoint">' + l10n.edit_breakpoint + '</a>');

			return this;
		},
		edit_breakpoint: function(event) {
			event.preventDefault();
			var popup;

			popup = Upfront.Popup.open(function (data, $top, $bottom) {
				$top.empty();
				var $content = $(this);
				var editPanel = new BreakpointEditPanel();

				$content
				.append(editPanel.render().el);
				$bottom.append('<div class="breakpoint-edit-ok-button">' + l10n.ok + '</div>');
				$('#upfront-popup-close').hide();
				$('.breakpoint-edit-ok-button').on('click', function() {
					Upfront.Popup.close();
					$('#upfront-popup-close').show();
				});
			}, {
				width: 400
			});
		}
	});

	/** End responsive stuff, breakpoints, UI, etc */

	var Topbar = Backbone.View.extend({
		id: 'upfront-ui-topbar',
		content_views: [],
		initialize: function () {
			this.listenTo(Upfront.Events, 'sidebar:toggle', this.on_sidebar_toggle);
		},
		render: function() {
			_.each(this.content_views, function(view) {
				view.render();
				this.$el.append(view.el);
			}, this);

			return this;
		},
		start: function() {
			this.content_views = [];
			if ( Upfront.Application.get_current() === Upfront.Settings.Application.MODE.RESPONSIVE ) {
				this.content_views.push(new BreakpointEditButton());
				this.content_views.push(new BreakpointsToggler());
			}
			$('body').prepend(this.render().el);
		},
		stop: function() {
			this.remove();
		},
		on_sidebar_toggle: function (visible) {
			if ( !visible )
				this.$el.css('left', 0);
			else
				this.$el.css('left', '');
		}
	});

	return {
		"Editor": {
			"Property": Property,
			"Properties": Properties,
			"Commands": Commands,
			"Command": Command,
			"Command_SaveLayout": Command_SaveLayout,
			"Command_SavePostLayout": Command_SavePostLayout,
			"Command_CancelPostLayout": Command_CancelPostLayout,
			"Command_Undo": Command_Undo,
			"Command_ToggleGrid": Command_ToggleGrid,
			"Command_Merge": Command_Merge,
			"Settings": {
				"Settings": Settings,
				"Panel": SettingsPanel,
				"Item": SettingsItem,
				"ItemTabbed": SettingsItemTabbed,
				"Lightbox": {
					"Trigger": Settings_LightboxTrigger,
					"LabeledTrigger": Settings_LabeledLightboxTrigger
				},
				"Anchor": {
					"Trigger": Settings_AnchorTrigger,
					"LabeledTrigger": Settings_LabeledAnchorTrigger
				},
				"Settings_CSS": _Settings_CSS,
				"AnchorSetting": _Settings_AnchorSetting
			},
			"Button": {
				"Presets": button_presets_collection,
			},
			"Fonts": {
				"System": system_fonts_storage,
				"Google": google_fonts_storage,
				Text_Fonts_Manager: Text_Fonts_Manager,
				Icon_Fonts_Manager: Icon_Fonts_Manager,
				theme_fonts_collection: theme_fonts_collection,
				icon_fonts_collection: icon_fonts_collection
			},
			"Field": {
				"Field": Field,
				"Text": Field_Text,
				"Button": Field_Button,
				"Email": Field_Email,
				"Textarea": Field_Textarea,
				"Color": Field_Color,
				"Multiple_Suggest": Field_Multiple_Suggest,
				"Chosen_Select": Field_Chosen_Select,
				"Typeface_Chosen_Select": Field_Typeface_Chosen_Select,
				"Typeface_Style_Chosen_Select": Field_Typeface_Style_Chosen_Select,
				"Multiple_Chosen_Select": Field_Multiple_Chosen_Select,
				"Number": Field_Number,
				"Slider": Field_Slider,
				"Select": Field_Select,
				"Radios": Field_Radios,
				"Checkboxes": Field_Checkboxes,
				"Hidden": Field_Hidden,
				"Anchor": Field_Anchor,
				"Optional": OptionalField
			},
			"Sidebar": {
				"Sidebar": Sidebar,
				"Panel": SidebarPanel,
				"Element": DraggableElement
			},
			"Topbar": {
				"Topbar": Topbar
			},
			notify : function(message, type, duration){
				notifier.addMessage(message, type, duration);
			},
			"Loading": Loading,
			"Modal": Modal,
			"ModalBgSetting": ModalBgSetting,
			"PostSelector": new PostSelector(),
			InlinePanels: InlinePanels,
			"RegionPanels": RegionPanels,
			"RegionPanelsAddRegion": RegionPanelItem_AddRegion,
			"RegionFixedPanels": RegionFixedPanels,
			"RegionFixedEditPosition" : RegionFixedEditPosition,
			"CSSEditor": CSSEditor,
			"Insert_Font_Widget": Insert_Font_Widget,
			"GeneralCSSEditor": GeneralCSSEditor,
			"LinkPanel": LinkPanel
		},
		Mixins: {
			"Upfront_Scroll_Mixin": Upfront_Scroll_Mixin
		},
		Theme_Colors : Theme_Colors,
		breakpoints_storage: breakpoints_storage,
		Font_Model: Font_Model
	};
});
})(jQuery);

//@ sourceURL=upfront-views-editor.js
;
(function ($) {

var LayoutEditor = {
	selection: [], // store selection
	selecting: false, // true when selecting start, false when stopped
	create_mergeable: function (view, model) {
		var app = this,
			ed = Upfront.Behaviors.LayoutEditor,
			regions = app.layout.get('regions')
		;
		view.$el.selectable({
			distance: 10, // Prevents global click hijack
			filter: ".upfront-module",
			cancel: ".upfront-module, .upfront-module-group, .upfront-region-side-fixed, .upfront-entity_meta, .upfront-region-edit-trigger, .upfront-region-edit-fixed-trigger, .upfront-region-finish-edit, .upfront-icon-control-region-resize, .upfront-inline-modal, .upfront-inline-panels",
			selecting: function (e, ui) {
				var $el = $(ui.selecting),
					$region, $selected, $affected, group, do_select;
				// make sure it's not inside module group
				if ( $el.closest('.upfront-module-group').length > 0 ) return;
				if ( ed.selection.length > 0 ){
					// if we already have at least one selection, check if the next selection is mergeable or not
					// make sure it's in the same region
					$region = $(ed.selection[0]).closest('.upfront-region');
					if ( $el.closest('.upfront-region').get(0) != $region.get(0) ) return;
					ed._add_selections( $region.find('.ui-selecting'), $region.find('.upfront-module').not('.upfront-ui-selected, .upfront-module-parent-group'), $region.find('.upfront-module-group') );
				}
				else {
					ed._add_selection(ui.selecting);
				}
				ed._update_selection_outline();
			},
			unselecting: function (e, ui) {
				var $el = $(ui.unselecting),
					$region, $selected
				;
				if ( ed.selection.length > 1 ){
					$region = $(ed.selection[0]).closest('.upfront-region');
					if ( $el.closest('.upfront-region').get(0) != $region.get(0) ) return;
					$('.upfront-ui-selected').each(function(){
						ed._remove_selection(this);
					});
					$selected = $region.find('.ui-selecting');
					if ( $selected.length > 0 ) {
						ed._add_selection($selected.get(0));
						ed._add_selections( $selected, $region.find('.upfront-module').not('.upfront-ui-selected, .upfront-module-parent-group'), $region.find('.upfront-module-group') );
					}

					ed._update_selection_outline();
					return;
				}
				ed._remove_selection(ui.unselecting);
				ed._update_selection_outline();
			},
			/*selected: function (e, ui) {
				var $el = $(ui.selected);
				$el.prepend('<div class="upfront-selected-border" />');
			},*/
			unselected: function (e, ui) {
				var $el = $(ui.unselected);
				$el.find('.upfront-selected-border').remove();
				$('.upfront-module-group-group').remove();
			},
			start: function (e, ui) {
				// reset selection on start
				ed.remove_selections();
				ed.selection = [];
				ed.selecting = true;
			},
			stop: function (e, ui) {
				ed.parse_selections();
			}
		});
	},

	refresh_mergeable: function () {
		this.remove_selections();
		$(".ui-selectable").each(function () {
			$(this).selectable("refresh");
		});
	},

	enable_mergeable: function () {
		this.remove_selections();
		$(".ui-selectable").each(function () {
			$(this).selectable("enable");
		});
	},

	disable_mergeable: function () {
		this.remove_selections();
		$(".ui-selectable").each(function () {
			$(this).selectable("disable");
		});
	},

	destroy_mergeable: function () {
		this.remove_selections();
		$(".ui-selectable").each(function () {
			$(this).selectable("destroy");
		});
	},

	parse_selections: function () {
		if ( !$(".upfront-ui-selected").length )
			return false;
		var ed = this,
			regions = Upfront.Application.layout.get('regions'),
			$region = $(".upfront-ui-selected:first").closest('.upfront-region'),
			region = regions.get_by_name($region.data('name')),
			region_modules = (region ? region.get("modules") : false),
			region_wrappers = (region ? region.get("wrappers") : false),
			unselect = function(){
				$(this).find('.upfront-selected-border').remove();
				$(this).removeClass('upfront-ui-selected ui-selected');
			},
			$selected = $('.upfront-ui-selected');
		if ($selected.length < 2){
			$selected.each(function(){
				ed._remove_selection(this);
			});
			$('#upfront-group-selection').remove();
			return false;
		};
		$('.upfront-module-group-group').remove();
		var $group = $('<div class="upfront-module-group-toggle upfront-module-group-group">' + Upfront.Settings.l10n.global.behaviors.group + '</div>'),
			sel_top = sel_left = sel_right = sel_bottom = false,
			wrap_top = wrap_left = wrap_right = wrap_bottom = false,
			group_top = group_left = 0;
		$('body').append($group);
		$selected.each(function(){
			var off = $(this).offset(),
				width = $(this).outerWidth(),
				height = $(this).outerHeight(),
				$wrap = $(this).closest('.upfront-wrapper'),
				wrap_off = $wrap.offset(),
				wrap_width = $wrap.outerWidth(),
				wrap_height = $wrap.outerHeight()
			;
			off.right = off.left + width;
			off.bottom = off.top + height;
			sel_top = ( sel_top === false || off.top < sel_top ) ? off.top : sel_top;
			sel_bottom = ( sel_bottom === false || off.bottom > sel_bottom ) ? off.bottom : sel_bottom;
			sel_left = ( sel_left === false || off.left < sel_left ) ? off.left : sel_left;
			sel_right = ( sel_right === false || off.right > sel_right ) ? off.right : sel_right;
			wrap_off.right = wrap_off.left + wrap_width;
			wrap_off.bottom = wrap_off.top + wrap_height;
			wrap_top = ( wrap_top === false || wrap_off.top < wrap_top ) ? wrap_off.top : wrap_top;
			wrap_bottom = ( wrap_bottom === false || wrap_off.bottom > wrap_bottom ) ? wrap_off.bottom : wrap_bottom;
			wrap_left = ( wrap_left === false || wrap_off.left < wrap_left ) ? wrap_off.left : wrap_left;
			wrap_right = ( wrap_right === false || wrap_off.right > wrap_right ) ? wrap_off.right : wrap_right;
		});
		group_top = sel_top + Math.round( (sel_bottom-sel_top)/2 ) - Math.round( $group.outerHeight()/2 );
		group_left = sel_left + Math.round( (sel_right-sel_left)/2 ) - Math.round( $group.outerWidth()/2 );
		$group.css({
			position: 'absolute',
			zIndex: 999999,
			top: group_top,
			left: group_left
		});
		setTimeout(function(){ ed.selecting = false; }, 1000);
		$group.on('click', function () {
			var breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active().toJSON(),
				grid_ed = Upfront.Behaviors.GridEditor,
				first_module_view = false,
				max_col = Math.round((wrap_right-wrap_left)/grid_ed.grid.column_width),
				lines = grid_ed.parse_modules_to_lines(region_modules, region_wrappers, breakpoint.id, breakpoint.columns),
				group_lines = [],
				prev_group_lines = [],
				next_group_lines = [],
				is_prev_group_combine = false,
				is_next_group_combine = false,
				group_col = 0,
				prev_group_col = 0,
				next_group_col = 0,
				do_split = false
				;
			// Parse the lines into groups
			_.each(lines, function (l) {
				var wrappers = [],
					prev_wrappers = [],
					next_wrappers = [],
					top_wrappers = [],
					bottom_wrappers = [],
					line_col = 0,
					prev_line_col = 0,
					next_line_col = 0
					;
				_.each(l.wrappers, function (w) {
					var modules = [],
						top_modules = [],
						bottom_modules = []
						;
					_.each(w.modules, function (m) {
						var found = false;
						$selected.each(function () {
							var element_id = $(this).attr('id'),
								index;
							if ( m.model.get_element_id() == element_id ) {
								if ( first_module_view === false ) {
									first_module_view = Upfront.data.module_views[m.model.cid];
								}
								modules.push(m);
								found = true;
							}
						});
						if ( !found ) {
							if ( modules.length == 0 ) {
								top_modules.push(m);
							}
							else {
								bottom_modules.push(m);
							}
						}
					});
					if ( modules.length > 0 ) {
						wrappers.push({
							modules: modules,
							top_modules: top_modules,
							bottom_modules: bottom_modules,
							model: w.model,
							col: w.col,
							clear: w.clear,
							spacer: w.spacer,
							order: w.order
						});
						line_col += w.col;
						if ( top_modules.length ) {
							top_wrappers.push({
								modules: top_modules,
								model: w.model,
								col: w.col,
								clear: w.clear,
								spacer: w.spacer,
								order: w.order
							});
						}
						if ( bottom_modules.length ) {
							bottom_wrappers.push({
								modules: bottom_modules,
								model: w.model,
								col: w.col,
								clear: w.clear,
								spacer: w.spacer,
								order: w.order
							});
						}
					}
					else {
						( wrappers.length == 0 ? prev_wrappers : next_wrappers ).push({
							modules: w.modules,
							model: w.model,
							col: w.col,
							clear: w.clear,
							spacer: w.spacer,
							order: w.order
						});
						if ( wrappers.length == 0 ) prev_line_col += w.col;
						else next_line_col += w.col;
					}
				});
				if ( wrappers.length > 0 ) {
					group_lines.push({
						wrappers: wrappers,
						top_wrappers: top_wrappers,
						bottom_wrappers: bottom_wrappers,
						col: line_col
					});
					group_col = line_col > group_col ? line_col : group_col;
					if ( prev_wrappers.length > 0 ) {
						prev_group_lines.push({
							wrappers: prev_wrappers,
							col: prev_line_col
						});
						prev_group_col = prev_line_col > prev_group_col ? prev_line_col : prev_group_col;
					}
					if ( next_wrappers.length > 0 ) {
						next_group_lines.push({
							wrappers: next_wrappers,
							col: next_line_col
						});
						next_group_col = next_line_col > next_group_col ? next_line_col : next_group_col;
					}
				}
			});
			grid_ed.start(first_module_view, first_module_view.model);

			// Grouping!
			// Try to see if previous elements qualify to be grouped/combined (that is if it has > 1 line)
			if ( prev_group_lines.length > 1 ) {
				if ( !ed._do_combine(prev_group_lines, region) ) {
					ed._do_group(prev_group_lines, region);
				}
			}
			// If we don't have affected previous/next elements, we'll split non-selected element outside group
			// Otherwise, it creates another group
			if ( prev_group_lines.length == 0 && next_group_lines.length == 0 ) {
				do_split = true;
			}
			ed._do_group(group_lines, region, false, do_split);
			// Try to see if next elements qualify to be grouped/combined (that is if it has > 1 line)
			if ( next_group_lines.length > 1 ) {
				if ( !ed._do_combine(next_group_lines, region) ) {
					ed._do_group(next_group_lines, region);
				}
			}

			// now normalize the wrappers
			grid_ed.update_position_data($region.find('.upfront-editable_entities_container:first'));
			grid_ed.update_wrappers(region);

			$(this).remove();
			$('#upfront-group-selection').remove();
			ed.selection = [];
		});
	},

	_do_group: function (lines, region, force_add_wrapper, do_split)  {
		var ed = this,
			grid_ed = Upfront.Behaviors.GridEditor,
			add_wrapper = (force_add_wrapper === true),
			do_split = ( do_split === true ),
			region_modules = region.get("modules"),
			region_wrappers = region.get("wrappers"),
			group_id = Upfront.Util.get_unique_id("module-group"),
			group = new Upfront.Models.ModuleGroup(),
			group_view = false,
			group_modules = group.get('modules'),
			group_wrappers = group.get('wrappers'),
			group_wrapper_clear = false,
			group_wrapper = false,
			group_wrapper_id = false,
			group_col = 0,
			add_index = false,
			top_add_index = false
		;
		_.each(lines, function (l, li) {
			group_col = l.col > group_col ? l.col : group_col;
			_.each(l.wrappers, function (w, wi) {
				var new_wrapper = new Upfront.Models.Wrapper({}),
					new_wrapper_id = Upfront.Util.get_unique_id("wrapper"),
					wrapper_view = Upfront.data.wrapper_views[w.model.cid],
					has_top_modules = ( 'top_modules' in w && w.top_modules.length > 0 ),
					has_bottom_modules = ( 'bottom_modules' in w && w.bottom_modules.length > 0 )
				;
				new_wrapper.set_property('wrapper_id', new_wrapper_id);
				new_wrapper.set_property('class', w.model.get_property_value_by_name('class'));
				new_wrapper.replace_class(grid_ed.grid.class + w.col);
				if ( wi == 0 ) {
					new_wrapper.add_class('clr');
					if ( li == 0 ) {
						group_wrapper_clear = w.clear;
					}
				}
				group_wrappers.add(new_wrapper);
				_.each(w.modules, function (m, mi) {
					var index = region_modules.indexOf(m.model),
						view = Upfront.data.module_views[m.model.cid]
					;
					if ( add_index === false ) {
						add_index = index;
					}
					m.model.set_property('wrapper_id', new_wrapper_id, true);
					region_modules.remove(m.model, {silent: true});
					view.$el.detach(); // Detach element from DOM, will render later with group render
					if ( !has_top_modules && !has_bottom_modules ) {
						wrapper_view.$el.detach(); // Detach wrapper view from DOM too
					}
					group_modules.add(m.model);
				});
				if ( li == 0 && wi == 0 ) {
					// First wrapper is now used for group wrapper
					group_wrapper_id = w.model.get_wrapper_id();
					group_wrapper = w.model;
				}
				else if ( !has_top_modules ) {
					// Unused wrapper, remove
					region_wrappers.remove(w.model);
				}
			});
			if ( 'bottom_wrappers' in l && l.bottom_wrappers.length > 1 ) {
				// Has bottom wrappers, let's group that too
				if ( do_split ) {
					ed._do_split(l.bottom_wrappers, region);
				}
				else {
					ed._do_group([{
						wrappers: l.bottom_wrappers,
						col: l.col
					}], region);
				}
			}
			if ( 'top_wrappers' in l && l.top_wrappers.length > 1 ) {
				// Has top wrappers, let's group that too, create new wrapper instead
				if ( do_split ) {
					// We don't actually split the top wrappers, the group will be render below that
					// But we need to fix the element position
					_.each(l.top_wrappers, function (w, wi) {
						_.each(w.modules, function (m, mi) {
							var index = region_modules.indexOf(m.model);
							if ( top_add_index === false ) {
								top_add_index = index;
								return;
							}
							region_modules.remove(m.model, {silent: true});
							top_add_index++;
							m.model.add_to(region_modules, top_add_index);
						});
					});
					if ( top_add_index !== false ) {
						add_index = top_add_index+1;
					}
					add_wrapper = true;
				}
				else {
					ed._do_group([{
						wrappers: l.top_wrappers,
						col: l.col
					}], region);
				}
			}
		});
		if ( add_wrapper ) {
			group_wrapper = new Upfront.Models.Wrapper({});
			group_wrapper_id = Upfront.Util.get_unique_id("wrapper");
			region_wrappers.add(group_wrapper);
		}
		group_wrapper.set_property('wrapper_id', group_wrapper_id);
		group_wrapper.replace_class(grid_ed.grid.class + group_col);
		if ( group_wrapper_clear ){
			group_wrapper.add_class('clr');
		}
		group.set_property('wrapper_id', group_wrapper_id);
		group.set_property('element_id', group_id);
		group.replace_class(grid_ed.grid.class + group_col);
		group.set_property('original_col', group_col);
		group.add_to(region_modules, add_index);
		Upfront.Events.trigger("entity:module_group:group", group, region);
	},

	_do_combine: function (lines, region) {
		var ed = this,
			grid_ed = Upfront.Behaviors.GridEditor,
			region_modules = region.get("modules"),
			region_wrappers = region.get("wrappers"),
			wrappers_col = [],
			wrappers_combine = [],
			can_combine = true
		;
		_.each(lines, function (l, li) {
			if ( !(li in wrappers_col) ) wrappers_col[li] = [];
			_.each(l.wrappers, function (w, wi) {
				if ( !(wi in wrappers_combine) ) wrappers_combine[wi] = [];
				wrappers_col[li][wi] = w.col;
				wrappers_combine[wi].push(w);
			});
		});
		// Check if it's possible to combine modules to the same wrapper
		if ( wrappers_col.length > 1 ) {
			for ( var i = 1; i < wrappers_col.length; i++ ) {
				if ( !_.isEqual(wrappers_col[i-1], wrappers_col[i]) ) {
					can_combine = false;
					break;
				}
			}
		}
		if ( !can_combine ) return false;
		_.each(wrappers_combine, function (combine) {
			var add_index = 0,
				spacers = _.filter(combine, function(w){ return w.spacer; }),
				all_spacers = ( combine.length == spacers.length ),
				wrapper_id
			;
			_.each(combine, function (w, wi) {
				if ( wi == 0 ) {
					// The first wrapper which we'll use for combine
					wrapper_id = w.model.get_wrapper_id();
					add_index = region_modules.indexOf(_.last(w.modules).model);
					if ( w.spacer && !all_spacers ) {
						// It's spacer but we have other element below, so just remove this spacer
						_.each(w.modules, function (m) {
							region_modules.remove(m.model);
						});
						add_index--;
					}
					return;
				}
				region_wrappers.remove(w.model);
				if ( w.spacer ) {
					_.each(w.modules, function (m) {
						region_modules.remove(m.model);
					});
				}
				else {
					_.each(w.modules, function (m, mi) {
						m.model.set_property('wrapper_id', wrapper_id, true);
						region_modules.remove(m.model, {silent: true});
						add_index++;
						m.model.add_to(region_modules, add_index);
					});
				}
			});
		});
		return true;
	},

	_do_split: function (wrappers, region) {
		var ed = this,
			grid_ed = Upfront.Behaviors.GridEditor,
			region_modules = region.get("modules"),
			region_wrappers = region.get("wrappers")
		;
		_.each(wrappers, function (w, wi) {
			var new_wrapper = new Upfront.Models.Wrapper({}),
				new_wrapper_id = Upfront.Util.get_unique_id("wrapper")
			;
			new_wrapper.set_property('wrapper_id', new_wrapper_id);
			new_wrapper.set_property('class', w.model.get_property_value_by_name('class'));
			region_wrappers.add(new_wrapper);
			_.each(w.modules, function (m, mi) {
				var index = region_modules.indexOf(m.model);
				m.model.set_property('wrapper_id', new_wrapper_id, true);
				region_modules.remove(m.model, {silent: true});
				m.model.add_to(region_modules, index);
			});
		});
		return true;
	},

	_get_group_position: function ($selected) {
		var sel_top = sel_left = sel_right = sel_bottom = false,
			wrap_top = wrap_left = wrap_right = wrap_bottom = false
		;
		$selected.each(function(){
			var off = $(this).offset(),
				width = Math.round(parseFloat($(this).css('width'))),
				height = Math.round(parseFloat($(this).css('height'))),
				$wrap = $(this).closest('.upfront-wrapper'),
				wrap_off = $wrap.offset(),
				wrap_width = Math.round(parseFloat($wrap.css('width'))),
				wrap_height = Math.round(parseFloat($wrap.css('height')))
			;
			off.left = Math.round(off.left);
			off.top = Math.round(off.top);
			off.right = off.left + width;
			off.bottom = off.top + height;
			sel_top = ( sel_top === false || off.top < sel_top ) ? off.top : sel_top;
			sel_bottom = ( sel_bottom === false || off.bottom > sel_bottom ) ? off.bottom : sel_bottom;
			sel_left = ( sel_left === false || off.left < sel_left ) ? off.left : sel_left;
			sel_right = ( sel_right === false || off.right > sel_right ) ? off.right : sel_right;
			wrap_off.left = Math.round(wrap_off.left);
			wrap_off.top = Math.round(wrap_off.top);
			wrap_off.right = wrap_off.left + wrap_width;
			wrap_off.bottom = wrap_off.top + wrap_height;
			wrap_top = ( wrap_top === false || wrap_off.top < wrap_top ) ? wrap_off.top : wrap_top;
			wrap_bottom = ( wrap_bottom === false || wrap_off.bottom > wrap_bottom ) ? wrap_off.bottom : wrap_bottom;
			wrap_left = ( wrap_left === false || wrap_off.left < wrap_left ) ? wrap_off.left : wrap_left;
			wrap_right = ( wrap_right === false || wrap_off.right > wrap_right ) ? wrap_off.right : wrap_right;
		});
		return {
			element: {
				top: sel_top,
				bottom: sel_bottom,
				left: sel_left,
				right: sel_right
			},
			wrapper: {
				top: wrap_top,
				bottom: wrap_bottom,
				left: wrap_left,
				right: wrap_right
			}
		};
	},

	_find_affected_el: function ($els, pos) {
		if ( this.selection.length == 0 ) return false;
		var $affected = false;
		$els.each(function(){
			var off = $(this).offset(),
				width = Math.round(parseFloat($(this).css('width'))),
				height = Math.round(parseFloat($(this).css('height'))),
				top = Math.round(off.top),
				left = Math.round(off.left),
				bottom = top + height,
				right = left + width
			;
			if ( pos.top < bottom && pos.bottom > top && pos.left < right && pos.right > left ) {
				$affected = $affected !== false ? $affected.add($(this)) : $(this);
			}
		})
		return $affected;
	},

	_update_selection_outline: function () {
		var $selection = $('#upfront-group-selection'),
			group = this._get_group_position($(this.selection));

		if ( !$selection.length ){
			$selection = $('<div id="upfront-group-selection" />');
			$selection.appendTo('body');
		}
		$selection.css({
			top: group.element.top,
			left: group.element.left,
			height: group.element.bottom - group.element.top,
			width: group.element.right - group.element.left
		});
	},

	_add_selection: function (el) {
		var find = _.find(this.selection, function(sel){ return (sel == el); });
		if ( find ) return;
		this.selection.push(el);
		$(el).addClass('upfront-ui-selected');
		//$(el).prepend('<div class="upfront-selected-border" />');
	},

	/**
	 * Automatically resolve conflict on adding multiple selections
	 */
	_add_selections: function ($selecting, $affected_els, $restrict_els) {
		var ed = this,
			selected = [],
			group,
			$affected,
			$restricted
		;
		// Add selection one-by-one
		$selecting.each(function () {
			var el = this,
				find = _.find(ed.selection, function(sel){ return (sel == el); }),
				$affected_els_tmp = $($affected_els)
			;
			if ( find ) return;
			selected = [];
			group = ed._get_group_position( $(ed.selection).add(this) );
			$affected = ed._find_affected_el( $affected_els_tmp, group.element);
			// Find all affected elements by this selection
			while ( $affected !== false ) {
				$affected.each(function(){ selected.push(this); });
				$affected_els_tmp = $affected_els_tmp.not($affected);
				group = ed._get_group_position( $(ed.selection).add(selected) );
				$affected = ed._find_affected_el( $affected_els_tmp, group.element );
			}
			// Make sure no restricted element is on the way
			$restricted = ed._find_affected_el( $restrict_els, group.element );
			if ( $restricted !== false ) return;
			// Safe, now properly add selection
			_.each(selected, function (sel) {
				ed._add_selection(sel);
			});
		});

		return;
	},

	_remove_selection: function (el) {
		this.selection = _.reject(this.selection, function(sel){ return (sel == el); });
		$(el).find('.upfront-selected-border').remove();
		$(el).removeClass('upfront-ui-selected ui-selected');
	},

	remove_selections: function () {
		var ed = Upfront.Behaviors.LayoutEditor;
		$('.upfront-ui-selected').each(function(){
			ed._remove_selection(this);
		});
		ed._update_selection_outline();
		$('.upfront-module-group-group').remove();
	},

	create_undo: function () {
		this.layout.store_undo_state();
	},
	apply_history_change: function () {
		var regions = Upfront.Application.layout.get("regions"),
			region = regions ? regions.get_by_name('shadow') : false
		;
		if (regions && region) { regions.remove(region); region = false; }
		//Upfront.Application.layout_view.local_view = false;
		Upfront.Application.layout_view.render();
	},

	save_dialog: function (on_complete, context) {
		$("body").append("<div id='upfront-save-dialog-background' />");
		$("body").append("<div id='upfront-save-dialog' />");
		var $dialog = $("#upfront-save-dialog"),
			$bg = $("#upfront-save-dialog-background"),
			current = Upfront.Application.layout.get("current_layout"),
			html = ''
		;
		$bg
			.width($(window).width())
			.height($(document).height())
		;
		html += '<p>' + Upfront.Settings.l10n.global.behaviors.this_post_only + '</p>';
		$.each(_upfront_post_data.layout, function (idx, el) {
			//var checked = el == current ? "checked='checked'" : '';
			//html += '<input type="radio" name="upfront_save_as" id="' + el + '" value="' + el + '" ' + checked + ' />';
			//html += '&nbsp;<label for="' + el + '">' + Upfront.Settings.LayoutEditor.Specificity[idx] + '</label><br />';
			if ( idx == 'type' )
				return;
			html += '<span class="upfront-save-button" data-save-as="' + el + '">' + Upfront.Settings.LayoutEditor.Specificity[idx] + '</span>';
		});
		//html += '<button type="button" id="upfront-save_as">Save</button>';
		//html += '<button type="button" id="upfront-cancel_save">Cancel</button>';
		$dialog
			.html(html)
		;
		$("#upfront-save-dialog").on("click", ".upfront-save-button", function () {
			/*var $check = $dialog.find(":radio:checked"),
				selected = $check.length ? $check.val() : false
			;*/
			var selected = $(this).attr('data-save-as');
			$bg.remove(); $dialog.remove();
			on_complete.apply(context, [selected]);
			return false;
		});
		$("#upfront-save-dialog-background").on("click", function () {
			$bg.remove(); $dialog.remove();
			return false;
		});
	},

	/**
	 * We are loading theme by reloading page since lots of stuff needs
	 * to be setup like stylesheet etc. Only way to get this right is to
	 * load page from scratch.
	 */
	load_theme: function(theme_slug) {
		var url = location.origin;
		// Add anything before create_new
		url += location.pathname.split('create_new')[0];
		// Add create_new and theme slug
		url += 'create_new/' + theme_slug;
		// Check for dev=true
		if (location.toString().indexOf('dev=true') > -1) url += '?dev=true';

		window.location = url;
	},

	open_theme_fonts_manager: function() {
		var me = {};
		var textFontsManager = new Upfront.Views.Editor.Fonts.Text_Fonts_Manager({ collection: Upfront.Views.Editor.Fonts.theme_fonts_collection });
		textFontsManager.render();
		var iconFontsManager = new Upfront.Views.Editor.Fonts.Icon_Fonts_Manager({ collection: Upfront.Views.Editor.Fonts.icon_fonts_collection });
		iconFontsManager.render();

		var popup = Upfront.Popup.open(
			function (data, $top, $bottom) {
				var $me = $(this);
				$me.empty()
					.append('<p class="upfront-popup-placeholder">' + Upfront.Settings.l10n.global.behaviors.loading_content + '</p>');

				me.$popup = {
					"top": $top,
					"content": $me,
					"bottom": $bottom
				};
			},
			{
				width: 750
			},
			'font-manager-popup'
		);

		me.$popup.top.html(
			'<ul class="upfront-tabs">' +
				'<li id="theme-text-fonts-tab" class="active">' + Upfront.Settings.l10n.global.behaviors.theme_text_fonts + '</li>' +
				'<li id="theme-icon-fonts-tab">' + Upfront.Settings.l10n.global.behaviors.theme_icon_fonts + '</li>' +
			'</ul>' +
			me.$popup.top.html()
		);

		me.$popup.top.on('click', '#theme-text-fonts-tab', function(event) {
			me.$popup.content.html(textFontsManager.el);
			$('#theme-icon-fonts-tab').removeClass('active');
			$('#theme-text-fonts-tab').addClass('active');
			$('.theme-fonts-ok-button').css('margin-top', '30px');
		});

		me.$popup.top.on('click', '#theme-icon-fonts-tab', function() {
			me.$popup.content.html(iconFontsManager.el);
			$('#theme-text-fonts-tab').removeClass('active');
			$('#theme-icon-fonts-tab').addClass('active');
			$('.theme-fonts-ok-button').css('margin-top', 0);
		});

		me.$popup.bottom.append('<a class="theme-fonts-ok-button">' + Upfront.Settings.l10n.global.behaviors.ok + '</a>');
		me.$popup.content.html(textFontsManager.el);
		textFontsManager.set_ok_button(me.$popup.bottom.find('.theme-fonts-ok-button'));
		me.$popup.bottom.find('.theme-fonts-ok-button').on('click', function() {
			Upfront.Popup.close();
		});
	},

	/**
	 * DEPRECATED
	 */
	create_layout_dialog: function() {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.LayoutEditor,
			fields = {
				layout: new Upfront.Views.Editor.Field.Select({
					name: 'layout',
					values: [{label: Upfront.Settings.l10n.global.behaviors.loading, value: ""}],
					change: function() {
						var value = this.get_value();

						if ( value === 'single-page' )
							fields.$_page_name_wrap.show();
						else
							fields.$_page_name_wrap.hide();
					}
				}),
				page_name: new Upfront.Views.Editor.Field.Text({
					name: 'page_name',
					label: Upfront.Settings.l10n.global.behaviors.page_layout_name,
				}),
				inherit: new Upfront.Views.Editor.Field.Radios({
					name: 'inherit',
					layout: "horizontal-inline",
					values: [
						{label: Upfront.Settings.l10n.global.behaviors.start_fresh, value: ''},
						{label: Upfront.Settings.l10n.global.behaviors.start_from_existing, value: 'existing'}
					]
				}),
				existing: new Upfront.Views.Editor.Field.Select({
					name: 'existing',
					values: []
				})
			};
		if ( !ed.available_layouts ) {
			Upfront.Util.post({
				action: 'upfront_list_available_layout'
			}).done(function(data) {
				ed.available_layouts = data.data;
				fields.layout.options.values = _.map(ed.available_layouts, function(layout, layout_id){
					return { label: layout.label, value: layout_id, disabled: layout.saved };
				});
				fields.layout.render();
				fields.layout.delegateEvents();
			});
		} else {
			fields.layout.options.values = _.map(ed.available_layouts, function(layout, layout_id){
				return {label: layout.label, value: layout_id, disabled: layout.saved};
			});
		}
		if (!ed.all_templates) {
			Upfront.Util.post({
				action: "upfront-wp-model",
				model_action: "get_post_extra",
				postId: "fake", // Stupid walkaround for model handler insanity
				allTemplates: true
			}).done(function (response) {
				if (!response.data || !response.data.allTemplates) return false;
				if (0 === response.data.allTemplates.length) {
					fields.inherit.$el.hide();
					fields.existing.$el.hide();
					return false;
				}
				ed.all_templates = response.data.allTemplates;
				fields.existing.options.values = [];
				_.each(response.data.allTemplates, function (tpl, title) {
					fields.existing.options.values.push({label: title, value: tpl});
				});
				fields.existing.render();
			});
		} else {
			fields.existing.options.values = _.map(ed.all_templates, function(tpl, title){
				return {label: title, value: tpl};
			});
		}

		if ( !ed.layout_modal ){
			ed.layout_modal = new Upfront.Views.Editor.Modal({to: $('body'), button: false, top: 120, width: 540});
			ed.layout_modal.render();
			$('body').append(ed.layout_modal.el);
		}

		ed.layout_modal.open(function($content, $modal){
			var $button = $('<div style="clear:both"><span class="uf-button">' + Upfront.Settings.l10n.global.behaviors.create + '</span></div>'),
				$select_wrap = $('<div class="upfront-modal-select-wrap" />');
				$page_name_wrap = $('<div class="upfront-modal-select-wrap" />')
			;
			fields.$_page_name_wrap = $page_name_wrap;
			_.each(fields, function(field) {
				if (!field.render) return true;
				field.render();
				field.delegateEvents();
			});
			$content.html(
				'<h1 class="upfront-modal-title">' + Upfront.Settings.l10n.global.behaviors.create_new_layout + '</h1>'
			);
			$select_wrap.append(fields.layout.el);
			$content.append($select_wrap);

			$page_name_wrap.hide();
			$page_name_wrap.append(fields.page_name.el);
			$page_name_wrap.append(fields.inherit.el);
			$page_name_wrap.append(fields.existing.el);
			$content.append($page_name_wrap);

			$content.append($button);
			$button.on('click', function(){
				ed.layout_modal.close(true);
			});
		}, ed)
		.done(function(){
			var layout = fields.layout.get_value(),
				layout_slug = app.layout.get('layout_slug'),
				data = _.extend({}, ed.available_layouts[layout]),
				specific_layout = fields.page_name.get_value();

			// Check if user is creating single page with specific name
			if (layout === 'single-page' && specific_layout) {
				layout = 'single-page-' + specific_layout.replace(/\s/g, '-').toLowerCase();
				data = {
					layout: {
						'type': 'single',
						'item': 'single-page',
						'specificity': layout
					}
				};
			}

			data.use_existing = layout.match(/^single-page/) && specific_layout && "existing" === fields.inherit.get_value()
				? fields.existing.get_value()
				: false
			;
/*
// Why were we using this?
// It was causing issues when trying to create a pre-existing layout: https://app.asana.com/0/11140166463836/36929734950095
			if ( data.latest_post )
				_upfront_post_data.post_id = data.latest_post;
*/
			app.create_layout(data.layout, {layout_slug: layout_slug, use_existing: data.use_existing}).done(function() {
				app.layout.set('current_layout', layout);
				// Immediately export layout to write initial state to file.
				ed._export_layout();
			});
		});
	},

	/**
	 * DEPRECATED
	 */
	browse_layout_dialog: function () {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.LayoutEditor,
			fields = {
				layout: new Upfront.Views.Editor.Field.Select({
					name: 'layout',
					values: [{label: Upfront.Settings.l10n.global.behaviors.loading, value: ""}],
					default_value: app.layout.get('current_layout')
				})
			};

		if ( !ed.browse_modal ){
			ed.browse_modal = new Upfront.Views.Editor.Modal({to: $('body'), button: false, top: 120, width: 540});
			ed.browse_modal.render();
			$('body').append(ed.browse_modal.el);
		}
		ed._get_saved_layout().done(function(data){
			if ( !data || data.length == 0 ){
				fields.layout.options.values = [{label: Upfront.Settings.l10n.global.behaviors.no_saved_layout, value: ""}];
			}
			else {
				fields.layout.options.values = _.map(ed.saved_layouts, function(layout, layout_id){
					return {label: layout.label, value: layout_id};
				});
			}
			fields.layout.render();
			fields.layout.delegateEvents();
		});

		ed.browse_modal.open(function($content, $modal){
			var $button = $('<span class="uf-button">' + Upfront.Settings.l10n.global.behaviors.edit + '</span>'),
				$select_wrap = $('<div class="upfront-modal-select-wrap" />');
			_.each(fields, function(field){
				field.render();
				field.delegateEvents();
			});
			$content.html(
				'<h1 class="upfront-modal-title">' + Upfront.Settings.l10n.global.behaviors.edit_saved_layout + '</h1>'
			);
			$select_wrap.append(fields.layout.el);
			$content.append($select_wrap);
			$content.append($button);
			$button.on('click', function(){
				ed.browse_modal.close(true);
			});
		}, ed)
		.done(function(){
			var layout = fields.layout.get_value(),
				layout_slug = app.layout.get('layout_slug'),
				data = ed.saved_layouts[layout];
			if ( data.latest_post )
				_upfront_post_data.post_id = data.latest_post;
			app.layout.set('current_layout', layout);
			app.load_layout(data.layout, {layout_slug: layout_slug});
		});

	},

	is_exporter_start_page: function() {
		return Upfront.themeExporter.currentTheme === 'upfront';
	},

	export_dialog: function () {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.LayoutEditor,
			fields,
			loading;

		loading = new Upfront.Views.Editor.Loading({
			loading: Upfront.Settings.l10n.global.behaviors.checking_layouts,
			done: Upfront.Settings.l10n.global.behaviors.layout_exported,
			fixed: true
		});

		if (ed.is_exporter_start_page()) {
			// Prepare export dialog
			fields = {
				theme: new Upfront.Views.Editor.Field.Select({
					name: 'theme',
					default_value: Upfront.themeExporter.currentTheme === 'upfront' ?
						'' : Upfront.themeExporter.currentTheme,
					label: Upfront.Settings.l10n.global.behaviors.select_theme,
					values: [{label: Upfront.Settings.l10n.global.behaviors.new_theme, value: ""}],
					change: function(){
						var value = this.get_value(),
							$fields = $([fields.name.el, fields.directory.el, fields.author.el, fields.author_uri.el]);
						if ( value != '' )
							$fields.hide();
						else
							$fields.show();
					}
				}),
				name: new Upfront.Views.Editor.Field.Text({
					name: 'name',
					label: Upfront.Settings.l10n.global.behaviors.theme_name,
				}),
				directory: new Upfront.Views.Editor.Field.Text({
					name: 'directory',
					label: Upfront.Settings.l10n.global.behaviors.directory,
				}),
				author: new Upfront.Views.Editor.Field.Text({
					name: 'author',
					label: Upfront.Settings.l10n.global.behaviors.author,
				}),
				author_uri: new Upfront.Views.Editor.Field.Text({
					name: 'author_uri',
					label: Upfront.Settings.l10n.global.behaviors.author_uri,
				}),
				activate: new Upfront.Views.Editor.Field.Checkboxes({
					name: 'activate',
					default_value: true,
					multiple: false,
					values: [{ label: Upfront.Settings.l10n.global.behaviors.activate_upon_creation, value: 1 }],
				}),
				with_images: new Upfront.Views.Editor.Field.Checkboxes({
					name: 'with_images',
					default_value: true,
					multiple: false,
					values: [{ label: Upfront.Settings.l10n.global.behaviors.export_theme_images, value: 1 }],
				})
			};

			if ( !ed.export_modal ){
				ed.export_modal = new Upfront.Views.Editor.Modal({to: $('body'), button: false, top: 120, width: 540});
				ed.export_modal.render();
				$('body').append(ed.export_modal.el);
			}

			ed._get_themes().done(function(data){
				fields.theme.options.values = _.union( [{label: Upfront.Settings.l10n.global.behaviors.new_theme, value: ""}], _.map(data, function(theme, directory){
					return {label: theme.name, value: theme.directory};
				}) );
				fields.theme.render();
				fields.theme.delegateEvents();
				fields.theme.$el.find('input').trigger('change'); // to collapse other fields if theme is set
			});

			ed.export_modal.open(function($content, $modal) {
				var $button = $('<span class="uf-button">' + Upfront.Settings.l10n.global.behaviors.export_button + '</span>');
				_.each(fields, function(field){
					field.render();
					field.delegateEvents();
				});
				$content.html(
					'<h1 class="upfront-modal-title">' + Upfront.Settings.l10n.global.behaviors.export_theme + '</h1>'
				);
				$content.append(fields.theme.el);
				$content.append(fields.name.el);
				$content.append(fields.directory.el);
				$content.append(fields.author.el);
				$content.append(fields.author_uri.el);
				$content.append(fields.activate.el);
				$content.append(fields.with_images.el);
				$content.append($button);
				$button.on('click', function() {
					var theme_name, create_theme, export_layout, export_layouts, do_export;
					theme_name = fields.theme.get_value() ? fields.theme.get_value() : fields.directory.get_value();
					create_theme = function(){
						var data = {
							'thx-theme-name': fields.name.get_value(),
							'thx-theme-slug': fields.directory.get_value(),
							'thx-author': fields.author.get_value(),
							'thx-author-uri': fields.author_uri.get_value(),
							'thx-theme-template': 'upfront',
							'thx-activate_theme': fields.activate.get_value() || '',
							'thx-export_with_images': fields.with_images.get_value() || '',
							add_global_regions: Upfront.Application.current_subapplication.layout.get('layout_slug') !== 'blank'
						};
						loading.update_loading_text(Upfront.Settings.l10n.global.behaviors.creating_theme);
						return ed._create_theme(data);
					};
					loading.render();
					$('body').append(loading.el);
					create_theme().done(function() {
						ed.export_single_layout(loading, theme_name).done(function() {
							ed.load_theme(theme_name);
						});
					});
				});
			}, ed);
		} else {
			// Just export layout
			loading.render();
			$('body').append(loading.el);
			ed.export_single_layout(loading, Upfront.themeExporter.currentTheme);
		}
	},

	export_single_layout: function(loading, theme_name) {
		var self = this,
            app = Upfront.Application,
			ed = Upfront.Behaviors.LayoutEditor;

		var layout_id = _upfront_post_data.layout.specificity || _upfront_post_data.layout.item || _upfront_post_data.layout.type; // Also make sure to include specificity first
		loading.update_loading_text(Upfront.Settings.l10n.global.behaviors.exporting_layout + layout_id);

		return ed._export_layout({ theme: theme_name }).done(function() {
			loading.done(function() {
				if (ed.export_modal) ed.export_modal.close(true);
				ed.clean_region_css();
			});
		});

	},

	// This function can probably be deleted.
	first_save_dialog: function (success) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.LayoutEditor,
			current_layout = app.layout.get('current_layout');
		if ( success && (!current_layout || current_layout == 'archive-home') ){
			ed.message_dialog(Upfront.Settings.l10n.global.behaviors.excellent_start, Upfront.Settings.l10n.global.behaviors.homepage_created);
		}
	},

	message_dialog: function (title, msg) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.LayoutEditor;
		if ( !ed.message_modal ){
			ed.message_modal = new Upfront.Views.Editor.Modal({to: $('body'), button: true, top: 120, width: 540});
			ed.message_modal.render();
			$('body').append(ed.message_modal.el);
		}
		ed.message_modal.open(function($content, $modal){
			$modal.addClass('upfront-message-modal');
			$content.html(
				'<h1 class="upfront-modal-title">' + title + '</h1>'
			);
			$content.append(msg);
		}, ed);
	},

	/**
	 * DEPRECATED
	 */
	_get_saved_layout: function (){
		var me = this,
			deferred = new $.Deferred();
		Upfront.Util.post({
			action: 'upfront_list_theme_layouts'
		}).success(function(response){
			me.saved_layouts = response.data;
			deferred.resolve(response.data);
		}).error(function(){
			deferred.reject();
		});
		return deferred.promise();
	},

	_get_themes: function () {
		var me = this,
			deferred = new $.Deferred();
		Upfront.Util.post({
			action: 'upfront_thx-get-themes'
		}).success(function(response){
			me.themes = response;
			deferred.resolve(response);
		}).error(function(){
			deferred.reject();
		});
		return deferred.promise();
	},

	_create_theme: function (data) {
		var deferred = new $.Deferred();
		Upfront.Util.post({
			action: 'upfront_thx-create-theme',
			form: this._build_query(data)
		}).success(function(response){
			if ( response && response.error )
				deferred.reject(response.error);
			else
				deferred.resolve();
		}).error(function(){
			deferred.reject();
		});
		return deferred.promise();
	},

	export_element_styles: function(data) {
		Upfront.Util.post({
			action: 'upfront_thx-export-element-styles',
			data: data
		}).success(function(response){
			if ( response && response.error ) {
				Upfront.Views.Editor.notify(response.error);
				return;
			}
			if(!Upfront.data.styles[data.elementType])
				Upfront.data.styles[data.elementType] = [];
			if(Upfront.data.styles[data.elementType].indexOf(data.stylename) === -1)
				Upfront.data.styles[data.elementType].push(data.stylename);

			Upfront.Views.Editor.notify(Upfront.Settings.l10n.global.behaviors.style_exported);
		}).error(function(){
			Upfront.Views.Editor.notify(Upfront.Settings.l10n.global.behaviors.style_export_fail);
		});
	},

	_export_layout: function (custom_data) {
		var typography,
			properties,
			layout_style,
			deferred,
			data = {};

		typography = _.findWhere(
			Upfront.Application.current_subapplication.get_layout_data().properties,
			{ 'name': 'typography' }
		);

		layout_style = _.findWhere(
			Upfront.Application.current_subapplication.get_layout_data().properties,
			{ 'name': 'layout_style' }
		);


		properties = _.extend({}, Upfront.Util.model_to_json(Upfront.Application.current_subapplication.get_layout_data().properties));
		properties = _.reject(properties, function(property) {
			return _.contains(['typography', 'layout_style', 'global_regions'], property.name);
		});

		data = {
			typography: (typography ? JSON.stringify(typography.value) : ''),
			regions: JSON.stringify(Upfront.Application.current_subapplication.get_layout_data().regions),
			template: _upfront_post_data.layout.specificity || _upfront_post_data.layout.item || _upfront_post_data.layout.type, // Respect proper cascade ordering
			layout_properties: JSON.stringify(properties),
			theme: Upfront.themeExporter.currentTheme,
			layout_style: layout_style ? layout_style.value : '',
			theme_colors: {
				colors: Upfront.Views.Theme_Colors.colors.toJSON(),
				range: Upfront.Views.Theme_Colors.range
			},
			/*
			 * Commented, because presets are updated in settings.php on create/edit
			 * button_presets: Upfront.Views.Editor.Button.Presets.toJSON(),
			 */
			post_image_variants: Upfront.Content.ImageVariants.toJSON()
		};

		if (Upfront.themeExporter.layoutStyleDirty) {
			data.layout_style = $('#layout-style').html();
			Upfront.themeExporter.layoutStyleDirty = false;
		}

		if (custom_data) data = _.extend(data, custom_data);

		deferred = new $.Deferred();
		Upfront.Util.post({
			action: 'upfront_thx-export-layout',
			data: data
		}).success(function(response){
			if ( response && response.error )
				deferred.reject(response.error);
			else
				deferred.resolve();
		}).error(function(){
			deferred.reject();
		});
		return deferred.promise();
	},

	/* Cleanup region CSS, running on save/export */
	clean_region_css: function () {
		var me = this,
			cssEditor = Upfront.Application.cssEditor,
            ed = Upfront.Behaviors.LayoutEditor,
			elementTypes = [cssEditor.elementTypes.RegionContainer, cssEditor.elementTypes.Region],
			layout = _upfront_post_data.layout,
			layout_id = layout.specificity || layout.item || layout.type,
			regions = Upfront.Application.layout.get('regions'),
			styleExists = [],
			deleteDatas = [],
			deleteFunc = function (index) {
				if ( ! deleteDatas[index] ) {
					Upfront.Views.Editor.notify(Upfront.Settings.l10n.global.behaviors.region_css_cleaned);
					deferred.resolve();
					return;
				}
				var elementType = deleteDatas[index].elementType,
					styleName = deleteDatas[index].styleName;
				if ( Upfront.Application.get_current() === Upfront.Settings.Application.MODE.THEME ) {
					data = {
						action: 'upfront_thx-delete-element-styles',
						data: {
							stylename: styleName,
							elementType: elementType
						}
					};
				}
				else {
					data = {
						action: 'upfront_delete_styles',
						styleName: styleName,
						elementType: elementType
					}
				}
				Upfront.Util.post(data)
					.done(function(){
						var styleIndex = Upfront.data.styles[elementType].indexOf(styleName);

						//Remove the styles from the available styles
						if(styleIndex != -1)
							Upfront.data.styles[elementType].splice(styleIndex, 1);

						//Remove the styles from the dom
						$('#upfront-style-' + styleName).remove();

						//Continue deleting
						deleteFunc(index+1);
					});
				;
			},
			deferred = new $.Deferred()
		;

		regions.each(function(region){
			var elementType = region.is_main() ? cssEditor.elementTypes.RegionContainer.id : cssEditor.elementTypes.Region.id,
				styleName = layout_id + '-' + region.get('name') + '-style',
				isGlobal = ( region.get('scope') == 'global' );
			if ( _.isArray(Upfront.data.styles[elementType]) && Upfront.data.styles[elementType].indexOf(styleName) != -1 )
				styleExists.push(styleName);
			// global stylename
			styleName = elementType + '-' + region.get('name') + '-style';
			if ( _.isArray(Upfront.data.styles[elementType]) && Upfront.data.styles[elementType].indexOf(styleName) != -1 )
				styleExists.push(styleName);
		});

        ed._get_saved_layout().done(function(saved){
			_.each(elementTypes, function(elementType){
				_.each(Upfront.data.styles[elementType.id], function(styleName){
					var onOtherLayout = false;
					_.each(saved, function(obj, id){
						if ( id == layout_id )
							return;
						var is_parent_layout = ( layout_id.match(new RegExp('^' + id + '-')) );
						if ( styleName.match(new RegExp('^' + id)) && ( !is_parent_layout || ( is_parent_layout && !styleName.match(new RegExp('^' + layout_id)) ) ) )
							onOtherLayout = true;
					});
					if ( ! _.contains(styleExists, styleName) && styleName.match(new RegExp('^' + layout_id)) && !onOtherLayout )
						deleteDatas.push({
							elementType: elementType.id,
							styleName: styleName
						});
				});
			});
			if ( deleteDatas.length > 0 ) {
				Upfront.Views.Editor.notify(Upfront.Settings.l10n.global.behaviors.cleaning_region_css)
				deleteFunc(0); // Start deleting
			}
		});

		return deferred.promise();
	},

	_build_query: function (data) {
		return _.map(data, function(value, key){ return key + '=' + value; }).join('&');
	},
	
	clean_global_regions: function () {
		Upfront.data.global_regions = false;
	},
	
	open_global_region_manager: function () {
		var ed = Upfront.Behaviors.LayoutEditor;
		Upfront.Popup.open(
			function (data, $top, $bottom) {
				var $me = $(this);
				$me.html('<p class="upfront-popup-placeholder">' + Upfront.Settings.l10n.global.behaviors.loading_content + '</p>');
				
				if ( !Upfront.data.global_regions ){
					ed._refresh_global_regions().done(function(){
						ed._render_global_region_manager($me);
					})
				}
				else {
					ed._render_global_region_manager($me);
				}
			},
			{
				width: 600
			},
			'global-region-manager'
		);
	},
	
	_refresh_global_regions: function () {
		return Upfront.Util.post({
			action: 'upfront_list_scoped_regions',
			scope: 'global',
			storage_key: _upfront_save_storage_key
		}).done(function(data) {
			Upfront.data.global_regions = data.data;
		});
	},
	
	_render_global_region_manager: function ($el) {
		var ed = Upfront.Behaviors.LayoutEditor,
			collection = Upfront.Application.layout.get("regions"),
			region_managers = [
				{
					title: Upfront.Settings.l10n.global.behaviors.global_regions,
					classname: 'global',
					data: _.sortBy(Upfront.data.global_regions, function(region, i, regions){
						if ( !region.container || region.name == region.container )
							return i * 3;
						else
							return _.indexOf(regions, _.findWhere(regions, {name: region.container})) * 3 + 1;
					})
				},
				{
					title: Upfront.Settings.l10n.global.behaviors.lightboxes,
					classname: 'lightbox',
					data: Upfront.Util.model_to_json( collection.filter(function(model){
						return model.get('sub') == 'lightbox';
					}) )
				}
			];
		$el.html('');
		_.each(region_managers, function(manager){
			var $wrap = $('<div class="global-region-manager-wrap global-region-manager-' + manager.classname + '"></div>'),
				$title = $('<h3 class="global-region-manager-title">'+ manager.title +'</h3>'),
				$content = $('<div class="global-region-manager-content upfront-scroll-panel"></div>');
			$wrap.append([$title, $content]);
			ed._render_regions(manager.data, $content);
			$el.append($wrap);
			// don't propagate scroll
			Upfront.Views.Mixins.Upfront_Scroll_Mixin.stop_scroll_propagation($content);
		});
		$el.on('click', '.region-list-edit', function(e){
			e.preventDefault();
		});
		$el.on('click', '.region-list-trash', function(e){
			e.preventDefault();
			var name = $(this).attr('data-name');
			if ( $(this).closest('.global-region-manager-wrap').hasClass('global-region-manager-global') ){
				if ( confirm('Deleting the global regions will remove it from all layouts. Continue?') ) {
					Upfront.Util.post({
						action: 'upfront_delete_scoped_regions',
						scope: 'global',
						name: name,
						storage_key: _upfront_save_storage_key
					}).done(function(data) {
						// Also remove from current layout
						if ( data.data ) {
							_.each(data.data, function(region_name){
								var model = collection.get_by_name(region_name);
								collection.remove(model);
							})
							ed._refresh_global_regions().done(function(){
								ed._render_global_region_manager($el);
							})
						}
					});
				}
			}
			else {
				// lightbox
			}
		})
	},
	
	_render_regions: function (regions, $el) {
		var $lists = $('<ul class="global-region-manager-lists"></ul>');
		_.each(regions, function(region){
			var classes = ['global-region-manager-list'],
				has_main = false;
			if ( !region.container || region.name == region.container ){
				classes.push('region-list-main');
			}
			else {
				has_main = _.find(regions, function(reg){ return reg.name == region.container; });
				classes.push('region-list-sub');
				classes.push('region-list-sub-' + region.sub);
				if ( has_main )
					classes.push('region-list-sub-has-main');
			}
			$lists.append(
				'<li class="' + classes.join(' ') + '">' +
					'<span class="region-list-name">' + region.title + '</span>' +
					'<span class="region-list-control">' +
						//'<a href="#" class="region-list-edit" data-name="' + region.name + '">' + Upfront.Settings.l10n.global.behaviors.edit + '</a>' + 
						( Upfront.Application.get_current() != Upfront.Settings.Application.MODE.THEME ? '<a href="#" class="region-list-trash" data-name="' + region.name + '">' + Upfront.Settings.l10n.global.behaviors.trash + '</a>' : '' ) + 
					'</span>' +
				'</li>'
			);
		});
		$el.append($lists);
	}
};

define('scripts/upfront/behaviors/layout-editor',LayoutEditor);
	
})(jQuery);
//@ sourceURL=layout-editor.js
;
(function ($) {

define('scripts/upfront/behaviors/dragdrop',[],function(){
	
var DragDrop = function (view, model) {
	this.initialize(view, model);
}

DragDrop.prototype = {
	module_selector: '> .upfront-module-view > .upfront-module, > .upfront-module-group',
	
	view: false,
	model: false,
	$me: false,
	$wrap: false,
	$region: false,
	$main: false,
	$layout: false,
	me: false,
	wrap: false,
	region: false,
	current_region: false,
	$container: false,
	$current_container: false,
	
	region_model: false,
	current_region_model: false,
	current_wrappers: false,
	
	is_group: false,
	is_parent_group: false,
	is_disabled: false,
	
	$helper: false,
	event: false,
	ui: false,
	breakpoint: false,
	app: false,
	ed: false,

	drop_areas: false,
	drop_areas_created: false,
	drops: false,
	drop: false,
	drop_col: 0,
	drop_left: 0,
	drop_top: 0,
	area_col: 0,
	current_area_col: 0,
	current_row_wraps: false,
	wrapper_id: false,
	wrap_only: false,
	new_wrap_view: false,
	move_region: false,

	current_grid: false,
	current_grid_pos: false,
	compare_area: false,
	compare_area_position: false,
	compare_col: 0,
	compare_row: 0,
	_last_drag_position: false,
	_last_drag_time: 0,
	_last_coord: false,
	_t: false,
	_focus_t: false,
	
	focus: false,
	focus_coord: false,
	
	initialize: function (view, model) {
		this.view = view;
		this.model = model;
		this.app = Upfront.Application;
		this.ed = Upfront.Behaviors.GridEditor;

		// Default property setup
		this.drop_areas = [];
		this.drop_areas_created = [];
		this.drops = [];
		this.current_row_wraps = [];
		this.current_grid = {};
		this.current_grid_pos = {};
		this.compare_area = {};
		this.compare_area_position =  {};
		this._last_coord = {x: 0, y: 0};
		this.focus_coord = {x: 0, y: 0};

		this.setup();
	},
	
	setup: function () {
		this.is_group = this.view.$el.hasClass('upfront-module-group');
		this.is_parent_group = ( typeof this.view.group_view != 'undefined' );
		this.is_disabled = ( this.is_parent_group && !this.view.group_view.$el.hasClass('upfront-module-group-on-edit') );
		this.$me = this.is_group ? this.view.$el : this.view.$el.find('.upfront-editable_entity:first');
		this.$main = $(Upfront.Settings.LayoutEditor.Selectors.main);
		this.$layout = this.$main.find('.upfront-layout');

		if ( this.app.mode.current !== this.app.MODE.THEME && this.model.get_property_value_by_name('disable_drag') ) {
			return false;
		}
		if ( this.$me.data('ui-draggable') ){
			if ( this.is_group || !this.is_disabled ) {
				this.$me.draggable('option', 'disabled', false);
			}
			return false;
		}
		
		this.$me.draggable({
			revert: true,
			revertDuration: 0,
			zIndex: 100,
			helper: 'clone',
			disabled: this.is_disabled,
			cancel: '.upfront-entity_meta, .upfront-element-controls',
			distance: 10,
			appendTo: this.$main,
			iframeFix: true,
			start: $.proxy(this.on_start, this),
			drag: $.proxy(this.on_drag, this),
			stop: $.proxy(this.on_stop, this)
		});
	},
	
	on_start: function (e, ui) {
		this.ed.time_start('drag start');
		this.event = e;
		this.ui = ui;
		this.breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint;
		this.is_parent_group = ( typeof this.view.group_view != 'undefined' );
		
		this.prepare_drag();

		this.ed.time_end('drag start');
		this.ed.time_start('drag start - trigger');
		Upfront.Events.trigger("entity:drag_start", this.view, this.model);
		this.ed.time_end('drag start');
	},
	
	on_drag: function (e, ui) {
		var that = this;
		this.event = e;
		this.ui = ui;
		
		//this.ed.time_start('dragging');

		// change drop point on timeout
		clearTimeout(this._t);
		this._t = setTimeout(function(){ that.update_drop_timeout(); }, this.ed.timeout);

		this.update_drop_position();

		if ( this.ed.show_debug_element ){
			this.$helper.find(".upfront-debug-info").text(
				'grid: '+this.current_grid.x+','+this.current_grid.y+' | ' +
				'current: ('+this.current_grid_pos.left+','+this.current_grid_pos.top+'),('+this.current_grid_pos.right+','+this.current_grid_pos.bottom+') | ' + 
				'margin size: '+this.drop_top+'/'+this.drop_left
			);
		}
		//this.ed.time_end('dragging');
	},
	
	on_stop: function (e, ui) {
		var that = this;
		this.ed.time_start('drag stop');
		this.event = e;
		this.ui = ui;
		
		clearTimeout(this._t);
		clearTimeout(this._focus_t);
		
		if ( !this.drop.is_me ) {
			this.render_drop();
		}
		this.clean_elements();
		this.update_models();
		this.update_views();
		this.reset();
		
		// Add drop animation
		var $me = this.is_group ? this.view.$el : this.view.$el.find('.upfront-editable_entity:first');
		var ani_event_end = 'animationend.drop_ani webkitAnimationEnd.drop_ani MSAnimationEnd.drop_ani oAnimationEnd.drop_ani';
		$me.one(ani_event_end, function(){
			$(this).removeClass('upfront-dropped');
			Upfront.Events.trigger("entity:drag_animate_stop", that.view, that.model);
			$me.off(ani_event_end); // Make sure to remove any remaining unfired event
		}).addClass('upfront-dropped');
		
		
		Upfront.Events.trigger("entity:drag_stop", this.view, this.model);
		this.view.trigger("entity:drop", {
			col: this.drop_col, 
			left: this.drop_left, 
			top: this.drop_top
		}, this.view, this.model);
		this.view.trigger("entity:self:drag_stop");
		
		this.ed.time_end('drag stop');
	},
	
	update_vars: function () {
		var regions = this.app.layout.get("regions");
		this.$helper = $('.ui-draggable-dragging');
		this.$wrap = this.$me.closest('.upfront-wrapper');
		this.$region = this.$me.closest('.upfront-region');
		this.me = this.ed.get_el(this.$me);
		this.wrap = this.ed.get_wrap(this.$wrap);
		this.region = this.ed.get_region(this.$region);
		this.region_model = regions.get_by_name(this.region.region);
		this.$container = this.$region.find('.upfront-modules_container > .upfront-editable_entities_container:first');
	},
	
	/**
	 * Create droppable points
	 */
	create_drop_point: function () {
		var ed = this.ed;
		ed.time_start('fn create_drop_point');
		
		var breakpoint = this.breakpoint,
			that = this,
			me = this.me,
			me_wrap = this.wrap,
			margin = me.$el.data('margin'),
			col = me.col,
			min_col = me.$el.hasClass('upfront-image_module') ? 1 : (col > ed.min_col ? ed.min_col : col),
			row = me.row > ed.max_row ? ed.max_row : me.row,
			is_spacer = me.$el.hasClass('upfront-module-spacer')
		;

		var $sibling_els = Upfront.Util.find_sorted(me.$el.closest('.upfront-wrapper')),
			has_siblings = $sibling_els.length > 1,
			sibling_index = $sibling_els.index(me.$el);

		_.each(this.drop_areas, function(area, area_index){
			if ( _.contains(me.drop_areas_created, area) ) return; // Don't run this over created area
			var is_region = area.$el.hasClass('upfront-region'),
				is_in_region = is_region ? ( area.$el.get(0) == that.current_region.$el.get(0) ) : false
			;
			if ( is_region && !is_in_region ) return; // Just create drop point for current region
			var $area = area.$el.find(".upfront-editable_entities_container:first"),
				$region = is_region ? area.$el : area.$el.closest('.upfront-region'),
				region_name = $region.data('name'),
				region = is_region ? area : ed.get_region($region);
				$wraps = Upfront.Util.find_sorted($area, '> .upfront-wrapper:visible').filter(function(){
					return ( $(this).height() > 0 )
				}),
				expand_lock = $region.hasClass('upfront-region-expand-lock'),
				current_full_top = area.grid.top,
				can_drop = function (top, bottom) {
					return ( !expand_lock || ( expand_lock && bottom-top+1 >= me.row ) );
				},
				first_cb = function ($w, $ws) {
					var w = ed.get_wrap($w);
					return ( w.outer_grid.left == area.grid.left );
				}
			;

			$wraps.each(function(index){
				var $wrap = $(this),
					wrap = ed.get_wrap($wrap),
					is_wrap_spacer = ( $wrap.find('> .upfront-module-view > .upfront-module-spacer').length > 0 ),
					wrap_clr = ( wrap.grid.left == area.grid.left ),
					is_wrap_me = ( me_wrap && wrap._id == me_wrap._id ),
					wrap_only = ( $wrap.find(that.module_selector).size() == 1 ),
					wrap_me_only = ( is_wrap_me && wrap_only ),
					$prev_wrap = $wraps[index-1] ? $wraps.eq(index-1) : false,
					prev_wrap = $prev_wrap ? ed.get_wrap($prev_wrap) : false,
					prev_wrap_clr = ( prev_wrap && prev_wrap.grid.left == area.grid.left ),
					is_prev_me = ( prev_wrap && me_wrap && prev_wrap._id == me_wrap._id ),
					is_prev_wrap_spacer = $prev_wrap ? ( $prev_wrap.find('> .upfront-module-view > .upfront-module-spacer').length > 0 ) : false,
					prev_me_only = ( is_prev_me && $prev_wrap.find(that.module_selector).size() == 1 ),
					$next_wrap = $wraps[index+1] ? $wraps.eq(index+1) : false,
					next_wrap = $next_wrap ? ed.get_wrap($next_wrap) : false,
					next_wrap_clr = ( next_wrap && next_wrap.grid.left == area.grid.left ),
					is_next_me = ( next_wrap && me_wrap && next_wrap._id == me_wrap._id ),
					is_next_wrap_spacer = $next_wrap ? ( $next_wrap.find('> .upfront-module-view > .upfront-module-spacer').length > 0 ) : false,
					next_me_only = ( is_next_me && $next_wrap.find(that.module_selector).size() == 1 ),
					$next_clr = Upfront.Util.find_from_elements($wraps, $wrap, first_cb, false),
					next_clr = $next_clr.size() > 0 ? ed.get_wrap($next_clr) : false,
					wrap_el_left = ed.get_wrap_el_min(wrap),
					wrap_el_top = ed.get_wrap_el_min(wrap, false, true),
					prev_wrap_el_left = prev_wrap ? ed.get_wrap_el_min(prev_wrap) : false,
					next_wrap_el_top = next_wrap ? ed.get_wrap_el_min(next_wrap, false, true) : false,
					next_wrap_el_left = next_wrap ? ed.get_wrap_el_min(next_wrap) : false,
					next_clr_el_top = next_clr ? ed.get_wrap_el_min(next_clr, false, true) : false,
					$row_wrap_first = !wrap_clr ? Upfront.Util.find_from_elements($wraps, $wrap, first_cb, true) : $wrap,
					$row_wraps_next = Upfront.Util.find_from_elements($wraps, $row_wrap_first, '.upfront-wrapper', false, first_cb),
					row_wraps = _.union( [ ed.get_wrap($row_wrap_first) ], $row_wraps_next.map(function(){ return ed.get_wrap($(this)); }).get() ),
					max_row_wrap = _.max(row_wraps, function(row_wrap){ return ( me_wrap && me_wrap._id == row_wrap._id ) ? -1 : row_wrap.grid.bottom; }),
					min_row_wrap = _.min(row_wraps, function(row_wrap){ return ed.get_wrap_el_min(row_wrap, false, true).grid.top; }),
					min_row_el = ed.get_wrap_el_min(min_row_wrap, false, true),
					wrap_me_in_row = _.find(row_wraps, function(row_wrap){ return me_wrap && me_wrap._id == row_wrap._id })
				;
				if ( wrap_me_in_row && that.current_row_wraps === false ) {
					that.current_row_wraps = row_wraps;
				}
				
				if (
					!is_spacer
					&&
					!is_wrap_spacer
					&&
					(
						( 
							( !breakpoint || breakpoint.default ) && wrap.col >= min_col && 
							(
								( next_wrap && !next_wrap_clr && !wrap_me_only && ( $next_wrap.find(that.module_selector).size() > 1 || !is_next_me ) ) ||
								( prev_wrap && !wrap_clr && !wrap_me_only && ( $prev_wrap.find(that.module_selector).size() > 1 || !is_prev_me ) ) ||
								( next_wrap && prev_wrap && !next_wrap_clr && !wrap_clr ) ||
								( !prev_wrap && !next_wrap && is_wrap_me && $wrap.find(that.module_selector).size() > 1 )
							)
						)
						||
						( breakpoint && !breakpoint.default && is_wrap_me && $wrap.find(that.module_selector).size() > 1 )
					)
				){
					var current_el_top = wrap.grid.top,
						wrap_right = ( next_wrap && !next_wrap_clr && next_wrap_el_left ) ? next_wrap_el_left.grid.left-1 : area.grid.right;
					$els = Upfront.Util.find_sorted($wrap, that.module_selector);
					$els.each(function(i){
						if ( $(this).get(0) == me.$el.get(0) ) return;
						var $el = $(this),
							el = ed.get_el($el),
							top = ( el.outer_grid.top == wrap.grid.top ) ? wrap.grid.top : current_el_top,
							bottom = Math.ceil(el.grid_center.y),
							$prev = $els[i-1] ? $els.eq(i-1) : false,
							prev = $prev ? ed.get_el($prev) : false,
							prev_me = ( prev && prev._id == me._id );
						that.drops.push({
							_id: ed._new_id(),
							top: top,
							bottom: bottom,
							left: wrap.grid.left,
							right: wrap_right,
							priority: {
								top: ( prev_me ? prev.outer_grid.top : el.outer_grid.top-1 ),
								bottom: el.grid.top-1,
								left: wrap.grid.left,
								right: wrap_right,
								index: ( prev_me ? 3 : 5 )
							},
							priority_index: 5,
							type: 'inside',
							insert: ['before', $el],
							region: region,
							is_me: prev_me,
							is_clear: false,
							is_use: false,
							is_switch: false,
							switch_dir: false,
							row_wraps: false,
							me_in_row: false
						});
						current_el_top = bottom+1;
					});
					var $last = $els.last(),
						last = $last.size() > 0 ? ed.get_el($last) : false,
						last_me = ( last && last._id == me._id ),
						wrap_bottom = ( breakpoint && !breakpoint.default && next_clr_el_top ) ? Math.ceil(next_clr_el_top.grid_center.y) : max_row_wrap.grid.bottom;
					// Don't add dropping below the most bottom wrap in a row
					//if ( last_me || !max_row_wrap || max_row_wrap != wrap || ( breakpoint && !breakpoint.default ) ){
						that.drops.push({
							_id: ed._new_id(),
							top: current_el_top,
							bottom: wrap_bottom,
							left: wrap.grid.left,
							right: wrap_right,
							priority: {
								top: ( last_me ? last.outer_grid.top : wrap.grid.bottom ),
								bottom: ( breakpoint && !breakpoint.default && next_clr_el_top ) ? next_clr_el_top.grid.top : wrap_bottom,
								left: wrap.grid.left,
								right: wrap_right,
								index: ( last_me ? 3 : 5 )
							},
							priority_index: 5,
							type: 'inside',
							insert: ['append', wrap.$el],
							region: region,
							is_me: last_me,
							is_clear: false,
							is_use: false,
							is_switch: false,
							switch_dir: false,
							row_wraps: false,
							me_in_row: false
						});
					//}
				}
				// Don't add another droppable if this is not the first el from wrapper, only on responsive
				if ( breakpoint && !breakpoint.default && has_siblings && sibling_index > 0 )
					return;
				// Add droppable before each wrapper that start in new line
				if ( !is_spacer && wrap_clr && !( is_wrap_me && ( !next_wrap || next_wrap_clr ) ) ){
					var top = ( wrap.grid.top == area.grid.top ) ? area.grid.top - 5 : current_full_top,
						el_top = ed.get_wrap_el_min(wrap, false, true),
						bottom = Math.ceil(el_top.grid_center.y),
						is_drop_me = ( prev_wrap_clr && is_prev_me && !has_siblings ),
						me_top = ( is_drop_me ? prev_wrap.grid.top : wrap.grid.top );
					if ( can_drop(me_top, el_top.grid.top-1) ){
						that.drops.push({
							_id: ed._new_id(),
							top: top,
							bottom: bottom,
							left: area.grid.left,
							right: area.grid.right,
							priority: {
								top: me_top,
								bottom: min_row_el.grid.top-1,
								left: area.grid.left,
								right: area.grid.right,
								index: ( is_drop_me ? 2 : 3 )
							},
							priority_index: 8,
							type: 'full',
							insert: ['before', wrap.$el],
							region: region,
							is_me: is_drop_me,
							is_clear: true,
							is_use: false,
							is_switch: false,
							switch_dir: false,
							row_wraps: false,
							me_in_row: false
						});
						current_full_top = bottom+1;
					}
				}
				// Check to see if the right side on wrapper has enough column to add droppable
				if ( 
					( // Check if it's spacer, if it is, only allow drop if between 2 non-spacer elements
						!is_spacer
						||
						(
							( is_spacer && wrap_me_in_row )
							&&
							(
								wrap_me_only
								||
								( !is_wrap_spacer && ( !next_wrap || next_wrap_clr || !is_next_wrap_spacer ) )
							)
						)
					)
					&&
					( !next_wrap || next_wrap_clr )
					&&
					( !wrap_me_only || !wrap_clr )
					/*&&
					( 
						( !is_wrap_me && area.grid.right-wrap.grid.right >= min_col ) 
						|| 
						( wrap_me_only && !wrap_clr ) 
						|| 
						( prev_me_only && !wrap_clr && wrap_only ) 
					)*/
				){ // @TODO Experiment: always allow right side drop
					var is_switch = false,
						left = Math.ceil(wrap.grid_center.x)+1,
						right = ( !next_wrap || next_wrap_clr ) ? area.grid.right : wrap.grid.right,
						bottom = ( is_wrap_me && wrap.grid.bottom > max_row_wrap.grid.bottom ? wrap.grid.bottom : max_row_wrap.grid.bottom );
					if ( can_drop(wrap.grid.top, bottom) ){
						that.drops.push({
							_id: ed._new_id(),
							top:  wrap.grid.top,
							bottom: bottom,
							left: ( wrap_me_only ? wrap.grid.left : left ),
							right: right,
							priority: {
								top: wrap.grid.top,
								bottom: bottom,
								left: ( wrap_me_only ? wrap.grid.left : left+Math.ceil((right-left)/2) ),
								right: right,
								index: ( wrap_me_only ? 1 : 4 )
							},
							priority_index: 10,
							type: 'side-after',
							insert: ['after', wrap.$el],
							region: region,
							is_me: wrap_me_only,
							is_clear: false,
							is_use: false,
							is_switch: is_switch,
							switch_dir: is_switch ? 'left' : false,
							row_wraps: row_wraps,
							me_in_row: ( wrap_me_in_row ? true : false )
						});
					}
				}
				// Now check the left side, finding spaces between wrapper and inner modules
				if ( 
					( // Check if it's spacer, if it is, only allow drop if between 2 non-spacer elements
						!is_spacer
						||
						(
							( is_spacer && wrap_me_in_row )
							&&
							(
								wrap_me_only
								||
								( !is_wrap_spacer && ( wrap_clr || !is_prev_wrap_spacer ) )
							)
						)
					)
					&&
					( !wrap_me_only || ( next_wrap && !next_wrap_clr ) )
					&&
					( wrap_clr || !prev_me_only )
					/*&&
					(
						( 
							//wrap_el_left.grid.left-wrap.grid.left >= min_col 
							//&&
							(!is_prev_me || wrap_clr) 
							&& 
							!is_wrap_me 
						) 
						|| 
						( is_wrap_me && next_wrap && !next_wrap_clr ) 
						|| 
						( is_prev_me && !wrap_clr && next_wrap && !next_wrap_clr ) 
						|| 
						( is_next_me && !next_wrap_clr ) 
					)*/
				){ // @TODO Experiment: always allow left side drop
					var is_switch_left = false,
						is_switch_right = false,
						left = ( prev_wrap && !wrap_clr ? Math.ceil(prev_wrap.grid_center.x)+1 : wrap.grid.left ),
						right = Math.ceil(wrap.grid_center.x),
						bottom = ( is_wrap_me && wrap.grid.bottom > max_row_wrap.grid.bottom ? wrap.grid.bottom : max_row_wrap.grid.bottom );
					if ( can_drop(wrap.grid.top, bottom) ){
						that.drops.push({
							_id: ed._new_id(),
							top: wrap.grid.top,
							bottom: bottom,
							left: left,
							right: ( wrap_me_only && next_wrap_el_left ? next_wrap_el_left.grid.left-1 : right ), 
							priority: {
								top: wrap.grid.top,
								bottom: bottom,
								left: ( prev_wrap && !wrap_clr ? left+Math.ceil((prev_wrap.grid.right-left)/2) : left ),
								right: ( wrap_me_only && next_wrap_el_left ? next_wrap_el_left.grid.left-1 : wrap.grid.left+Math.ceil((right-wrap.grid.left)/2)-1 ),
								index: ( wrap_me_only ? 1 : 4 )
							},
							priority_index: 10,
							type: 'side-before',
							insert: [( is_switch_left ? 'after' : 'before' ), wrap.$el],
							region: region,
							is_me: wrap_me_only,
							is_clear: wrap_clr,
							is_use: false,
							is_switch: ( is_switch_left || is_switch_right ),
							switch_dir: ( is_switch_left ? 'left' : ( is_switch_right ? 'right' : false ) ),
							row_wraps: row_wraps,
							me_in_row: ( wrap_me_in_row ? true : false )
						});
					}
				}
			});

			// Don't add another droppable if this is not the first el from wrapper, only on responsive
			if ( breakpoint && !breakpoint.default && has_siblings && sibling_index > 0 ){
				return;
			}
			
			// If spacer, don't add further
			if ( is_spacer ) {
				return;
			}

			if ( $wraps.size() > 0 ) {
				var last_wrap = ed.get_wrap($wraps.last()),
					last_wrap_clr = ( last_wrap && last_wrap.grid.left == area.grid.left ),
					is_drop_me = ( me_wrap && last_wrap_clr && last_wrap._id == me_wrap._id && !has_siblings ),
					bottom = ( expand_lock ? area.grid.bottom : ( area.grid.bottom-current_full_top > row ? area.grid.bottom + 5 : current_full_top + row ) ),
					bottom_wrap = _.max(ed.wraps, function(each){
						if ( each.region != region_name )
							return 0;
						if ( me_wrap && me_wrap._id == each._id )
							return 0;
						if ( !_.contains($wraps.get(), each.$el.get(0)) )
							return 0;
						return each.grid.bottom;
					}),
					top = bottom_wrap.grid.bottom+1,
					bottom_not_me = ( !me_wrap || ( bottom_wrap && me_wrap && bottom_wrap._id != me_wrap._id ) ),
					priority_top = ( bottom_not_me && top > current_full_top ? top : current_full_top );
				if ( can_drop(priority_top, bottom) || is_drop_me ){
					that.drops.push({
						_id: ed._new_id(),
						top: current_full_top,
						bottom: bottom,
						left: area.grid.left,
						right: area.grid.right,
						priority: {
							top: priority_top,
							bottom: bottom,
							left: area.grid.left,
							right: area.grid.right,
							index: ( is_drop_me ? 2 : 3 )
						},
						priority_index: 8,
						type: 'full',
						insert: ['append', $area],
						region: region,
						is_me: is_drop_me,
						is_clear: true,
						is_use: false,
						is_switch: false,
						switch_dir: false,
						row_wraps: false,
						me_in_row: false
					});
				}
			}
			else {
				var bottom = ( expand_lock ? area.grid.bottom : ( area.grid.bottom-area.grid.top > row ? area.grid.bottom : area.grid.top + row ) );
				if ( can_drop(area.grid.top, bottom) ){
					that.drops.push({
						_id: ed._new_id(),
						top: area.grid.top,
						bottom: bottom,
						left: area.grid.left,
						right: area.grid.right,
						priority: null,
						priority_index: 8,
						type: 'full',
						insert: ['append', $area],
						region: region,
						is_me: ( region_name == 'shadow' && me.region == region_name ),
						is_clear: true,
						is_use: false,
						is_switch: false,
						switch_dir: false,
						row_wraps: false,
						me_in_row: false
					});
				}
			}
		});
		ed.time_end('fn create_drop_point');
	},
	
	select_drop_point: function (drop) {
		var ed = this.ed;
		if ( !drop || drop.is_use ){
			return;
		}
		ed.time_start('fn select_drop');
		var drop_move = typeof this.drop == 'object' && !drop.is_me ? true : false;
		_.each(this.drops, function(each){
			each.is_use = ( each._id == drop._id );
		});
		this.drop = drop;

		if ( ed.show_debug_element ){
			$('.upfront-drop-view-current').removeClass('upfront-drop-view-current');
			$('#drop-view-'+drop._id).addClass('upfront-drop-view-current');
		}
		$('.upfront-drop').remove();
		
		var that = this,
			me = this.me,
			$drop = $('<div class="upfront-drop upfront-drop-use"></div>'),
			drop_change = function () {
				Upfront.Events.trigger("entity:drag:drop_change", that.view, that.model);
			},
			$insert_rel = ( drop.type == 'inside' && !drop.insert[1].hasClass('upfront-module-group') ) ?  drop.insert[1].parent() : drop.insert[1],
			insert_order = drop.insert[1].data('breakpoint_order') || 0,
			ani_width = me.width,
			ani_height = me.height
		;
		switch ( drop.insert[0] ){
			case 'before':
				$drop.insertBefore($insert_rel);
				break;
			case 'after':
				$drop.insertAfter($insert_rel);
				break;
			case 'append':
				drop.insert[1].append($drop);
				insert_order = drop.insert[1].children().length;
				break;
		}
		$drop.css('order', insert_order);
		
		if ( drop.type == 'full' || drop.type == 'inside' ) {
			$drop.css('width', (drop.right-drop.left+1)*ed.col_size);
			// Add height too in case of full region drop
			if ( !drop.priority || drop.is_me ) {
				if ( drop.is_me ) {
					$drop.css('margin-top', me.height*-1);
					$drop.css('height', me.height);
				}
				else {
					$drop.css('height', (drop.bottom-drop.top+1)*ed.baseline);
				}
			}
		}
		else if ( drop.type == 'side-before' || drop.type == 'side-after' ) {
			var pos = $insert_rel.position();
			$drop.css('height', (drop.bottom-drop.top+1)*ed.baseline);
			// If drop is current element, add width too
			if ( drop.is_me ){
				$drop.css('width', me.width);
				if ( drop.type == 'side-before' ) $drop.css('margin-right', me.width*-1);
				else $drop.css('margin-left', me.width*-1);
			}
			$drop.css({
				position: 'absolute',
				top: pos.top,
				left: pos.left + ( drop.type == 'side-after' ? $insert_rel.width() : 0 )
			});
		}
		else if ( drop_move ) {
			drop_change();
		}
		ed.time_end('fn select_drop');
	},
	
	prepare_drag: function () {
		var ed = this.ed,
			breakpoint = this.breakpoint
		;
		this.$main.addClass('upfront-dragging');
		// remove position which might be set to the module view
		this.view.$el.css("position", "");
		
		ed.start(this.view, this.model);
		ed.normalize(ed.els, ed.wraps);
		ed.update_position_data(ed.containment.$el);
		this.update_vars();
		this.set_current_region(this.region);
		
		var $me = this.$me,
			me = this.me,
			$helper = this.$helper,
			me_offset = $me.offset(),
			max_height = ed.max_row*ed.baseline,
			draggable = $me.data('ui-draggable'),
			cursor_top = this.event.pageY - me_offset.top,
			area = ( this.is_parent_group ? ed.get_position(this.view.group_view.$el) : ed.get_region(this.$region) ),
			drop_areas = false
		;

		// hack the cursor position
		if ( cursor_top > max_height/2 ) {
			draggable._adjustOffsetFromHelper({
				top: Math.round(( me.height > max_height ? max_height : me.height )/2)
			});
		}

		//this.$region.css('min-height', $region.css('height'));
		//$me.hide();
		$me.css('visibility', 'hidden');
		$helper.css('max-width', me.width);
		$helper.css('height', me.height);
		$helper.css('max-height', max_height);
		$helper.css('margin-left', $me.css('margin-left')); // fix error with the percentage margin applied

		this.area_col = area.col;
		if ( this.is_parent_group ) {
			area.region = this.$region.data('name');
			area.group = this.view.group_view.$el.attr('id');
			this.drop_areas = [ area ];
			this.current_area_col = area.col;
		}
		else if ( breakpoint && !breakpoint.default ) {
			this.drop_areas = [ area ];
		}
		else {
			//check if there is a light box in active state
			var lightbox = false;
			var shadowregion;
			ed.lightbox_cols = false;
			_.each(ed.regions, function(region) {
				if(region.$el.hasClass('upfront-region-side-lightbox') && region.$el.css('display') == 'block') {
//				console.log('found active lightbox');
					lightbox = region;
					ed.lightbox_cols = region.col;
				}
				if(region.$el.hasClass('upfront-region-shadow')){
					shadowregion = region;
				}

			});
			if ( lightbox ) {
				this.drop_areas = [ lightbox, shadowregion ];
			}
			else {
				this.drop_areas = ed.regions;
			}
		}


		this.current_row_wraps = false;

		this.create_drop_point();

		this.$wrap.css('min-height', '1px');

		$('.upfront-drop-me').css('height', (me.outer_grid.bottom-me.outer_grid.top)*ed.baseline);

		this.show_debug_data();

		// Default drop to me
		this.select_drop_point( _.find(this.drops, function(each){ return each.is_me; }) );
		this.$region.addClass('upfront-region-drag-active');
	},
	
	update_drop_timeout: function () {
		var breakpoint = this.breakpoint;
		this.update_compare_area();
		this.update_focus_state();
		
		if ( !breakpoint || breakpoint.default ) {
			this.update_current_region();
		}
		else {
			this.set_current_region();
		}
		this.update_current_drop_point();
	},
	
	update_compare_area: function () {
		var ed = this.ed,
			$helper = this.$helper,
			
			height = Math.ceil($helper.outerHeight()/ed.baseline)*ed.baseline,
			width = $helper.outerWidth(),

			current_offset = $helper.offset(),
			current_left = current_offset.left,
			current_top = current_offset.top,
			current_bottom = current_top+height,
			current_right = current_left+width,
			current_x = current_left+(width/2),
			current_y = current_top+(height/2),

			current_grid = ed.get_grid(current_left, current_top),
			current_grid_left = current_grid.x,
			current_grid_top = current_grid.y,
			current_grid2 = ed.get_grid(current_right, current_bottom),
			current_grid_right = current_grid2.x-1,
			current_grid_bottom = current_grid2.y-1,

			grid = ed.get_grid(this.event.pageX, this.event.pageY),
			col = this.me.col,
			
			compare_col = this.focus ? ed.focus_compare_col : ed.compare_col,
			compare_row = this.focus ? ed.focus_compare_row : ed.compare_row,

			compare_area_top = grid.y-(compare_row/2),
			compare_area_top = compare_area_top < current_grid_top ? current_grid_top : compare_area_top,
			compare_area_left = grid.x-(compare_col/2),
			compare_area_left = compare_area_left < current_grid_left ? current_grid_left : compare_area_left,
			compare_area_right = compare_area_left+compare_col-1,
			compare_area_right = compare_area_right > current_grid_right ? current_grid_right : compare_area_right,
			compare_area_bottom = compare_area_top+compare_row-1,
			compare_area_bottom = compare_area_bottom > current_grid_bottom ? current_grid_bottom : compare_area_bottom,
			compare_area_bottom = compare_area_bottom > compare_area_top+ed.max_row ? compare_area_top+ed.max_row : compare_area_bottom,

			compare_area_position = [grid.x, grid.y, compare_area_top, compare_area_right, compare_area_bottom, compare_area_left] // to store as reference
		;
		this.current_grid = grid;
		this.current_grid_pos = {
			top: current_grid_top,
			left: current_grid_left,
			right: current_grid_right,
			bottom: current_grid_bottom
		};
		this.compare_area = {
			top: compare_area_top,
			left: compare_area_left,
			right: compare_area_right,
			bottom: compare_area_bottom
		}
		this.compare_area_position = compare_area_position;
	},
	
	update_focus_state: function () {
		var that = this,
			ed = this.ed,
			moved_distance =  this._last_coord
				? Math.sqrt(Math.pow(this.event.pageX-this._last_coord.x, 2) + Math.pow(this.event.pageY-this._last_coord.y, 2))
				: 0,
			time = Date.now()
			;
		if ( this._last_drag_position && moved_distance <= ed.update_distance ){
			// Not moving much? Let's try to focus
			if ( !this._focus_t ) {
				this._focus_t = setTimeout(function(){
					that.focus = true;
					that.focus_coord.x = that.event.pageX;
					that.focus_coord.y = that.event.pageY;
					that._last_drag_time = Date.now();
					that.update_drop_timeout();
				}, ed.focus_timeout);
			}
			/*if ( time - this._last_drag_time >= ed.focus_timeout ) {
				this.focus = true;
				this.focus_coord.x = this.event.pageX;
				this.focus_coord.y = this.event.pageY;
				this._last_drag_time = time;
			}*/
			return;
		}
		clearTimeout(this._focus_t);
		this._focus_t = false;
		this._last_drag_position = this.compare_area_position;
		this._last_coord.x = this.event.pageX;
		this._last_coord.y = this.event.pageY;
		this._last_drag_time = time;
		
		// If focused, try to see if we need to out focus it
		if ( this.focus ) {
			var focus_distance = Math.sqrt(Math.pow(this.event.pageX-this.focus_coord.x, 2) + Math.pow(this.event.pageY-this.focus_coord.y, 2));
			if ( focus_distance > ed.focus_out_distance ) {
				this.focus = false;
			}
		}
	},
	
	update_current_drop_point: function () {
		var that = this,
			drops_area = _.map(this.drops, function(each){
				if ( each.region._id != that.current_region._id ) return false;
				var area = that.get_area_compared(each);
				return {
					area: area,
					drop: each
				};
			}).filter(function(each){
				if ( each !== false ) return true;
				return false;
			}),
			max_drop = _.max(drops_area, function(each){ return each.area; })
		;

		if ( max_drop.area > 0 ){
			var max_drops = _.filter(drops_area, function(each){ return each.area == max_drop.area; }),
				max_drops_sort = _.sortBy(max_drops, function(each, index, list){
					var priority_area = each.drop.priority ? that.get_area_compared(each.drop.priority) : 0;
					if ( priority_area*1 >= each.area ) return each.drop.priority.index;
					return each.drop.priority_index;
				}),
				drop = _.first(max_drops_sort).drop
			;
		}
		else {
			var drop = _.find(this.drops, function(each){
				return each.is_me;
			});
		}
		this.select_drop_point(drop);
		this.update_drop_position();
	},
	
	update_drop_position: function () {
		if ( !this.drop ) return;
		var ed = this.ed,
			drop = this.drop,
			col = this.current_region ? this.current_region.col : this.me.col,
			is_spacer = this.$me.hasClass('upfront-module-spacer'),
			wrap_only = this.$wrap.find(this.module_selector).length == 1,
			drop_priority_top = drop.priority ? drop.priority.top-drop.top : 0,
			drop_priority_left = drop.priority ? drop.priority.left-drop.left : 0,
			expand_lock = drop.region.$el.hasClass('upfront-region-expand-lock'),
			drop_row = ( drop.priority ? drop.priority.bottom-drop.priority.top+1 : drop.bottom-drop.top+1 );
		this.drop_top = 0;
		this.drop_left = 0;
		// drop_col is calculated based of it's position
		if ( drop.is_me || ( drop.me_in_row && wrap_only ) || is_spacer ){
			this.drop_col = this.me.col;
		}
		else {
			if ( drop.type == 'side-before' || drop.type == 'side-after' ) {
				var distribute = this.find_column_distribution(drop.row_wraps, (drop.me_in_row && wrap_only), true, this.current_area_col, false);
				this.drop_col = distribute.apply_col;
			}
			else {
				this.drop_col = drop.priority ? drop.priority.right-drop.priority.left+1 : drop.right-drop.left+1;
			}
		}

		/*if ( this.is_group ) {
			var original_col = this.model.get_property_value_by_name('original_col');
			if ( _.isNumber(original_col) && original_col > col ) {
				col = original_col;
			}
		}
		this.drop_col = this.drop_col <= col ? this.drop_col : col;*/

		//adjust_bottom = false;
		adjust_bottom = true;

		if ( ed.show_debug_element ){
			$('#upfront-compare-area').css({
				top: (this.compare_area.top-1) * ed.baseline,
				left: (this.compare_area.left-1) * ed.col_size + (ed.grid_layout.left-ed.grid_layout.layout_left),
				width: (this.compare_area.right-this.compare_area.left+1) * ed.col_size,
				height: (this.compare_area.bottom-this.compare_area.top+1) * ed.baseline
			}).text(
				'('+this.compare_area.left+','+this.compare_area.right+') '+
				'('+this.compare_area.top+','+this.compare_area.bottom+')'
			);
		}
	},
	
	/**
	 * Finding the region we currently on
	 */
	update_current_region: function () {
		var that = this,
			ed = this.ed,
			$last_region_container = $('.upfront-region-container-wide, .upfront-region-container-clip').not('.upfront-region-container-shadow').last(),
			regions_area = _.map(ed.regions, function(each){
				var top, bottom, left, right, area,
					is_same_container = ( each.$el.closest('.upfront-region-container').get(0) == $last_region_container.get(0) ),
					region_bottom = ( is_same_container && ( !each.$el.hasClass('upfront-region-side') || each.$el.hasClass('upfront-region-side-left') || each.$el.hasClass('upfront-region-side-right') ) ) ? 999999 : each.grid.bottom, // Make this bottom-less if it's in the last region container
					is_active = each.$el.hasClass('upfront-region-drag-active'),
					is_sub_h = each.$el.hasClass('upfront-region-side-top') || each.$el.hasClass('upfront-region-side-bottom'),
					area = that.get_area_compared({
						top: each.grid.top - 5,
						bottom: region_bottom + 5,
						left: each.grid.left,
						right: each.grid.right
					}),
					type = each.$el.data('type'),
					priority = ed.region_type_priority[type]
				;
				area *= priority;
				if ( is_sub_h ) area *= 2;
				if ( is_active ) area *= 1.5;
				return {
					area: area,
					region: each
				};
			}),
			max_region = _.max(regions_area, function(each){ return each.area; })
		;

		if ( max_region.area > 0 && max_region.region.$el.get(0) != this.current_region.$el.get(0) ) {
			this.set_current_region(max_region.region);

			// Create drop points on the new region
			ed.update_position_data(this.$current_container, false);
			this.create_drop_point();
		}


		if ( ed.show_debug_element ){
			_.each(regions_area, function(r){
				r.region.$el.find('>.upfront-debug-info').text(r.area);
			});
		}
	},
	
	set_current_region: function (region) {
		var regions = this.app.layout.get("regions");
		this.current_region = region && region.$el ? region : this.ed.get_region(this.$region);
		if ( !this.current_region.$el.hasClass('upfront-region-drag-active') ){
			$('.upfront-region-drag-active').removeClass('upfront-region-drag-active');
			this.current_region.$el.addClass('upfront-region-drag-active');
		}
		this.current_region_model = regions.get_by_name(this.current_region.region);
		this.current_wrappers = this.is_parent_group 
			? this.view.group_view.model.get('wrappers') 
			: this.current_region_model.get('wrappers')
		;
		this.$current_container = this.is_parent_group 
			? this.view.group_view.$el.find('.upfront-editable_entities_container:first') 
			: this.current_region.$el.find('.upfront-modules_container > .upfront-editable_entities_container:first')
		;
		this.move_region = ( this.region._id != this.current_region._id );
		if ( !this.is_parent_group ) {
			this.current_area_col = this.current_region.col;
		}
	},
	
	get_area_compared: function (compare) {
		var compare_area = this.compare_area,
			top, bottom, left, right, area;
		if ( compare_area.left >= compare.left && compare_area.left <= compare.right )
			left = compare_area.left;
		else if ( compare_area.left < compare.left )
			left = compare.left;
		if ( compare_area.right >= compare.left && compare_area.right <= compare.right )
			right = compare_area.right;
		else if ( compare_area.right > compare.right )
			right = compare.right;
		if ( compare_area.top >= compare.top && compare_area.top <= compare.bottom )
			top = compare_area.top;
		else if ( compare_area.top < compare.top )
			top = compare.top;
		if ( compare_area.bottom >= compare.top && compare_area.bottom <= compare.bottom )
			bottom = compare_area.bottom;
		else if ( compare_area.bottom > compare.bottom )
			bottom = compare.bottom;
		if ( top && bottom && left && right )
			area = (right-left+1) * (bottom-top+1);
		else
			area = 0;
		return area ? area : 0;
	},
	
	render_drop: function () {
		var ed = this.ed,
			breakpoint = this.breakpoint,
			$drop = $('.upfront-drop-use')
		;
		this.wrap_only = ( breakpoint && !breakpoint.default ? true : false );
		if ( !breakpoint || breakpoint.default ) {
			if ( this.drop.type != 'inside' ){
				var wrapper_id = Upfront.Util.get_unique_id("wrapper");
					wrap_model = new Upfront.Models.Wrapper({
						"name": "",
						"properties": [
							{"name": "wrapper_id", "value": wrapper_id},
							{"name": "class", "value": ed.grid.class+this.drop_col}
						]
					}),
					wrap_view = new Upfront.Views.Wrapper({model: wrap_model})
				;
				if ( this.drop.type == 'full' || this.drop.is_clear ) {
					wrap_model.add_class('clr');
				}
				this.current_wrappers.add(wrap_model);
				wrap_view.parent_view = this.view.parent_view;
				this.view.wrapper_view = wrap_view;
				wrap_view.render();
				wrap_view.$el.append(this.view.$el);
				if ( this.drop.type == 'side-before' && this.drop.is_clear ) {
					$drop.nextAll('.upfront-wrapper').eq(0).removeClass('clr');
				}
				$drop.before(wrap_view.$el);
				this.new_wrap_view = wrap_view;
				Upfront.data.wrapper_views[wrap_model.cid] = wrap_view;
			}
			else {
				var $drop_wrap = $drop.closest('.upfront-wrapper'),
					wrapper_id = $drop_wrap.attr('id');
				$drop.before(this.view.$el);
			}
			this.wrapper_id = wrapper_id;
			this.model.set_property('wrapper_id', this.wrapper_id, true);

			if ( this.$wrap.find(this.module_selector).length == 0 ){
				if ( this.wrap && this.wrap.grid.left == this.current_region.grid.left ) {
					this.$wrap.nextAll('.upfront-wrapper').eq(0).addClass('clr');
				}
				this.$wrap.remove();
				this.wrap_only = true;
			}
		}
	},
	
	update_models: function () {
		var that = this,
			ed = this.ed,
			breakpoint = this.breakpoint,
			wrappers = this.current_wrappers,
			$me = this.$me,
			$wrap = this.$wrap
		;
		// normalize clear
		_.each(ed.wraps, function(each){
			var breakpoint_clear = ( !breakpoint || breakpoint.default ) ? each.$el.hasClass('clr') : each.$el.data('breakpoint_clear');
			each.$el.data('clear', breakpoint_clear ? 'clear' : 'none');
		});
		if ( !this.drop.is_me && this.drop.type == 'side-before' ) {
			var $next_wrap = this.drop.insert[1];
			if ( $next_wrap.size() > 0 ){
				var next_wrap = ed.get_wrap($next_wrap),
					next_wrap_clr = ( !breakpoint || breakpoint.default ) ? $next_wrap.hasClass('clr') : $next_wrap.data('breakpoint_clear');
				if ( ! next_wrap_clr || this.drop.is_clear ){
					$next_wrap.data('clear', 'none');
				}
			}
		}
		
		ed.update_model_margin_classes( $me, [ed.grid.class + this.drop_col] );
		
		// If the drop is to side, also update the elements on the same row
		if ( 
			!this.drop.is_me 
			&& 
			( !this.drop.me_in_row || !this.wrap_only ) 
			&& 
			( this.drop.type == 'side-before' || this.drop.type == 'side-after' ) 
		) {
			var distribute = this.find_column_distribution(this.drop.row_wraps, false, true, this.current_area_col, false),
				remaining_col = distribute.remaining_col - (this.drop_col-distribute.apply_col),
				apply_index = 0,
				first_is_spacer = false,
				me_clear = false
			;
			_.each(this.drop.row_wraps, function (row_wrap) {
				row_wrap.$el.find(that.module_selector).each(function () {
					if ( $(this).hasClass('upfront-module-spacer') ) {
						var wrap_model = wrappers.get_by_wrapper_id(row_wrap.$el.attr('id')),
							this_model = ed.get_el_model($(this));
						wrappers.remove(wrap_model);
						that.model.collection.remove(this_model);
						if ( apply_index == 0 ) {
							first_is_spacer = true;
							if ( ( that.drop.type == 'side-after' || that.drop.type == 'side-before' ) && that.drop.insert[1].get(0) == row_wrap.$el.get(0) ) {
								// First is removed spacer and we drop before/after that spacer, means we now drop to the first
								me_clear = true;
							}
						}
					}
					else {
						var apply_col = distribute.apply_col;
						// Distribute remaining_col
						if ( remaining_col > 0 ) {
							apply_col += 1;
							remaining_col -= 1;
						}
						ed.update_model_margin_classes( $(this), [ed.grid.class + apply_col] );
						if ( apply_index == 1 && first_is_spacer ) {
							if ( that.drop.type == 'side-before' && that.drop.insert[1].get(0) == row_wrap.$el.get(0) ) {
								// First is removed spacer and we drop before the first element, means we now drop to the first
								me_clear = true;
							}
							else if ( !me_clear ) {
								// First is removed spacer and now this wrapper is the first instead, if we don't drop to the first
								row_wrap.$el.data('clear', 'clear');
							}
						}
					}
					apply_index++;
				});
			});
			if ( me_clear ) {
				if ( that.new_wrap_view !== false ) {
					that.new_wrap_view.$el.data('clear', 'clear');
				}
				else {
					that.$wrap.data('clear', 'clear');
				}
			}
		}
		
		// Also try to distribute columns if the element was moved away and leave empty spaces in previous place
		if ( !this.drop.is_me && !this.drop.me_in_row && this.wrap_only ) {
			if ( this.current_row_wraps && !_.isEqual(this.drop.row_wraps, this.current_row_wraps) ) {
				var distribute = this.find_column_distribution(this.current_row_wraps, true, false, this.area_col),
					remaining_col = distribute.remaining_col
				;
				if ( distribute.total > 0 ) {
					_.each(this.current_row_wraps, function (row_wrap) {
						if ( that.wrap.$el.get(0) == row_wrap.$el.get(0) ) return;
						row_wrap.$el.find(that.module_selector).each(function () {
							if ( $(this).hasClass('upfront-module-spacer') ) return;
							var apply_col = distribute.apply_col;
							// Distribute remaining_col
							if ( remaining_col > 0 ) {
								apply_col += 1;
								remaining_col -= 1;
							}
							ed.update_model_margin_classes( $(this), [ed.grid.class + apply_col] );	
						});
					});
				}
				else if ( distribute.spacer_total > 0 ) {
					// Nothing to distribute, means all spacer, so we'll remove them
					_.each(this.current_row_wraps, function (row_wrap) {
						if ( that.wrap.$el.get(0) == row_wrap.$el.get(0) ) return;
						row_wrap.$el.find(that.module_selector).each(function () {
							if ( !$(this).hasClass('upfront-module-spacer') ) return;
							var wrap_model = wrappers.get_by_wrapper_id(row_wrap.$el.attr('id')),
								this_model = ed.get_el_model($(this));
							wrappers.remove(wrap_model);
							that.model.collection.remove(this_model, {update: false});
						});
					});
				}
			}
		}
		
		if ( this.is_parent_group ) {
			ed.update_wrappers(this.view.group_view.model, this.view.group_view.$el);
		}
		else {
			ed.update_wrappers(this.current_region_model, this.current_region.$el);
		}

		if ( this.move_region ) {
			ed.update_model_margin_classes( this.$container.find('.upfront-wrapper').find(this.module_selector) );
			ed.update_wrappers(this.region_model, this.region.$el);
		}

		if ( !breakpoint || breakpoint.default ){
			if ( !this.move_region ){
				this.view.resort_bound_collection();
			}
			else {
				var modules = this.current_region_model.get('modules'),
					models = []
				;
				this.model.collection.remove(this.model, {silent: true});
				if ( this.model.get('shadow') ){
					this.view.trigger('on_layout');
					this.model.unset('shadow', {silent: true});
				}
				$me.removeAttr('data-shadow');
				this.$current_container.find('.upfront-wrapper').find(this.module_selector).each(function(){
					var element_id = $(this).attr('id'),
						each_model = modules.get_by_element_id(element_id);
					if ( !each_model && element_id == $me.attr('id') ) {
						models.push(that.model);
					}
					else if ( each_model ) {
						models.push(each_model);
					}
				});
				modules.reset(models);
			}
		}
		else {
			var orders = [],
				index = 0,
				is_drop_wrapper = ( this.drop.type != 'inside' ),
				$els = is_drop_wrapper
					? Upfront.Util.find_sorted(this.$current_container, '> .upfront-wrapper')
					: Upfront.Util.find_sorted($me.closest('.upfront-wrapper'), this.module_selector)
				,
				inside_length = !is_drop_wrapper ? $me.closest('.upfront-wrapper').find(this.module_selector).length : 0,
				insert_index = false
			;
			if ( !this.drop.is_me && this.drop.insert[0] == 'append' && is_drop_wrapper ) {
				insert_index = $els.length-1;
			}
			$els.each(function(){
				var each_el = is_drop_wrapper ? ed.get_wrap($(this)) : ed.get_el($(this));
				if ( !each_el ) return; // Doesn't exists, means it's not relevant to current breakpoint
				if ( insert_index === index ) index++;
				if ( !that.drop.is_me && that.drop.insert[0] == 'append' ) {
					if ( !is_drop_wrapper && insert_index === false && $(this).closest('.upfront-wrapper').get(0) == that.drop.insert[1].get(0) ){
						insert_index = index + inside_length - 1;
					}
					if ( ( is_drop_wrapper && $wrap.get(0) == this ) || ( !is_drop_wrapper && $me.get(0) == this ) ){
						index--;
					}
				}
				if ( !that.drop.is_me && that.drop.insert[1].get(0) == this ){
					if ( that.drop.insert[0] == 'before' ){
						insert_index = index;
						orders.push({
							$el: $(this),
							order: index+1,
							clear: ( that.drop.type != 'side-before' )
						});
					}
					else if ( that.drop.type == 'side-after' && that.drop.insert[0] == 'after' ){
						insert_index = index+1;
						orders.push({
							$el: $(this),
							order: index,
							clear: ( each_el.outer_grid.left == that.current_region.grid.left ) // @TODO: does it work correctly with group?
						});
					}
					index++;
				}
				else {
					orders.push({
						$el: $(this),
						order: index,
						clear: ( each_el.outer_grid.left == that.current_region.grid.left ) // @TODO: does it work correctly with group?
					});
				}
				index++;
			});
			_.each(orders, function(each_el){
				var id = each_el.$el.attr('id'),
					each_model = is_drop_wrapper ? wrappers.get_by_wrapper_id(id) : ed.get_el_model(each_el.$el),
					model_breakpoint, model_breakpoint_data
				;
				if ( !each_model ) return;
				if ( 
					( is_drop_wrapper && each_el.$el.get(0) == $wrap.get(0) ) 
					|| 
					( !is_drop_wrapper && each_el.$el.get(0) == $me.get(0) ) 
				){
					each_el.order = insert_index !== false ? insert_index : each_el.order;
					each_el.clear = that.drop.is_clear;
				}
				model_breakpoint = Upfront.Util.clone(each_model.get_property_value_by_name('breakpoint') || {});
				if ( !_.isObject(model_breakpoint[breakpoint.id]) ){
					model_breakpoint[breakpoint.id] = {};
				}
				model_breakpoint_data = model_breakpoint[breakpoint.id];
				model_breakpoint_data.order = each_el.order;
				model_breakpoint_data.edited = true;
				if ( is_drop_wrapper ) {
					model_breakpoint_data.clear = each_el.clear;
				}
				each_model.set_property('breakpoint', model_breakpoint);
			});
		}

		// Let's normalize
		ed.update_position_data(this.$current_container);
		ed.normalize(ed.els, ed.wraps);
	},
	
	update_views: function () {
		var view = this.view,
			model = this.model
		;
		if ( this.move_region ){
			view.region = this.current_region_model;
			view.region_view = Upfront.data.region_views[view.region.cid];
			view.parent_view = view.region_view._modules_view;
			if ( !_.isUndefined(view._modules_view) ) { // this is grouped modules, also fix the child views
				view._modules_view.region_view = view.region_view;
				if ( !_.isUndefined(model.get('modules')) ){
					model.get('modules').each(function(child_module){
						var child_view = Upfront.data.module_views[child_module.cid];
						if ( !child_view ) return;
						child_view.region = view.region;
						child_view.region_view = view.region_view;
					});
				}
			}
			view.trigger('region:updated');
		}
	},
	
	clean_elements: function () {
		$('.upfront-drop').remove();
		$('.upfront-drop-view').remove();
		$('#upfront-compare-area').remove();

		this.$me.css({
			'position': '',
			'top': '',
			'left': '',
			'z-index': '',
			'visibility': 'visible'
		});
		
		this.$wrap.css('min-height', '');
		this.$current_container.find('.upfront-wrapper').find(this.module_selector).css('max-height', '');
		$('.upfront-region-drag-active').removeClass('upfront-region-drag-active');
		this.$main.removeClass('upfront-dragging');
	},
	
	reset: function () {
		this.drop_areas_created = [];
		this.drops = [];
		this.drop = false;
	},
	
	find_column_distribution: function (row_wraps, me_in_row, add, area_col, count_spacer) {
		var add = ( add !== false ),
			spacers = _.filter(row_wraps, function (row_wrap) {
				return ( row_wrap.$el.find('> .upfront-module-view > .upfront-module-spacer').length > 0 );
			}),
			spacers_col = _.reduce(spacers, function (sum, spacer) {
				return sum + spacer.col;
			}, 0),
			row_wraps_total = ( me_in_row ? row_wraps.length-1 : row_wraps.length ) - spacers.length,
			count_spacer = ( count_spacer !== false ),
			total_col = ( count_spacer ? area_col-spacers_col : area_col ),
			apply_col = 0,
			remaining_col = 0
		;
		if ( add ) row_wraps_total++;
		// If we have columns to distribute, else just return available col after spacer columns substracted (total_col)
		if ( row_wraps_total > 0 ) {
			apply_col = Math.floor(total_col/row_wraps_total);
			remaining_col = total_col - (apply_col*row_wraps_total);
		}
		else {
			apply_col = total_col;
			remaining_col = 0;
		}
		return {
			apply_col: apply_col,
			remaining_col: remaining_col,
			total_col: total_col,
			spacers_col: spacers_col,
			total: row_wraps_total,
			spacer_total: spacers.length
		}
	},
	
	
	show_debug_data: function () {
		if ( !this.ed.show_debug_element ) return;
		var ed = this.ed,
			$layout = this.$layout,
			$helper = this.$helper
		;
		_.each(ed.els, function(each){
			each.$el.find(".upfront-debug-info").size() || each.$el.find('.upfront-editable_entity:first').append('<div class="upfront-debug-info"></div>');
			each.$el.find(".upfront-debug-info").text(
				'grid: ('+each.grid.left+','+each.grid.right+'),'+'('+each.grid.top+','+each.grid.bottom+') | '+
				'outer: ('+each.outer_grid.left+','+each.outer_grid.right+'),('+each.outer_grid.top+','+each.outer_grid.bottom+') | '+
				'center: '+each.grid_center.x+','+each.grid_center.y
			);
		});
		_.each(this.drops, function(each){
			//each.$el.append('<div class="upfront-drop-debug">('+each.left+','+each.top+'),('+each.right+','+each.bottom+')</div>');
			var $view = $('<div class="upfront-drop-view"><div class="upfront-drop-priority-view"></div><span class="upfront-drop-view-pos"></span></div>');
			$view.addClass('upfront-drop-view-'+each.type);
			if ( each.is_me ) {
				$view.addClass('upfront-drop-view-me');
			}
			$view.attr('id', 'drop-view-'+each._id);
			$view.css({
				top: (each.top-1)*ed.baseline,
				left: (each.left-1)*ed.col_size + (ed.grid_layout.left-ed.grid_layout.layout_left),
				width: (each.right-each.left+1) * ed.col_size,
				height: (each.bottom-each.top+1) * ed.baseline
			});
			if ( each.priority ){
				$view.find('.upfront-drop-priority-view').css({
					top: (each.priority.top-each.top)*ed.baseline,
					left: (each.priority.left-each.left)*ed.col_size,
					width: (each.priority.right-each.priority.left+1) * ed.col_size,
					height: (each.priority.bottom-each.priority.top+1) * ed.baseline
				});
			}
			$view.find('.upfront-drop-view-pos').text(
				'('+each.left+','+each.right+')'+'('+each.top+','+each.bottom+')'+'('+each.type+')' +
				( each.priority ? '('+each.priority.left+','+each.priority.right+')'+'('+each.priority.top+','+each.priority.bottom+')' : '' )
			);
			$layout.append($view);
		});
		$layout.append('<div id="upfront-compare-area"></div>');
		$helper.find(".upfront-debug-info").size() || $helper.append('<div class="upfront-debug-info"></div>');
	}
}


return DragDrop;

});
	
})(jQuery);
//@ sourceURL=dragdrop.js;
(function ($) {

var Resize = function (view, model) {
	
}

Resize.prototype = {
	view: false,
	model: false
}

define('scripts/upfront/behaviors/resize',Resize);
	
})(jQuery);
//@ sourceURL=resize.js;
(function ($) {

define('scripts/upfront/behaviors/grid-editor',[
	'scripts/upfront/behaviors/dragdrop',
	'scripts/upfront/behaviors/resize'
], function (DragDrop, Resize) {
	
var GridEditor = {
	lightbox_cols: false,
	main: {$el: null, top: 0, left: 0, right: 0},
	grid_layout: {top: 0, left: 0, right: 0},
	containment: {$el: null, top: 0, left: 0, right: 0, col: 0, grid: {top: 0, left: 0, right: 0}},
	min_col: 1,
	max_row: 0,
	compare_col: 2,
	compare_row: 10,
	focus_compare_col: 1,
	focus_compare_row: 3,
	update_distance: 10, // distance from last recorded coordinate before issuing update, in px
	timeout: 0, // in ms
	focus_timeout: 500, // in ms
	focus: false,
	focus_out_distance: 50,
	focus_coord: {x: 0, y: 0},
	_t: null, // timeout resource
	_t_focus: null, // timeout resource for focus
	col_size: 0,
	baseline: 0,
	grid: null,

	// some more configurable setting
	region_type_priority: {
		wide: 1,
		clip: 1,
		full: 1,
		fixed: 2,
		lightbox: 2,
	},

	els: [],
	wraps: [],
	regions: [],
	drops: [],

	drop: null,

	el_selector: '.upfront-module, .upfront-module-group',
	_id: 0,
	
	drag_instances: {},
	resize_instances: {},
	wrapper_resize_instances: {},

	show_debug_element: false,

	resizing: false,

	/**
	 * Return a new incremented internal counter
	 */
	_new_id: function(){
		var ed = Upfront.Behaviors.GridEditor;
		ed._id++;
		return ed._id;
	},

	/**
	 * Get grid position of an x,y offset
	 *
	 * @param {Int} x
	 * @param {Int} y
	 */
	get_grid: function(x, y){
		var	ed = Upfront.Behaviors.GridEditor,
			grid_x = Math.round((x-ed.grid_layout.left)/ed.col_size)+1,
			grid_y = Math.ceil((y-ed.grid_layout.top)/ed.baseline)+1;
		return {x: grid_x, y: grid_y};
	},

	/**
	 * Get position of an element
	 *
	 * @param {DOM Object} el
	 */
	get_position: function(el){
		var ed = Upfront.Behaviors.GridEditor,
			$el = $(el),
			width = parseFloat($el.css('width')),
			height = parseFloat($el.css('height')),
			offset = $el.offset(),
			top = offset.top,
			left = offset.left,
			grid = ed.get_grid(left, top),
			col = Math.round(width/ed.col_size),
			row = Math.floor(height/ed.baseline),
			//$region = $el.closest('.upfront-region'),
			//region = $region.data('name'),
			//$group = $el.closest('.upfront-module-group'),
			//group = $group.length > 0 ? $group.attr('id') : false,
			position = {
				top: Math.round(top),
				left: Math.round(left),
				bottom: Math.round(top+height),
				right: Math.round(left+width)
			},
			pos_grid = {
				top: grid.y,
				left: grid.x,
				right: grid.x+col-1,
				bottom: grid.y+row-1
			}
		;
		return {
			$el: $el,
			_id: ed._new_id(),
			position: position,
			outer_position: position, // Backward compatibility, to be deprecated
			width: width,
			height: height,
			center: {
				y: Math.round(top+(height/2)),
				x: Math.round(left+(width/2))
			},
			col: col,
			row: row,
			grid: pos_grid,
			outer_grid: pos_grid, // Backward compatibility, to be deprecated
			grid_center: {
				y: grid.y+(row/2)-1,
				x: grid.x+(col/2)-1
			},
			//region: region,
			//group: group
		};
	},

	get_region_position: function (el) {
		var ed = Upfront.Behaviors.GridEditor,
			$el = $(el),
			$modules_container = $el.find('.upfront-modules_container'),
			position = ed.get_position($modules_container);
		position.$el = $el;
		return position;
	},

	/**
	 * Get margin from class name and store in data to use later
	 *
	 * @param {Object} el
	 */
	init_margin: function (el){
		var ed = Upfront.Behaviors.GridEditor,
			left = Math.round(parseFloat(el.$el.css('margin-left'))/ed.col_size),
			top = Math.round(parseFloat(el.$el.css('margin-top'))/ed.baseline)
		;
		el.$el.data('margin', {
			original: {
				left: left,
				top: top
			},
			current: {
				left: left,
				top: top
			}
		});
	},

	get_affected_els: function (el, els, ignore, direct) {
		var aff_els = { top: [], left: [], bottom: [], right: [] },
			compare = el.outer_grid;
		if ( Array.isArray(ignore) )
			ignore.push(el);
		else
			ignore = [el];
		direct = direct ? true : false;
		_.each(_.reject(els, function(each){
				var ignored = _.find(ignore, function(i){
					return i.$el.get(0) == each.$el.get(0);
				});
				return ignored ? true : false;
			}),
			function(each){
				if ( el.region != each.region )
					return;
				if ( el.group != each.group )
					return;
				if ( ( each.outer_grid.top >= compare.top && each.outer_grid.top < compare.bottom ) ||
					 ( each.outer_grid.bottom >= compare.top && each.outer_grid.bottom <= compare.bottom ) ||
					 ( compare.top >= each.outer_grid.top && compare.top < each.outer_grid.bottom ) ||
					 ( compare.bottom >= each.outer_grid.top && compare.bottom <= each.outer_grid.bottom ) ){
					if ( compare.left > each.outer_grid.right ){
						aff_els.left.push(each);
					}
					if ( compare.right < each.outer_grid.left ){
						aff_els.right.push(each);
					}
				}
				if ( compare.top > each.outer_grid.bottom ){
					aff_els.top.push(each);
				}
				if ( compare.bottom < each.outer_grid.top ){
					aff_els.bottom.push(each);
				}
			}
		);
		if ( direct ){
			var direct_left = _.max(aff_els.left, function(each){ return each.outer_grid.right; });
			aff_els.left = _.filter(aff_els.left, function(each){
				return ( each.outer_grid.right == direct_left.outer_grid.right );
			});
			var direct_right = _.min(aff_els.right, function(each){ return each.outer_grid.left; });
			aff_els.right = _.filter(aff_els.right, function(each){
				return ( each.outer_grid.left == direct_right.outer_grid.left );
			});
			var direct_top = _.max(aff_els.top, function(each){ return each.outer_grid.top; });
			aff_els.top = _.filter(aff_els.top, function(each){
				return ( each.outer_grid.top == direct_top.outer_grid.top );
			});
			var direct_bottom = _.min(aff_els.bottom, function(each){ return each.outer_grid.top; });
			aff_els.bottom = _.filter(aff_els.bottom, function(each){
				return ( each.outer_grid.top == direct_bottom.outer_grid.top );
			});
		}
		return aff_els;
	},

	get_affected_wrapper_els: function(el, els, ignore, direct){
		var ed = Upfront.Behaviors.GridEditor,
			aff = ed.get_affected_els(el, els, ignore, direct),
			aff_els = {
				top: _.flatten(_.map(aff.top, function(w){
					var els = _.reject(ed.get_wrap_els(w), function(el){
							return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
						}),
						max = ed.get_wrap_el_max(w, ignore, true);
					return _.filter(els, function(el){ return el.outer_grid.bottom == max.outer_grid.bottom; });
				})),
				bottom: _.flatten(_.map(aff.bottom, function(w){
					var els = _.reject(ed.get_wrap_els(w), function(el){
							return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
						}),
						min = ed.get_wrap_el_min(w, ignore, true);
					return _.filter(els, function(el){ return el.outer_grid.top == min.outer_grid.top; });
				})),
				left: _.flatten(_.map(aff.left, function(w){
					var els = _.reject(ed.get_wrap_els(w), function(el){
							return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
						}),
						max = ed.get_wrap_el_max(w, ignore, false);
					return _.filter(els, function(el){ return el.outer_grid.right == max.outer_grid.right; });
				})),
				right: _.flatten(_.map(aff.right, function(w){
					var els = _.reject(ed.get_wrap_els(w), function(el){
							return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
						}),
						min = ed.get_wrap_el_min(w, ignore, false);
					return _.filter(els, function(el){ return el.outer_grid.left == min.outer_grid.left; });
				}))
			};
		return aff_els;
	},

	get_move_limit: function (aff_els, containment) {
		var move_limit = [containment.grid.left, containment.grid.right];
		_.each(aff_els.left, function(each){
			if ( each.grid.right > move_limit[0] ) {
				move_limit[0] = each.grid.right+1;
			}
		});
		_.each(aff_els.right, function(each){
			if ( each.grid.left < move_limit[1] ) {
				move_limit[1] = each.grid.left-1;
			}
		});
		return move_limit;
	},
	
	get_resize_limit: function (aff_els, containment) {
		var resize_limit = [containment.grid.left, containment.grid.right];
		_.each(aff_els.left, function(each){
			if ( each.grid.left > resize_limit[0] ) {
				resize_limit[0] = each.grid.left;
			}
		});
		_.each(aff_els.right, function(each){
			if ( each.grid.right < resize_limit[1] ) {
				resize_limit[1] = each.grid.right;
			}
		});
		return resize_limit;
	},

	/**
	 * Get maximum size available to resize
	 *
	 * @param (object) el
	 * @param (array) els
	 * @param (object) region
	 * @param (string) axis nw|se|all
	 */
	get_max_size: function ( el, els, region, axis ) {
		var ed = Upfront.Behaviors.GridEditor,
			col = ed.get_class_num(el.$el, ed.grid.class),
			axis = /all|nw|se/.test(axis) ? axis : 'all',
			margin = el.$el.data('margin'),
			aff_els = ed.get_affected_els(el, els, [], true),
			move_limit = ed.get_move_limit(aff_els, ed.containment),
			max_col = ( axis == 'nw' ? col+el.grid.left-move_limit[0] : ( axis == 'se' ? col+move_limit[1]-el.grid.right : move_limit[1]-move_limit[0]+1 ) ),
			expand_lock = region.$el.hasClass('upfront-region-expand-lock'),
			top_aff_el = aff_els.bottom.length ? _.min(aff_els.bottom, function(each){ return each.grid.top; }) : false,
			max_row_se = top_aff_el ? top_aff_el.grid.top-el.grid.top : region.grid.bottom-el.grid.top,
			max_row =  axis == 'nw' ? margin.original.top+el.row : ( axis == 'se' ? max_row_se : max_row_se+margin.original.top );
		return {
			col: max_col,
			row: expand_lock || axis == 'nw' ? max_row : false
		};
	},


	get_wrap_els: function( use_wrap ){
		var ed = Upfront.Behaviors.GridEditor,
			$els = use_wrap.$el.find('> .upfront-module-view > .upfront-module, > .upfront-module-group');
		return _.map($els, function(el){
			var el = ed.get_el($(el));
			return _.find(ed.els, function(each){ return each._id == el._id; });
		});
	},

	get_wrap_el_min: function( use_wrap, ignore, top ){
		var ed = Upfront.Behaviors.GridEditor,
			wrap_els = ed.get_wrap_els(use_wrap),
			wrap_el_min = _.min(_.reject(wrap_els, function(el){
				return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
			}), function(each){
				return top ? each.grid.top : each.grid.left;
			});
		return _.isObject(wrap_el_min) ? wrap_el_min : false;
	},

	get_wrap_el_max: function( use_wrap, ignore, bottom ){
		var ed = Upfront.Behaviors.GridEditor,
			wrap_els = ed.get_wrap_els(use_wrap),
			wrap_el_max = _.max(_.reject(wrap_els, function(el){
				return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
			}), function(each){
				return bottom ? each.grid.bottom : each.grid.right;
			});
		return _.isObject(wrap_el_max) ? wrap_el_max : false;
	},

	/**
	 * Get element position data
	 *
	 * @param {jQuery Object} $el
	 */
	get_el: function ($el){
		var ed = Upfront.Behaviors.GridEditor;
		return _.find(ed.els, function(each){ return ( $el.get(0) == each.$el.get(0) ); });
	},

	/**
	 * Get wrapper position data
	 *
	 * @param {jQuery Object} $wrap
	 */
	get_wrap: function ($wrap){
		var ed = Upfront.Behaviors.GridEditor;
		return _.find(ed.wraps, function(each){ return ( $wrap.get(0) == each.$el.get(0) ); });
	},

	/**
	 * Get region position data
	 *
	 * @param {jQuery Object} $region
	 */
	get_region: function ($region){
		var ed = Upfront.Behaviors.GridEditor;
		return _.find(ed.regions, function(each){ return ( $region.get(0) == each.$el.get(0) ); });
	},

	/**
	 * Get drop data
	 *
	 * @param {jQuery Object} $region
	 */
	get_drop: function ($drop){
		var ed = Upfront.Behaviors.GridEditor;
		return _.find(ed.drops, function(each){ return ( $drop.get(0) == each.$el.get(0) ); });
	},

	/**
	 * Get integer value from class name
	 *
	 * @param {jQuery Object|String} from
	 * @param {String} class_name
	 */
	get_class_num: function (from, class_name){
		var text = _.isString(from) ? from : from.attr('class'),
			rx = new RegExp('\\b' + class_name + '(\\d+)'),
			val = text.match(rx);
		return ( val && val[1] ) ? parseInt(val[1]) : 0;
	},

	/**
	 * Get element model
	 *
	 * @param {jQuery Object} $el
	 */
	get_el_model: function ($el) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			regions = app.layout.get('regions'),
			find_model = function (modules) {
				if ( !modules )
					return false;
				var module_model = modules.get_by_element_id($el.attr('id')),
					found_model;
				if ( module_model )
					return module_model;
				modules.find(function(module){
					if ( module.get('modules') ) {
						found_model = find_model(module.get('modules'));
						return found_model ? true : false;
					}
					else if ( module.get('objects') ) {
						found_model = module.get('objects').get_by_element_id($el.attr('id'));
						return found_model ? true : false;
					}
				});
				return found_model;
			},
			model;
		regions.find(function(region){
			model = find_model(region.get('modules'));
			return model ? true : false;
		});
		return model ? model : false;
	},

	/**
	 * Update class name with new value
	 *
	 * @param {jQuery Object} $el
	 * @param {String} class_name
	 * @param {Int} class_size
	 */
	update_class: function ($el, class_name, class_size) {
		var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			rx = new RegExp('\\b' + class_name + '\\d+'),
			$parent, parent_col;
		if ( !breakpoint || breakpoint.default ){ // apply class if default
			if ( ! $el.hasClass(class_name+class_size) ){
				if ( $el.attr('class').match(rx) )
					$el.attr('class', $el.attr('class').replace(rx, class_name+class_size));
				else
					$el.addClass(class_name+class_size);
			}
		}
		else { // otherwise, inline style
			$parent = $el.parent();
			parent_col = Math.round($parent.width()/this.col_size);
			if ( class_name == 'c' )
				$el.css('width', ((class_size/parent_col)*100) + '%');
			else if ( class_name == 'ml' )
				$el.css('margin-left', ((class_size/parent_col)*100) + '%');
			else if ( class_name == 'mt' )
				$el.css('margin-top', (class_size*this.baseline) + 'px');
		}
	},

	/**
	 * Update margin class name
	 *
	 * @param {jQuery Object} $el
	 */
	update_margin_classes: function ($el) {
		this.time_start('fn update_margin_classes');
		var el_margin = $el.data('margin'),
			ed = Upfront.Behaviors.GridEditor;
		if ( el_margin.current != el_margin.original ){
			ed.update_class($el, ed.grid.left_margin_class, el_margin.current.left);
			ed.update_class($el, ed.grid.top_margin_class, el_margin.current.top);
		}
		this.time_end('fn update_margin_classes');
	},

	update_model_classes: function ($el, classes) {
		this.time_start('fn update_model_classes');
		var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			model = this.get_el_model($el);
		if ( model && ( !breakpoint || breakpoint.default ) ){
			model.replace_class(classes.join(' '));
		}
		this.time_end('fn update_model_classes');
	},

	update_model_breakpoint: function ($el, data) {
		var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			model = this.get_el_model($el),
			model_breakpoint;
		if ( model && breakpoint && !breakpoint.default ){
			model_breakpoint = Upfront.Util.clone(model.get_property_value_by_name('breakpoint') || {});
			if ( !_.isObject(model_breakpoint[breakpoint.id]) )
				model_breakpoint[breakpoint.id] = {};
			model_breakpoint[breakpoint.id] = _.extend(model_breakpoint[breakpoint.id], data);
			model_breakpoint[breakpoint.id].edited = true;
			model.set_property('breakpoint', model_breakpoint);
		}
	},

	update_model_margin_classes: function ($els, more_classes) {
		var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			ed = Upfront.Behaviors.GridEditor;
		$els.each(function(){
			var $el = $(this),
				margin = $el.data('margin'),
				classes, data, margin_top, margin_left;
			if (
				( margin && ( margin.original.left != margin.current.left || margin.original.top != margin.current.top ) ) ||
				more_classes
			){
				margin_top = margin ? margin.current.top : 0;
				margin_left = margin ? margin.current.left : 0;
				if ( !breakpoint || breakpoint.default ){
					classes = [
						ed.grid.left_margin_class+margin_left,
						ed.grid.top_margin_class+margin_top
					];
					if ( more_classes ) {
						classes = _.union(classes, more_classes);
					}
					ed.update_model_classes($el, classes);
				}
				else {
					data = {
						left: margin_left,
						top: margin_top
					};
					if ( more_classes )
						_.each(more_classes, function(classname){
							var parse = classname.match(/^([A-Za-z])(\d+)$/);
							if ( parse && parse[1] == ed.grid.class ) {
								data.col = parseInt(parse[2]);
							}
						});
					ed.update_model_breakpoint($el, data);
				}
			}
		});
	},

	adjust_els_right: function( adj_els, cmp_right, update_class ){
		this.time_start('fn adjust_els_right');
		var	ed = Upfront.Behaviors.GridEditor;
		_.each(adj_els, function(each){
			var each_margin = each.$el.data('margin'),
				each_margin_size = each.grid.left > cmp_right ? each.grid.left-cmp_right-1 : each_margin.current.left;
			if ( each_margin.current.left != each_margin_size ){
				each_margin.current.left = each_margin_size;
				if ( update_class )
					ed.update_margin_classes(each.$el);
				each.$el.data('margin', each_margin);
			}
		});
		this.time_end('fn adjust_els_right');
	},

	adjust_affected_right: function( adj_wrap, adj_wrap_aff_right, ignore, cmp_right, update_class ){
		this.time_start('fn adjust_affected_right');
		var	ed = Upfront.Behaviors.GridEditor,
			wrap_el_max = ed.get_wrap_el_max(adj_wrap, ignore),
			wrap_right = wrap_el_max ? ( cmp_right && cmp_right > wrap_el_max.grid.right ? cmp_right : wrap_el_max.grid.right ) : ( cmp_right ? cmp_right : adj_wrap.grid.left-1 );
		adj_wrap_aff_right = _.reject(adj_wrap_aff_right, function(el){
			return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
		});
		ed.adjust_els_right(adj_wrap_aff_right, wrap_right, update_class);
		if ( cmp_right+1 == ed.containment.grid.left && ed.get_wrap_els(adj_wrap).length == 0 ) {
			adj_wrap.$el.nextAll('.upfront-wrapper:eq(0)').data('clear', 'clear'); // @TODO check this
		}
		this.time_end('fn adjust_affected_right');
	},

	adjust_els_bottom: function ( adj_els, cmp_bottom, update_class ) {
		this.time_start('fn adjust_els_bottom');
		var	ed = Upfront.Behaviors.GridEditor;
		_.each(adj_els, function(each){
			var each_margin = each.$el.data('margin'),
				each_margin_size = each.grid.top > cmp_bottom ? each.grid.top-cmp_bottom-1 : 0;
			if ( each_margin.current.top != each_margin_size ){
				each_margin.current.top = each_margin_size;
				if ( update_class )
					ed.update_margin_classes(each.$el);
				each.$el.data('margin', each_margin);
			}
		});
		this.time_end('fn adjust_els_bottom');
	},

	adjust_affected_bottom: function ( adj_wrap, adj_wrap_aff_bottom, ignore, cmp_bottom, update_class ) {
		this.time_start('fn adjust_affected_bottom');
		var	ed = Upfront.Behaviors.GridEditor,
			wrap_el_max = ed.get_wrap_el_max(adj_wrap, ignore, true),
			wrap_bottom = wrap_el_max ? ( cmp_bottom && cmp_bottom > wrap_el_max.grid.bottom ? cmp_bottom : wrap_el_max.grid.bottom ) : ( cmp_bottom ? cmp_bottom : adj_wrap.grid.bottom-1 );
		adj_wrap_aff_bottom = _.reject(adj_wrap_aff_bottom, function(el){
			return ignore ? _.find(ignore, function(i){ return i.$el.get(0) == el.$el.get(0); }) : false;
		});
		ed.adjust_els_bottom(adj_wrap_aff_bottom, wrap_bottom, update_class);
		this.time_end('fn adjust_affected_bottom');
	},

	/**
	 * Normalize elements and wrappers
	 */
	normalize: function (els, wraps) {
		this.time_start('fn normalize');
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			regions = app.layout.get("regions"),
			regions_need_update = [],
			groups_need_update = [],
			models_need_move = [],
			is_responsive = ( breakpoint && !breakpoint.default );
		// Remove unneeded wraps from processing
		wraps = _.filter(wraps, function(wrap){
			return ( wrap.$el.is(':visible') || wrap.height > 0 );
		});
		// Iterate through elements and check if it must be contained in separate wrapper
		_.each(wraps, function(wrap){
			var $wrap_els= wrap.$el.find('> .upfront-module-view > .upfront-module, > .upfront-module-group'),
				region = ed.get_region(wrap.$el.closest('.upfront-region')),
				$parent_group = wrap.$el.closest('.upfront-module-group'),
				is_parent_group = ( $parent_group.length > 0 ),
				group = is_parent_group ? ed.get_el($parent_group) : false,
				wrap_index = !is_responsive ? wrap.$el.index('.upfront-wrapper') : wrap.$el.data('breakpoint_order'),
				wrap_cleared = false,
				wrap_top = false,
				wrap_left = false,
				insert_index = false;
				
			// Reset the column size if it's bigger than it allowed to
			$wrap_els.each(function(index){
				if ( this.offsetWidth <= 0 ) // Element is not visible
					return;
				var wrap_el = ed.get_el($(this)),
					col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num(wrap_el.$el, ed.grid.class) : wrap_el.$el.data('breakpoint_col');
				if ( wrap_el.col < col && wrap_el.col > 0 ) {
					ed.update_model_margin_classes(wrap_el.$el, [ed.grid.class + wrap_el.col]);
				}
			});
			
			// Clear the wrapper when wrapper is rendered side-by-side, but the elements is not conflicting each other
			$wrap_els.each(function(index){
				var wrap_el = ed.get_el($(this)),
					aff_wraps = ed.get_affected_els(wrap_el, wraps, [], false),
					margin = wrap_el.$el.data('margin');
				if ( index == 0 && ( aff_wraps.left.length > 0 || aff_wraps.right.length > 0 ) ){
					var bottom_wrap = _.max(_.union(aff_wraps.left, aff_wraps.right), function(each){ return each.outer_grid.bottom; });
					if ( bottom_wrap.outer_grid.bottom < wrap_el.grid.top ){
						var model = ed.get_el_model(wrap_el.$el),
							collection = model.collection,
							model_index = collection.indexOf(model),
							last_wrap = _.max(_.union(aff_wraps.left, aff_wraps.right), function(each){ return each.outer_grid.left; }),
							last_wrap_index = !is_responsive ? last_wrap.$el.index('.upfront-wrapper') : last_wrap.$el.data('breakpoint_order'),
							last_wrap_el = _.last(ed.get_wrap_els(last_wrap)),
							last_model = ed.get_el_model(last_wrap_el.$el),
							last_index = collection.indexOf(last_model),
							margin_top = wrap_el.grid.top - bottom_wrap.outer_grid.bottom;

						wrap_top = wrap_el.grid.top - margin_top + 1;
						wrap_left = region.grid.left;
						wrap_cleared = true;
						wrap_el.outer_grid.top = wrap_top;
						// Check if we also need to move the position in model, or reorder in responsive
						if ( ( !is_responsive && last_index > model_index ) || ( is_responsive && last_wrap_index > wrap_index ) ) {
							if ( !is_responsive ){
								insert_index = last_index;
								wrap.$el.insertAfter(last_wrap.$el);
								models_need_move.push({collection: collection, model: model, index: insert_index});
							}
							else {
								var wrappers = is_parent_group ? ed.get_el_model($parent_group).get('wrappers') : regions.get_by_name(wrap_el.region).get('wrappers'),
									$wraps = wrap.$el.parent().find('> .upfront-wrapper').each(Upfront.Util.normalize_sort_elements_cb).sort(Upfront.Util.sort_elements_cb),
									shift = false;
								$wraps.each(function(i){
									var wrap_model = wrappers.get_by_wrapper_id($(this).attr('id'))
									if ( this == wrap.$el.get(0) ) {
										shift = true;
										wrap_model.set_breakpoint_property('order', last_wrap_index);
									}
									else {
										wrap_model.set_breakpoint_property('order', i-1);
										if ( this == last_wrap.$el.get(0) )
											shift = false;
									}
								});
							}
							/*if ( aff_wraps.right.length > 0 ) {
								var right_wrap = _.min(aff_wraps.right, function(each){ return each.outer_grid.left; }),
									right_wrap_els = ed.get_wrap_els(right_wrap);
								_.each(right_wrap_els, function(each){
									var each_margin = each.$el.data('margin');
									each_margin.current.left = each.grid.left-wrap_el.outer_grid.left;
									ed.update_model_margin_classes(each.$el);
								});
							}*/
						}
						if ( is_parent_group )
							groups_need_update.push($parent_group);
						else
							regions_need_update.push(wrap_el.region);
					}
				}
				else if ( wrap_cleared ){
					if ( !is_responsive && insert_index !== false ){
						var model = ed.get_el_model(wrap_el.$el),
							collection = model.collection;
						models_need_move.push({collection: collection, model: model, index: insert_index});
					}
				}
			});
			if ( wrap_cleared ) {
				wrap.outer_grid.top = wrap_top;
				wrap.grid.top = wrap_top;
				wrap.outer_grid.left = wrap_left;
				wrap.$el.data('clear', 'clear');
			}

			// Don't allow separating wrapper on responsive
			if ( is_responsive )
				return;

			// Separate wrapper if more than one element in the wrapper, provided that the wrapper is not conflicting anything
			if ( $wrap_els.size() > 1 ){
				$wrap_els.each(function(){
					var wrap_el = ed.get_el($(this)),
						aff_wraps = ed.get_affected_els(wrap, wraps, [], false);
					if ( aff_wraps.left.length == 0 && aff_wraps.right.length == 0 ){
						// Separate the wrapper
						var wrap_el_model = ed.get_el_model(wrap_el.$el),
							wrap_el_view = Upfront.data.module_views[wrap_el_model.cid],
							parent_view = is_parent_group && wrap_el_view.group_view ? wrap_el_view.group_view : wrap_el_view.region_view,
							parent_el = is_parent_group && group ? group : region,
							wrappers = parent_view.model.get('wrappers'),
							wrapper_id = Upfront.Util.get_unique_id("wrapper"),
							wrap_model = new Upfront.Models.Wrapper({
								"name": "",
								"properties": [
									{"name": "wrapper_id", "value": wrapper_id},
									{"name": "class", "value": ed.grid.class+(wrap_el.grid.left+wrap_el.col-parent_el.grid.left)}
								]
							}),
							wrap_view = new Upfront.Views.Wrapper({model: wrap_model});
						wrappers.add(wrap_model);
						wrap_model.add_class('clr');
						wrap_view.parent_view = wrap_el_view.parent_view;
						wrap_view.render();
						wrap_el.$el.closest('.upfront-wrapper').before(wrap_view.$el);
						wrap_view.$el.append(wrap_el_view.$el);
						wrap_el_model.set_property('wrapper_id', wrapper_id, true);
						Upfront.data.wrapper_views[wrap_model.cid] = wrap_view;
						ed.init_margin(wrap_el);
						if ( is_parent_group )
							groups_need_update.push($parent_group);
						else
							regions_need_update.push(wrap_el.region);
					}
				});
			}
		});
		_.each(wraps, function(wrap){
			var region = ed.get_region(wrap.$el.closest('.upfront-region'));
			if ( !region )
				return;
			if ( !is_responsive && wrap.outer_grid.left == region.grid.left && !wrap.$el.hasClass('clr') )
				wrap.$el.addClass('clr');
		});
		_.each(_.uniq(regions_need_update), function(region){
			var region_model = regions.get_by_name(region),
				region_view = Upfront.data.region_views[region_model.cid];
			ed.update_wrappers(region_model, region_view.$el);
		});
		_.each(_.uniq(groups_need_update), function($group){
			var group_model = ed.get_el_model($group),
				group_view = Upfront.data.module_views[group_model.cid];
			ed.update_wrappers(group_model, group_view.$el);
		});
		if ( !is_responsive ) {
			_.each(models_need_move, function(move){
				move.collection.remove(move.model, {silent: true});
				move.model.add_to(move.collection, move.index);
			});
		}
		// Clean clear data attribute
		_.each(wraps, function(wrap){
			wrap.$el.removeData('clear');
		});
		this.time_end('fn normalize');
	},

	/**
	 * Init the GridEditor object
	 */
	init: function(){
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			main_pos = $main.offset(),
			$layout = $main.find('.upfront-layout');
		ed.baseline = Upfront.Settings.LayoutEditor.Grid.baseline;
		ed.grid = Upfront.Settings.LayoutEditor.Grid;
		ed.col_size = ed.grid.column_width;

		ed.max_row = Math.floor(($(window).height()*.5)/ed.baseline);
		ed.main = {
			$el: $main,
			top: main_pos.top,
			bottom: main_pos.top + $main.outerHeight(),
			left: main_pos.left,
			right: main_pos.left + $main.outerWidth()
		};

		// Prevents quick scroll when resizing
		var scrollStep = 15;
		$(document).on('scroll', function(e){
			if(ed.resizing === false || ed.resizing == window.scrollY)
				return;

			if(window.scrollY > ed.resizing)
				ed.resizing += scrollStep;
			else
				ed.resizing -= scrollStep;

			window.scrollTo(window.scrollX, ed.resizing);
		});
	},

	/**
	 * Start editor, to set all required variables
	 *
	 * @param {Object} view
	 */
	start: function(view, model, $cont){
		this.time_start('fn start');
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			main_pos = ed.main.$el.offset(),
			$layout = ed.main.$el.find('.upfront-layout'),
			layout_pos = $layout.offset(),
			is_object = view.$el.find(".upfront-editable_entity").eq(0).is(".upfront-object"),
			$containment = $cont || view.$el.closest(".upfront-editable_entities_container"),
			containment_pos = $containment.offset();
		// Set variables
		ed.col_size = ed.grid.column_width;
		ed.el_selector = is_object ? '.upfront-object' : '.upfront-module, .upfront-module-group';
		ed.main.top = main_pos.top;
		ed.main.bottom = main_pos.top + ed.main.$el.outerHeight();
		ed.main.left = main_pos.left;
		ed.main.right = main_pos.left + ed.main.$el.outerWidth();
		var grid_layout_left = layout_pos.left + ($layout.outerWidth() - (ed.grid.size*ed.col_size))/2;
		ed.grid_layout = {
			top: layout_pos.top,
			bottom: layout_pos.top + $layout.outerHeight(),
			left: grid_layout_left,
			right: grid_layout_left + (ed.grid.size*ed.col_size),
			layout_left: layout_pos.left,
			layout_right: layout_pos.left + $layout.outerWidth()
		};
		var containment_width = $containment.outerWidth(),
			containment_height = $containment.outerHeight(),
			containment_col = Math.round(containment_width/ed.col_size),
			containment_row = Math.round(containment_height/ed.baseline),
			containment_grid = ed.get_grid(containment_pos.left, containment_pos.top);
		ed.containment = {
			$el: $containment,
			top: containment_pos.top,
			bottom: containment_pos.top + containment_height,
			left: containment_pos.left,
			right: containment_pos.left + containment_width,
			col: containment_col,
			grid: {
				top: containment_grid.y,
				bottom: containment_grid.y+containment_row-1,
				left: containment_grid.x,
				right: containment_grid.x+containment_col-1
			}
		};
		ed.update_position_data($containment);
		this.time_end('fn start');
	},

	/**
	 * Update position data
	 */
	update_position_data: function ($containment, update_regions) {
		this.time_start('fn update_position_data');
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			$layout = ed.main.$el.find('.upfront-layout'),
			is_object = ( ed.el_selector == '.upfront-object' ),
			$els = false,
			$wraps = $containment.find('> .upfront-wrapper'),
			$regions = $layout.find('.upfront-region').not('.upfront-region-locked'),
			$region = $containment.closest('.upfront-region'),
			region_name = $region.data('name'),
			$group = $containment.closest('.upfront-module-group'),
			group_id = $group.length > 0 ? $group.attr('id') : false
		;
		// If region isn't shadow, we ignore not-visible elements
		if ( region_name !== 'shadow' ) {
			$wraps = $wraps.filter(':visible');
			$els = is_object
				? $wraps.find('.upfront-object')
				: $wraps.find('> .upfront-module-view > .upfront-module, > .upfront-module-group');
		}
		else {
			$els = $containment.find('> .upfront-module-view > .upfront-module');
		}
		ed.els = _.map($els, ed.get_position ); // Generate elements position data
		_.each(ed.els, function(el){
			el.region = region_name;
			el.group = group_id;
			ed.init_margin(el); // Generate margin data
		});
		ed.wraps = _.map($wraps, ed.get_position ); // Generate wrappers position data
		_.each(ed.wraps, function(wrap){
			wrap.region = region_name;
			wrap.group = group_id;
		});
		if ( false !== update_regions ) {
			ed.regions = _.map($regions, ed.get_region_position ); // Generate regions position data
			_.each(ed.regions, function(region){
				region.region = region.$el.closest('.upfront-region').data('name');
				region.group = false;
			});
		}
		this.time_end('fn update_position_data');
	},

	

	/**
	 * Update wrappers
	 */
	update_wrappers: function (parent_model, $parent) {
		this.time_start('fn update_wrappers');
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$layout = $main.find('.upfront-layout'),
			wraps = parent_model.get('wrappers'),
			modules = parent_model.get('modules');
		($parent ? $parent : $layout).find('.upfront-wrapper:visible').each(function(){
			var $wrap = $(this),
				wrap_id = $wrap.attr('id'),
				wrap_model = wraps.get_by_wrapper_id(wrap_id),
				clear = $wrap.data('clear'),
				children = _.map($wrap.find('> .upfront-module-view > .upfront-module, > .upfront-module-group'), function (each) {
					var $el = $(each);
					if ( !$el || !$el.length ) return false;
					return $el;
				}).filter(function (each) {
					return each !== false;
				});
			;
			if ( children.length == 0 ){
				if ( wrap_model ) wraps.remove(wrap_model);
				return;
			}
			if ( $wrap.hasClass('upfront-wrapper-preview') ) return;
			if ( $wrap.height() <= 0 ) return;
			if ( ! wrap_model ) return;
			var current_col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num($wrap, ed.grid.class) : $wrap.data('breakpoint_col'),
				child_els = _.map(children, function($el){
					return {
						$el: $el,
						col: ( !breakpoint || breakpoint.default ) ? ed.get_class_num($el, ed.grid.class) : $el.data('breakpoint_col')
					};
				}),
				max = _.max(child_els, function(each){
					if ( !each ) return;
					return each.col;
				}),
				wrap_col = max.col,
				wrap_breakpoint, breakpoint_data;
			ed.update_class($wrap, ed.grid.class, wrap_col);
			if ( !breakpoint || breakpoint.default ){
				if ( current_col != wrap_col ) {
					wrap_model.replace_class(ed.grid.class+wrap_col);
				}
				if ( (clear && clear == 'clear') || (!clear && $wrap.hasClass('clr')) ) {
					wrap_model.add_class('clr');
				}
				else {
					wrap_model.remove_class('clr');
				}
			}
			else {
				wrap_breakpoint = Upfront.Util.clone(wrap_model.get_property_value_by_name('breakpoint') || {});
				if ( !_.isObject(wrap_breakpoint[breakpoint.id]) ) {
					wrap_breakpoint[breakpoint.id] = {};
				}
				wrap_breakpoint[breakpoint.id].col = wrap_col;
				if ( clear ) {
					wrap_breakpoint[breakpoint.id].clear = (clear == 'clear');
				}
				wrap_model.set_property('breakpoint', wrap_breakpoint);
			}
			/*$wrap.stop().css({
				position: '',
				left: '',
				right: ''
			});*/
		});
		wraps.each(function(wrap){
			if ( $('#'+wrap.get_wrapper_id()).size() == 0 ) {
				wraps.remove(wrap);
			}
		});
		Upfront.Events.trigger("entity:wrappers:update", parent_model);
		this.time_end('fn update_wrappers');
	},


	/**
	 * Create resizable
	 *
	 * @param {Object} view
	 * @param {Object} model
	 */
	create_resizable: function(view, model){
		var app = this,
			ed = Upfront.Behaviors.GridEditor,
			is_group = view.$el.hasClass('upfront-module-group'),
			$me = is_group ? view.$el : view.$el.find('>.upfront-editable_entity'),
			is_parent_group = ( typeof view.group_view != 'undefined' ),
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$layout = $main.find('.upfront-layout'),
			$resize, $resize_placeholder,
			axis
		;
		if ( Upfront.Application.mode.current !== Upfront.Application.MODE.THEME && model.get_property_value_by_name('disable_resize') ) {
			return false;
		}
		if ( $me.hasClass('upfront-module-spacer') ) {
			return false;
		}
		if ( $me.data('ui-resizable') ){
			$me.resizable('option', 'disabled', false);
			return false;
		}
		//$me.append('<span class="upfront-icon-control upfront-icon-control-resize-nw upfront-resize-handle-nw ui-resizable-handle ui-resizable-nw"></span>');
		//$me.append('<span class="upfront-icon-control upfront-icon-control-resize-se upfront-resize-handle-se ui-resizable-handle ui-resizable-se"></span>');
		$me.append('<span class="upfront-icon-control upfront-icon-control-resize-s upfront-resize-handle-s ui-resizable-handle ui-resizable-s"></span>');
		$me.resizable({
			containment: "document",
			autoHide: false,
			delay: 50,
			handles: {
				//nw: '.upfront-resize-handle-nw',
				//se: '.upfront-resize-handle-se',
				s: '.upfront-resize-handle-s'
			},
			start: function(e, ui){
				ed.start(view, model);

				// Prevents quick scroll when resizing
				ed.resizing = window.scrollY;

				var me = ed.get_el($me),
					margin = $me.data('margin'),
					data = $(this).data('ui-resizable');
				axis = data.axis ? data.axis : 'se';
				$resize_placeholder = $('<div class="upfront-resize-placeholder"></div>');
				$resize_placeholder.css({
					marginLeft: ((margin.original.left/(me.col+margin.original.left))*100) + '%',
					marginTop: margin.original.top*ed.baseline,
					width: ((me.col/(me.col+margin.original.left))*100) + '%',
					height: ui.originalSize.height
				});
				$resize = $('<div class="upfront-resize" style="height:'+me.height+'px;"></div>');
				$resize.css({
					height: me.height,
					width: me.width,
					minWidth: me.width,
					maxWidth: me.width,
					position: 'absolute'
				})
				if ( axis == 'nw' ) {
					$resize.css({
						top: me.position.top,
//						bottom: $('body').height() - me.position.bottom + ed.baseline,
						right: $('body').width() - me.position.right
					});
				}
				else
					$resize.css({
						top: me.position.top,
						left: me.position.left
					});
				$('body').append($resize);
				// Refreshing the elements position
				_.each(ed.els, function(each, index){
					ed.els[index] = ed.get_position(each.$el);
				});
				// Refreshing the wrapper position
				_.each(ed.wraps, function(each, index){
					ed.wraps[index] = ed.get_position(each.$el);
				});
				ed.normalize(ed.els, ed.wraps);
				ed.update_position_data(ed.containment.$el);
				// Clear margin and assign an absolute position, hack into the resizable instance as well
				var me_pos = $me.position(),
					rsz_pos = {
						left: me_pos.left + ( margin.original.left * ed.col_size ),
						top: me_pos.top + ( margin.original.top * ed.baseline )
					};
				$me.css({
					marginLeft: 0,
					marginTop: 0,
					position: 'absolute',
					left: rsz_pos.left,
					top: rsz_pos.top,
					minHeight: ''
				});
				data.originalPosition.left = rsz_pos.left;
				data.originalPosition.top = rsz_pos.top;
				data._updateCache({
					left: rsz_pos.left,
					top: rsz_pos.top
				});
				$resize_placeholder.insertBefore($me);
				
				view.trigger('entity:resize_start', {row: me.row, col: me.col, height: me.height, width: me.width}, view, view.model);
				Upfront.Events.trigger("entity:resize_start", view, view.model);
			},
			resize: function(e, ui){
				var $wrap = $me.closest('.upfront-wrapper'),
					$region = $me.closest('.upfront-region'),
					me = ed.get_el($me),
					wrap = ed.get_wrap($wrap),
					region = ed.get_region($region),
					expand_lock = $region.hasClass('upfront-region-expand-lock'),
					col = me.col,
					aff_els = wrap ? ed.get_affected_wrapper_els(wrap, ed.wraps, [], true) : ed.get_affected_els(me, ed.els, [], true),
					move_limit = ed.get_move_limit(aff_els, ed.containment),
					max_col = col + ( axis == 'nw' ? me.grid.left-move_limit[0] : move_limit[1]-me.grid.right ),

					top_aff_el = aff_els.bottom.length ? _.min(aff_els.bottom, function(each){ return each.grid.top; }) : false,
					max_row = top_aff_el ? top_aff_el.grid.top-me.grid.top : region.grid.bottom-me.grid.top+1,

					current_col = Math.ceil(ui.size.width/ed.col_size),
					w = ( current_col > max_col ? Math.round(max_col*ed.col_size) : ui.size.width ),
					h = ( (ui.size.height > 15 ? ui.size.height : 0) || ui.originalSize.height ),
					current_row = Math.ceil(h/ed.baseline),
					rsz_col = ( current_col > max_col ? max_col : current_col ),
					rsz_row = ( expand_lock && current_row > max_row && max_row > 0 ? max_row : current_row )
				;
				if ( Math.abs($(window).height()-e.clientY) < 50 ){
					h += (ed.baseline*10);
					$(window).scrollTop( $(window).scrollTop()+(ed.baseline*10) );
				}
				$me.css({
					height: rsz_row*ed.baseline,
					width: w,
					minWidth: w,
					maxWidth: w
				});
				$me.data('resize-col', rsz_col);
				$me.data('resize-row', rsz_row);
				$resize.css({
					height: rsz_row*ed.baseline,
					width: rsz_col*ed.col_size,
					minWidth: rsz_col*ed.col_size,
					maxWidth: rsz_col*ed.col_size,
				});
				if(axis == 'nw') {
					$resize.css({
						top: me.$el.find('>.upfront-resize-handle-nw').offset().top,
						marginTop: me.$el.find('>.upfront-resize-handle-se').offset().top+me.$el.find('>.upfront-resize-handle-se').height()-me.$el.find('>.upfront-resize-handle-nw').offset().top-rsz_row*ed.baseline
					});
				}
				if ( !expand_lock && axis != 'nw' )
					$resize_placeholder.css('height', rsz_row*ed.baseline);
				view.update_size_hint(rsz_col*ed.col_size, rsz_row*ed.baseline);
				
				view.trigger('entity:resizing', {row: rsz_row, col: rsz_col, height: rsz_row*ed.baseline, width: rsz_col*ed.col_size}, view, view.model);
			},
			stop: function(e, ui){
				Upfront.Events.trigger("entity:pre_resize_stop", view, view.model, ui);
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					$wrap = $me.closest('.upfront-wrapper'),
					$region = $me.closest('.upfront-region'),
					me = ed.get_el($me),
					margin = $me.data('margin'),
					wrap = ed.get_wrap($wrap),
					expand_lock = $region.hasClass('upfront-region-expand-lock'),
					aff_els = wrap ? ed.get_affected_wrapper_els(wrap, ed.wraps, [], true) : ed.get_affected_els(me, ed.els, [], true),
					move_limit = ed.get_move_limit(aff_els, ed.containment),
					prev_col = Math.ceil(ui.originalSize.width/ed.col_size),
					prev_row = Math.ceil(ui.originalSize.height/ed.baseline),
					rsz_col = $me.data('resize-col'),
					rsz_row = $me.data('resize-row'),

					regions = app.layout.get('regions'),
					region = regions.get_by_name($region.data('name')),
					model_breakpoint, breakpoint_data
				;

				// Prevents quick scroll when resizing
				ed.resizing = false;

				$resize_placeholder.remove();
				$resize.remove();

				ed.update_class($me, ed.grid.class, rsz_col);
				if ( axis == 'nw' ){
					margin.current.left = margin.original.left - (rsz_col-prev_col);
					margin.current.top = margin.original.top - (rsz_row-prev_row);
					$me.data('margin', margin);
					ed.update_margin_classes($me);
				}
				else if ( axis == 'se' && wrap ){
					ed.adjust_affected_right(wrap, aff_els.right, [me], me.grid.left+rsz_col-1, true);
					if ( expand_lock )
						ed.adjust_affected_bottom(wrap, aff_els.bottom, [me], me.grid.top+rsz_row-1, true);
				}

				// Make sure CSS is reset, to fix bug when it keeps all resize CSS for some reason
				$me.css({
					width: '',
					minWidth: '',
					maxWidth: '',
					height: '',
					position: '',
					top: '',
					left: '',
					marginLeft: '',
					marginTop: ''
				});

				if ( !breakpoint || breakpoint.default ){
					model.set_property('row', rsz_row);
					// Also resize containing object if it's only one object
					var objects = model.get('objects');
					if ( objects && objects.length == 1 ){
						objects.each(function(object){
							object.set_property('row', rsz_row);
						});
					}

					// Update model value
					if ( axis == 'nw' ){
						model.replace_class([
							ed.grid.class+rsz_col,
							ed.grid.left_margin_class+margin.current.left,
							ed.grid.top_margin_class+margin.current.top,
						].join(' '));
					}
					else{
						model.replace_class(ed.grid.class+rsz_col);
						ed.update_model_margin_classes($region.find('.upfront-module, .upfront-module-group').not($me));
					}
				}
				else {
					model_breakpoint = Upfront.Util.clone(model.get_property_value_by_name('breakpoint') || {});
					if ( !_.isObject(model_breakpoint[breakpoint.id]) )
						model_breakpoint[breakpoint.id] = {};
					breakpoint_data = model_breakpoint[breakpoint.id];
					breakpoint_data.edited = true;
					breakpoint_data.row = rsz_row;
					breakpoint_data.col = rsz_col;
					if ( axis == 'nw' ){
						breakpoint_data.left = margin.current.left;
						breakpoint_data.top = margin.current.top;
					}
					else {
						ed.update_model_margin_classes($region.find('.upfront-module, .upfront-module-group').not($me));
					}
					model.set_property('breakpoint', model_breakpoint);
					// Also resize containing object if it's only one object
					var objects = model.get('objects');
					if ( objects && objects.length == 1 ){
						objects.each(function(object){
							var obj_breakpoint = Upfront.Util.clone(object.get_property_value_by_name('breakpoint') || {});
							if ( !_.isObject(obj_breakpoint[breakpoint.id]) )
								obj_breakpoint[breakpoint.id] = {};
							obj_breakpoint[breakpoint.id].row = rsz_row;
							object.set_property('breakpoint', obj_breakpoint);
						});
					}
				}

				if ( is_parent_group )
					ed.update_wrappers(view.group_view.model, view.group_view.$el);
				else
					ed.update_wrappers(region, $region);

				// Let's normalize
				ed.update_position_data(ed.containment.$el);
				ed.normalize(ed.els, ed.wraps);

				$me.removeData('resize-col');
				$me.removeData('resize-row');

				view.trigger('entity:resize_stop', {row: rsz_row, col: rsz_col, height: rsz_row*ed.baseline, width: rsz_col*ed.col_size}, view, view.model);
				Upfront.Events.trigger("entity:resize_stop", view, view.model, ui);
				Upfront.Events.trigger("entity:resized", view, view.model);
			}
		});
	},

	toggle_resizables: function (enable) {
		$('.upfront-editable_entity.ui-resizable').resizable('option', 'disabled', (!enable));
	},

	/**
	 * Resize element
	 *
	 * @param (object) view
	 * @param (object) model
	 * @param (integer) col
	 * @param (integer) row
	 * @param (string) axis nw|se|all
	 * @param (bool) force
	 */
	resize: function (view, model, col, row, axis, force) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			axis = /all|nw|se/.test(axis) ? axis : 'all',
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$layout = $main.find('.upfront-layout');

		ed.start(view, model);

		var $me = view.$el.find('.upfront-editable_entity:first'),
			$object = $me.find('.upfront-editable_entity'),
			$wrap = $me.closest('.upfront-wrapper'),
			$region = $me.closest('.upfront-region'),
			margin = $me.data('margin'),
			me = ed.get_el($me),
			wrap = ed.get_wrap($wrap),
			region = ed.get_region($region),
			expand_lock = $region.hasClass('upfront-region-expand-lock'),
			aff_els = wrap ? ed.get_affected_wrapper_els(wrap, ed.wraps, [], true) : ed.get_affected_els(me, ed.els, [], true),
			max = ed.get_max_size(me, ed.els, region, axis),
			is_parent_group = ( typeof view.group_view != 'undefined' ),
			group_model = is_parent_group ? view.group_view.model : false,
			regions = app.layout.get('regions'),
			region_model = regions.get_by_name($region.data('name')),
			wrappers = ( is_parent_group ? group_model : region_model ).get('wrappers'),
			wrap_model = wrappers.get_by_wrapper_id($wrap.attr('id')),
			wrap_view = Upfront.data.wrapper_views[wrap_model.cid]
		;

		if ( col < 1 || row < 1 )
			return false;

		if ( !force ){
			$me.css('min-height', '');
			$object.css('min-height', '');
			var min_row = Math.ceil($me.outerHeight()/ed.baseline);
			row = row > min_row ? row : min_row;
			$me.css('min-height', row*ed.baseline);
			$object.css('min-height', (row-2)*ed.baseline);
		}


		col = col ? ( col > max.col ? max.col : col ) : me.col;
		row = row ? ( max.row && row > max.row ? max.row : row ) : me.row;

		ed.normalize(ed.els, ed.wraps);
		ed.update_position_data(ed.containment.$el);
		ed.update_class($me, ed.grid.class, col);
		model.set_property('row', row);
		// Also resize containing object if it's only one object
		var objects = model.get('objects');
		if ( objects && objects.length == 1 ){
			objects.each(function(object){
				object.set_property('row', row);
			});
		}
		// Update model value
		if ( axis != 'se' ){
			model.replace_class([
				ed.grid.class+col,
				//ed.grid.left_margin_class+margin.current.left,
				//ed.grid.top_margin_class+margin.current.top
			].join(' '));
		}
		else{
			model.replace_class(ed.grid.class+col);
			//ed.update_model_margin_classes($layout.find('.upfront-module, .upfront-module-group').not($me));
		}
		if ( typeof view.group_view != 'undefined' ) {
			ed.update_wrappers(view.group_view.model, view.group_view.$el);
		}
		else {
			ed.update_wrappers(region_model, region.$el);
		}

		view.trigger('entity:resize_stop', {row: row, col: col}, view, view.model);
		Upfront.Events.trigger("entity:resized", view, view.model);
		return true;
	},
	
	


	/**
	 * Create resizable
	 *
	 * @param {Object} view
	 * @param {Object} model
	 */
	create_wrapper_resizable: function(view, model){
		var app = this,
			ed = Upfront.Behaviors.GridEditor,
			$me = view.$el,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$layout = $main.find('.upfront-layout'),
			has_group,
			also_has_group,
			$resize,
			$resize_placeholder,
			$also_resize,
			also_model,
			also_view,
			$spacer_feed,
			is_spacer,
			also_is_spacer,
			axis,
			min_col,
			also_min_col,
			max_col,
			child_els,
			also_child_els
		;
		if ( Upfront.Application.mode.current !== Upfront.Application.MODE.THEME && model.get_property_value_by_name('disable_resize') )
			return false;
		if ( $me.data('ui-resizable') ){
			$me.resizable('option', 'disabled', false);
			return false;
		}
		//$me.append('<span class="upfront-resize-handle-wrapper upfront-resize-handle-w ui-resizable-handle ui-resizable-w">');
		//$me.append('<span class="upfront-resize-handle-wrapper upfront-resize-handle-e ui-resizable-handle ui-resizable-e">');
		$me.resizable({
			containment: "document",
			autoHide: false,
			delay: 50,
			handles: {
				w: '.upfront-resize-handle-wrapper-w',
				e: '.upfront-resize-handle-wrapper-e'
			},
			start: function(e, ui){
				ed.start(view, model);

				// Prevents quick scroll when resizing
				ed.resizing = window.scrollY;

				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					me = ed.get_wrap($me),
					//margin = $me.data('margin'),
					data = $(this).data('ui-resizable'),
					$wrappers = Upfront.Util.find_sorted($me.parent(), '> .upfront-wrapper'),
					aff_els = ed.get_affected_els(me, ed.wraps, [], true),
					also_resize
				;
					
				axis = data.axis ? data.axis : 'e';
				has_group = ( $me.find('> .upfront-module-group').length > 0 );
				max_col = me.col;
				min_col = ed.min_col;
				also_min_col = ed.min_col;
				is_spacer = ( $me.find('> .upfront-module-view > .upfront-module-spacer').length > 0 );

				child_els = [];
				$me.find('> .upfront-module-view > .upfront-module, > .upfront-module-group').each(function () {
					var child_model = ed.get_el_model($(this)),
						child_view = Upfront.data.module_views[child_model.cid]
					;
					if ( !child_view ) return;
					child_els.push({
						view: child_view,
						is_group: $(this).hasClass('upfront-module-group'),
						el: ed.get_el($(this))
					});
				});
				if ( has_group ) {
					_.each(child_els, function (child) {
						if ( !child.is_group ) return;
						var child_min_col = ed.get_group_min_col(child.view);
						min_col = child_min_col > min_col ? child_min_col : min_col;
					});
				}
				
				$resize = $('<div class="upfront-resize" style="height:'+me.height+'px;"></div>');
				$resize.css({
					height: me.height,
					width: me.width,
					minWidth: me.width,
					maxWidth: me.width,
					position: 'absolute'
				});
				if ( axis == 'w' ) {
					$resize.css({
						top: me.position.top,
						right: $('body').width() - me.position.right
					});
				}
				else {
					$resize.css({
						top: me.position.top,
						left: me.position.left
					});
				}
				$('body').append($resize);
				$also_resize = false;
				also_child_els = [];
				if ( axis == 'w' && me.outer_grid.left > ed.containment.grid.left ) {
					$also_resize = Upfront.Util.find_from_elements($wrappers, $me, '.upfront-wrapper:visible', true).first();
				}
				else if ( axis == 'e' && me.outer_grid.right < ed.containment.grid.right ) {
					$also_resize = Upfront.Util.find_from_elements($wrappers, $me, '.upfront-wrapper:visible', false).first();
				}
				if ( $also_resize && $also_resize.length ) {
					also_resize = ed.get_wrap($also_resize);
					also_is_spacer = ( $also_resize.find('> .upfront-module-view > .upfront-module-spacer').length > 0 );
					also_has_group = ( $also_resize.find('> .upfront-module-group').length > 0 ),
					also_model = model.collection.get_by_wrapper_id($also_resize.attr('id'));
					also_view = Upfront.data.wrapper_views[also_model.cid];

					$also_resize.find('> .upfront-module-view > .upfront-module, > .upfront-module-group').each(function () {
						var child_model = ed.get_el_model($(this)),
							child_view = Upfront.data.module_views[child_model.cid]
						;
						if ( !child_view ) return;
						also_child_els.push({
							view: child_view,
							is_group: $(this).hasClass('upfront-module-group'),
							el: ed.get_el($(this))
						});
					});
					if ( also_has_group ) {
						_.each(also_child_els, function (child) {
							if ( !child.is_group ) return;
							var child_min_col = ed.get_group_min_col(child.view);
							also_min_col = child_min_col > also_min_col ? child_min_col : also_min_col;
						});
					}

					max_col = me.col + also_resize.col;
					if ( !is_spacer && !also_is_spacer ) {
						max_col -= also_min_col;
					}
					else if ( is_spacer ) {
						max_col -= also_min_col;
						min_col = 0;
					}
					if ( also_is_spacer ) {
						also_min_col = 0;
					}
				}
				else {
					$also_resize = false;
					also_resize = false;
					also_model = false;
					also_view = false;
					also_is_spacer = false;
				}
				
				$resize_placeholder = $('<div class="upfront-resize-placeholder"></div>');
				$resize_placeholder.css({
					width: (((also_resize ? also_resize.col + me.col : me.col)/ed.containment.col)*100) + '%',
					height: ui.originalSize.height,
					position: 'relative'
				});
				if ( breakpoint && !breakpoint.default ) {
					$resize_placeholder.css('order', $me.css('order'));
				}
				if ( is_spacer || also_is_spacer ) {
					$spacer_feed = $('<div class="upfront-spacer-feed"></div>');
					$spacer_feed.css({
						width: ed.col_size,
						height: 'auto',
						top: 0,
						bottom: 0,
						position: 'absolute'
					});
					$resize_placeholder.append($spacer_feed);
				}
				// Refreshing the elements position
				_.each(ed.els, function(each, index){
					ed.els[index] = ed.get_position(each.$el);
				});
				// Refreshing the wrapper position
				_.each(ed.wraps, function(each, index){
					ed.wraps[index] = ed.get_position(each.$el);
				});
				ed.normalize(ed.els, ed.wraps);
				ed.update_position_data(ed.containment.$el);
				// Clear margin and assign an absolute position, hack into the resizable instance as well
				var me_pos = $me.position(),
					also_resize_pos = ( $also_resize ? $also_resize.position() : false );
				$me.css({
					marginLeft: 0,
					marginTop: 0,
					position: 'absolute',
					left: me_pos.left,
					top: me_pos.top,
					minHeight: ''
				});
				if ( $also_resize ) {
					$also_resize.css({
						marginLeft: 0,
						marginTop: 0,
						position: 'absolute',
						top: also_resize_pos.top,
						left: also_resize_pos.left
					});
				}
				data.originalPosition.left = me_pos.left;
				data.originalPosition.top = me_pos.top;
				data._updateCache({
					left: me_pos.left,
					top: me_pos.top
				});
				$resize_placeholder.insertBefore($me);
				
				// Trigger child events
				_.each(child_els, function (child) {
					child.view.trigger('entity:resize_start', {row: child.el.row, col: child.el.col, height: child.el.height, width: child.el.width}, child.view, child.view.model);
				});
				_.each(also_child_els, function (child) {
					child.view.trigger('entity:resize_start', {row: child.el.row, col: child.el.col, height: child.el.height, width: child.el.width}, child.view, child.view.model);
				});
				
				// Trigger main event
				view.trigger('entity:wrapper:resize_start', {row: me.row, col: me.col, height: me.height, width: me.width}, view, view.model);
				if ( also_view ) {
					also_view.trigger('entity:wrapper:resize_start', {row: also_resize.row, col: also_resize.col, height: also_resize.height, width: also_resize.width}, also_view, also_view.model);
				}
				Upfront.Events.trigger("entity:wrapper:resize_start", view, view.model, also_view, also_view.model);
			},
			resize: function(e, ui){
				var $region = $me.closest('.upfront-region'),
					me = ed.get_wrap($me),
					also_resize = ( $also_resize ? ed.get_wrap($also_resize) : false ),
					region = ed.get_region($region),
					min_w = min_col*ed.col_size,
					w = ( current_col > max_col ? Math.round(max_col*ed.col_size) : ( min_w > ui.size.width ? min_w : ui.size.width ) ),
					current_col = Math.round(w/ed.col_size),
					h = ( (ui.size.height > 15 ? ui.size.height : 0) || ui.originalSize.height ),
					l = ( axis == 'w' ? ui.originalPosition.left+ui.originalSize.width-w : ui.position.left ),
					rsz_col = ( current_col > max_col ? max_col : current_col ),
					also_col = max_col - rsz_col + also_min_col,
					also_w = ( ( max_col + also_min_col ) * ed.col_size ) - w
				;
				$me.css({
					left: l,
					height: h,
					width: w,
					minWidth: w,
					maxWidth: w
				});
				$me.data('resize-col', rsz_col);
				// Visual feedback for deleting spacer
				if ( is_spacer && w < ed.col_size ) {
					var opacity = 0.5 * Math.round((ed.col_size-w)/ed.col_size*100)/100;
					$spacer_feed.css({
						left: ( axis == 'e' ? 0 : 'auto' ),
						right: ( axis == 'e' ? 'auto' : 0 ),
						backgroundColor: 'rgba(200, 0, 0, ' + opacity + ')'
					});
				}
				if ( $also_resize ) {
					$also_resize.css({
						width: also_w,
						minWidth: also_w,
						maxWidth: also_w
					});
					if ( axis == 'e' ) {
						$also_resize.css('margin-left', also_resize.width - also_w);
					}
					$also_resize.data('resize-col', also_col);
					// Visual feedback for deleting spacer
					if ( also_is_spacer && also_w < ed.col_size ) {
						var opacity = 0.5 * Math.round((ed.col_size-also_w)/ed.col_size*100)/100;
						$spacer_feed.css({
							left: ( axis == 'w' ? 0 : 'auto' ),
							right: ( axis == 'w' ? 'auto' : 0 ),
							backgroundColor: 'rgba(200, 0, 0, ' + opacity + ')'
						});
					}
				}
				$resize.css({
					height: h,
					width: rsz_col*ed.col_size,
					minWidth: rsz_col*ed.col_size,
					maxWidth: rsz_col*ed.col_size,
				});
				
				// Trigger child events
				_.each(child_els, function (child) {
					child.view.trigger('entity:resizing', {row: child.el.row, col: rsz_col, height: child.el.height, width: rsz_col*ed.col_size}, child.view, child.view.model);
				});
				_.each(also_child_els, function (child) {
					child.view.trigger('entity:resizing', {row: child.el.row, col: also_col, height: child.el.height, width: also_col*ed.col_size}, child.view, child.view.model);
				});
				
				// Trigger main event
				view.trigger('entity:wrapper:resizing', {row: me.row, col: rsz_col, height: me.height, width: rsz_col*ed.col_size}, view, view.model);
				if ( also_view ) {
					also_view.trigger('entity:wrapper:resizing', {row: also_resize.row, col: also_col, height: also_resize.height, width: also_col*ed.col_size}, also_view, also_view.model);
				}
			},
			stop: function(e, ui){
				Upfront.Events.trigger("entity:wrapper:pre_resize_stop", view, view.model, ui);
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					$region = $me.closest('.upfront-region'),
					me = ed.get_wrap($me),
					also_resize = ( $also_resize ? ed.get_wrap($also_resize) : false ),
					aff_els = ed.get_affected_els(me, ed.wraps, [], true),
					resize_limit = ed.get_resize_limit(aff_els, ed.containment),
					prev_col = Math.ceil(ui.originalSize.width/ed.col_size),
					rsz_col = $me.data('resize-col'),
					also_col = ( $also_resize ? $also_resize.data('resize-col') : 0 ),
					regions = app.layout.get('regions'),
					region = regions.get_by_name($region.data('name')),
					first_in_row = ( axis == 'w' && me.outer_grid.left == ed.containment.grid.left ),
					last_in_row = ( axis == 'e' && me.outer_grid.right == ed.containment.grid.right )
				;

				// Prevents quick scroll when resizing
				ed.resizing = false;

				$resize_placeholder.remove();
				$resize.remove();

				// Make sure CSS is reset, to fix bug when it keeps all resize CSS for some reason
				$me.css({
					width: '',
					minWidth: '',
					maxWidth: '',
					height: '',
					position: '',
					top: '',
					left: '',
					marginLeft: '',
					marginTop: ''
				});
				if ( $also_resize ) {
					$also_resize.css({
						width: '',
						minWidth: '',
						maxWidth: '',
						height: '',
						position: '',
						top: '',
						left: '',
						marginLeft: '',
						marginTop: ''
					});
				}

				// If this is placed on the side, let's add spacer
				if ( !also_model && ( first_in_row || last_in_row ) && max_col-rsz_col > 0 ) {
					view.add_spacer( ( first_in_row ? 'left' : 'right' ), max_col-rsz_col, max_col );
				}
				else {
					// Else if rsz_col is 0, remove model, otherwise update model
					if ( rsz_col > 0 ) {
						if ( breakpoint && !breakpoint.default ) {
							model.set_breakpoint_property('edited', true, true);
							model.set_breakpoint_property('col', rsz_col);
							_.each(child_els, function (child) {
								child.view.model.set_breakpoint_property('edited', true, true);
								child.view.model.set_breakpoint_property('col', rsz_col);
							});
						}
						else {
							model.replace_class(ed.grid.class+rsz_col);
							_.each(child_els, function (child) {
								child.view.model.replace_class(ed.grid.class+rsz_col);
							});
						}
					}
					else if ( is_spacer ) {
						model.collection.remove(model);
						_.each(child_els, function (child) {
							child.view.model.collection.remove(child.view.model);
						});
					}
					if ( also_model ) {
						// Do the same if also_col is 0, remove model, otherwise update model
						if ( also_col > 0 ) {
							if ( breakpoint && !breakpoint.default ) {
								also_model.set_breakpoint_property('edited', true, true);
								also_model.set_breakpoint_property('col', also_col);
								_.each(also_child_els, function (child) {
									child.view.model.set_breakpoint_property('edited', true, true);
									child.view.model.set_breakpoint_property('col', also_col);
								});
							}
							else {
								also_model.replace_class(ed.grid.class+also_col);
								_.each(also_child_els, function (child) {
									child.view.model.replace_class(ed.grid.class+also_col);
								});
							}
						}
						else if ( also_is_spacer ) {
							also_model.collection.remove(also_model);
							_.each(also_child_els, function (child) {
								child.view.model.collection.remove(child.view.model);
							});
						}
					}
				}

				// Let's normalize
				ed.update_position_data(ed.containment.$el);
				ed.normalize(ed.els, ed.wraps);

				$me.removeData('resize-col');
				if ( $also_resize ) {
					$also_resize.removeData('resize-col');
				}

				// Trigger child events
				_.each(child_els, function (child) {
					child.view.trigger('entity:resize_stop', {row: child.el.row, col: rsz_col, height: child.el.height, width: rsz_col*ed.col_size}, child.view, child.view.model);
				});
				_.each(also_child_els, function (child) {
					child.view.trigger('entity:resize_stop', {row: child.el.row, col: also_col, height: child.el.height, width: also_col*ed.col_size}, child.view, child.view.model);
				});
				
				// Trigger main event
				view.trigger('entity:wrapper:resize_stop', {row: me.row, col: rsz_col, height: me.height, width: rsz_col*ed.col_size}, view, view.model);
				view.trigger('entity:wrapper:resize', {col: rsz_col}, view, view.model);
				if ( also_view ) {
					also_view.trigger('entity:wrapper:resize_stop', {row: also_resize.row, col: also_col, height: also_resize.height, width: rsz_col*ed.col_size}, also_view, also_view.model);
					also_view.trigger('entity:wrapper:resize', {col: also_col}, also_view, also_view.model);
				}
				Upfront.Events.trigger("entity:wrapper:resize_stop", view, view.model, also_view, also_view.model, ui);
				Upfront.Events.trigger("entity:wrapper:resized", view, view.model, also_view, also_view.model);
			}
		});
	},

	get_group_min_col: function (group_view) {
		var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
			ed = Upfront.Behaviors.GridEditor,
			modules = group_view.model.get('modules'),
			wrappers = group_view.model.get('wrappers'),
			col = ( !breakpoint || breakpoint.default ) ? ed.get_class_num(group_view.$el, ed.grid.class) : group_view.$el.data('breakpoint_col'),
			lines = ed.parse_modules_to_lines(modules, wrappers, ( breakpoint ? breakpoint.id : 'desktop' ), col),
			min_col = ed.min_col
		;
		_.each(lines, function (line) {
			var line_min_col = 0;
			_.each(line.wrappers, function (w) {
				if (w.spacer ) line_min_col += 1; // Spacer minimum column is 1
				else line_min_col += ed.min_col; // Element minimum column depend to ed.min_col
			});
			if ( line_min_col > min_col ) min_col = line_min_col;
		});
		return min_col;
	},

	/**
	 * Create draggable
	 *
	 * @param {Object} view
	 * @param {Object} model
	 */
	create_draggable: function (view, model) {
		var ed = Upfront.Behaviors.GridEditor;
		if ( ed.drag_instances[view.cid] ) {
			// Instance already there, run setup again
			ed.drag_instances[view.cid].setup();
		}
		else {
			// Create new instance
			ed.drag_instances[view.cid] = new DragDrop(view, model);
			model.on('remove', function(){
				delete ed.drag_instances[view.cid];
			});
		}
	},

	toggle_draggables: function (enable) {
		$('.upfront-editable_entity.ui-draggable').draggable('option', 'disabled', (!enable));
	},

	/**
	 * Parse modules collection into the correct order by breakpoint
	 */
	parse_modules_to_lines: function (modules, wrappers, breakpoint_id, col) {
		var ed = Upfront.Behaviors.GridEditor,
			all_wrappers = {},
			sorted_wrappers = [],
			lines = [],
			line_col = 0,
			line = 0
		;
		modules.each(function(module, i){
			var wrapper_id = module.get_wrapper_id(),
				wrapper = wrappers.get_by_wrapper_id(wrapper_id),
				wrapper_breakpoint = wrapper ? wrapper.get_property_value_by_name('breakpoint') : false,
				wrapper_breakpoint_data = ( wrapper_breakpoint && breakpoint_id in wrapper_breakpoint ) ? wrapper_breakpoint[breakpoint_id] : {},
				wrapper_class = wrapper ? wrapper.get_property_value_by_name('class') : '',
				wrapper_col = ed.get_class_num(wrapper_class, ed.grid.class),
				is_clear = !!wrapper_class.match(/clr/),
				breakpoint = module.get_property_value_by_name('breakpoint'),
				breakpoint_data = ( breakpoint && breakpoint_id in breakpoint ) ? breakpoint[breakpoint_id] : {},
				default_hide = module.get_property_value_by_name('default_hide'),
				hide = module.get_property_value_by_name('hide'),
				module_class = module.get_property_value_by_name('class'),
				module_col = ed.get_class_num(module_class, ed.grid.class),
				is_spacer = !!module_class.match(/upfront-module-spacer/),
				order = i,
				wrapper_order = i,
				module_obj = {}
			;
			if ( !wrapper ) return;
			if ( breakpoint_id != 'desktop' ) {
				hide = ( "hide" in breakpoint_data ) ? breakpoint_data.hide : default_hide;
				module_col = ( "col" in breakpoint_data ) ? breakpoint_data.col : module_col;
				order = ( "order" in breakpoint_data ) ? breakpoint_data.order * 10000 + order : order;
				wrapper_col = ( "col" in wrapper_breakpoint_data ) ? wrapper_breakpoint_data.col : wrapper_col;
				wrapper_order = ( "order" in wrapper_breakpoint_data ) ? wrapper_breakpoint_data.order * 10000 + wrapper_order : wrapper_order;
				is_clear = ( "clear" in wrapper_breakpoint_data ) ? wrapper_breakpoint_data.clear : is_clear;
			}
			if ( hide === false ) hide = default_hide;
			if ( hide ) return;
			module_obj = {
				model: module,
				col: module_col,
				order: order,
				spacer: is_spacer
			};
			if ( module_col > wrapper_col ) wrapper_col = module_col;
			if ( wrapper_col > col ) wrapper_col = col;
			if ( wrapper_id in all_wrappers ) {
				all_wrappers[wrapper_id].modules.push(module_obj);
				all_wrappers[wrapper_id].col = wrapper_col;
			}
			else {
				all_wrappers[wrapper_id] = {
					model: wrapper,
					modules: [module_obj],
					order: wrapper_order,
					col: wrapper_col,
					clear: is_clear,
					spacer: is_spacer
				};
			}
		});
		sorted_wrappers = _.sortBy(all_wrappers, function(wrapper, i){
			return wrapper.order;
		});
		_.each(sorted_wrappers, function(wrapper, i){
			if ( ( i > 0 && wrapper.clear ) || ( line_col > 0 && line_col + wrapper.col > col ) ) { // this is new line
				lines[line].col = line_col;
				line++;
				line_col = 0;
			}
			if ( _.isUndefined(lines[line]) ) {
				lines[line] = {
					wrappers: [],
					col: 0
				};
			}
			line_col += wrapper.col;
			lines[line].wrappers.push(wrapper);
			lines[line].col = line_col;
		});
		return lines;
	},

	/**
	 * Call this to normalize module placement on remove
	 */
	normalize_module_remove: function (view, module, modules, wrapper, wrappers) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			index = modules.indexOf(module),
			breakpoints = Upfront.Views.breakpoints_storage.get_breakpoints().get_enabled()
		;
		_.each(breakpoints, function(each){
			var breakpoint = each.toJSON(),
				lines = ed.parse_modules_to_lines(modules, wrappers, breakpoint.id, breakpoint.columns),
				split_prev = false,
				split_next = false,
				all_wrappers = [],
				spacer_wrappers = [],
				line, my_wrapper, prev_wrapper, next_wrapper,
				prev_wrapper_class, next_wrapper_class
			;
			_.each(lines, function (each) {
				if ( line ) return;
				prev_wrapper = false;
				next_wrapper = false;
				_.each(each.wrappers, function (w) {
					if ( my_wrapper && !next_wrapper ) next_wrapper = w;
					_.each(w.modules, function (m) {
						if ( module == m.model ) {
							my_wrapper = w;
							line = each;
						}
					});
					if ( !my_wrapper ) prev_wrapper = w;
				});
			});
			if ( !line ) return;
			if ( next_wrapper ) {
				next_wrapper_class = next_wrapper.model.get_property_value_by_name('class');
				if ( !next_wrapper_class.match(/clr/g) ){
					split_next = true;
				}
			}
			if ( prev_wrapper ) {
				prev_wrapper_class = prev_wrapper.model.get_property_value_by_name('class');
				if ( prev_wrapper_class.match(/clr/g) && !split_next ) {
					split_prev = true;
				}
			}
			_.each(line.wrappers, function (w) {
				if ( w == my_wrapper ) return;
				all_wrappers.push(w);
				if ( w.spacer ) spacer_wrappers.push(w);
			});
			if ( all_wrappers.length >= 2 ) {
				split_next = false;
			}

			if ( my_wrapper.modules.length == 1 ) {
				var total_col = my_wrapper.col,
					new_col = 0,
					remaining_col = 0
				;
				_.each(all_wrappers, function (each_wrapper) {
					if ( _.contains(spacer_wrappers, each_wrapper) ) return;
					total_col += each_wrapper.col;
				});
				if ( all_wrappers.length == spacer_wrappers.length ) {
					// All wrappers is spacers, just remove them as we don't need it anymore
					_.each(all_wrappers, function (each_wrapper, id) {
						_.each(each_wrapper.modules, function (each_module) {
							modules.remove(each_module.model);
						});
						wrappers.remove(each_wrapper.model);
					});
				}
				else {
					// Otherwise split columns evenly and ignore spacer columns
					new_col = Math.floor(total_col/(all_wrappers.length-spacer_wrappers.length));
					remaining_col = total_col - ((all_wrappers.length-spacer_wrappers.length) * new_col);
					// Apply the new col
					_.each(all_wrappers, function (each_wrapper, id) {
						if ( _.contains(spacer_wrappers, each_wrapper) ) return;
						var each_wrapper_class = each_wrapper.model.get_property_value_by_name('class'),
							each_wrapper_breakpoint = each_wrapper.model.get_property_value_by_name('breakpoint'),
							each_wrapper_breakpoint_data = ( each_wrapper_breakpoint && breakpoint.id in each_wrapper_breakpoint ) ? each_wrapper_breakpoint[breakpoint.id] : {},
							apply_col =  new_col
						;
						// Distribute remaining_col
						if ( remaining_col > 0 ) {
							apply_col += 1;
							remaining_col -= 1;
						}
						if ( breakpoint.default ) {
							each_wrapper.model.replace_class(
								ed.grid.class + apply_col +
								( id == 0 && !each_wrapper_class.match(/clr/g) ? ' clr' : '' )
							);
							_.each(each_wrapper.modules, function (each_module) {
								each_module.model.replace_class(ed.grid.class + apply_col);
							});
						}
						else {
							each_wrapper_breakpoint_data.col = apply_col;
							if ( id == 0 && !each_wrapper_breakpoint_data.clear ) {
								each_wrapper_breakpoint_data.clear = true;
							}
							each_wrapper.model.set_property('breakpoint', Upfront.Util.clone(each_wrapper_breakpoint));
							_.each(each_wrapper.modules, function (each_module) {
								var each_module_breakpoint = each_module.model.get_property_value_by_name('breakpoint'),
									each_module_breakpoint_data = ( each_module_breakpoint && breakpoint.id in each_module_breakpoint ) ? each_module_breakpoint[breakpoint.id] : {}
								;
								each_module_breakpoint_data.col = apply_col;
								each_module.model.set_property('breakpoint', Upfront.Util.clone(each_module_breakpoint));
							});
						}
					});
				}
			}
			if ( !breakpoint.default ) return;
			if ( split_prev || split_next ){
				var current_wrapper = false;
				_.each(( split_prev ? prev_wrapper.modules : next_wrapper.modules ), function (each_module, id) {
					var each_module_class = each_module.model.get_property_value_by_name('class'),
						each_module_col = ed.get_class_num(each_module_class, ed.grid.class),
						each_module_view = Upfront.data.module_views[each_module.model.cid],
						each_wrapper = split_prev ? prev_wrapper : next_wrapper,
						each_wrapper_view = Upfront.data.wrapper_views[each_wrapper.model.cid],
						current_wrapper_view = current_wrapper ? Upfront.data.wrapper_views[current_wrapper.cid] : each_wrapper_view
					;
					if ( id > 0 ){
						var wrapper_id = Upfront.Util.get_unique_id("wrapper");
							wrap_model = new Upfront.Models.Wrapper({
								"name": "",
								"properties": [
									{"name": "wrapper_id", "value": wrapper_id},
									{"name": "class", "value": ed.grid.class+(each_module_col) + ' clr'}
								]
							}),
							wrap_view = new Upfront.Views.Wrapper({model: wrap_model})
						;
						wrappers.add(wrap_model);
						wrap_view.parent_view = each_module_view.parent_view;
						wrap_view.render();
						wrap_view.$el.append(each_module_view.$el);
						current_wrapper_view.$el.after(wrap_view.$el);
						Upfront.data.wrapper_views[wrap_model.cid] = wrap_view;
						each_module.model.set_property('wrapper_id', wrapper_id, true);
						current_wrapper = wrap_model;
					}
				});
			}
		});
	},

	/**
	 * Call this to adapt module to the breakpoint
	 */
	adapt_to_breakpoint: function (modules, wrappers, breakpoint_id, parent_col, silent) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			line_col = 0,
			line = -1,
			lines = [],
			modules_data = [],
			set_wrappers_col = {}, // keep track of set wrappers col
			silent = ( silent === true ) ? true : false,
			wrapper_index = 0
		;
		modules.each(function(module){
			var data = module.get_property_value_by_name('breakpoint'),
				module_class = module.get_property_value_by_name('class'),
				module_default_hide = module.get_property_value_by_name('default_hide'),
				module_hide = ( data[breakpoint_id] && "hide" in data[breakpoint_id] ) ? data[breakpoint_id].hide : module_default_hide,
				module_col = ed.get_class_num(module_class, ed.grid.class),
				wrapper = wrappers.get_by_wrapper_id(module.get_wrapper_id()),
				wrapper_data = wrapper && wrapper.get_property_value_by_name('breakpoint'),
				wrapper_class = wrapper && wrapper.get_property_value_by_name('class'),
				is_clear = wrapper && ( !!wrapper_class.match(/clr/) || line_col === 0 );
			if ( !wrapper )	return;
			if ( module_hide ) return;
			line_col += module_col; // Elements in a line have to fit the whole region now
			if ( line_col > parent_col ){
				is_clear = true;
			}
			if ( is_clear ){
				line_col = module_col; // Elements in a line have to fit the whole region now
				line++;
				lines[line] = [];
			}
			module_col = module_col > parent_col ? parent_col : module_col;
			lines[line].push({
				clear: is_clear,
				spacer: !!module_class.match(/upfront-module-spacer/),
				module: module,
				col: module_col,
				left: 0, // Elements in a line have to fit the whole region now
				wrapper: wrapper,
				breakpoint: Upfront.Util.clone( data || {} ),
				wrapper_breakpoint: Upfront.Util.clone( wrapper_data || {} )
			});
		});
		_.each(lines, function(line_modules){
			var line_col = _.map(line_modules, function(data){ 
					return data.col; // Elements in a line have to fit the whole region now
				}).reduce(function(sum, col){ 
					return sum + col;
				}),
				spacer_col = _.map(line_modules, function(data){
					return data.spacer ? data.col : 0;
				}).reduce(function(sum, col){
					return sum + col;
				})
			;
			_.each(line_modules, function(data, index){
				var new_col = 0,
					wrapper_col = 0;
				if ( ! _.isObject(data.breakpoint[breakpoint_id]) ) {
					data.breakpoint[breakpoint_id] = { edited: false };
				}
				if ( !_.isObject(data.wrapper_breakpoint[breakpoint_id]) ) {
					data.wrapper_breakpoint[breakpoint_id] = { edited: false };
				}
				if ( !data.breakpoint[breakpoint_id].edited ){
					// Elements in a line have to fit evenly the whole region now
					new_col = (line_col === parent_col) ? data.col : parent_col / line_modules.length;
					data.breakpoint[breakpoint_id].left = 0; 
					data.breakpoint[breakpoint_id].col = new_col;
					data.breakpoint[breakpoint_id].order = index;
					data.module.set_property('breakpoint', data.breakpoint, silent);
				}
				else {
					new_col = typeof data.breakpoint[breakpoint_id].col == 'number' ? data.breakpoint[breakpoint_id].col : data.col;
				}
				if ( !_.isUndefined(set_wrappers_col[data.wrapper.get_wrapper_id()]) ) {
					wrapper_col = set_wrappers_col[data.wrapper.get_wrapper_id()];
				}
				else {
					wrapper_index++;
				}
				if ( wrapper_col < new_col ) {
					wrapper_col = new_col;
					data.wrapper_breakpoint[breakpoint_id].col = wrapper_col;
					set_wrappers_col[data.wrapper.get_wrapper_id()] = wrapper_col;
					if ( !data.wrapper_breakpoint[breakpoint_id].edited ) {
						data.wrapper_breakpoint[breakpoint_id].order = wrapper_index-1;
						data.wrapper_breakpoint[breakpoint_id].clear = ( index === 0 );
					}
					data.wrapper.set_property('breakpoint', data.wrapper_breakpoint, silent);
				}
			});
		});
	},

	/**
	 * Call this to adapt region to the breakpoint
	 */
	adapt_region_to_breakpoint: function (regions, breakpoint_id, col, silent) {
		var app = Upfront.Application,
			ed = Upfront.Behaviors.GridEditor,
			default_breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_default().toJSON();
			line_col = 0,
			silent = ( silent === true ) ? true : false;
		regions.each(function(region){
			var data = Upfront.Util.clone( region.get_property_value_by_name('breakpoint') || {} ),
				sub = region.get('sub');
			if ( !_.isObject(data[breakpoint_id]) )
				data[breakpoint_id] = { edited: false };
			if ( !data[breakpoint_id].edited ){
				if ( region.is_main() || ( !sub || sub.match(/^(left|right)$/) )  ){ 
					// Sidebar/main region, let's make the column to full width on responsive
					data[breakpoint_id].col = default_breakpoint.columns;
				}
			}
			region.set_property('breakpoint', data, silent);
		});
	},


	/**
	 * Create region resizable
	 *
	 * @param {Object} view
	 * @param {Object} model
	 */
	create_region_resizable: function(view, model){
		var app = this,
			ed = Upfront.Behaviors.GridEditor,
			$me = view.$el,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$layout = $main.find('.upfront-layout'),
			collection = model.collection,
			index = collection.indexOf(model),
			total = collection.size()-1, // total minus shadow region
			sub = model.get('sub'),
			container = model.get('container'),
			directions, handles, axis,
			fixed_pos = {},
			get_fixed_pos = function () {
				var pos = {
						top: model.get_property_value_by_name('top'),
						left: model.get_property_value_by_name('left'),
						bottom: model.get_property_value_by_name('bottom'),
						right: model.get_property_value_by_name('right'),
						width: model.get_property_value_by_name('width'),
						height: model.get_property_value_by_name('height')
					};
				pos.is_top = ( typeof pos.top == 'number' );
				pos.is_left = ( typeof pos.left == 'number' );
				pos.is_bottom = ( typeof pos.bottom == 'number' );
				pos.is_right = ( typeof pos.right == 'number' );
				return pos;
			}
		;
		if ( $me.data('ui-resizable') )
			return false;
		if ( !model.is_main() && sub && !sub.match(/^(fixed|left|right)$/) )
			return;
		if ( model.is_main() ){
			directions = ['s'];
			handles = { s: '.upfront-region-resize-handle-s' };
		}
		else if ( sub == 'left' ){
			directions = ['e', 's'];
			handles = { e: '.upfront-region-resize-handle-e', s: '.upfront-region-resize-handle-s' };
		}
		else if ( sub == 'right' ) {
			directions = ['w', 's'];
			handles = { w: '.upfront-region-resize-handle-w', s: '.upfront-region-resize-handle-s' };
		}
		else if ( sub == 'fixed' ) {
			fixed_pos = get_fixed_pos();
			if ( ( fixed_pos.is_top && fixed_pos.is_left ) || ( fixed_pos.is_bottom && fixed_pos.is_right ) ){
				directions = ['nw', 'se'];
				handles = { nw: '.upfront-region-resize-handle-nw', se: '.upfront-region-resize-handle-se' };
			}
			else{
				directions = ['ne', 'sw'];
				handles = { ne: '.upfront-region-resize-handle-ne', sw: '.upfront-region-resize-handle-sw' };
			}
		}
		_.each(directions, function(direction){
			var icon = ( direction.match(/^(e|w|s|n)$/) ) ? 'upfront-icon-control-region upfront-icon-control-region-resize upfront-icon-control-region-resize-' + direction : 'upfront-icon-control upfront-icon-control-resize upfront-icon-control-resize-' + direction;
			$me.append('<div class="' + icon + ' upfront-region-resize-handle upfront-region-resize-handle-' + direction + ' ui-resizable-handle ui-resizable-' + direction + '"></div>');
		});
		$me.resizable({
			containment: "document",
			//handles: "n, e, s, w",
			handles: handles,
			helper: "region-resizable-helper",
			disabled: true,
			zIndex: 9999999,
			start: function(e, ui){
				var col = ed.get_class_num($me, ed.grid.class),
					data = $(this).data('ui-resizable'),
					$helper = ui.helper;
				axis = data.axis ? data.axis : 'se';

				// Prevents quick scroll when resizing
				ed.resizing = window.scrollY;

				$(this).resizable('option', 'minWidth', ed.col_size*3);
				if ( sub != 'fixed' ){
					$(this).resizable('option', 'maxWidth', ed.col_size*10);
				}
				else {
					$(this).resizable('option', 'minHeight', ed.baseline*3);
					$me.css('position', '');
					view.update_region_position();
					fixed_pos = get_fixed_pos();
					// Hack into resizable instance
					var me_pos = $me.position();
					data.originalPosition.left = me_pos.left;
					data.originalPosition.top = me_pos.top;
					data.originalSize.width = fixed_pos.width;
					data.originalSize.height = fixed_pos.height;
					data._updateCache({
						left: me_pos.left,
						top: me_pos.top
					});
					$helper.css({
						marginLeft: 0,
						marginTop: 0,
						left: me_pos.left,
						top: me_pos.top,
						position: 'fixed'
					});
				}
				Upfront.Events.trigger("entity:region:resize_start", view, view.model);
			},
			resize: function(e, ui){
				var $helper = ui.helper;
				if ( sub != 'fixed' ){
					if ( axis == 's' ) {
						var current_row = Math.abs(Math.ceil(ui.size.height/ed.baseline)),
							h = Math.round(current_row*ed.baseline);
						$helper.css({
							height: h,
							width: ui.originalSize.width,
							minWidth: ui.originalSize.width,
							maxWidth: ui.originalSize.width
						});
						view.update_size_hint(ui.originalSize.width, h);
						$me.data('resize-row', current_row);
					}
					else {
						var col = ed.get_class_num($me, ed.grid.class),
							$prev = $me.prevAll('.upfront-region:first'),
							$next = $me.nextAll('.upfront-region:first'),
							prev_col = $prev.size() > 0 ? ed.get_class_num($prev, ed.grid.class) : 0,
							next_col = $next.size() > 0 ? ed.get_class_num($next, ed.grid.class) : 0,
							max_col = col + ( next_col > prev_col ? next_col : prev_col ),
							current_col = Math.abs(Math.ceil(ui.size.width/ed.col_size)),
							rsz_col = ( current_col > max_col ? max_col : current_col ),
							w = Math.round(rsz_col*ed.col_size)
						;
						$helper.css({
							height: ui.originalSize.height,
							width: w,
							minWidth: w,
							maxWidth: w,
							marginLeft: axis == 'w' ? ui.size.width-w : 0
						});
						view.update_size_hint(w, ui.originalSize.height);
						$me.data('resize-col', rsz_col);
					}
				}
				else {
					var offset = $me.offset(),
						main_offset = $main.offset(),
						height = $me.height(),
						width = $me.width(),
						max_height = max_width = false,
						rsz_width, rsz_height;
					if ( fixed_pos.is_top )
						max_height = axis == 'nw' || axis == 'ne' ? fixed_pos.top + height : false;
					if ( !fixed_pos.is_top && fixed_pos.is_bottom )
						max_height = axis == 'se' || axis == 'sw' ? fixed_pos.bottom + height : false;
					if ( fixed_pos.is_left )
						max_width = axis == 'nw' || axis == 'sw' ? fixed_pos.left + width : false;
					if ( !fixed_pos.is_left && fixed_pos.is_right )
						max_width = axis == 'se' || axis == 'ne' ? fixed_pos.right + width : false;
					rsz_height = Math.round( max_height && ui.size.height > max_height ? max_height : ui.size.height );
					rsz_width = Math.round( max_width && ui.size.width > max_width ? max_width : ui.size.width );
					$helper.css({
						height: rsz_height,
						width: rsz_width
					});
					view.update_size_hint(rsz_width, rsz_height, $helper);
					$me.data('resize-height', rsz_height);
					$me.data('resize-width', rsz_width);
				}
			},
			stop: function(e, ui){
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					model_breakpoint, breakpoint_data;
				// Prevents quick scroll when resizing
				ed.resizing = false;

				// Make sure CSS is reset, to fix bug when it keeps all resize CSS for some reason
				$me.css({
					width: '',
					minWidth: '',
					maxWidth: '',
					height: '',
					position: '',
					top: '',
					left: '',
					right: '',
					bottom: ''
				});
				if ( sub != 'fixed' ){
					var rsz_col = $me.data('resize-col'),
						rsz_row = $me.data('resize-row');
					if ( !breakpoint || breakpoint.default ){
						if ( rsz_col )
							model.set_property('col', rsz_col);
						if ( rsz_row )
							model.set_property('row', rsz_row);
					}
					else {
						if ( rsz_col || rsz_row ){
							model_breakpoint = Upfront.Util.clone(model.get_property_value_by_name('breakpoint') || {});
							if ( !_.isObject(model_breakpoint[breakpoint.id]) )
								model_breakpoint[breakpoint.id] = {};
							breakpoint_data = model_breakpoint[breakpoint.id];
							breakpoint_data.edited = true;
							if ( rsz_col )
								breakpoint_data.col = rsz_col;
							if ( rsz_row )
								breakpoint_data.row = rsz_row;
							model.set_property('breakpoint', model_breakpoint);
						}
					}
					$me.removeData('resize-col');
					$me.removeData('resize-row');
				}
				else {
					var rsz_width = $me.data('resize-width'),
						rsz_height = $me.data('resize-height'),
						rsz_col = Math.floor(rsz_width/ed.col_size);
					if ( ( axis == 'nw' || axis == 'ne' ) && fixed_pos.is_top )
						model.set_property('top', fixed_pos.top + fixed_pos.height - rsz_height);
					if ( ( axis == 'se' || axis == 'sw' ) && !fixed_pos.is_top && fixed_pos.is_bottom )
						model.set_property('bottom', fixed_pos.bottom + fixed_pos.height - rsz_height);
					if ( ( axis == 'nw' || axis == 'sw') && fixed_pos.is_left )
						model.set_property('left', fixed_pos.left + fixed_pos.width - rsz_width);
					if ( ( axis == 'se' || axis == 'ne' ) && !fixed_pos.is_left && fixed_pos.is_right )
						model.set_property('right', fixed_pos.right + fixed_pos.width - rsz_width);
					model.set_property('width', rsz_width, true);
					model.set_property('height', rsz_height, true);
					model.set_property('col', rsz_col, true);
					model.get('properties').trigger('change');
					$me.removeData('resize-width');
					$me.removeData('resize-height');
				}
				Upfront.Events.trigger("entity:region:resize_stop", view, view.model);
			}
		});
	},

	create_region_draggable: function(view, model) {
		if ( !model.get("container") || model.get("container") == model.get("name") )
			return;
		var app = this,
			ed = Upfront.Behaviors.GridEditor,
			$me = view.$el,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$layout = $main.find('.upfront-layout'),
			container_view = view.parent_view.get_container_view(model),
			sub = model.get('sub'),
			fixed_pos = {},
			restrict = false,
			get_fixed_pos = function () {
				var pos = {
						top: model.get_property_value_by_name('top'),
						left: model.get_property_value_by_name('left'),
						bottom: model.get_property_value_by_name('bottom'),
						right: model.get_property_value_by_name('right'),
						width: model.get_property_value_by_name('width'),
						height: model.get_property_value_by_name('height')
					};
				pos.is_top = ( typeof pos.top == 'number' );
				pos.is_left = ( typeof pos.left == 'number' );
				pos.is_bottom = ( typeof pos.bottom == 'number' );
				pos.is_right = ( typeof pos.right == 'number' );
				return pos;
			},
			move = {},
			position = ''
		;
		if ( sub != 'fixed' )
			return false;
		if ( $me.data('ui-draggable') )
			return false;

		$me.draggable({
			disabled: true,
			revert: true,
			revertDuration: 0,
			zIndex: 100,
			helper: 'clone',
			delay: 15,
			scroll: false,
			iframeFix: true,
			start: function (e, ui) {
				var $helper = ui.helper,
					width = $me.width(),
					height = $me.height();
				$helper.css('width', width);
				$helper.css('height', height);
				$me.hide();
				fixed_pos = get_fixed_pos();
				restrict = model.get('restrict_to_container');
				position = $helper.css('position');
			},
			drag: function (e, ui) {
				var $helper = ui.helper,
					main_offset = $main.offset(),
					main_width = $main.width(),
					container_offset = container_view.$el.offset(),
					container_height = container_view.$el.height(),
					container_bottom = container_offset.top + container_height,
					scroll_top = $(window).scrollTop(),
					win_height = $(window).height(),
					scroll_bottom = scroll_top + win_height,
					main_x = ( main_width / 2 ) + main_offset.left,
					main_y = ( position == 'fixed' || container_height > win_height ) ? win_height / 2 : container_height / 2,
					left = ui.position.left,
					top = ui.position.top,
					width = $helper.width(),
					height = $helper.height(),
					x = (width/2) + left,
					y = (height/2) + top,
					limit_top, limit_left, helper_top, helper_left;
				// reset move variable
				move = {};
				if ( position == 'absolute' && container_height > win_height && container_bottom <= scroll_bottom )
					main_y = container_height - ( win_height / 2 );
				if ( y <= main_y ){
					if ( position == 'fixed' || container_height < win_height || container_bottom >= scroll_bottom )
						limit_top = 0;
					else
						limit_top = container_height - win_height;
					helper_top = top < limit_top ? limit_top : top;
					move.top = helper_top - limit_top;
				}
				else {
					if ( position == 'fixed' || ( container_height > win_height && container_offset.top >= scroll_top ) )
						limit_top = win_height - height;
					else
						limit_top = container_height - height;
					helper_top = top > limit_top ? limit_top : top;
					move.bottom = limit_top - helper_top;
				}
				if ( x <= main_x ){
					limit_left = main_offset.left;
					helper_left = left < limit_left ? limit_left : left;
					move.left = helper_left - limit_left;
				}
				else {
					limit_left = main_width - width + main_offset.left;
					helper_left = left > limit_left ? limit_left : left;
					move.right = limit_left - helper_left;
				}
				view.update_position_hint(move, $helper);
				ui.position.top = helper_top;
				ui.position.left = helper_left;
			},
			stop: function (e, ui) {
				$me.show();
				if ( typeof move.top == 'number' ){
					model.set_property('top', move.top, true);
					model.remove_property('bottom', true);
				}
				else if ( typeof move.bottom == 'number' ){
					model.set_property('bottom', move.bottom, true);
					model.remove_property('top', true);
				}
				if ( typeof move.left == 'number' ){
					model.set_property('left', move.left, true);
					model.remove_property('right', true);
				}
				else if ( typeof move.right == 'number' ){
					model.set_property('right', move.right, true);
					model.remove_property('left', true);
				}
				model.get('properties').trigger('change');
			}
		});
	},


	/**
	 * Create region resizable
	 *
	 * @param {Object} view
	 * @param {Object} model
	 */
	create_region_container_resizable: function(view, model){
		var app = this,
			ed = Upfront.Behaviors.GridEditor,
			$me = view.$el,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			sub = model.get('sub'),
			direction = 's',
			handles = {},
			$layout = $main.find('.upfront-layout')
		;
		if ( $me.data('ui-resizable') )
			return false;
		if ( !model.is_main() && sub == 'bottom' )
			direction = 'n';
		$me.append('<div class="upfront-icon-control-region upfront-icon-control-region-resize upfront-icon-control-region-resize-' + direction + ' upfront-region-resize-handle upfront-region-resize-handle-' + direction + ' ui-resizable-handle ui-resizable-' + direction + '"></div>');
		handles[direction] = '.upfront-region-resize-handle-' + direction;
		$me.resizable({
			containment: "document",
			//handles: "n, e, s, w",
			handles: handles,
			helper: "region-resizable-helper",
			disabled: true,
			zIndex: 9999999,
			start: function(e, ui){
				Upfront.Events.trigger("entity:region_container:resize_start", view, view.model);
				// Disable region changing
				Upfront.Events.trigger('command:region:edit_toggle', false);
				// Prevents quick scroll when resizing
				//ed.resizing = window.scrollY;
				// Preparing for auto scrolling on resize event
				ed._prepare_resize_auto_scroll(ui, $layout.find('> .upfront-regions'));
			},
			resize: function(e, ui){
				var $helper = ui.helper,
					h = ( (ui.size.height > 15 ? ui.size.height : 0) || ui.originalSize.height ),
					rsz_row = Math.ceil(h/ed.baseline),
					data = $(this).data('ui-resizable')
				;
				$helper.css({
					width: $me.width(),
					height: rsz_row * ed.baseline
				});
				$me.data('resize-row', rsz_row);

				var region_view = Upfront.data.region_views[model.cid];
				if ( region_view )
					region_view.update_size_hint(region_view.$el.width(), rsz_row * ed.baseline);
				_.each(view.sub_model, function (sub_model) {
					var sub_view = Upfront.data.region_views[sub_model.cid];
					if ( sub_view && ( sub_view.$el.hasClass('upfront-region-side-left') || sub_view.$el.hasClass('upfront-region-side-right')) )
						sub_view.update_size_hint(sub_view.$el.width(), rsz_row * ed.baseline);
				});

				// Auto scrolling when it hits bottom
				ed._start_resize_auto_scroll(e, ui, h, data);
			},
			stop: function(e, ui){
				var breakpoint = Upfront.Settings.LayoutEditor.CurrentBreakpoint,
					rsz_row = $me.data('resize-row'),
					model_breakpoint, breakpoint_data;

				// Make sure CSS is reset, to fix bug when it keeps all resize CSS for some reason
				$me.css({
					width: '',
					minHeight: '',
					height: '',
					maxHeight: '',
					position: '',
					top: '',
					left: ''
				});

				// Make sure auto scrolling is cleared
				ed._clear_resize_auto_scroll();

				if ( !breakpoint || breakpoint.default ){
					model.set_property('row', rsz_row);
				}
				else {
					model_breakpoint = Upfront.Util.clone(model.get_property_value_by_name('breakpoint') || {});
					if ( !_.isObject(model_breakpoint[breakpoint.id]) )
						model_breakpoint[breakpoint.id] = {};
					breakpoint_data = model_breakpoint[breakpoint.id];
					breakpoint_data.edited = true;
					breakpoint_data.row = rsz_row;
					model.set_property('breakpoint', model_breakpoint);
				}

				$me.removeData('resize-row');

				Upfront.Events.trigger("entity:region_container:resize_stop", view, view.model);
				// Re-enable region changing
				Upfront.Events.trigger('command:region:edit_toggle', true);


				// Prevents quick scroll when resizing
				ed.resizing = false;
			}
		});
	},

	/**
	 * Auto scrolling when hit bottom
	 */
	_auto_scroll_t: false,
	_auto_scroll_data: {},
	_auto_scroll_step: 3,
	_auto_scroll_timeout: 100,

	/**
	 * Preparing data for auto scroll
	 */
	_prepare_resize_auto_scroll: function(ui, $parent){
		var document_height = $(document).height(),
			$scroller = $('<div class="upfront-auto-scroller"></div>');
		$scroller.css({
			width: 1,
			height: 0,
			visibility: 'hidden'
		}).appendTo( $parent ? $parent : 'body' );
		this._auto_scroll_data = {
			document_height: document_height,
			position_top: ui.originalPosition.top,
			position_height: ui.originalSize.height,
			position_rest: document_height - ( ui.originalPosition.top + ui.originalSize.height ),
			$scroller: $scroller
		};
	},

	/**
	 * Calling the auto scrolling on resize event, need direct access to resizable object
	 */
	_start_resize_auto_scroll: function (e, ui, height, data) {
		var me = this,
			window_height = $(window).height(),
			mouse_offset = Math.abs( window_height - e.clientY ),
			added_height = height - this._auto_scroll_data.position_height,
			added_scroll = added_height - this._auto_scroll_data.position_rest,
			auto_height = 0,
			step = this._auto_scroll_step * this.baseline,
			$helper = ui.helper;
		clearTimeout(this._auto_scroll_t);
		//if ( added_scroll > 0 )
		//	this._auto_scroll_data.$scroller.height(added_scroll);
		if ( mouse_offset > 50 )
			return;
		this._auto_scroll_t = setTimeout(function(){
			auto_height += step;
			if ( added_scroll + auto_height > 0 )
				me._auto_scroll_data.$scroller.height(added_scroll + auto_height + mouse_offset);
			data.size.height = height + auto_height;
			data.parentData.height = $(document).height();
			$helper.css('height', data.size.height);
			$(window).scrollTop( $(window).scrollTop() + step );
			data._trigger('resize', e, ui);
		}, this._auto_scroll_timeout);
	},

	_clear_resize_auto_scroll: function () {
		this._auto_scroll_data.$scroller.remove();
		clearTimeout(this._auto_scroll_t);
	},

	/**
	 * Toggle region resizable
	 *
	 */
	toggle_region_resizable: function(enable){
		var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$regions;
		if ( enable ) {
			if ( $main.hasClass('upfront-region-fixed-editing') )
				$regions = $('.upfront-region-side-fixed');
			else
				$regions = $('.upfront-region-center, .upfront-region-side-left, .upfront-region-side-right, .upfront-region-container-wide, .upfront-region-container-clip, .upfront-region-sub-container');
			$regions.each(function(){
				if ( $(this).data('ui-resizable') )
					$(this).resizable('option', 'disabled', false);
			});
		}
		else {
			$('.upfront-region, .upfront-region-container').each(function(){
				if ( $(this).data('ui-resizable') )
					$(this).resizable('option', 'disabled', true);
			});
		}
	},

	/**
	 * Toggle region draggable
	 *
	 */
	toggle_region_draggable: function(enable){
		var $main = $(Upfront.Settings.LayoutEditor.Selectors.main),
			$regions;
		if ( enable ) {
			if ( $main.hasClass('upfront-region-fixed-editing') )
				$regions = $('.upfront-region-side-fixed');
			else
				$regions = $('.upfront-region-side-left, .upfront-region-side-right, .upfront-region-container-wide, .upfront-region-container-clip');
			$regions.each(function(){
				if ( $(this).data('ui-draggable') )
					$(this).draggable('option', 'disabled', false);
			});
		}
		else {
			$('.upfront-region, .upfront-region-container').each(function(){
				if ( $(this).data('ui-draggable') )
					$(this).draggable('option', 'disabled', true);
			});
		}
	},

	/**
	 * Edit structure/grid
	 */
	edit_structure: function () {
		var ed = Upfront.Behaviors.GridEditor,
			app = Upfront.Application,
			grid = Upfront.Settings.LayoutEditor.Grid,
			$grid_wrap = $('<div class="upfront-edit-grid-wrap clearfix" />'),
			$recommended = $('<div class="upfront-edit-grid upfront-edit-grid-recommended" />'),
			$custom = $('<div class="upfront-edit-grid upfront-edit-grid-custom" />'),
			$color_wrap = $('<div class="upfront-edit-page-color" />'),
			$grid_width = $('<div class="upfront-grid-width-preview">Grid width: <span class="upfront-grid-width" /></div>'),
			$grid_width2 = $('<div class="upfront-grid-width-preview">( Grid width: <span class="upfront-grid-width" /> )</div>'),
			is_grid_custom = ( grid.column_width != grid.column_widths[grid.size_name] || grid.type_padding != grid.type_paddings[grid.size_name] || grid.baseline != grid.baselines[grid.size_name] || !(/^(0|5|10|15)$/.test(grid.column_padding)) ),
			update_grid_data = function() {
				var custom = fields.grid.get_value() == 'custom',
					new_grid = {
						column_width: custom ? fields.custom_width.get_value() : grid.column_widths[grid.size_name],
						column_padding: custom ? fields.custom_padding.get_value() : fields.recommended_padding.get_value(),
						baseline: custom ? fields.custom_baseline.get_value() : grid.baselines[grid.size_name],
						type_padding: custom ? fields.custom_type_padding.get_value() : grid.type_paddings[grid.size_name]
					},
					width = new_grid.column_width * grid.size;
				$grid_width.find('.upfront-grid-width').text(width + 'px');
				$grid_width2.find('.upfront-grid-width').text(width + 'px');
				ed.update_grid(new_grid);
			},
			togglegrid = new Upfront.Views.Editor.Command_ToggleGrid(),
			fields = {
				structure: new Upfront.Views.Editor.Field.Radios({
					label: Upfront.Settings.l10n.global.behaviors.structure,
					layout: "vertical",
					default_value: app.layout.get('layout_slug') || "blank",
					icon_class: 'upfront-structure-field-icon',
					values: [
						{label: "", value: "blank", icon: "blank"},
						{label: "", value: "wide", icon: "wide-no-sidebar"},
						{label: "", value: "wide-right-sidebar", icon: "wide-right-sidebar"},
						{label: "", value: "wide-left-sidebar", icon: "wide-left-sidebar"},
						{label: "", value: "clip", icon: "clip-no-sidebar"},
						{label: "", value: "clip-right-sidebar", icon: "clip-right-sidebar"},
						{label: "", value: "clip-left-sidebar", icon: "clip-left-sidebar"},
						{label: "", value: "full", icon: "full"},
						{label: "", value: "full-extended", icon: "full-extended"},
					],
					change: function(){
						if ( Upfront.themeExporter.currentTheme === 'upfront' ) {
							var structure = fields.structure.get_value(),
								layout_slug = app.layout.get('layout_slug');
							if ( (layout_slug && layout_slug != structure) || ( !layout_slug && structure != 'blank' ) ){
								app.layout.set('layout_slug', structure);
								if ( Upfront.Application.get_gridstate() )
									togglegrid.on_click();
								app.create_layout(_upfront_post_data.layout, {layout_slug: structure});
								Upfront.Events.once("layout:render", function() {
									if ( !Upfront.Application.get_gridstate() )
										togglegrid.on_click();
								});
							}
						}
					}
				}),
				grid: new Upfront.Views.Editor.Field.Radios({
					label: Upfront.Settings.l10n.global.behaviors.grid_settings,
					layout: "horizontal-inline",
					default_value: is_grid_custom ? "custom" : "recommended",
					values: [
						{label: Upfront.Settings.l10n.global.behaviors.recommended_settings, value: "recommended"},
						{label: Upfront.Settings.l10n.global.behaviors.custom_settings, value: "custom"}
					],
					change: function () {
						var value = this.get_value();
						if ( value == 'custom' ){
							$custom.show();
							$recommended.hide();
						}
						else {
							$recommended.show();
							$custom.hide();
						}
						update_grid_data();
					}
				}),
				recommended_padding: new Upfront.Views.Editor.Field.Select({
					default_value: grid.column_padding,
					values: [
						{label: Upfront.Settings.l10n.global.behaviors.padding_large, value: "15"},
						{label: Upfront.Settings.l10n.global.behaviors.padding_medium, value: "10"},
						{label: Upfront.Settings.l10n.global.behaviors.padding_small, value: "5"},
						{label: Upfront.Settings.l10n.global.behaviors.no_padding, value: "0"}
					],
					change: update_grid_data
				}),
				bg_color: new Upfront.Views.Editor.Field.Color({
					model: app.layout,
					label: Upfront.Settings.l10n.global.behaviors.page_bg_color,
					label_style: "inline",
					property: 'background_color',
					spectrum: {
						move: function (color) {
							var rgb = color.toRgb(),
							rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';
							app.layout.set_property('background_color', rgba_string);
						}
					}
				}),
				custom_width: new Upfront.Views.Editor.Field.Number({
					label: Upfront.Settings.l10n.global.behaviors.column_width,
					label_style: "inline",
					min: 40,
					max: 100,
					default_value: grid.column_width,
					change: update_grid_data
				}),
				custom_padding: new Upfront.Views.Editor.Field.Number({
					label: Upfront.Settings.l10n.global.behaviors.column_padding,
					label_style: "inline",
					min: 0,
					max: 100,
					default_value: grid.column_padding,
					change: update_grid_data
				}),
				custom_baseline: new Upfront.Views.Editor.Field.Number({
					label: Upfront.Settings.l10n.global.behaviors.baseline_grid,
					label_style: "inline",
					min: 5,
					max: 100,
					default_value: grid.baseline,
					change: update_grid_data
				}),
				custom_type_padding: new Upfront.Views.Editor.Field.Number({
					label: Upfront.Settings.l10n.global.behaviors.additional_type_padding,
					label_style: "inline",
					min: 0,
					max: 100,
					default_value: grid.type_padding,
					change: update_grid_data
				}),
				floated: new Upfront.Views.Editor.Field.Checkboxes({
					multiple: false,
					default_value: true,
					values: [
						{label: Upfront.Settings.l10n.global.behaviors.allow_floats_outside_main_grid, value: true}
					]
				})
			};

		if ( !ed.structure_modal ){
			ed.structure_modal = new Upfront.Views.Editor.Modal({to: $('body'), button: true, top: 120, width: 540});
			ed.structure_modal.render();
			$('body').append(ed.structure_modal.el);
		}
		// Toggle grid on
		if ( !Upfront.Application.get_gridstate() )
			togglegrid.on_click();

		ed.structure_modal.open(function($content, $modal){
			$modal.addClass('upfront-structure-modal');
			_.each(fields, function(field){
				field.render();
				field.delegateEvents();
			});
			$content.html('');
			if (Upfront.themeExporter.currentTheme === 'upfront') {
				$content.append(fields.structure.el);
			}
			$content.append(fields.grid.el);
			$recommended.append(fields.recommended_padding.el);
			$recommended.append($grid_width);
			$grid_wrap.append($recommended);
			$custom.append(fields.custom_width.el);
			$custom.append($grid_width2);
			$custom.append(fields.custom_padding.el);
			$custom.append(fields.custom_baseline.el);
			$custom.append(fields.custom_type_padding.el);
			$color_wrap.append(fields.bg_color.el);
			$grid_wrap.append($custom);
			$grid_wrap.append($color_wrap);
			$content.append($grid_wrap);
			$content.append(fields.floated.el);
			fields.grid.trigger('changed');
		}, ed)
		.always(function(){
			if ( Upfront.Application.get_gridstate() )
				togglegrid.on_click();
		});
	},

	/**
	 * Update grid value and appearance
	 */
	update_grid: function (grid_data) {
		var app = Upfront.Application,
			styles = [],
			grid = Upfront.Settings.LayoutEditor.Grid,
			selector = '#page',
			options = app.layout.get_property_value_by_name('grid') || {
				column_widths: {},
				column_paddings: {},
				baselines: {},
				type_paddings: {}
			},
			// Dealing with responsive settings which, apparently, trump the grid entirely
			current_bp_id = Upfront.Settings.LayoutEditor.CurrentBreakpoint || Upfront.Settings.LayoutEditor.Grid.size_name,
			breakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().findWhere({id: current_bp_id}),
			flag_update_breakpoint = false
		;

		if (grid_data.column_width) {
			options.column_widths[grid.size_name] = grid_data.column_width;
			if (breakpoint.get_property_value_by_name('column_width') != grid_data.column_width) {
				breakpoint.set_property("column_width", grid_data.column_width);
				flag_update_breakpoint = true;
			}
		}
		if ("column_padding" in grid_data) { // Special case! Allow zero values in column paddings
			options.column_paddings[grid.size_name] = grid_data.column_padding;
			if (breakpoint.get_property_value_by_name('column_padding') != grid_data.column_padding) {
				breakpoint.set_property("column_padding", grid_data.column_padding);
				flag_update_breakpoint = true;
			}
		}
		if (grid_data.baseline) {
			if (grid_data.baseline != grid.baseline) {
				// to prevent css loading at every change, we timeout to 1000ms before decide to load it
				clearTimeout(this._load_editor_css);
				this._load_editor_css = setTimeout(function() {
					Upfront.Util.post({
						action: 'upfront_load_editor_grid',
						baseline: grid_data.baseline
					}, 'text').success(function(data) {
						if ( $('#upfront-editor-grid-inline').length )
							$('#upfront-editor-grid-inline').html( data );
						else
							$('head').append('<style id="upfront-editor-grid-inline">' + data + '</style>'); // add it to head to prevent it override other custom CSS below
					});
				}, 1000);
			}
			options.baselines[grid.size_name] = grid_data.baseline;
			if (breakpoint.get_property_value_by_name('baseline') != grid_data.baseline) {
				breakpoint.set_property("baseline", grid_data.baseline);
				flag_update_breakpoint = true;
			}
		}
		if (grid_data.type_padding) {
			options.type_paddings[grid.size_name] = grid_data.type_padding;
			if (breakpoint.get_property_value_by_name('type_padding') != grid_data.type_padding) {
				breakpoint.set_property("type_padding", grid_data.type_padding);
				flag_update_breakpoint = true;
			}
		}
		Upfront.Settings.LayoutEditor.Grid = _.extend(grid, grid_data);
		app.layout.set_property('grid', options);
		app.layout_view.update_grid_css();
		this.init(); // re-init to update grid values

		if (flag_update_breakpoint && Upfront.Application.get_current() == Upfront.Settings.Application.MODE.THEME) {
			// Only do this in exporter, because that's where we're actually allowing structural changes.
			breakpoint.trigger("change:enabled", breakpoint);
		}
	},


	/**
	 * Apply saved grid in layout
	 */
	apply_grid: function () {
		var ed = Upfront.Behaviors.GridEditor,
			app = Upfront.Application,
			grid = Upfront.Settings.LayoutEditor.Grid,
			options = app.layout.get_property_value_by_name('grid');
		if ( !options || !options.column_widths || !options.column_widths[grid.size_name] )
			return;
		return ed.update_grid({
			column_width: options.column_widths[grid.size_name],
			column_padding: options.column_paddings[grid.size_name],
			baseline: options.baselines[grid.size_name],
			type_padding: options.type_paddings[grid.size_name]
		});
	},

	/**
	 * Debug stuff
	 */
	time_start: function (id) {
		if ( this.show_debug_element )
			console.time(id);
	},
	time_end: function (id) {
		if ( this.show_debug_element )
			console.timeEnd(id);
	},
	set_timeout: function(timeout){
		this.timeout = timeout;
	},
	set_compare_size: function(col, row){
		this.compare_col = col;
		this.compare_row = row;
	},
	toggle_debug: function(){
		this.show_debug_element = !this.show_debug_element;
		if ( this.show_debug_element )
			this.render_debug();
		else
			this.delete_debug();
	},
	render_debug: function () {
		var me = this,
			$main = $(Upfront.Settings.LayoutEditor.Selectors.main);
			$modal = $('<div id="behavior-debug" class="upfront-inline-modal"></div>'),
			$wrap = $('<div class="upfront-inline-modal-wrap"></div>'),
			field_delay = new Upfront.Views.Editor.Field.Number({
				name: 'delay',
				label: Upfront.Settings.l10n.global.behaviors.delay_before_drag,
				label_style: 'inline',
				min: 0,
				max: 2000,
				step: 1,
				default_value: 300,
				change: function () {
					$('.upfront-module.ui-draggable, .upfront-module-group.ui-draggable').draggable('option', 'delay', this.get_value());
				}
			}),
			field_timeout = new Upfront.Views.Editor.Field.Number({
				name: 'timeout',
				label: Upfront.Settings.l10n.global.behaviors.delay_before_changing_position,
				label_style: 'inline',
				min: 0,
				max: 2000,
				step: 1,
				default_value: me.timeout,
				change: function () {
					me.timeout = parseInt(this.get_value());
				}
			}),
			field_debug = new Upfront.Views.Editor.Field.Checkboxes({
				name: 'debug',
				multiple: false,
				default_value: true,
				values: [
					{ label: Upfront.Settings.l10n.global.behaviors.show_debug_info, value: true }
				],
				change: function () {
					me.show_debug_element = this.get_value() ? true : false;
				}
			}),
			$close = $('<a href="#" class="upfront-close-debug">' + Upfront.Settings.l10n.global.behaviors.close + '</a>');
		$main.addClass('show-debug');
		field_delay.render();
		$wrap.append(field_delay.$el);
		field_timeout.render();
		$wrap.append(field_timeout.$el);
		field_debug.render();
		$wrap.append(field_debug.$el);
		$wrap.append($close);
		$modal.append($wrap);
		$('body').append($modal);
		$modal.css({
			top: 'auto',
			left: 'auto',
			bottom: 0,
			right: 0,
			position: 'fixed'
		});
		$wrap.css({
			width: 360,
			top: 0,
			padding: '10px',
			position: 'relative'
		});
		$close.on('click', function () {
			me.show_debug_element = false;
			me.delete_debug();
		});
	},
	delete_debug: function () {
		var $main = $(Upfront.Settings.LayoutEditor.Selectors.main);
		$main.removeClass('show-debug');
		$('#behavior-debug').remove();
	}

};

	return GridEditor;
});
	
})(jQuery);
//@ sourceURL=grid-editor.js
;
(function ($) {
define('behaviors',[
	'scripts/upfront/behaviors/layout-editor',
	'scripts/upfront/behaviors/grid-editor'
], function (LayoutEditor, GridEditor) {
	return {
		Behaviors: {
			LayoutEditor: LayoutEditor,
			GridEditor: GridEditor
		}
	};
});

})(jQuery);
//@ sourceURL=upfront-behavior.js
;
/*! jquery-dateFormat 10-05-2014 */
var DateFormat={};!function(a){var b=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],c=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],d=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],e=["January","February","March","April","May","June","July","August","September","October","November","December"],f={Jan:"01",Feb:"02",Mar:"03",Apr:"04",May:"05",Jun:"06",Jul:"07",Aug:"08",Sep:"09",Oct:"10",Nov:"11",Dec:"12"},g=/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.?\d{0,3}[Z\-+]?(\d{2}:?\d{2})?/;a.format=function(){function a(a){return b[parseInt(a,10)]||a}function h(a){return c[parseInt(a,10)]||a}function i(a){var b=parseInt(a,10)-1;return d[b]||a}function j(a){var b=parseInt(a,10)-1;return e[b]||a}function k(a){return f[a]||a}function l(a){var b,c,d,e,f,g=a,h="";return-1!==g.indexOf(".")&&(e=g.split("."),g=e[0],h=e[1]),f=g.split(":"),3===f.length?(b=f[0],c=f[1],d=f[2].replace(/\s.+/,"").replace(/[a-z]/gi,""),g=g.replace(/\s.+/,"").replace(/[a-z]/gi,""),{time:g,hour:b,minute:c,second:d,millis:h}):{time:"",hour:"",minute:"",second:"",millis:""}}function m(a,b){for(var c=b-String(a).length,d=0;c>d;d++)a="0"+a;return a}return{parseDate:function(a){var b={date:null,year:null,month:null,dayOfMonth:null,dayOfWeek:null,time:null};if("number"==typeof a)return this.parseDate(new Date(a));if("function"==typeof a.getFullYear)b.year=String(a.getFullYear()),b.month=String(a.getMonth()+1),b.dayOfMonth=String(a.getDate()),b.time=l(a.toTimeString());else if(-1!=a.search(g))values=a.split(/[T\+-]/),b.year=values[0],b.month=values[1],b.dayOfMonth=values[2],b.time=l(values[3].split(".")[0]);else switch(values=a.split(" "),6===values.length&&isNaN(values[5])&&(values[values.length]="()"),values.length){case 6:b.year=values[5],b.month=k(values[1]),b.dayOfMonth=values[2],b.time=l(values[3]);break;case 2:subValues=values[0].split("-"),b.year=subValues[0],b.month=subValues[1],b.dayOfMonth=subValues[2],b.time=l(values[1]);break;case 7:case 9:case 10:b.year=values[3],b.month=k(values[1]),b.dayOfMonth=values[2],b.time=l(values[4]);break;case 1:subValues=values[0].split(""),b.year=subValues[0]+subValues[1]+subValues[2]+subValues[3],b.month=subValues[5]+subValues[6],b.dayOfMonth=subValues[8]+subValues[9],b.time=l(subValues[13]+subValues[14]+subValues[15]+subValues[16]+subValues[17]+subValues[18]+subValues[19]+subValues[20]);break;default:return null}return b.date=new Date(b.year,b.month-1,b.dayOfMonth),b.dayOfWeek=String(b.date.getDay()),b},date:function(b,c){try{var d=this.parseDate(b);if(null===d)return b;for(var e=(d.date,d.year),f=d.month,g=d.dayOfMonth,k=d.dayOfWeek,l=d.time,n="",o="",p="",q=!1,r=0;r<c.length;r++){var s=c.charAt(r),t=c.charAt(r+1);if(q)"'"==s?(o+=""===n?"'":n,n="",q=!1):n+=s;else switch(n+=s,p="",n){case"ddd":o+=a(k),n="";break;case"dd":if("d"===t)break;o+=m(g,2),n="";break;case"d":if("d"===t)break;o+=parseInt(g,10),n="";break;case"D":g=1==g||21==g||31==g?parseInt(g,10)+"st":2==g||22==g?parseInt(g,10)+"nd":3==g||23==g?parseInt(g,10)+"rd":parseInt(g,10)+"th",o+=g,n="";break;case"MMMM":o+=j(f),n="";break;case"MMM":if("M"===t)break;o+=i(f),n="";break;case"MM":if("M"===t)break;o+=m(f,2),n="";break;case"M":if("M"===t)break;o+=parseInt(f,10),n="";break;case"y":case"yyy":if("y"===t)break;o+=n,n="";break;case"yy":if("y"===t)break;o+=String(e).slice(-2),n="";break;case"yyyy":o+=e,n="";break;case"HH":o+=m(l.hour,2),n="";break;case"H":if("H"===t)break;o+=parseInt(l.hour,10),n="";break;case"hh":hour=0===parseInt(l.hour,10)?12:l.hour<13?l.hour:l.hour-12,o+=m(hour,2),n="";break;case"h":if("h"===t)break;hour=0===parseInt(l.hour,10)?12:l.hour<13?l.hour:l.hour-12,o+=parseInt(hour,10),n="";break;case"mm":o+=m(l.minute,2),n="";break;case"m":if("m"===t)break;o+=l.minute,n="";break;case"ss":o+=m(l.second.substring(0,2),2),n="";break;case"s":if("s"===t)break;o+=l.second,n="";break;case"S":case"SS":if("S"===t)break;o+=n,n="";break;case"SSS":o+=l.millis.substring(0,3),n="";break;case"a":o+=l.hour>=12?"PM":"AM",n="";break;case"p":o+=l.hour>=12?"p.m.":"a.m.",n="";break;case"E":o+=h(k),n="";break;case"'":n="",q=!0;break;default:o+=s,n=""}}return o+=p}catch(u){return console&&console.log&&console.log(u),b}},prettyDate:function(a){var b,c,d;return("string"==typeof a||"number"==typeof a)&&(b=new Date(a)),"object"==typeof a&&(b=new Date(a.toString())),c=((new Date).getTime()-b.getTime())/1e3,d=Math.floor(c/86400),isNaN(d)||0>d?void 0:60>c?"just now":120>c?"1 minute ago":3600>c?Math.floor(c/60)+" minutes ago":7200>c?"1 hour ago":86400>c?Math.floor(c/3600)+" hours ago":1===d?"Yesterday":7>d?d+" days ago":31>d?Math.ceil(d/7)+" weeks ago":d>=31?"more than 5 weeks ago":void 0},toBrowserTimeZone:function(a,b){return this.date(new Date(a),b||"MM/dd/yyyy HH:mm:ss")}}}()}(DateFormat),function(a){a.format=DateFormat.format}(jQuery);
define("jquery-df", function(){});

 /*!
 * jQuery Simulate v@VERSION - simulate browser mouse and keyboard events
 * https://github.com/jquery/jquery-simulate
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: @DATE
 */

;(function( $, undefined ) {

var rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/;

$.fn.simulate = function( type, options ) {
	return this.each(function() {
		new $.simulate( this, type, options );
	});
};

$.simulate = function( elem, type, options ) {
	var method = $.camelCase( "simulate-" + type );

	this.target = elem;
	this.options = options;

	if ( this[ method ] ) {
		this[ method ]();
	} else {
		this.simulateEvent( elem, type, options );
	}
};

$.extend( $.simulate, {

	keyCode: {
		BACKSPACE: 8,
		COMMA: 188,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		LEFT: 37,
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SPACE: 32,
		TAB: 9,
		UP: 38
	},

	buttonCode: {
		LEFT: 0,
		MIDDLE: 1,
		RIGHT: 2
	}
});

$.extend( $.simulate.prototype, {

	simulateEvent: function( elem, type, options ) {
		var event = this.createEvent( type, options );
		this.dispatchEvent( elem, type, event, options );
	},

	createEvent: function( type, options ) {
		if ( rkeyEvent.test( type ) ) {
			return this.keyEvent( type, options );
		}

		if ( rmouseEvent.test( type ) ) {
			return this.mouseEvent( type, options );
		}
	},

	mouseEvent: function( type, options ) {
		var event, eventDoc, doc, body;
		options = $.extend({
			bubbles: true,
			cancelable: (type !== "mousemove"),
			view: window,
			detail: 0,
			screenX: 0,
			screenY: 0,
			clientX: 1,
			clientY: 1,
			ctrlKey: false,
			altKey: false,
			shiftKey: false,
			metaKey: false,
			button: 0,
			relatedTarget: undefined
		}, options );

		if ( document.createEvent ) {
			event = document.createEvent( "MouseEvents" );
			event.initMouseEvent( type, options.bubbles, options.cancelable,
				options.view, options.detail,
				options.screenX, options.screenY, options.clientX, options.clientY,
				options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,
				options.button, options.relatedTarget || document.body.parentNode );

			// IE 9+ creates events with pageX and pageY set to 0.
			// Trying to modify the properties throws an error,
			// so we define getters to return the correct values.
			if ( event.pageX === 0 && event.pageY === 0 && Object.defineProperty ) {
				eventDoc = event.relatedTarget.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				Object.defineProperty( event, "pageX", {
					get: function() {
						return options.clientX +
							( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
							( doc && doc.clientLeft || body && body.clientLeft || 0 );
					}
				});
				Object.defineProperty( event, "pageY", {
					get: function() {
						return options.clientY +
							( doc && doc.scrollTop || body && body.scrollTop || 0 ) -
							( doc && doc.clientTop || body && body.clientTop || 0 );
					}
				});
			}
		} else if ( document.createEventObject ) {
			event = document.createEventObject();
			$.extend( event, options );
			// standards event.button uses constants defined here: http://msdn.microsoft.com/en-us/library/ie/ff974877(v=vs.85).aspx
			// old IE event.button uses constants defined here: http://msdn.microsoft.com/en-us/library/ie/ms533544(v=vs.85).aspx
			// so we actually need to map the standard back to oldIE
			event.button = {
				0: 1,
				1: 4,
				2: 2
			}[ event.button ] || event.button;
		}

		return event;
	},

	keyEvent: function( type, options ) {
		var event;
		options = $.extend({
			bubbles: true,
			cancelable: true,
			view: window,
			ctrlKey: false,
			altKey: false,
			shiftKey: false,
			metaKey: false,
			keyCode: 0,
			charCode: undefined
		}, options );

		if ( document.createEvent ) {
			try {
				event = document.createEvent( "KeyEvents" );
				event.initKeyEvent( type, options.bubbles, options.cancelable, options.view,
					options.ctrlKey, options.altKey, options.shiftKey, options.metaKey,
					options.keyCode, options.charCode );
			// initKeyEvent throws an exception in WebKit
			// see: http://stackoverflow.com/questions/6406784/initkeyevent-keypress-only-works-in-firefox-need-a-cross-browser-solution
			// and also https://bugs.webkit.org/show_bug.cgi?id=13368
			// fall back to a generic event until we decide to implement initKeyboardEvent
			} catch( err ) {
				event = document.createEvent( "Events" );
				event.initEvent( type, options.bubbles, options.cancelable );
				$.extend( event, {
					view: options.view,
					ctrlKey: options.ctrlKey,
					altKey: options.altKey,
					shiftKey: options.shiftKey,
					metaKey: options.metaKey,
					keyCode: options.keyCode,
					charCode: options.charCode
				});
			}
		} else if ( document.createEventObject ) {
			event = document.createEventObject();
			$.extend( event, options );
		}

		if ( !!/msie [\w.]+/.exec( navigator.userAgent.toLowerCase() ) || (({}).toString.call( window.opera ) === "[object Opera]") ) {
			event.keyCode = (options.charCode > 0) ? options.charCode : options.keyCode;
			event.charCode = undefined;
		}

		return event;
	},

	dispatchEvent: function( elem, type, event ) {
		if ( elem[ type ] ) {
			elem[ type ]();
		} else if ( elem.dispatchEvent ) {
			elem.dispatchEvent( event );
		} else if ( elem.fireEvent ) {
			elem.fireEvent( "on" + type, event );
		}
	},

	simulateFocus: function() {
		var focusinEvent,
			triggered = false,
			element = $( this.target );

		function trigger() {
			triggered = true;
		}

		element.bind( "focus", trigger );
		element[ 0 ].focus();

		if ( !triggered ) {
			focusinEvent = $.Event( "focusin" );
			focusinEvent.preventDefault();
			element.trigger( focusinEvent );
			element.triggerHandler( "focus" );
		}
		element.unbind( "focus", trigger );
	},

	simulateBlur: function() {
		var focusoutEvent,
			triggered = false,
			element = $( this.target );

		function trigger() {
			triggered = true;
		}

		element.bind( "blur", trigger );
		element[ 0 ].blur();

		// blur events are async in IE
		setTimeout(function() {
			// IE won't let the blur occur if the window is inactive
			if ( element[ 0 ].ownerDocument.activeElement === element[ 0 ] ) {
				element[ 0 ].ownerDocument.body.focus();
			}

			// Firefox won't trigger events if the window is inactive
			// IE doesn't trigger events if we had to manually focus the body
			if ( !triggered ) {
				focusoutEvent = $.Event( "focusout" );
				focusoutEvent.preventDefault();
				element.trigger( focusoutEvent );
				element.triggerHandler( "blur" );
			}
			element.unbind( "blur", trigger );
		}, 1 );
	}
});



/** complex events **/

function findCenter( elem ) {
	var offset,
		document = $( elem.ownerDocument );
	elem = $( elem );
	offset = elem.offset();

	return {
		x: offset.left + elem.outerWidth() / 2 - document.scrollLeft(),
		y: offset.top + elem.outerHeight() / 2 - document.scrollTop()
	};
}

$.extend( $.simulate.prototype, {
	simulateDrag: function() {
		var i = 0,
			target = this.target,
			options = this.options,
			center = findCenter( target ),
			x = Math.floor( center.x ),
			y = Math.floor( center.y ),
			dx = options.dx || 0,
			dy = options.dy || 0,
			moves = options.moves || 3,
			coord = { clientX: x, clientY: y };

		this.simulateEvent( target, "mousedown", coord );

		for ( ; i < moves ; i++ ) {
			x += dx / moves;
			y += dy / moves;

			coord = {
				clientX: Math.round( x ),
				clientY: Math.round( y )
			};

			this.simulateEvent( document, "mousemove", coord );
		}

		this.simulateEvent( target, "mouseup", coord );
		this.simulateEvent( target, "click", coord );
	}
});

})( jQuery );

define("jquery-simulate", function(){});

// v0.3.0 https://github.com/jhudson8/backbone-query-parameters
(function (root, factory) {
   if (typeof exports === 'object' && root.require) {
     module.exports = factory(require("underscore"), require("backbone"));
   } else if (typeof define === "function" && define.amd) {
      // AMD. Register as an anonymous module.
      define('scripts/backbone-query-parameters/backbone-query-parameters',["underscore","backbone"], function(_, Backbone) {
        // Use global variables if the locals are undefined.
        return factory(_ || root._, Backbone || root.Backbone);
      });
   } else {
      // RequireJS isn't being used. Assume underscore and backbone are loaded in <script> tags
      factory(_, Backbone);
   }
}(this, function(_, Backbone) {

var queryStringParam = /^\?(.*)/,
    optionalParam = /\((.*?)\)/g,
    namedParam    = /(\(\?)?:\w+/g,
    splatParam    = /\*\w+/g,
    escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g,
    fragmentStrip = /^([^\?]*)/,
    namesPattern = /[\:\*]([^\:\?\/]+)/g,
    routeStripper = /^[#\/]|\s+$/g,
    trailingSlash = /\/$/;
Backbone.Router.arrayValueSplit = '|';

_.extend(Backbone.History.prototype, {
  getFragment: function(fragment, forcePushState) {
    /*jshint eqnull:true */
    if (fragment == null) {
      if (this._hasPushState || !this._wantsHashChange || forcePushState) {
        fragment = this.location.pathname;
        var root = this.root.replace(trailingSlash, '');
        var search = this.location.search;
        if (!fragment.indexOf(root)) {
          fragment = fragment.substr(root.length);
        }
        if (search && this._hasPushState) {
          fragment += search;
        }
      } else {
        fragment = this.getHash();
      }
    }
    return fragment.replace(routeStripper, '');
  },

  // this will not perform custom query param serialization specific to the router
  // but will return a map of key/value pairs (the value is a string or array)
  getQueryParameters: function(fragment, forcePushState) {
    fragment = this.getFragment(fragment, forcePushState);
    // if no query string exists, this will still be the original fragment
    var queryString = fragment.replace(fragmentStrip, '');
    var match = queryString.match(queryStringParam);
    if (match) {
      queryString = match[1];
      var rtn = {};
      iterateQueryString(queryString, function(name, value) {
        value = parseParams(value);

        if (!rtn[name]) {
          rtn[name] = value;
        } else if (_.isString(rtn[name])) {
          rtn[name] = [rtn[name], value];
        } else {
          rtn[name].push(value);
        }
      });
      return rtn;
    } else {
      // no values
      return {};
    }
  }
});

_.extend(Backbone.Router.prototype, {
  initialize: function(options) {
    this.encodedSplatParts = options && options.encodedSplatParts;
  },

  _routeToRegExp: function(route) {
    var splatMatch = (splatParam.exec(route) || {index: -1}),
        namedMatch = (namedParam.exec(route) || {index: -1}),
        paramNames = route.match(namesPattern) || [];

    route = route.replace(escapeRegExp, '\\$&')
                 .replace(optionalParam, '(?:$1)?')
                 .replace(namedParam, function(match, optional){
                   return optional ? match : '([^\\/\\?]+)';
                 })
                 // `[^??]` is hacking around a regular expression bug under iOS4.
                 // If only `[^?]` is used then paths like signin/photos will fail
                 // while paths with `?` anywhere, like `signin/photos?`, will succeed.
                 .replace(splatParam, '([^??]*?)');
    route += '(\\?.*)?';
    var rtn = new RegExp('^' + route + '$');

    // use the rtn value to hold some parameter data
    if (splatMatch.index >= 0) {
      // there is a splat
      if (namedMatch >= 0) {
        // negative value will indicate there is a splat match before any named matches
        rtn.splatMatch = splatMatch.index - namedMatch.index;
      } else {
        rtn.splatMatch = -1;
      }
    }
    rtn.paramNames = _.map(paramNames, function(name) { return name.substring(1); });
    rtn.namedParameters = this.namedParameters;

    return rtn;
  },

  /**
   * Given a route, and a URL fragment that it matches, return the array of
   * extracted parameters.
   */
  _extractParameters: function(route, fragment) {
    var params = route.exec(fragment).slice(1),
        namedParams = {};
    if (params.length > 0 && _.isUndefined(params[params.length - 1])) {
      // remove potential invalid data from query params match
      params.splice(params.length - 1, 1);
    }

    // do we have an additional query string?
    var match = params.length && params[params.length-1] && params[params.length-1].match(queryStringParam);
    if (match) {
      var queryString = match[1];
      var data = {};
      if (queryString) {
        var self = this;
        iterateQueryString(queryString, function(name, value) {
          self._setParamValue(name, value, data);
        });
      }
      params[params.length-1] = data;
      _.extend(namedParams, data);
    }

    // decode params
    var length = params.length;
    if (route.splatMatch && this.encodedSplatParts) {
      if (route.splatMatch < 0) {
        // splat param is first
        return params;
      } else {
        length = length - 1;
      }
    }

    for (var i=0; i<length; i++) {
      if (_.isString(params[i])) {
        params[i] = parseParams(params[i]);
        if (route.paramNames && route.paramNames.length >= i-1) {
          namedParams[route.paramNames[i]] = params[i];
        }
      }
    }

    return (Backbone.Router.namedParameters || route.namedParameters) ? [namedParams] : params;
  },

  /**
   * Set the parameter value on the data hash
   */
  _setParamValue: function(key, value, data) {
    // use '.' to define hash separators
    key = key.replace('[]', '');
    key = key.replace('%5B%5D', '');
    var parts = key.split('.');
    var _data = data;
    for (var i=0; i<parts.length; i++) {
      var part = parts[i];
      if (i === parts.length-1) {
        // set the value
        _data[part] = this._decodeParamValue(value, _data[part]);
      } else {
        _data = _data[part] = _data[part] || {};
      }
    }
  },

  /**
   * Decode an individual parameter value (or list of values)
   * @param value the complete value
   * @param currentValue the currently known value (or list of values)
   */
  _decodeParamValue: function(value, currentValue) {
    // '|' will indicate an array.  Array with 1 value is a=|b - multiple values can be a=b|c
    var splitChar = Backbone.Router.arrayValueSplit;
    if (splitChar && value.indexOf(splitChar) >= 0) {
      var values = value.split(splitChar);
      // clean it up
      for (var i=values.length-1; i>=0; i--) {
        if (!values[i]) {
          values.splice(i, 1);
        } else {
          values[i] = parseParams(values[i]);
        }
      }
      return values;
    }

    value = parseParams(value);
    if (!currentValue) {
      return value;
    } else if (_.isArray(currentValue)) {
      currentValue.push(value);
      return currentValue;
    } else {
      return [currentValue, value];
    }
  },

  /**
   * Return the route fragment with queryParameters serialized to query parameter string
   */
  toFragment: function(route, queryParameters) {
    if (queryParameters) {
      if (!_.isString(queryParameters)) {
        queryParameters = toQueryString(queryParameters);
      }
      if(queryParameters) {
        route += '?' + queryParameters;
      }
    }
    return route;
  }
});


/**
 * Serialize the val hash to query parameters and return it.  Use the namePrefix to prefix all param names (for recursion)
 */
function toQueryString(val, namePrefix) {
  /*jshint eqnull:true */
  var splitChar = Backbone.Router.arrayValueSplit;
  function encodeSplit(val) { return String(val).replace(splitChar, encodeURIComponent(splitChar)); }

  if (!val) {
    return '';
  }

  namePrefix = namePrefix || '';
  var rtn = [];
  _.each(val, function(_val, name) {
    name = namePrefix + name;

    if (_.isString(_val) || _.isNumber(_val) || _.isBoolean(_val) || _.isDate(_val)) {
      // primitive type
      if (_val != null) {
        rtn.push(name + '=' + encodeSplit(encodeURIComponent(_val)));
      }
    } else if (_.isArray(_val)) {
      // arrays use Backbone.Router.arrayValueSplit separator
      var str = '';
      for (var i = 0; i < _val.length; i++) {
        var param = _val[i];
        if (param != null) {
          str += splitChar + encodeSplit(param);
        }
      }
      if (str) {
        rtn.push(name + '=' + str);
      }
    } else {
      // dig into hash
      var result = toQueryString(_val, name + '.');
      if (result) {
        rtn.push(result);
      }
    }
  });

  return rtn.join('&');
}

function parseParams(value) {
  // decodeURIComponent doesn't touch '+'
  try {
    return decodeURIComponent(value.replace(/\+/g, ' '));
  } catch (err) {
    // Failover to whatever was passed if we get junk data
    return value;
  }
}

function iterateQueryString(queryString, callback) {
  var keyValues = queryString.split('&');
  _.each(keyValues, function(keyValue) {
    var arr = keyValue.split('=');
    callback(arr.shift(), arr.join('='));
  });
}

}));
(function($){
	$.fn.responsiveElement = function(){
		return this.each(function(){
			var r_id = 'responsive-'+(Math.floor(Math.random()*100000)),
				bind = $(this).attr('data-bind'),
				editor = ( $(this).attr('data-editor') == 1 ),
				on_editor = false,
				min_width = normalize_size($(this).attr('data-min-width')),
				max_width = normalize_size($(this).attr('data-max-width')),
				min_height = normalize_size($(this).attr('data-min-height')),
				max_height = normalize_size($(this).attr('data-max-height')),
				styles = $(this).html(),
				applied_styles = {},
				lazyApplyBinding;

			lazyApplyBinding = _.throttle(function(e){
				if ( e.target == this )
					apply_binding_all();
				else
					apply_binding($(e.target), true);
			}, 100);

			$(window).on('load', apply_binding_all);
			$(window).on('resize', lazyApplyBinding);
			$(document).on('upfront-load', function(){
				if ( typeof Upfront.Events != 'undefined' ){
					// Attach events after render complete to improve load time
					Upfront.Events.once("layout:render", function(){
						on_editor = true;
						// Run once on startup
						apply_binding_all();
						Upfront.Events.on("layout:after_render", function(){
							apply_binding_all();
						});
						Upfront.Events.on("entity:modules:render_module", apply_binding_view);
						Upfront.Events.on("entity:regions:render_region", apply_binding_view);
						Upfront.Events.on("entity:regions:render_container", apply_binding_view);
						//Upfront.Events.on("entity:resize_stop", apply_binding_view_region);
						//Upfront.Events.on("entity:drag_stop", apply_binding_view_region);
						Upfront.Events.on("upfront:wrappers:after_fix_height", apply_binding_view);
						Upfront.Events.on("entity:region_container:resize_stop", apply_binding_view);
						Upfront.Events.on("upfront:editor:image_on", function(sel){
							apply_binding_all();
						});
						Upfront.Events.on("upfront:editor:image_align", function(sel, align){
							apply_binding_all();
						});
					});
				}
			});
			function apply_binding_all (sel) {
				var $sel = _.isString(sel) && sel != '' ? $(sel) :  $('.upfront-layout');
				return apply_binding($sel);
			}
			function apply_binding_view (view) {
				return apply_binding(view.$el.parent());
			}
			function apply_binding_view_region (view) {
				if ( bind.match(/\.upfront-region-container/) ) {
					apply_binding_all();
				}
				else {
					var $region = view.$el.closest('.upfront-region');
					apply_binding( bind.match(/\.upfront-region/) ? $region.parent() : $region );
				}
			}
			function apply_binding ($sel, single) {
				var $style = $('#'+r_id),
					changed = false
				;
				if ( editor && !on_editor ) return;
				$sel.find(bind+':visible').each(function(){
					var $el = single ? $(this).closest('.upfront-module') : $(this)
						id = $(this).attr('id') || 'bind-'+(Math.floor(Math.random()*100000)),
						width = parseFloat($el.css('width')),
						height = parseFloat($el.css('height'))
					;
					if ( ! $(this).attr('id') ) {
						$(this).attr('id', id);
					}
					var matched = (
						( (min_width && width >= min_width) || !min_width ) &&
						( (max_width && width <= max_width) || !max_width ) &&
						( (min_height && height >= min_height) || !min_height ) &&
						( (max_height && height <= max_height) || !max_height )
					);
					if ( typeof applied_styles[id] == 'undefined' ) {
						applied_styles[id] = '';
					}
					if ( matched ) {
						if ( applied_styles[id] == '' ) {
							applied_styles[id] = styles.replace(/\( ?this ?\)/igm, '#'+id);
							changed = true;
						}
					}
					else {
						if ( applied_styles[id] != '' ) {
							applied_styles[id] = '';
							changed = true;
						}
					}
				});
				if ( !changed ) {
					return;
				}
				var styles_all = $.map(applied_styles, function(style, id){
					return style;
				});
				if ( !$style.length ){
					$style = $('<style id="' + r_id + '">' + styles_all.join("\n") + '</style>');
					$('body').append($style);
				}
				else {
					$style.html( styles_all.join("\n") );
				}
			}
			function normalize_size (size) {
				if ( typeof size == 'undefined' )
					return false;
				var px_regex = /^(\d+)px$/i,
					col_regex = /^(\d+)col$/i,
					row_regex = /^(\d+)row$/i;
				if ( size.match(px_regex) ) // px
					return size.match(px_regex)[1];
			}
		});
	};

	$('[type="text/responsive_css"]').responsiveElement();

})(jQuery);

define("responsive", function(){});

/**
 * findAndReplaceDOMText v 0.4.2
 * @author James Padolsey http://james.padolsey.com
 * @license http://unlicense.org/UNLICENSE
 *
 * Matches the text of a DOM node against a regular expression
 * and replaces each match (or node-separated portions of the match)
 * in the specified element.
 */
window.findAndReplaceDOMText = (function() {

	var PORTION_MODE_RETAIN = 'retain';
	var PORTION_MODE_FIRST = 'first';

	var doc = document;
	var toString = {}.toString;

	function isArray(a) {
		return toString.call(a) == '[object Array]';
	}

	function escapeRegExp(s) {
		return String(s).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	}

	function exposed() {
		// Try deprecated arg signature first:
		return deprecated.apply(null, arguments) || findAndReplaceDOMText.apply(null, arguments);
	}

	function deprecated(regex, node, replacement, captureGroup, elFilter) {
		if ((node && !node.nodeType) && arguments.length <= 2) {
			return false;
		}
		var isReplacementFunction = typeof replacement == 'function';

		if (isReplacementFunction) {
			replacement = (function(original) {
				return function(portion, match) {
					return original(portion.text, match.startIndex);
				};
			}(replacement));
		}

		// Awkward support for deprecated argument signature (<0.4.0)
		var instance = findAndReplaceDOMText(node, {

			find: regex,

			wrap: isReplacementFunction ? null : replacement,
			replace: isReplacementFunction ? replacement : '$' + (captureGroup || '&'),

			prepMatch: function(m, mi) {

				// Support captureGroup (a deprecated feature)

				if (!m[0]) throw 'findAndReplaceDOMText cannot handle zero-length matches';

				if (captureGroup > 0) {
					var cg = m[captureGroup];
					m.index += m[0].indexOf(cg);
					m[0] = cg;
				}
		 
				m.endIndex = m.index + m[0].length;
				m.startIndex = m.index;
				m.index = mi;

				return m;
			},
			filterElements: elFilter
		});

		exposed.revert = function() {
			return instance.revert();
		};

		return true;
	}

	/** 
	 * findAndReplaceDOMText
	 * 
	 * Locates matches and replaces with replacementNode
	 *
	 * @param {Node} node Element or Text node to search within
	 * @param {RegExp} options.find The regular expression to match
	 * @param {String|Element} [options.wrap] A NodeName, or a Node to clone
	 * @param {String|Function} [options.replace='$&'] What to replace each match with
	 * @param {Function} [options.filterElements] A Function to be called to check whether to
	 *	process an element. (returning true = process element,
	 *	returning false = avoid element)
	 */
	function findAndReplaceDOMText(node, options) {
		return new Finder(node, options);
	}

	exposed.Finder = Finder;

	/**
	 * Finder -- encapsulates logic to find and replace.
	 */
	function Finder(node, options) {

		options.portionMode = options.portionMode || PORTION_MODE_RETAIN;

		this.node = node;
		this.options = options;

		// ENable match-preparation method to be passed as option:
		this.prepMatch = options.prepMatch || this.prepMatch;

		this.reverts = [];

		this.matches = this.search();

		if (this.matches.length) {
			this.processMatches();
		}

	}

	Finder.prototype = {

		/**
		 * Searches for all matches that comply with the instance's 'match' option
		 */
		search: function() {

			var match;
			var matchIndex = 0;
			var regex = this.options.find;
			var text = this.getAggregateText();
			var matches = [];

			regex = typeof regex === 'string' ? RegExp(escapeRegExp(regex), 'g') : regex;

			if (regex.global) {
				while (match = regex.exec(text)) {
					matches.push(this.prepMatch(match, matchIndex++));
				}
			} else {
				if (match = text.match(regex)) {
					matches.push(this.prepMatch(match, 0));
				}
			}

			return matches;

		},

		/**
		 * Prepares a single match with useful meta info:
		 */
		prepMatch: function(match, matchIndex) {

			if (!match[0]) {
				throw new Error('findAndReplaceDOMText cannot handle zero-length matches');
			}
	 
			match.endIndex = match.index + match[0].length;
			match.startIndex = match.index;
			match.index = matchIndex;

			return match;
		},

		/**
		 * Gets aggregate text within subject node
		 */
		getAggregateText: function() {

			var elementFilter = this.options.filterElements;

			return getText(this.node);

			/**
			 * Gets aggregate text of a node without resorting
			 * to broken innerText/textContent
			 */
			function getText(node) {

				if (node.nodeType === 3) {
					return node.data;
				}

				if (elementFilter && !elementFilter(node)) {
					return '';
				}

				var txt = '';

				if (node = node.firstChild) do {
					txt += getText(node);
				} while (node = node.nextSibling);

				return txt;

			}

		},

		/** 
		 * Steps through the target node, looking for matches, and
		 * calling replaceFn when a match is found.
		 */
		processMatches: function() {

			var matches = this.matches;
			var node = this.node;
			var elementFilter = this.options.filterElements;

			var startPortion,
				endPortion,
				innerPortions = [],
				curNode = node,
				match = matches.shift(),
				atIndex = 0, // i.e. nodeAtIndex
				matchIndex = 0,
				portionIndex = 0,
				doAvoidNode,
				nodeStack = [node];

			out: while (true) {

				if (curNode.nodeType === 3) {

					if (!endPortion && curNode.length + atIndex >= match.endIndex) {

						// We've found the ending
						endPortion = {
							node: curNode,
							index: portionIndex++,
							text: curNode.data.substring(match.startIndex - atIndex, match.endIndex - atIndex),
							indexInMatch: atIndex - match.startIndex,
							indexInNode: match.startIndex - atIndex, // always zero for end-portions
							endIndexInNode: match.endIndex - atIndex,
							isEnd: true
						};

					} else if (startPortion) {
						// Intersecting node
						innerPortions.push({
							node: curNode,
							index: portionIndex++,
							text: curNode.data,
							indexInMatch: atIndex - match.startIndex,
							indexInNode: 0 // always zero for inner-portions
						});
					}

					if (!startPortion && curNode.length + atIndex > match.startIndex) {
						// We've found the match start
						startPortion = {
							node: curNode,
							index: portionIndex++,
							indexInMatch: 0,
							indexInNode: match.startIndex - atIndex,
							endIndexInNode: match.endIndex - atIndex,
							text: curNode.data.substring(match.startIndex - atIndex, match.endIndex - atIndex)
						};
					}

					atIndex += curNode.data.length;

				}

				doAvoidNode = curNode.nodeType === 1 && elementFilter && !elementFilter(curNode);

				if (startPortion && endPortion) {

					curNode = this.replaceMatch(match, startPortion, innerPortions, endPortion);

					// processMatches has to return the node that replaced the endNode
					// and then we step back so we can continue from the end of the 
					// match:

					atIndex -= (endPortion.node.data.length - endPortion.endIndexInNode);

					startPortion = null;
					endPortion = null;
					innerPortions = [];
					match = matches.shift();
					portionIndex = 0;
					matchIndex++;

					if (!match) {
						break; // no more matches
					}

				} else if (
					!doAvoidNode &&
					(curNode.firstChild || curNode.nextSibling)
				) {
					// Move down or forward:
					if (curNode.firstChild) {
						nodeStack.push(curNode);
						curNode = curNode.firstChild;
					} else {
						curNode = curNode.nextSibling;
					}
					continue;
				}

				// Move forward or up:
				while (true) {
					if (curNode.nextSibling) {
						curNode = curNode.nextSibling;
						break;
					}
					curNode = nodeStack.pop();
					if (curNode === node) {
						break out;
					}
				}

			}

		},

		/**
		 * Reverts ... TODO
		 */
		revert: function() {
			// Reversion occurs backwards so as to avoid nodes subsequently
			// replaced during the matching phase (a forward process):
			for (var l = this.reverts.length; l--;) {
				this.reverts[l]();
			}
			this.reverts = [];
		},

		prepareReplacementString: function(string, portion, match, matchIndex) {
			var portionMode = this.options.portionMode;
			if (
				portionMode === PORTION_MODE_FIRST &&
				portion.indexInMatch > 0
			) {
				return '';
			}
			string = string.replace(/\$(\d+|&|`|')/g, function($0, t) {
				var replacement;
				switch(t) {
					case '&':
						replacement = match[0];
						break;
					case '`':
						replacement = match.input.substring(0, match.startIndex);
						break;
					case '\'':
						replacement = match.input.substring(match.endIndex);
						break;
					default:
						replacement = match[+t];
				}
				return replacement;
			});

			if (portionMode === PORTION_MODE_FIRST) {
				return string;
			}

			if (portion.isEnd) {
				return string.substring(portion.indexInMatch);
			}

			return string.substring(portion.indexInMatch, portion.indexInMatch + portion.text.length);
		},

		getPortionReplacementNode: function(portion, match, matchIndex) {

			var replacement = this.options.replace || '$&';
			var wrapper = this.options.wrap;

			if (wrapper && wrapper.nodeType) {
				// Wrapper has been provided as a stencil-node for us to clone:
				var clone = doc.createElement('div');
				clone.innerHTML = wrapper.outerHTML || new XMLSerializer().serializeToString(wrapper);
				wrapper = clone.firstChild;
			}

			if (typeof replacement == 'function') {
				replacement = replacement(portion, match, matchIndex);
				if (replacement && replacement.nodeType) {
					return replacement;
				}
				return doc.createTextNode(String(replacement));
			}

			var el = typeof wrapper == 'string' ? doc.createElement(wrapper) : wrapper;

			replacement = doc.createTextNode(
				this.prepareReplacementString(
					replacement, portion, match, matchIndex
				)
			);

			if (!replacement.data) {
				return replacement;
			}

			if (!el) {
				return replacement;
			}

			el.appendChild(replacement);

			return el;
		},

		replaceMatch: function(match, startPortion, innerPortions, endPortion) {

			var matchStartNode = startPortion.node;
			var matchEndNode = endPortion.node;

			var preceedingTextNode;
			var followingTextNode;

			if (matchStartNode === matchEndNode) {

				var node = matchStartNode;

				if (startPortion.indexInNode > 0) {
					// Add `before` text node (before the match)
					preceedingTextNode = doc.createTextNode(node.data.substring(0, startPortion.indexInNode));
					node.parentNode.insertBefore(preceedingTextNode, node);
				}

				// Create the replacement node:
				var newNode = this.getPortionReplacementNode(
					endPortion,
					match
				);

				node.parentNode.insertBefore(newNode, node);

				if (endPortion.endIndexInNode < node.length) { // ?????
					// Add `after` text node (after the match)
					followingTextNode = doc.createTextNode(node.data.substring(endPortion.endIndexInNode));
					node.parentNode.insertBefore(followingTextNode, node);
				}

				node.parentNode.removeChild(node);

				this.reverts.push(function() {
					if (preceedingTextNode === newNode.previousSibling) {
						preceedingTextNode.parentNode.removeChild(preceedingTextNode);
					}
					if (followingTextNode === newNode.nextSibling) {
						followingTextNode.parentNode.removeChild(followingTextNode);
					}
					newNode.parentNode.replaceChild(node, newNode);
				});

				return newNode;

			} else {
				// Replace matchStartNode -> [innerMatchNodes...] -> matchEndNode (in that order)


				preceedingTextNode = doc.createTextNode(
					matchStartNode.data.substring(0, startPortion.indexInNode)
				);

				followingTextNode = doc.createTextNode(
					matchEndNode.data.substring(endPortion.endIndexInNode)
				);

				var firstNode = this.getPortionReplacementNode(
					startPortion,
					match
				);

				var innerNodes = [];

				for (var i = 0, l = innerPortions.length; i < l; ++i) {
					var portion = innerPortions[i];
					var innerNode = this.getPortionReplacementNode(
						portion,
						match
					);
					portion.node.parentNode.replaceChild(innerNode, portion.node);
					this.reverts.push((function(portion, innerNode) {
						return function() {
							innerNode.parentNode.replaceChild(portion.node, innerNode);
						};
					}(portion, innerNode)));
					innerNodes.push(innerNode);
				}

				var lastNode = this.getPortionReplacementNode(
					endPortion,
					match
				);

				matchStartNode.parentNode.insertBefore(preceedingTextNode, matchStartNode);
				matchStartNode.parentNode.insertBefore(firstNode, matchStartNode);
				matchStartNode.parentNode.removeChild(matchStartNode);

				matchEndNode.parentNode.insertBefore(lastNode, matchEndNode);
				matchEndNode.parentNode.insertBefore(followingTextNode, matchEndNode);
				matchEndNode.parentNode.removeChild(matchEndNode);

				this.reverts.push(function() {
					preceedingTextNode.parentNode.removeChild(preceedingTextNode);
					firstNode.parentNode.replaceChild(matchStartNode, firstNode);
					followingTextNode.parentNode.removeChild(followingTextNode);
					lastNode.parentNode.replaceChild(matchEndNode, lastNode);
				});

				return lastNode;
			}
		}

	};

	return exposed;

}());
define("findandreplace", function(){});

(function ($) {

define('upfront/objects/loading',[],function() {

var LoadingModel = Upfront.Models.ObjectModel.extend({
	init: function () {
		this.init_property("type", "LoadingModel");
		this.init_property("view_class", "LoadingView");
		this.init_property("element_id", Upfront.Util.get_unique_id("please_wait"));
		this.init_property("content", 'Please, wait...');
		this.init_property("class", 'c24');
	}
});

var LoadingView = Upfront.Views.ObjectView.extend({
	model: LoadingModel,
	get_content_markup: function () {
		return '<img src="' + Upfront.Settings.root_url + '/img/loading.gif" /> ' +
			'<i>' + this.model.get_content() + '</i>' +
		'';
	},
});

//Upfront.Application.LayoutEditor.add_object("Image", {"Model": LoadingModel, "Command": ImageCommand}); // No command, this is built-in stub
Upfront.Models.LoadingModel = LoadingModel;
Upfront.Views.LoadingView = LoadingView;

});
})(jQuery);

(function () {

// These will be filterable!
define('objects',[
	'upfront/objects/loading'
	//'upfront/objects/image',
	//'upfront/objects/plain_text',
	//'upfront/objects/setting_example',
	//'upfront/objects/test_resize'
], function () {
  if (!Upfront || !Upfront.Application.LayoutEditor || !Upfront.Application.LayoutEditor.add_object) {
    Upfront.Util.log("Unable to add object");
    return false;
  }
	//Upfront.Util.log('loaded');
});

})();

;(function($){
    define('scripts/upfront/upfront-media/insert-options-item-control',[],function(){
    var l10n = Upfront.Settings.l10n.media;
    var INSERT_OPTIONS = {
        uf_insert: 'image_insert',
        wp_insert: 'wp_default'
    };

    var Options_Control = Backbone.View.extend({
        initialize: function(opts){

        },
        render: function(){
            var radios = new Upfront.Views.Editor.Field.Radios({
                label: l10n.insert_options,
                model:  this.model,
                name:  "insert_option",
                layout: 'horizontal-inline',
                default_value: this.model.at(0).get("insert_option") || 'image_insert',
                values: [
                    { label: l10n.image_inserts, value: INSERT_OPTIONS.uf_insert },
                    { label: l10n.wp_default, value: INSERT_OPTIONS.wp_insert }
                ],
                change: function(val){
                    this.model.at(0).set("insert_option", val);
                }
            });
            radios.render();
            this.$el.html( radios.el );

            return  this;
        }
    });

    return {
        Options_Control: Options_Control,
        INSERT_OPTIONS: INSERT_OPTIONS
    };

//End Define
   });
})(jQuery);

(function ($, undefined) {

define('media',[
    'scripts/upfront/upfront-media/insert-options-item-control'
],function(InsertOptions) {

	var MEDIA_SIZES = {
		FULL: "full",
		to_size: function (size) {
			return size.width + 'x' + size.height;
		}
	};

	var l10n = Upfront.Settings.l10n.media;

    var INSERT_OPTIONS = InsertOptions.INSERT_OPTIONS;

// ----- Models -----

	var MediaCollection_Model = Backbone.Collection.extend({
		defaults:{
			thumbnail: '',
			title: ''
		}
	});
	var MediaCollection_Selection = Backbone.Collection.extend({
		model: MediaItem_Model,
		initialize: function () {
			Upfront.Events.on("media_manager:media:labels_loaded", this.global_labels_loaded, this);
		},
		get_shared_labels: function () {
			var known_labels = ActiveFilters.get("label"),
				selected_labels = [],
				shared_labels = [],
				tmp_shared = {}
			;
			this.each(function (item) {
				tmp_shared[item.get("ID")] = item.get("labels") || [];
			});
			selected_labels = _.intersection.apply(this, _(tmp_shared).values());
			known_labels.each(function (label) {
				if (
					selected_labels.indexOf(label.get("value")) >= 0
					||
					selected_labels.indexOf(parseInt(label.get("value"), 10)) >= 0
				) shared_labels.push(label);
			});
			return shared_labels;
		},
		get_additional_sizes: function () {
			if (!ActiveFilters.multiple_sizes) return false; // Do not use multiple sizes if we're told not to
			var all_item_sizes = this.invoke("get", "additional_sizes"),
				item_sizes = []
			;
			_(all_item_sizes).each(function (item, idx) {
				var tmp_sizes = [];
				if (!idx) item_sizes = _(item).map(function (size) { return MEDIA_SIZES.to_size(size);});
				_(item).each(function (size) {
					tmp_sizes.push(MEDIA_SIZES.to_size(size));
				});
				item_sizes = _.intersection(item_sizes, tmp_sizes);
			});
			item_sizes.push(MEDIA_SIZES.FULL);
			return item_sizes;
		},
		is_used_label: function (label) {
			return (_(this.get_shared_labels()).invoke("get", "value").indexOf(label.get("value")) >= 0);
		},
		update_label_state: function (label) {
			return this.is_used_label(label)
				? this.disassociate_label(label)
				: this.associate_label(label)
			;
		},
		associate_label: function (label) {
			this._update_label('', label);
		},
		disassociate_label: function (label) {
			this._update_label('dis', label);
		},
		_update_label: function (pfx, label) {
			pfx = pfx || '';
			var me = this,
				idx = label.get("value"),
				data = {
					action: "upfront-media-" + pfx + "associate_label",
					term: idx,
					post_ids: this.invoke("get", "ID")
				}
			;
			Upfront.Util.post(data)
				.success(function (response) {
					me.each(function (model) {
						var labels = response.data[model.get("ID")];
						if (labels) model.set({labels: labels}, {silent: true});
					});
					me.trigger("change");
				})
			;
		},
		add_new_label: function (label) {
			var me = this,
				data = {
					"action": "upfront-media-add_label",
					"term": label,
					"post_ids": this.invoke("get", "ID")
				}
			;
			Upfront.Util.post(data)
				.success(function (response) {
					me.each(function (model) {
						var labels = response.data[model.get("ID")];
						if (labels) model.set({labels: labels}, {silent: true});
					});
					Upfront.Events.trigger("media_manager:media:labels_updated");
					me.trigger("change");
				})
			;
		},
		delete_media_items: function () {
			var me = this,
				data = {
					"action": "upfront-media-remove_item",
					"post_ids": this.invoke("get", "ID")
				}
			;
			Upfront.Util.post(data)
				.success(function (response) {
					me.reset([]);
					Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
				})
			;
		},
		global_labels_loaded: function () {
			this.trigger("change");
		}
	});
	var MediaItem_Model = Backbone.Model.extend({
		defaults: {
			thumbnail: "<span class='upfront-image-upload-placeholder'></span>",
            insert_option: "image_insert"
		}
	});

	var MediaFilter_Collection = Backbone.Collection.extend({
		model: Media_FilterItem
	});
	var MediaFilter_Item = Backbone.Model.extend({
	});

	var ActiveMediaFilter_Collection = Backbone.Model.extend({
		CONST: {
			CUTOFF_SIZE: 8,
			CUTOFF_BIT: 3,
		},
		labels_cache: false,
		default_media_types: ['images', 'videos', 'audios', 'other'],
		allowed_media_types: [],
		image_sizes: true,
		showing_titles: true,
		current_page: 1,
		max_pages: 1,
		max_items: 1,
		initialize: function () {
			this.to_defaults();
			Upfront.Events.on("media_manager:media:filters_updated", this.update_active_filters, this);
			Upfront.Events.on("media_manager:media:labels_updated", this.reload_labels, this);
			Upfront.Events.on("media_manager:media:toggle_titles", this.toggle_titles, this);
		},
		to_defaults: function () {
			var types = new MediaFilter_Collection([]),
				has_all = (this.allowed_media_types.indexOf('other') >= 0)
			;
			if (!this.allowed_media_types.length) this.allowed_media_types = this.default_media_types;

			if (this.allowed_media_types.indexOf('images') >= 0) types.add(new MediaFilter_Item({filter: l10n.filter.images, value: 'images', state: !has_all}), {silent: true});
			if (this.allowed_media_types.indexOf('videos') >= 0) types.add(new MediaFilter_Item({filter: l10n.filter.videos, value: 'videos', state: !has_all}), {silent: true});
			if (this.allowed_media_types.indexOf('audios') >= 0) types.add(new MediaFilter_Item({filter: l10n.filter.audios, value: 'audios', state: !has_all}), {silent: true});
			if (this.allowed_media_types.indexOf('other') >= 0) types.add(new MediaFilter_Item({filter: l10n.filter.all, value: 'other', state: has_all}), {silent: true});

			this.set("type", types, {silent: true});

			this.set("recent", new MediaFilter_Collection([
				new MediaFilter_Item({filter: "5", value: 5, state: false}),
				new MediaFilter_Item({filter: "10", value: 10, state: false}),
				new MediaFilter_Item({filter: "20", value: 20, state: false}),
				new MediaFilter_Item({filter: "40", value: 40, state: false}),
				new MediaFilter_Item({filter: "100", value: 100, state: false})
			]), {silent: true});

			this.set("order", new MediaFilter_Collection([
				new MediaFilter_Item({filter: l10n.filter.newest, value: 'date_desc', state: true}),
				new MediaFilter_Item({filter: l10n.filter.oldest, value: 'date_asc', state: false}),
				new MediaFilter_Item({filter: l10n.filter.a_z, value: 'title_asc', state: false}),
				new MediaFilter_Item({filter: l10n.filter.z_a, value: 'title_desc', state: false})
			]), {silent: true});

			this.set({"search": new MediaFilter_Collection([])}, {silent: true});

			this.themeImages =false;
			this.current_page = 1;

			this.set_labels_to_defaults();
		},
		set_max_pages: function (max) {
			this.max_pages = max || 1;
		},
		set_max_items: function (max) {
			this.max_items = max || 1;
		},
		prev_page: function () {
			if (this.current_page > 1) return this.set_page(this.current_page-1);
		},
		next_page: function () {
			if (this.current_page < this.max_pages) return this.set_page(this.current_page+1);
		},
		set_page: function (page) {
			if (!page) return false;
			if (page >= 1 && page < this.max_pages) {
				if (page == this.current_page) return false; // Already here.
				this.current_page = page;
				return true;
			} else return false;
		},
		toggle_titles: function () {
			this.showing_titles = !this.showing_titles;
		},
		set_labels_to_defaults: function () {
			if (this.labels_cache) {
				var arr = [];
				_(this.labels_cache).each(function (item) {
					arr.push(new MediaFilter_Item({filter: item.name, value: item.term_id, state: false}));
				});
				this.set("label", new MediaFilter_Collection(arr), {silent: true});
				Upfront.Events.trigger("media_manager:media:labels_loaded");
			} else this.reload_labels();
		},
		reload_labels: function () {
			var me = this;
			Upfront.Util.post({action: "upfront-media-get_labels"})
				.success(function (response) {
					var arr = [];
					if (response.data) {
						me.labels_cache = response.data;
						me.set_labels_to_defaults();
					}
				})
			;
		},
		update_active_filters: function (filter, data) {
			if (!filter || !this.get(filter)) {
				this.to_defaults();
				Upfront.Events.trigger("media_manager:media:filters_reset");
			} else {
				var collection = data && data.get ? data.get(filter).toArray() : data,
					me = this.get(filter)
				;
				_(collection).each(function (item) {
					if (item.get("state")) {
						var has = me.where({filter: item.get("filter")});
						if (has.length) {
							has[0].set({state: item.get("state")}, {silent: true});
						}
					}
				});
			}
			Upfront.Events.trigger("media_manager:media:list", this);
		},
		to_request_json: function () {
			var data = {},
				me = this
			;
			_(this.attributes).each(function (collection, idx) {
				var active = me.get(idx).where({state:true});
				data[idx] = _(active).invoke("get", "value");
			});
			data.page = this.current_page;
			return data;
		},
		to_list: function () {
			var data = {},
				me = this
			;
			_(this.attributes).each(function (collection, idx) {
				var active = me.get(idx).where({state:true}),
					active_non_defaults = []
				;
				active_non_defaults = _(active).filter(function (filter) {
					var value = filter.get("value");
					return "other" !== value && "date_desc" !== value;
				});
				data[idx] = _(active_non_defaults).invoke("get", "filter");
			});
			return data;
		},
		has_upload: function () {
			if (!this.themeImages) return true; // Allow when not looking into theme images
			return Upfront.Application.is_builder(); // Otherwise, allow if in builder
		}
	});

	var ActiveFilters = new ActiveMediaFilter_Collection();

// ----- Views -----


	var MediaManager_Controls_View = Backbone.View.extend({
		className: "upfront-media-controls",
		is_search_active: false,
		initialize: function (args) {
			Upfront.Events.on("media:item:selection_changed", this.switch_controls, this);
			Upfront.Events.on("media:search:requested", this.switch_to_search, this);
            this.options = args.options;
		},
		render: function () {
			this.render_filters();
		},
		render_filters: function () {
			this.control = this.is_search_active ? new MediaManager_SearchFiltersControl() : new MediaManager_FiltersControl();
			this.control.render();
			this.$el.empty().append(this.control.$el);
			if ( this.is_search_active ) this.$el.removeClass('upfront-media-controls-search-selected').addClass('upfront-media-controls-search');
			else this.$el.removeClass('upfront-media-controls-search');
		},
		render_media: function (selected) {
			var item_control = new MediaManager_ItemControl({model: new MediaCollection_Selection(selected), options: this.options});
			item_control.render();
			this.$el.empty();
			if (this.is_search_active) {
				this.control = new MediaManager_SearchFiltersControl();
				this.control.render();
				this.$el.append(this.control.$el);
				this.$el.removeClass('upfront-media-controls-search').addClass('upfront-media-controls-search-selected');
			}
			else
				this.$el.removeClass('upfront-media-controls-search-selected');
			this.$el.append(item_control.$el);
		},
		switch_controls: function (media_collection) {
			var positive = media_collection.where({selected: true});
			if (positive.length) this.render_media(positive);
			else this.render_filters();
		},
		switch_to_search: function (search) {
			this.is_search_active = search && search.get("state");
			this.render_filters();
		},
		remove: function() {
			if (this.control) this.control.remove();
			Upfront.Events.off("media:item:selection_changed", this.switch_controls);
			Upfront.Events.off("media:search:requested", this.switch_to_search);
		}
	});

	var MediaManager_AuxControls_View = Backbone.View.extend({
		className: "upfront-media-aux_controls",
		initialize: function () {
			Upfront.Events.on("media:item:selection_changed", this.switch_controls, this);
		},
		render: function () {
			this.render_selection();
		},
		render_selection: function () {
			var selection_control = new MediaManager_SelectionControl({model: this.model});
			selection_control.render();
			this.$el.empty().append(selection_control.$el);
			this.$el.removeClass('upfront-media-aux_controls-has-select');
		},
		render_delete: function (selected) {
			var delete_control = new MediaManager_DeleteControl({model: new MediaCollection_Selection(selected)});
			delete_control.render();
			this.render_selection();
			this.$el.append(delete_control.$el);
			this.$el.addClass('upfront-media-aux_controls-has-select');
		},
		switch_controls: function (media_collection) {
			var positive = media_collection && media_collection.where ? media_collection.where({selected: true}) : [];
			if (positive.length) this.render_delete(positive);
			else this.render_selection();
		},
		remove: function() {
			Upfront.Events.off("media:item:selection_changed", this.switch_controls);
		}
	});

		var MediaManager_SelectionControl = Backbone.View.extend({
			className: "select_control_container",
			events: {
				"click a.none": "select_none",
				"click a.all": "select_all"
			},
			render: function () {
				this.$el.empty().append(l10n.select + ' <a href="#all" class="all">' + l10n.all + '</a>&nbsp;|&nbsp;<a href="#none" class="none">' + l10n.none + '</a>');
			},
			select_none: function (e) {
				e.preventDefault();
				e.stopPropagation();
				this.model.each(function (item) {
					item.set({selected: false}, {silent: true});
				});
				this.model.trigger("change");
				Upfront.Events.trigger("media:item:selection_changed", this.model);
			},
			select_all: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var all = [];
				this.model.each(function (item) {
					item.set({selected: true}, {silent: true});
					all.push(item);
				});
				this.model.trigger("change");
				Upfront.Events.trigger("media:item:selection_changed", this.model);
			}
		});
		var MediaManager_DeleteControl = Backbone.View.extend({
			className: "delete_control_container",
			events: {
				click: "delete_selection"
			},
			render: function () {
				this.$el.empty().append('<a href="#delete">' + l10n.del_command + '</a>');
			},
			delete_selection: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var show_nag = false;
				this.model.each(function (item) {
					if (item.get("parent")) show_nag = true;
				});
				if (!show_nag || (show_nag && confirm(l10n.item_in_use_nag))) {
					this.model.delete_media_items();
				}
			}
		});

		var MediaManager_ItemControl = Backbone.View.extend({
			className: "upfront-item-control",
            options: {
                insert_options: false,
                hide_sizes: false
            },
			templates: {
				caption: _.template('<label class="upfront-field-label upfront-field-label-block">{{title}}</label>'),
				shared_label: _.template('<a href="#remove" class="upfront-icon upfront-icon-media-label-delete" data-idx="{{value}}">{{filter}}</a>'),
				additional_size: _.template('<option value="{{size}}">{{size}}</option>')
			},
			events: {
				//"change .change_title :text": "change_title",
				"click .existing_labels a": "drop_label",
				//"change .additional_sizes select": "select_size"
			},
			initialize: function ( opts ) {
				this.model.on("change", this.render, this);
                this.options = _.extend( this.options, opts.options );
			},
			render: function () {
                var self = this,
                    sections = _([
                        'change_title',
                        'add_labels',
                        'existing_labels',
                        'insert_options',
                        'additional_sizes'
                    ]),
                    renderers = _([
                        'render_title',
                        'render_labels_adding',
                        'render_shared_labels',
                        'render_additional_sizes',
                        'render_insert_options'
                    ]);

                // remove prev sections
                this.$el.empty();

                // if insert_options is false remove insert options section
                if( !this.options.insert_options ){
                    sections = _( sections.reject(function(section){
                        return section === "insert_options";
                    }) );

                    renderers =  _( renderers.reject(function(renderer){
                        return renderer === "render_insert_options";
                    }) );
                }



                // add sections
                sections.each(function(section){
                    self.$el.append( '<div class="' + section +  '" />' )
                });

                // render sections
                renderers.each(function(renderer){
                    self[renderer]();
                });

			},
			render_title: function () {
				var	me = this,
					$hub = this.$el.find(".change_title");
				$hub.empty();
				if (this.model.length > 1) {

					$hub.append('<span class="selected_length">' + l10n.files_selected.replace(/%d/, this.model.length) + '</span>');
				} else {
					this.title_field = new Upfront.Views.Editor.Field.Text({
						model: this.model.at(0),
						label: l10n.media_title,
						name: 'post_title',
						change: function(){
							me.change_title();
						}
					});
					this.title_field.render();
					$hub.append(this.title_field.$el);
				}
			},
			render_labels_adding: function () {
				var me = this,
					$hub = this.$el.find(".add_labels"),
					container = new MediaManager_ItemControl_LabelsContainer({model: this.model})
				;
				$hub.empty().append(this.templates.caption({title: l10n.add_labels}));
				container.render();
				$hub.append(container.$el);
				this.$el.on("click", function (e) {
					e.stopPropagation();
					container.trigger("filters:selection:click");
				});
			},
			render_shared_labels: function () {
				var me = this,
					$hub = this.$el.find(".existing_labels"),
					shared_labels = this.model.get_shared_labels(),
					title = (shared_labels.length > 1 ? l10n.current_labels : '')
				;
				$hub.empty()
					.append(this.templates.caption({title: title}))
				;
				_(shared_labels).each(function (label) {
					$hub.append(me.templates.shared_label(label.toJSON()));
				});
			},
			render_additional_sizes: function () {
                var me = this,
                    $hub = this.$el.find(".additional_sizes"),
                    additional_sizes = this.model.get_additional_sizes(),
                    title = l10n.additional_sizes,
                    sizes = []
                    ;
                $hub.empty();

                if( ( this.options.insert_options &&  this.model.at(0).get("insert_option") === INSERT_OPTIONS.wp_insert) || ( !this.options.hide_sizes  && !this.options.insert_options )    ) {
                    if (!additional_sizes.length) return false;
                    _(additional_sizes).each(function (size) {
                        sizes.push({ label: (size === MEDIA_SIZES.FULL ? l10n.size_full : size), value: size });
                    });
                    this.size_field = new Upfront.Views.Editor.Field.Select({
                        model: this.model.at(0),
                        label: title,
                        name: 'selected_size',
                        width: '100%',
                        values: sizes,
                        default_value: MEDIA_SIZES.FULL,
                        change: function(){
                            me.select_size();
                        }
                    });
                    this.size_field.render();
                    $hub.append(this.size_field.$el);
                    this.size_field.$el.on("click", function (e) {
                        e.stopPropagation();
                    });
                }


                if (this.model.length < 2) {
                    this.add_url_label($hub);
                }

			},
            add_url_label: function($hub){
                // Add URL label
                var url_field = new Upfront.Views.Editor.Field.Text({
                    model: this.model.at(0),
                    label: l10n.url,
                    name: "document_url"
                });
                url_field.render();
                $hub.append(url_field.$el);
            },
			select_size: function (e) {
				//e.stopPropagation();
				var size = this.size_field.get_value() || MEDIA_SIZES.FULL;
				this.model.each(function (model) {
					model.set({selected_size: size}, {silent: true});
				});
			},
			change_title: function (e) {
				//e.stopPropagation();
				var model = this.model.at(0);
				model.set({post_title: this.title_field.get_value()});
				var me = this,
					data = {
						action: "upfront-media-update_media_item",
						data: model.toJSON()
					}
				;
				Upfront.Util.post(data)
					.done(function () {
						model.trigger("change");
					})
				;
				model.trigger("appearance:update");
			},
			drop_label: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var $label = $(e.target),
					idx = $label.attr("data-idx"),
					shared = this.model.get_shared_labels(),
					label_idx = _(shared).invoke("get", "value").indexOf(idx),
					label = label_idx >= 0 && shared[label_idx] ? shared[label_idx] : false
				;
				if (label) this.model.update_label_state(label);
			},
            render_insert_options: function(){
                var $this_section = this.$(".insert_options"),
                    view = new InsertOptions.Options_Control( {model: this.model} );
                view.render();

                $this_section.html(view.el);
            }
		});

			var MediaManager_ItemControl_LabelsContainer = Backbone.View.extend({
				className: "upfront-additive_multiselection",
				selection: '',
				events: {
					"click :text": "stop_prop",
					"click .title": "show_labels",
					"keyup .search_labels :text": "update_selection",
					"click .add_labels a": "add_new_labels"
				},
				stop_prop: function (e) { e.stopPropagation(); },
				show_labels: function (e) {
					e.stopPropagation();
					e.preventDefault();
					this.$el.addClass("active");
				},
				hide_labels: function (e) {
					this.$el.removeClass("active");
				},
				render: function () {
					this.$el.empty()
						.append('<div class="title">' + l10n.please_select_labels + '</div>')
						.append('<div class="search_labels" />')
						.append('<div class="labels_list"><ul></ul></div>')
						.append('<div class="add_labels" />')
					;
					this.render_search();
					this.render_labels();
					this.render_addition();
					this.on("filters:selection:click", function () {
						this.hide_labels();
					}, this);
				},
				render_search: function () {
					var $hub = this.$el.find(".search_labels");
					$hub.empty().append('<input type="text" class="upfront-field upfront-field-text" value="' + this.selection + '"/>');
				},
				render_labels: function () {
					var me = this,
						$hub = this.$el.find(".labels_list ul"),
						known_labels = ActiveFilters.get("label"),
						shared_labels = this.model.get_shared_labels(),
						has_selection = false
					;
					$hub.empty();
					known_labels.each(function (label) {
						var item = new MediaManager_ItemControl_LabelItem({model: label});
						item.shared = shared_labels;
						item.media_items = me.model;
						item.selection = me.selection;
						item.render();
						if ( item.$el.find('input').size() > 0 ){
							has_selection = true;
							$hub.append(item.$el);
						}
					});
					if ( has_selection ) $hub.removeClass('empty');
					else $hub.addClass('empty');
				},
				render_addition: function () {
					var $hub = this.$el.find(".add_labels");
					$hub.empty();
					if (this.selection) $hub.append('<b class="add_value">' + this.selection + '</b> <a class="add_link" href="#add">' + l10n.add + '</a>').removeClass('empty');
					else $hub.addClass('empty');
				},
				update_selection: function (e) {
					e.preventDefault();
					e.stopPropagation();
					var $text = this.$el.find(".search_labels :text"),
						selection = $text.val()
					;
					this.selection = selection;

					this.render_labels();
					this.render_addition();
				},
				add_new_labels: function (e) {
					e.preventDefault();
					e.stopPropagation();
					var $text = this.$el.find(".search_labels :text"),
						selection = $text.val()
					;
					this.model.add_new_label(selection);
				}
			});

				var MediaManager_ItemControl_LabelItem = Backbone.View.extend({
					tagName: 'li',
					events: {
						click: "toggle_label_assignment"
					},
					render: function () {
						var me = this,
							is_used = this.media_items.is_used_label(this.model),
							used = _.template('<input type="checkbox" id="{{id}}" class="upfront-field-checkbox" value="{{value}}" checked />'),
							free = _.template('<input type="checkbox" id="{{id}}" class="upfront-field-checkbox" value="{{value}}" />'),
							label = _.template('<label for="{{id}}">{{name}}</label>'),
							name = this.model.get("filter") || '',
							match_rx = this.selection ? new RegExp('^(' + this.selection + ')', 'i') : false,
							obj = this.model.toJSON()
						;
						this.$el.empty();
						if (!name.match(match_rx)) return false;
						obj.id = this.cid;
						obj.name = name.replace(match_rx, '<span class="selection">$1</span>');
						this.$el
							.append(label(obj))
							.append((is_used ? used : free)(obj))
						;
					},
					toggle_label_assignment: function (e) {
						e.preventDefault();
						e.stopPropagation();
						this.media_items.update_label_state(this.model);
					}
				});

		var MediaManager_SearchFiltersControl = Backbone.View.extend({
			className: "upfront-search_filter-control",
			events: {
				"click a": "clear_search"
			},
			render: function () {
				var search = ActiveFilters.get("search").first(),
					obj = search.toJSON();
				obj.total = ActiveFilters.get("search").length;
				this.$el.empty().append(
					_.template(l10n.showing_total_results + ' <b class="search-text">{{value}}</b> <a href="#clear" class="clear_search">' + l10n.clear_search + '</a>', obj)
				);
			},
			clear_search: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var search = new MediaFilter_Item({filter: false, value: false, state: false});
				ActiveFilters.set({search: new MediaFilter_Collection([search])});
				Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
				Upfront.Events.trigger("media:search:requested", search);
			}
		});

		var MediaManager_FiltersControl = Backbone.View.extend({
			className: "upfront-filter-control",
			events: {
				"click": "stop_prop"
			},
			stop_prop: function (e) {
				e.stopPropagation();
				if (this.filter_selection) this.filter_selection.trigger("filters:outside_click")
			},
			initialize: function () {
				this.filter_selection = new MediaManager_FiltersSelectionControl();
				this.filters_selected = new MediaManager_FiltersSelectedControl({model: ActiveFilters});
			},
			render: function () {
				this.filter_selection.render();
				this.filters_selected.render();
				this.$el.empty()
					.append(this.filter_selection.$el)
					.append(this.filters_selected.$el)
				;
			},
			toggle_titles: function (e) {
				e.stopPropagation();
				Upfront.Events.trigger("media_manager:media:toggle_titles");
			},
			remove: function() {
				this.filters_selected.remove();
			}
		});

		var MediaManager_FiltersSelectedControl = Backbone.View.extend({
			className: "upfront-filter_selected-control",
			events: {
				"click a.filter": "drop_filter",
				"click a.all_filters": "drop_all"
			},
			initialize: function () {
				Upfront.Events.on("media_manager:media:list", this.set_filters, this);
			},
			render: function () {
				this.$el.empty();
				var me = this,
					_list = _(this.model.to_list()),
					_to_render = _([]),
					tpl = _.template(' <a href="#" class="filter upfront-icon upfront-icon-media-label-delete" data-type="{{type}}" data-filter="{{filter}}">{{filter}}</a>')
				;

				_list.each(function (filters, type) {
					_(filters).each(function (filter) {
						_to_render.push({filter: filter, type: type});
					});
				});
				if (!_to_render.size()) return false; // Do not render the empty filter array (ie. only defaults)

				this.$el.append('<label class="upfront-field-label upfront-field-label-block">' + l10n.active_filters + '</label>');

				_to_render.each(function (item) {
					me.$el.append(tpl(item));
				});
				this.$el.append(" <a href='#' class='all_filters'>" + l10n.clear_all_filters + "</a>");
			},
			set_filters: function (filters) {
				this.model = filters;
				this.render();
			},
			drop_filter: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var $el = $(e.target),
					all = this.model,
					type = $el.attr("data-type"),
					filter = $el.attr("data-filter")
				;
				if (type && all.get(type)) {
					var has = all.get(type).where({filter: filter});
					if (has && has.length) _(has).invoke("set", {state: false}, {silent: true});
				} else {
					_(this.model.attributes).each(function (collection, idx) {
						var has = all.get(idx).where({filter: filter});
						if (has.length) {
							type = idx;
							_(has).invoke("set", {state: false}, {silent: true});
						}
					});
				}
				Upfront.Events.trigger("media_manager:media:filters_updated", type, this.model);
			},
			drop_all: function (e) {
				e.preventDefault();
				e.stopPropagation();
				Upfront.Events.trigger("media_manager:media:filters_updated", false, false);
			},
			remove: function() {
				Upfront.Events.off("media_manager:media:list", this.set_filters);
			}
		});

		var MediaManager_FiltersSelectionControl = Backbone.View.extend({
			className: "upfront-filter_selection-control clearfix",
			initialize: function () {
				this.controls = _([
					new Control_MediaType(),
					//new Control_MediaDate(),
					new Control_MediaFileName(),
					//new Control_MediaRecent(),
					new Control_MediaLabels()
				]);
				this.on("filters:outside_click", function () {
					this.controls.each(function (ctrl) {
						ctrl.trigger("filters:selection:click");
					});
				}, this);
			},
			render: function () {
				var me = this,
					tpl = _.template("<li style='display:none'><a href='#' data-idx='{{idx}}'>{{name}}</a></li>"),
					values = [{label: '&nbsp;', value: false}]
				;
				this.controls.each(function (ctl, idx) {
					values.push({label: ctl.get_name(), value: idx});
				});

				this.$el.empty();

				this.$el.append('<div class="upfront-filter_control" />');
				this.$control = this.$el.find("div.upfront-filter_control");

				this.control_field = new Upfront.Views.Editor.Field.Select({
					label: l10n.filter_label,
					name: "filter-selection",
					width: '100%',
					values: values,
					multiple: false,
					default_value: 'false',
					change: function(){
						me.select_control(this.get_value());
					}
				});
				this.control_field.render();
				this.$el.prepend(this.control_field.$el);
			},
			select_control: function (idx) {
				this.$control.empty();
				if ('false' === idx) return false;


				var control = this.controls.toArray()[idx];
				control.render();
				this.$control.append(control.$el);
				return false;
			}
		});

		var Media_FilterSelection_Multiselection = Backbone.View.extend({
			tagName: "ul",
			get_name: function () {
				return this.filter_name;
			},
			initialize_model: function () {
				this.model = ActiveFilters.get(this.filter_type);
				this.model.on("change", this.apply_changes, this);
			},
			render: function () {
				var me = this;
				this.$el.empty();
				this.model.each(function (model) {
					if (me.allowed_values && me.allowed_values.indexOf(model.get("value")) < 0) return false;
					var item = new Media_FilterSelection_Multiselection_Item({model: model});
					item.render();
					me.$el.append(item.$el);
				});
			},
			apply_changes: function () {
				var data = {},
					values = []
				;
				data = this.model.where({state:true});
				Upfront.Events.trigger("media_manager:media:filters_updated", this.filter_type, data);
			},
			update_selection: function () {
				var active = ActiveFilters.get(this.filter_type);
				if (!active) {
					this.model.invoke("set", {state: false});
				} else {
					this.model.each(function (model) {
						var has = active.where({filter: model.get("filter"), state: true});
						model.set({state: !!has.length});
					});
				}
				this.render();
				return false;
			}
		});

		var Media_FilterSelection_AdditiveMultiselection = Media_FilterSelection_Multiselection.extend({
			tagName: "div",
			className: "upfront-additive_multiselection",
			events: {
				click: "stop_prop",
				"keyup :text.filter": "show_matching_labels"
			},
			stop_prop: function (e) {
				e.stopPropagation();
				this.$el.addClass("active");
			},
			update_state: function (e) {
				this.$el.removeClass("active");
			},
			render: function () {
				var me = this,
					sel = this.selection || ''
				;
				this.$el
					.empty()
					.append('<div class="title">' + l10n.please_select_labels + '</div>')
					.append('<input type="text" class="filter upfront-field upfront-field-text" value="' + sel + '" />')
					.append('<div class="labels_list"><ul></ul></div>')
				;
				this.render_items();
				this.on("filters:selection:click", function () {
					this.update_state();
				}, this);
			},
			render_items: function () {
				var me = this,
					$hub = this.$el.find("div.labels_list ul")
				;
				$hub.empty();
				if (!this.$el.is(".active")) return false; // Only actually render this if we can see it - it takes *a while* to do so

				this.model.each(function (model) {
					if (me.allowed_values && me.allowed_values.indexOf(model.get("value")) < 0) return false;
					var item = new Media_FilterSelection_AdditiveMultiselection_Item({model: model});
					item.selection = me.selection;
					item.render();
					model.on("change:state", me.update_state, me);
					$hub.append(item.$el);
				});
			},
			show_matching_labels: function (e) {
				var $text = this.$el.find(":text.filter"),
					selection = $text.val()
				;
				this.selection = selection;
				this.render_items();
			}
		});

		var Media_FilterSelection_Uniqueselection = Media_FilterSelection_Multiselection.extend({
			render: function () {
				var me = this;
				this.$el.empty();
				this.model.each(function (model) {
					if (me.allowed_values && me.allowed_values.indexOf(model.get("value")) < 0) return false;
					var item = new Media_FilterSelection_Uniqueselection_Item({model: model});
					item.render();
					me.$el.append(item.$el);
					item.on("model:unique_state:change", me.change_state, me);
				});
			},
			change_state: function (model) {
				this.model.each(function (item) {
					if (item.get("value") != model.get("value")) item.set({state: false}, {silent: true});
				});
				model.set({state: true}, {silent: true});
				this.apply_changes();
				this.render();
			}
		});

			var Media_FilterSelection_Multiselection_Item = Backbone.View.extend({
				tagName: "li",
				events: {
					"click": "on_click"
				},
				initialize: function () {
					this.model.on("change", this.render, this);
				},
				render: function () {
					var name = this.model.get("filter");
					if ("other" === this.model.get("value")) return false; // DO NOT RENDER "ALL", special case
					if (this.model.get("state")) name = '<b>' + name + '</b>';
					this.$el.empty().append(name);
				},
				on_click: function (e) {
					e.preventDefault();
					e.stopPropagation();
					this.model.set({state: !this.model.get("state")});
				}
			});

			var Media_FilterSelection_Uniqueselection_Item = Media_FilterSelection_Multiselection_Item.extend({
				on_click: function (e) {
					e.preventDefault();
					e.stopPropagation();
					this.model.set({state: !this.model.get("state")}, {silent: true});
					this.trigger("model:unique_state:change", this.model);
				}
			});

			var Media_FilterSelection_AdditiveMultiselection_Item = Media_FilterSelection_Multiselection_Item.extend({
				render: function () {
					var checked = _.template('<input type="checkbox" for="{{id}}" class="upfront-field-checkbox" name="{{filter}}" value="{{value}}" checked />'),
						unchecked = _.template('<input type="checkbox" for="{{id}}" class="upfront-field-checkbox" name="{{filter}}" value="{{value}}" />'),
						label = _.template('<label for="{{id}}">{{name}}</label>'),
						name = this.model.get("filter") || '',
						match_rx = this.selection ? new RegExp('^(' + this.selection + ')', 'i') : false,
						obj = this.model.toJSON()
					;
					this.$el.empty();
					if (match_rx && !name.match(match_rx)) return false;
					obj.id = this.cid;
					obj.name = name.replace(match_rx, '<span class="selection">$1</span>');
					this.$el
						.append(label(obj))
						.append((this.model.get("state") ? checked : unchecked)(obj))
					;
				}
			});

		var Media_FilterCollection = Backbone.View.extend({
			render: function () {
				var me = this;
				this.$el.empty();
				this.model.each(function (model) {
					var item = new Media_FilterItem({model: model});
					item.render();
					me.$el.append(item.$el);
				});
			}
		});

			var Media_FilterItem = Backbone.View.extend({
				render: function () {
					this.$el.empty().append(this.model.get("filter"));
				}
			});

		var Control_MediaType = Media_FilterSelection_Multiselection.extend({
			initialize: function () {
				this.filter_name = l10n.media_type;
				this.filter_type = "type";
				this.initialize_model();
				Upfront.Events.on("media_manager:media:filters_updated", this.update_selection, this);
				Upfront.Events.on("media_manager:media:filters_reset", this.initialize_model, this);
			},
			apply_changes: function (model) {
				var all = this.model.where({state: true}),
					other = this.model.where({value: 'other'}),
					edited = model.previousAttributes()
				;
				if (other.length) other = other[0]; // Do the model
				else return;

				if (edited && edited.value && "other" === edited.value) {
					var no_other = !!edited.state;
					this.model.each(function (mod) {
						mod.set({state: no_other}, {silent: true});
					});
					other.set({state: !no_other}, {silent: true});
				} else if (other.get("state")) other.set({state: false}, {silent: true});

				Media_FilterSelection_Multiselection.prototype.apply_changes.call(this);

			}
		});

		var Control_MediaFileName = Media_FilterSelection_Uniqueselection.extend({
			allowed_values: ['title_desc', 'title_asc'],
			initialize: function () {
				this.filter_name = l10n.file_name;
				this.filter_type = "order";
				this.initialize_model();
				Upfront.Events.on("media_manager:media:filters_updated", this.update_selection, this);
				Upfront.Events.on("media_manager:media:filters_reset", this.initialize_model, this);
			}
		});

		var Control_MediaLabels = Media_FilterSelection_AdditiveMultiselection.extend({
			initialize: function () {
				this.filter_name = l10n.labels;
				this.filter_type = "label";
				this.initialize_model();
				Upfront.Events.on("media_manager:media:filters_updated", this.update_selection, this);
				Upfront.Events.on("media_manager:media:filters_reset", this.initialize_model, this);
				Upfront.Events.on("media_manager:media:labels_loaded", this.reinitialize_model, this);
			},
			reinitialize_model: function () {
				this.initialize_model();
				this.render();
			}
		});


	/**
	 * Top-level tabs switching and control.
	 */
	var MediaManager_Switcher = Backbone.View.extend({
		events: {
			"click .library": "switch_to_library",
			//"click .embed": "switch_to_embed",
			"click .upload": "switch_to_upload",
			"click .shortcode": "switch_to_shortcode",
			"click .markup": "switch_to_markup",
		},
		switch_template: _.template(
			'<ul class="upfront-tabs upfront-media_manager-tabs"> <li class="library">' + l10n.library + '</li> <li class="embed">' + l10n.embed + '</li> </ul> '
		),
		upload_template: _.template(
			'<button type="button" class="upload">' + l10n.upload + '</button>'
		),
		initialize: function () {
			Upfront.Events.on("media_manager:media:show_library", this.switch_to_library, this);
		},
		render: function () {
			this.$el.empty().append(
				this.switch_template({}) +
				(ActiveFilters.has_upload() ? this.upload_template({}) : '')
			);
			this.$el.addClass('clearfix');
			this.switch_to_library();
		},
		remove: function () {
			this.undelegateEvents();
			this.$el.empty();
		},
		switch_to_library: function (e) {
			var data = {};
			this.$el
				.find("li").removeClass("active")
				.filter(".library").addClass("active")
			;
			if (e && e.preventDefault) {
				e.preventDefault();
				e.stopPropagation();
			} else if (e) {
				data = e;
			}
			this.trigger("media_manager:switcher:to_library", data);
		},
		switch_to_embed: function (e) {
			return false;
			e.preventDefault();
			e.stopPropagation();
			this.$el
				.find("li").removeClass("active")
				.filter(".embed").addClass("active")
			;
			this.trigger("media_manager:switcher:to_embed");
		},
		switch_to_upload: function (e) {
			e.preventDefault();
			e.stopPropagation();
            this.trigger("media_manager:switcher:to_upload");
		},
		switch_to_shortcode: function (e) {
			e.preventDefault();
			e.stopPropagation();
			this.$el
				.find("li").removeClass("active")
				.filter(".shortcode").addClass("active")
			;
			this.trigger("media_manager:switcher:to_shortcode");
		},
		switch_to_markup: function (e) {
			e.preventDefault();
			e.stopPropagation();
			this.$el
				.find("li").removeClass("active")
				.filter(".markup").addClass("active")
			;
			this.trigger("media_manager:switcher:to_markup");
		},
		/**
		 * Boolean helper for determining if we're in some sort of a free-form or text editing mode
		 */
		is_in_editing_mode: function () {
			var type = Upfront.Application.sidebar.prevented_usage_type;
			return !(type.match(/media/));
		}
	});

	/**
	 * Main media dispatcher, has main level views.
	 */
	var MediaManager_View = Backbone.View.extend({
		_request_in_progress: false,
		initialize: function (data) {
			data = _.extend({
				type: "PostImage",
				multiple_selection: false
			}, data);

			var type = data.type,
				multiple_selection = data.multiple_selection,
				button_text = data.button_text
			;

			this.popup_data = data.data;

			ActiveFilters.to_defaults();
			this.switcher_view = new MediaManager_Switcher({el: this.popup_data.$top});

            this.listenTo(this.switcher_view, "media_manager:switcher:to_library", this.render_library, this);
            this.listenTo(this.switcher_view, "media_manager:switcher:to_embed", this.render_embed, this);
            this.listenTo(this.switcher_view, "media_manager:switcher:to_upload", this.render_upload, this);
            this.listenTo(this.switcher_view, "media_manager:switcher:to_shortcode", this.render_shortcode, this);
            this.listenTo(this.switcher_view, "media_manager:switcher:to_markup", this.render_markup, this);

			this.command_view = new MediaManager_BottomCommand({el: this.popup_data.$bottom, button_text: button_text, ck_insert: data.ck_insert});
			this.library_view = new MediaManager_PostImage_View(data.collection, data);
			//this.embed_view = new MediaManager_EmbedMedia({});

			this.library_view.multiple_selection = multiple_selection;

			if(data.themeImages){
				ActiveFilters.themeImages = true;
				this.library_view.multiple_selection = false;
			}
		},
		remove: function() {
			this.library_view.remove();
			this.switcher_view.remove();
			//this.library_view = new MediaManager_PostImage_View(this.collection);
			Upfront.Events.off("media_manager:media:list", this.switch_media_type, this);
		},
		render: function () {
			this.switcher_view.render();
			this.command_view.render();
			this.render_library();
			Upfront.Events
				.off("media_manager:media:list", this.switch_media_type)
				.on("media_manager:media:list", this.switch_media_type, this)
			;
		},
		render_library: function () {
			this.load();
			//this.embed_view.model.clear({silent:true});
			this.library_view.render();

			this.$el.empty().append(this.library_view.$el);
			if (arguments.length) {
				var sel = arguments[0], me = this;
				if ("ID" in sel) {
					this.library_view.media_collection.once("reset", function () {
						var found = me.library_view.media_collection.where({ID: sel.ID});
						if (found.length) found[0].set({selected: true});
					});
				}
			}
		},
		render_embed: function () {
			return false;
			/*
			this.embed_view.model.clear({silent:true});
			this.embed_view.render();
			this.embed_view.$el.css({
				'max-height': this.popup_data.height,
				'overflow-y': 'scroll'
			});
			this.$el.empty().append(this.embed_view.$el);
			*/
		},
		render_upload: function (e) {
			if (!this.library_view.$el.is(":visible")) this.render_library();

			// Check if we're actually allowing uploads
			if (!(window._upfront_media_upload && _upfront_media_upload.image_ref)) {
				alert(l10n.disabled);
				return false;
			}

			var me = this,
				uploaded = 0, progressing = 0, done =0,
				new_media = [],
				media_library_view = me.library_view._subviews.media,
				uploadUrl = ActiveFilters.themeImages ? _upfront_media_upload.theme : _upfront_media_upload.normal
			;

            this.$("#fileupload").remove();
            this.$el.append('<input id="fileupload" type="file" style="display:none" name="media" data-url="' + uploadUrl + '" multiple >');
            this.$("#fileupload").off("click").on("click", function (e) { e.stopPropagation(); }).fileupload({
				dataType: 'json',
				add: function (e, data) {
					var media = data.files[0],
						count = uploaded,
						name = media.name || 'tmp'
					;
					uploaded +=1;
					new_media[count] = new MediaItem_Model({progress: 0});
					new_media[count].set({post_title: name});
					media_library_view.model.add(new_media[count], {at: 0});
					data.submit();
					new_media[count].on("upload:abort", function () {
						data.abort();
						if (new_media[count].get("ID")) {
							// Already uploaded this file, remove on the server side
							Upfront.Util.post({
								action: "upfront-media-remove_item",
								item_id: new_media[count].get("ID")
							}).always(function () {
								media_library_view.model.trigger("change");
							});
						}
						media_library_view.model.remove(new_media[count]);
						media_library_view.model.trigger("change");
					});
					new_media[count].trigger("upload:start", media);
				},
				progressall: function (e, data) {
					var count = progressing;
					progressing+=1;
					var progress = parseInt(data.loaded / data.total * 100, 10);
					if (new_media[count]) new_media[count].trigger("upload:progress", progress);
				},
				done: function (e, data) {
					var count = done;
					done +=1;
					if(ActiveFilters.themeImages){
						new_media[count].set(data.result.data, {silent: true});
						return new_media[count].trigger("upload:finish");
					}

					var result = data.result.data || [],
						uploaded_id = result[0]
					;

					new_media[count].set({ID: uploaded_id}, {silent:true});
					Upfront.Util.post({
						action: "upfront-media-get_item",
						item_id: uploaded_id
					}).done(function (response) {
						new_media[count].set(response.data, {silent:true});
						new_media[count].trigger("upload:finish");
					}).fail(function () {
						Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
					});
				},
				fail: function (e, data) {
					if (data.jqXHR.responseJSON && data.jqXHR.responseJSON.error) Upfront.Views.Editor.notify(data.jqXHR.responseJSON.error, 'error');
					Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
				}
			}).trigger("click");

		},
		render_shortcode: function () {
			//console.log("SHORTCODE YAY");
		},
		render_markup: function () {
			//console.log("MARKUP YAY");
		},
		load: function (data) {
			this._request_in_progress = true;
			data = data && data.type ? data : ActiveFilters.to_request_json();
			data.action = ActiveFilters.themeImages ? 'upfront-media-list_theme_images' : "upfront-media-list_media";
			var me = this;
			if (this.library_view.media_view && this.library_view.media_view.start_loading) this.library_view.media_view.start_loading();
			Upfront.Util.post(data)
				.done(function (response) {
					ActiveFilters.set_max_pages(response.data.meta.max_pages);
					ActiveFilters.set_max_items(response.data.meta.max_items);
					me.library_view.update(response.data.items);
					me.command_view.render();
				})
				.fail(function (response) {
					me.library_view.update([]);
					me.command_view.render();
				})
				.always(function () {
					me._request_in_progress = false;
				})
			;
		},
		switch_media_type: function (what) {
			if (this._request_in_progress) return false;
			this.load(what.to_request_json());
		}
	});

	/**
	 * Bottom commands view (search etc)
	 */
	var MediaManager_BottomCommand = Backbone.View.extend({
		initialize: function(opts){
			this.options = opts;
		},
		render: function () {
			var button_text = this.options.button_text,
				pagination = new MediaManager_Pagination(),
				search = new MediaManager_BottomCommand_Search(),
				use = this.options.ck_insert ? new MediaManager_BottomCommand_UseSelection_MultiDialog({button_text: button_text}) : new MediaManager_BottomCommand_UseSelection({button_text: button_text})
			;
			pagination.render();
			search.render();
			use.render();
			this.$el.empty()
				.append(pagination.$el)
				.append(use.$el)
				.append(search.$el)
			;
		},
		switch_to_upload: function (e) {
			this.trigger("media_manager:switcher:to_upload");
		}
	});

		var MediaManager_Pagination = Backbone.View.extend({
			events: {
				"click .upfront-pagination_item-prev": "prev_page",
				"click .upfront-pagination_item-next": "next_page",
				"click .upfront-pagination_page-item": "set_page",
				"click .upfront-pagination_page-current": "stop_prop",
				"keypress .upfront-pagination_page-current": "set_page_keypress",
			},
			stop_prop: function (e) { e.stopPropagation(); },
			render: function () {
				var markup = '';
				if (ActiveFilters.max_pages > 1) {
					markup += '<div id="upfront-entity_list-pagination">';
					markup += '<a class="upfront-pagination_item upfront-pagination_item-skip upfront-pagination_item-prev"></a>';

					// Input
					markup += '<div class="upfront-pagination_navigation">';
					markup += 	'<input type="text" class="upfront-pagination_page-current" value="' + ActiveFilters.current_page + '" />';
					markup += 	'&nbsp;' + l10n.n_of_x + '&nbsp;';
					markup += 	'<a class="upfront-pagination_page-item" data-idx="' + (ActiveFilters.max_pages - 1) + '">' + (ActiveFilters.max_pages - 1) + '</a>';
					markup += '</div>';

					markup += '<a class="upfront-pagination_item upfront-pagination_item-skip upfront-pagination_item-next"></a>';
					// Add max items
					markup += '<small>(' + _.template(l10n.entity_list_info, {items: ActiveFilters.max_items, pages: ActiveFilters.max_pages - 1}) + ')</small>';
					markup += '</div>';
				}

				this.$el.empty().append(markup);
			},
			prev_page: function (e) {
				e.preventDefault();
				e.stopPropagation();
				if (ActiveFilters.prev_page()) Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
			},
			next_page: function (e) {
				e.preventDefault();
				e.stopPropagation();
				if (ActiveFilters.next_page()) Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
			},
			set_page: function (e) {
				e.preventDefault();
				e.stopPropagation();
				if (ActiveFilters.set_page($(e.target).data("idx"))) Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
			},
			set_page_keypress: function (e) {
				e.stopPropagation();
				//e.preventDefault();
				var string = String.fromCharCode(e.which),
					num = parseInt(string, 10)
				;
				if (13 !== e.which) return true;
				var string = $.trim($(e.target).val()),
					num = parseInt(string, 10)
				;
				if (!num) return false;
				if (num > ActiveFilters.max_pages) num = ActiveFilters.max_pages;
				if (ActiveFilters.set_page(num)) Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
			}
		});

		var MediaManager_BottomCommand_Search = Backbone.View.extend({
			className: "search_container clearfix",
			events: {
				"click .search": "do_search",
				"click .clear": "clear_search",
				"keyup :text": "on_keyup"
			},
			render: function () {
				var active = ActiveFilters.get("search"),
					search = !!active.length ? active.first() : false,
					has_search = !!search && search.get("state")
				;
				this.$el.empty()
					.append('<input type="text" placeholder="' + l10n.search + '" value="' + (has_search && search ? search.get("value") : '') + '" />')
				;
				if (has_search) {
					this.$el.append('<a href="#clear" class="clear upfront-icon upfront-icon-popup-search-clear"></a>');
					this.$el.addClass("has_search");
				}
				else {
					this.$el.removeClass("has_search");
				}
				this.$el.append('<div class="search upfront-icon upfront-icon-popup-search" id="upfront-search_action"></div>');
			},
			do_search: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var $text = this.$el.find(":text"),
					text = $text.val(),
					search = new MediaFilter_Item({filter: text, value: text, state: true})
				;
				if (!text) {
					search = new MediaFilter_Item({filter: false, value: false, state: false});
				}

				ActiveFilters.to_defaults();
				ActiveFilters.set("search", new MediaFilter_Collection([search]));
				Upfront.Events.trigger("media_manager:media:list", ActiveFilters);
				Upfront.Events.trigger("media:search:requested", search);
				this.render();
			},
			clear_search: function (e) {
				e.preventDefault();
				e.stopPropagation();
				var $text = this.$el.find(":text");
				$text.val('');
				this.do_search(e);
			},
			on_keyup: function (e) {
				if ( e.keyCode == 13 )
					this.$el.find('.search').trigger('click');
				else if ( e.keyCode == 27 )
					this.$el.find('.clear').trigger('click');
			}
		});

		var MediaManager_BottomCommand_UseSelection = Backbone.View.extend({
			className: "use_selection_container",
			events: {
				"click a": "use_selection"
			},
			initialize: function (opts) {
				this.options = opts;
				Upfront.Events.on("media:item:selection_changed", this.update_model, this);
			},
			render: function () {
				var button_text = this.options.button_text || "Ok";
				this.$el.empty().append('<a href="#use" class="use">' + button_text + '</a>');
			},
			update_model: function (selected) {
				var positive = selected.where({selected: true});
				this.model = new MediaCollection_Selection(positive);
			},
			use_selection: function (e) {
				e.preventDefault();
				e.stopPropagation();
				Upfront.Popup.close(this.model);
			}
		});

			var MediaManager_BottomCommand_UseSelection_MultiDialog = MediaManager_BottomCommand_UseSelection.extend({
				use_selection: function (e) {
					e.preventDefault();
					e.stopPropagation();
					if ( this.model && this.model.length > 1 )
						this.open_dialog();
					else
						Upfront.Popup.close(this.model);
				},
				open_dialog: function () {
					var $dialog = $('<div id="media-manager-multi-dialog" class="upfront-ui" />');
					$dialog.append('<h3 class="multi-dialog-title">' + l10n.insertion_question + '</h3>');
					$dialog.append(
						'<ul class="multi-dialog-choices">' +
							'<li class="multi-dialog-choice upfront-icon upfront-icon-media-insert-multi-plain" data-choice="plain">' + l10n.plain_images + '</li>' +
							'<li class="multi-dialog-choice upfront-icon upfront-icon-media-insert-multi-slider" data-choice="slider">' + l10n.image_slider + '</li>' +
							'<li class="multi-dialog-choice upfront-icon upfront-icon-media-insert-multi-gallery" data-choice="gallery">' + l10n.image_gallery + '</li>' +
						'</ul>'
					);
					Upfront.Popup.$popup.find("#upfront-popup-content").append($dialog);
					$dialog.on('click', '.multi-dialog-choice', this, this.select_dialog);
				},
				select_dialog: function (e) {
					e.preventDefault();
					e.stopPropagation();
					var $dialog = $('#media-manager-multi-dialog'),
						choice = $(this).attr('data-choice') || 'plain',
						obj = e.data;
					obj.model.type = choice;
					$dialog.remove();
					Upfront.Popup.close(obj.model);
				}
			});

	/**
	 * Embed media from URL
	 */
	var MediaManager_EmbedMedia = Backbone.View.extend({
		className: "upfront-embed_media clearifx",
		initialize: function () {
			this.model = new MediaItem_Model();
		},
		render: function () {
			this.embed_pane = new MediaManager_Embed_DetailsPane({model: this.model});
			this.embed_pane.on("embed:editable:updated", this.embed_updated, this);

			this.preview_pane = new MediaManager_Embed_PreviewPane({model: this.model});

			this.embed_pane.render();
			this.preview_pane.render();
			this.$el.empty()
				.append(this.embed_pane.$el)
				.append(this.preview_pane.$el)
			;
		},
		embed_updated: function () {
			this.preview_pane.render_progress();
			var me = this;
			Upfront.Util.post(_.extend({
				action: "upfront-media-embed",
				media: this.model.get("original_url")
			}, _upfront_media_upload.embed_ref)).done(function (response) {
				me.model.set(response.data, {silent:true});
				me.preview_pane.trigger("embed:media:imported");
				me.embed_pane.clear_updating_flag();
				me.embed_pane.render();
				me.preview_pane.render();
			});
		}
	});
		var MediaManager_Embed_DetailsPane = Backbone.View.extend({
			className: "upfront-pane",
			embed_is_being_updated: false,
			events: {
				"click button": "save"
			},
			initialize: function () {
				this.editables = _([
					new MediaItem_EmbedableUrl({model: this.model}),
					new MediaItem_EditableTitle({model: this.model}),
					new MediaItem_EditableLabels({model: this.model})
				]);
			},
			render: function () {
				this.$el.empty();
				var me = this;
				this.editables.each(function (editable) {
					editable.render();
					editable.on("embed:updated", me.editable_updated, me);
					me.$el.append(editable.$el);
				});
				this.$el.append('<button type="button">' + l10n.ok + '</button>');
			},
			editable_updated: function () {
				this.embed_is_being_updated = true;
				this.trigger("embed:editable:updated");
			},
			clear_updating_flag: function () {
				this.embed_is_being_updated = false;
			},
			save: function () {
				if (!this.model) return false;
				var me = this;
				if (!this.model.get("ID") && this.embed_is_being_updated) {
					// A case when an embed is still being fetched but OK is clicked
					setTimeout(function () {
						me.save();
					}, 500);
					return false;
				}
				//this.editables.invoke("update"); // Do NOT!! invoke the update
				var data = {
					action: "upfront-media-update_media_item",
					data: this.model.toJSON()
				};
				Upfront.Util.post(data)
					.done(function () {
						me.model.trigger("change");
						// Swap back to media
						Upfront.Events.trigger("media_manager:media:show_library", data.data);
					})
				;
			}
		});

		var MediaManager_Embed_PreviewPane = Backbone.View.extend({
			className: "upfront-pane",
			initialize: function () {
			},
			render: function () {
				this.preview_view = new MediaManager_Embed_Preview({model: this.model});
				this.labels_view = new MediaItem_Labels({model: this.model});
				this.on("embed:media:imported", this.update_media_preview, this);

				this.preview_view.render();
				//this.labels_view.render();
				this.$el.empty()
					.append(this.preview_view.$el)
					//.append(this.labels_view.$el)
				;
			},
			render_progress: function () {
				this.$el.empty().append('<div class="preview_loader" />');
				var $loader = this.$el.find(".preview_loader");
				$loader.css({
					position: "relative",
					minHeight: "250px", // Ugh...
					width: "100%"
				});
				this.loading = new Upfront.Views.Editor.Loading({
					loading: l10n.loading_embeddable_preview,
					done: 'Loaded'
				});
				this.loading.render();
				$loader.append(this.loading.$el);
			},
			update_media_preview: function () {
				this.preview_view.render();
				this.labels_view.render();
				this.labels_view.delegateEvents();
			}
		});

			var MediaManager_Embed_Preview = Backbone.View.extend({
				className: "upfront-media_manager-embed-preview",
				template: _.template('{{thumbnail}} <div class="progress"></div>'),
				render: function () {
					if (!this.model.get("original_url")) return this.$el.empty();
					var me = this,
						is_image = this.is_image(),
						thumbnail = is_image ? this.model.get("thumbnail") : this.get_media_thumbnail()
					;
					this.$el.empty().append(this.template({thumbnail: thumbnail}));
				},
				is_image: function () {
					return (this.model.get("original_url") || "").match(/\.(jpe?g|gif|png)$/i);
				},
				get_media_thumbnail: function () {
					return this.model.get("thumbnail");
				}
			});

	/**
	 * Post images library implementation.
	 */
	var MediaManager_PostImage_View = MediaManager_View.extend({
		className: "upfront-media_manager upfront-media_manager-post_image clearfix",
		_subviews: {
			media: false,
			aux: false,
			controls: false
		},
		initialize: function (collection, opts) {
			var data = data || {};
			if(collection.models)
				collection = new MediaCollection_Model(collection);
			else
				collection = new MediaCollection_Model();
			this.media_collection = collection;

            this.options = opts;
		},
		render: function () {
			if (!this._subviews.media) {
				this._subviews.media = new MediaCollection_View({model: this.media_collection});
			}
			var media = this._subviews.media;
			
			if (!this._subviews.aux) {
				this._subviews.aux = new MediaManager_AuxControls_View({model: this.media_collection});
			}
			var aux = this._subviews.aux;
			
			if (!this._subviews.controls) {
				this._subviews.controls = new MediaManager_Controls_View({model: this.media_collection, options: this.options });
			}
			var controls = this._subviews.controls;

			media.multiple_selection = this.multiple_selection;

			controls.render();
			aux.render();
			media.render();
			this.$el
				.empty()
				.append(controls.$el)
				.append(aux.$el)
				.append(media.$el)
			;
			this.media_view = media;
			this.media_view.start_loading();
		},
		update: function (collection) {
			var me = this;
			this.media_view.model.reset(collection);
			this.media_view.end_loading(function(){
				me.media_view.render();
			});
		},
		remove: function() {
			_.each(this._subviews, function(subview, idx) {
				if (!subview) return true;
				subview.remove();
				this._subviews[idx] = false;
			}, this);
		}
	});

	var MediaCollection_View = Backbone.View.extend({
		tagName: 'ul',
		className: 'upfront-media_collection',
		initialize: function () {
			this.model.on("add", this.render, this);
			this.model.on("remove", this.render, this);
			this.model.on("change", this.update, this);
			this.model.on("change:selected", this.propagate_selection, this);
		},
		render: function () {
			this.subviews = [];
			var me = this;
			this.$el.empty();
			if (!this.model.length) {
				this.$el.append('&nbsp;');
			} else {
				this.model.each(function (model) {
					var view = new MediaItem_View({model: model});
					me.subviews.push(view);
					view.parent_view = me;
					view.render();
					me.$el.append(view.$el);
				});
			}
		},
		update: function () {
			if (this.model.length) {
				this.model.each(function (model) {
					model.trigger("appearance:update");
				});
			}
		},
		start_loading: function () {
			this.loading = new Upfront.Views.Editor.Loading({
				loading: l10n.loading_media_files,
				done: 'Loaded'
			});
			this.loading.render();
			this.$el.append(this.loading.$el);
		},
		end_loading: function (callback) {
			if (this.loading && this.loading.done) this.loading.done(callback);
			else callback();
			Upfront.Events.trigger("media:item:selection_changed", this.model);
		},
		propagate_selection: function (model) {
			if (!this.multiple_selection) {
				var has = this.model.where({selected: true}),
					selected = true === model.get("selected")
				;
				if (has.length) _(has).each(function (item) {
					item.set({selected: false}, {silent: true});
					item.trigger("appearance:update");
				});
				if (selected) model.set({selected: true}, {silent: true});
				model.trigger("appearance:update");
			}
			Upfront.Events.trigger("media:item:selection_changed", this.model);
		},
		remove: function() {
			_.each(this.subviews, function(subview) {
				subview.remove();
			});
		}
	});
		var MediaItem_View = Backbone.View.extend({
			tagName: 'li',
			className: 'upfront-media_item',
			events: {
				click: "toggle_item_selection"
			},
			initialize: function () {

				this.template = _.template("<div class='thumbnail'>{{thumbnail}}</div> <div class='title'>{{post_title}}</div> <div class='upfront-media_item-editor-container' />");
				Upfront.Events.on("media_manager:media:toggle_titles", this.toggle_title, this);

				this.model.on("appearance:update", this.update, this);

				this.model.on("upload:start", this.upload_start, this);
				this.model.on("upload:progress", this.upload_progress, this);
				this.model.on("upload:finish", this.upload_finish, this);
			},
			render: function () {
				this.$el.empty().append(
					this.template(this.model.toJSON())
				);
				this.update();
				this.toggle_title();
			},
			update: function () {
				if (this.model.get("parent")) this.$el.addClass("has-parent");
				else this.$el.removeClass("has-parent");
				if (this.model.get("selected") && !this.$el.hasClass("selected")) {
					this.$el.addClass("selected");
				}
				else if (!this.model.get("selected")) {
					this.$el.removeClass("selected");
				}
				this.$el.find(".title").text(this.model.get('post_title'));
			},
			toggle_title: function () {
				var state = ActiveFilters.showing_titles,
					$el = this.$el.find(".title")
				;
				if (state && !$el.is(":visible")) $el.show();
				else $el.hide();
			},
			toggle_item_selection: function (e) {
				e.stopPropagation();
				e.preventDefault();
				this.model.set({selected: !this.model.get("selected")});
			},
			upload_start: function (media) {
				/*$(".upfront-media_item-editor").remove();
				var editor = new MediaItem_EditorView({
					model: this.model,
					media: media
				});
				editor.render();
				this.$el.find(".upfront-media_item-editor-container").append(editor.$el);*/
				this.parent_view.$el.scrollTop(0);
				this.$el.find('.thumbnail').append('<div class="upfront-media-progress-bar" />');
			},
			upload_progress: function (progress) {
				//Upfront.Util.log(_.template("{{post.post_title}} progress changed to {{progress}}", {post:this.model.toJSON(), progress:progress}));
				this.$el.find('.upfront-media-progress-bar').css('width', progress+'%');
			},
			upload_finish: function () {
				this.$el.find(".thumbnail .upfront-image-upload-placeholder").replaceWith(this.model.get("thumbnail"));
				this.$el.find('.upfront-media-progress-bar').remove();
				this.model.set({selected: true});
				Upfront.Events.trigger("media:item:selection_changed", this.model.collection);
			},
			remove: function() {
				Upfront.Events.off("media_manager:media:toggle_titles", this.toggle_title);
			}
		});

// ----- Editor -----

	var MediaItem_EditorView = Backbone.View.extend({
		className: "upfront-media_item-editor",
		events: {
			"click button": "save"
		},
		initialize: function (data) {
			this.editables = _([
				new MediaItem_EditableTitle({model: this.model})
			]);
			if (data && data.media) this.media = data.media;
		},
		render: function () {
			this.$el.empty();
			var me = this;
			this.editables.each(function (editable) {
				editable.render();
				me.$el.append(editable.$el);
			});

			var labels = new MediaItem_Labels({model: this.model});
			labels.render();
			this.$el.append(labels.$el);

			this.$el.append('<button type="button">' + l10n.ok + '</button>');
			if (!this.media) return true;

			var type = this.media.type || 'application/octet-stream',
				is_image = type.match(/^image/i)
			;
			if (is_image) return true;

			var nag = new MediaItem_UploadNag({model: this.model, media:this.media});
			nag.render();
			this.$el.append(nag.$el);
		},
		save: function () {
			this.editables.invoke("update");
			var me = this,
				data = {
					action: "upfront-media-update_media_item",
					data: this.model.toJSON()
				}
			;
			Upfront.Util.post(data)
				.done(function () {
					//Upfront.Util.log('successfully saved data');
					me.model.trigger("change");
				})
			;
		}
	});

	var MediaItem_Labels = Backbone.View.extend({
		className: "upfront-media_labels",
		events: {
			"click button": "create_label",
			"click a.own_label": "drop_label",
			"click a.all_label": "add_label"
		},
		initialize: function () {
			this.labels = ActiveFilters.get("label");
			Upfront.Events.on("media_manager:media:labels_loaded", this.reset_labels, this);
		},
		reset_labels: function () {
			this.labels = ActiveFilters.get("label");
			this.render();
		},
		render: function () {
			var own_labels_template = _.template('<a class="own_label" href="#" data-idx="{{value}}">{{filter}}</a> '),
				all_labels_template = _.template('<a class="all_label" href="#" data-idx="{{value}}">{{filter}}</a> '),
				me = this,
				model_labels = this.model.get("labels"),
				own_labels = [],
				all_labels = []
			;
			this.$el.empty();
			if (this.labels) this.labels.each(function (item) {
				if (model_labels && model_labels.length && model_labels.indexOf(item.get("value")) >= 0) own_labels.push(own_labels_template(item.toJSON()));
				else all_labels.push(all_labels_template(item.toJSON()));
			});
			me.$el.append(l10n.applied_labels + "&nbsp;");
			_(own_labels).each(function (item) {
				me.$el.append(item);
			});
			this.$el.append(
				'<input type="text" placeholder="label..." />' +
				'<button type="button">' + l10n.add + '</button>'
			);
			me.$el.append("All labels: ");
			_(all_labels).each(function (item) {
				me.$el.append(item);
			});
		},
		create_label: function (e) {
			e.preventDefault();
			e.stopPropagation();

			var label = this.$el.find(":text").val(),
				data = {
					"action": "upfront-media-add_label",
					"term": label,
					"post_id": this.model.get("ID")
				}
			;
			Upfront.Util.post(data)
				.success(function (response) {
					Upfront.Events.trigger("media_manager:media:labels_updated");
				})
			;
		},
		add_label: function (e) {
			e.preventDefault();
			e.stopPropagation();
			this._update_labels(e);
		},
		drop_label: function (e) {
			e.preventDefault();
			e.stopPropagation();
			this._update_labels(e, 'dis');
		},
		_update_labels: function (e, pfx) {
			pfx = pfx || '';
			e.preventDefault();
			e.stopPropagation();
			var me = this,
				$label = $(e.target),
				idx = $label.attr("data-idx"),
				data = {
					action: "upfront-media-" + pfx + "associate_label",
					term: idx,
					post_id: this.model.get("ID")
				}
			;
			Upfront.Util.post(data)
				.success(function (response) {
					var id = me.model.get("ID"),
						data = response.data || {},
						labels = data[id] || data
					;
					me.model.set("labels", labels, {silent: true});
					me.render();
				})
			;
		}
	});

	var MediaItem_UploadNag = Backbone.View.extend({
		className: "upload_type-nag",
		events: {
			"click .keep": "keep_file",
			"click .remove": "remove_file"
		},
		render: function () {
			this.$el.empty()
				.append(l10n.video_recommendation_nag)
				.append('<a href="#" class="button keep">' + l10n.keep_file + '</a>')
				.append('<a href="#" class="button remove">' + l10n.remove_file + '</a>')
			;
		},
		keep_file: function (e) {
			e.preventDefault();
			e.stopPropagation();
		},
		remove_file: function (e) {
			e.preventDefault();
			e.stopPropagation();
			this.model.trigger("upload:abort");
		}
	});

		var MediaItem_EditorEditable = Backbone.View.extend({
			className: "upfront-media_item-editable",
			events:{
				change: "update"
			},
			template: _.template(
				"<label>{{label}}<input type='text' name='{{name}}' value='{{value}}' placeholder='{{placeholder}}' /></label>"
			),
			get_name: function () {},
			get_label: function () {},
			get_placeholder: function () {},
			get_value: function () {
				return this.$el.find('[name="' + this.get_name() + '"]:first').val();
			},
			render: function () {
				var name = this.get_name() || '',
					label = this.get_label() || '',
					placeholder = this.get_placeholder() || '',
					value = this.model.get(this.get_name()) || '',
					data = {
						name:  name,
						label: label,
						placeholder: placeholder,
						value: value
					}
				;
				this.$el.empty().append(
					this.template(data)
				);
			},
			update: function () {
				var obj = {};
				obj[this.get_name()] = this.get_value();
				this.model.set(obj, {silent: true});
			}
		});

		var MediaItem_EditorEmbedableEditable = MediaItem_EditorEditable.extend({
			update: function () {
				var obj = {};
				obj[this.get_name()] = this.get_value();
				this.model.set(obj, {silent: true});
				this.trigger("embed:updated");
			}
		});

		var MediaItem_EmbedableUrl = MediaItem_EditorEmbedableEditable.extend({
			get_name: function () { return "original_url"; },
			get_label: function () { return l10n.media_url; },
			get_placeholder: function () { return "http://sample.com/path-to-image/image.jpg"; }
		});

		var MediaItem_EditableTitle = MediaItem_EditorEditable.extend({
			get_name: function () { return "post_title"; },
			get_label: function () { return l10n.image_title; },
			get_placeholder: function () { return l10n.your_image_title; }
		});

		var MediaItem_EditableLabels = MediaItem_EditorEditable.extend({
			get_label: function () { return l10n.labels; },
			render: function () {
				var collection = new MediaCollection_Selection([this.model]),
					view = new MediaManager_ItemControl_LabelsContainer({model: collection})
				;
				view.render();
				collection.on("change", view.render_labels, view);
				this.$el.empty()
					.append('<label>' + this.get_label() + '</label>')
					.append(view.$el)
				;
			}
		});

// ----- Interface -----

	var ContentEditorUploader = Backbone.View.extend({
		initialize: function (opts) {
			this.options = opts;
		},
		open: function (options) {
			options = _.extend({
				media_type: ["images"],
				multiple_sizes: true,
				multiple_selection: true,
				button_text: l10n.ok,
				ck_insert: false,
				hold_editor: false,
			}, options);

			var me = this,
				popup = false,
				media_type = options.media_type,
				multiple_selection = options.multiple_selection,
				button_text = options.button_text
			;
			ActiveFilters.allowed_media_types = media_type;
			ActiveFilters.multiple_sizes = options.multiple_sizes;

			popup = Upfront.Popup.open(function (data, $top, $bottom) {
				me.out = this;
				me.popup_data = data;
				me.popup_data.$top = $top;
				me.popup_data.$bottom = $bottom;
				me.load(options);
			}, {width: 800, hold_editor: options.hold_editor}, 'media-manager');

			popup.always(_.bind(this.cleanup_active_filters, this));
			popup.progress($.proxy(this.clean_up, this));

			Upfront.Events.trigger('upfront:element:edit:start', 'media-upload');

			return popup;
		},
		/**
		 * Ensure everything is off when popup is closed.
		 */
		clean_up: function(flag) {
			if (flag === 'before_close') {
				Upfront.Events.trigger('upfront:element:edit:stop', 'media-upload');
			}
		},
		cleanup_active_filters: function () {
			ActiveFilters.allowed_media_types = [];
			this.cleanup_manager_view();
		},
		cleanup_manager_view: function () {
			if (this.media_manager) {
				this.media_manager.undelegateEvents();
				this.media_manager.remove();
				this.media_manage_options = undefined;
			}
		},
		load: function (options) {

			this.cleanup_manager_view();

			if (_.isUndefined(this.media_manage_options)) {
				this.media_manage_options = _.extend({
					el: this.out,
					data: this.popup_data
				}, options);
				this.media_manager = new MediaManager_View(this.media_manage_options);
			} else if(!_.isEqual(this.media_manage_options,  _.extend({ el: this.out, data: this.popup_data }, options))) {
				this.media_manage_options = _.extend({
					el: this.out,
					data: this.popup_data
				}, options);
				this.media_manager = new MediaManager_View(this.media_manage_options);
			}

			this.media_manager.render();
			return false;
		},
		results_html: function (result) {
			var html = '';
			if (result && result.each) result.each(function (item) {
				var data = item.toJSON(),
					selected_size = item.get("selected_size") || MEDIA_SIZES.FULL,
					all_sizes = item.get("additional_sizes")
				;
				if (selected_size && MEDIA_SIZES.FULL != selected_size) {
					_(all_sizes).each(function (size) {
						if (MEDIA_SIZES.to_size(size) != selected_size) return true;
						data.image = size;
					});
				}
				if ( result.type == 'gallery' )
					data.link = {
						href: '#',
						class: 'popup'
					};
				data.type = result.type;
				html += _.template( (data.link ? Upfront.Media.Templates.image_link : Upfront.Media.Templates.image), data);
			});
			if (result && result.length && result.length > 1) {
				if ( result.type == 'plain' )
					html = _.template(
						Upfront.Media.Templates.multiple,
						{content: html}
					);
				else if ( result.type == 'gallery' )
					html = _.template(
						Upfront.Media.Templates.gallery,
						{content: html}
					);
				else if ( result.type == 'slider' )
					html = _.template(
						Upfront.Media.Templates.slider,
						{content: html}
					);
			}
			return html;
		}
	});

Upfront.Media = {
	Manager: new ContentEditorUploader(),
	Templates: {
		image: '<p class="upfront-inserted_image-wrapper upfront-inserted_image-{{type}}"><img src="{{image.src}}" title="{{post_title}}" alt="{{post_title}}" height="{{image.height}}" width="{{image.width}}" /></p>',
		image_link: '<p class="upfront-inserted_image-wrapper upfront-inserted_image-{{type}}"><a href="{{link.href}}" class="{{link.class}}"><img src="{{image.src}}" title="{{post_title}}" alt="{{post_title}}" height="{{image.height}}" width="{{image.width}}" /></a></p>',
		embeddable: '<div>{{post_content}}<br />{{post_title}}</div>',
		gallery: '[upfront-gallery]{{content}}[/upfront-gallery]',
		slider: '[upfront-slider]{{content}}[/upfront-slider]',
		multiple: '{{content}}'
	},
	Transformations: {
		_transformations: _([]),
		add: function (f) {
			this._transformations.push(f);
		},
		apply: function (content) {
			this._transformations.each(function (t) {
				content = t.apply(this, [content]);
			});
			return content;
		}
	},
	Ref: (window._upfront_media_upload || {image_ref: ''}).image_ref
};

});
})(jQuery);

;(function ($, undefined) {

var deps = [
	"text!upfront/templates/content.html",
	'upfront/post-editor/upfront-post-content',
	'upfront/post-editor/upfront-post-layout'
];

define("content", deps, function(postTpl, ContentTools) {
	var PostEditor = Backbone.View.extend({
		tpl: Upfront.Util.template(postTpl),
		events: {
			'dblclick': 'editContents',
			'click a': 'preventLinkNavigation'
		},
		initialize: function(options){
			var me = this;
			this.postId = options.post_id;
			this.setElement(options.node);
			this.autostart = options.autostart || false;
			this.content_mode = options.content_mode;
			this.changed = {};

			//If the post is in the cache, prepare it!
			if(Upfront.data.posts[this.postId]){
				this.post = Upfront.data.posts[this.postId];
				if(!this.post.meta.length)
					this.post.meta.fetch();

				this.loadingPost = new $.Deferred();
				this.loadingPost.resolve(this.post);
			}

			this.postView = options.view;
			this.getPost();

			this.getPostLayout();

		},

		setDefaults: function(){
			this.mode = 'content'; // Also 'layout' to edit post layout.
		},

		getPost: function(){
			var deferred = $.Deferred();
			if(this.post){
				deferred.resolve(this.post);
				this.loadingPost = deferred.promise();
			}
			if(this.loadingPost) {
				return this.loadingPost;
			}

			var post = Upfront.data.posts[this.postId];
			if(post){
				this.post = post;
				deferred.resolve(post);
				this.loadingPost = deferred.promise();
				return this.loadingPost;
			}

			return this.fetchPost();
		},


		getPostLayout: function(){
			if(this.loadingLayout)
				return this.loadingLayout;

			var me = this,
				deferred = $.Deferred(),
				layoutData
			;

			if(me.postView.postLayout && me.postView.parts[me.postId]){
				layoutData = {
					postLayout: me.postView.postLayout,
					partOptions: me.postView.partOptions || {}
				};

				me.layoutData = true;
				me.parts = me.postView.parts[me.postId];

				deferred.resolve(layoutData);
				this.loadingLayout = deferred.promise();
				return this.loadingLayout;
			}


			this.loadingLayout = this.fetchPostLayout();
			return this.loadingLayout;
		},

		fetchPostLayout: function(){
			var deferred = $.Deferred(),
				me = this,
				layoutType = me.postView.property('type') == 'ThisPostModel' ? 'single' : 'archive',
				id = layoutType == 'single' ? this.postId : me.postView.property('element_id').replace('uposts-object-',''),
				properties = {
					hide_featured_image: me.postView.property('hide_featured_image'),
					full_featured_image: me.postView.property('full_featured_image')
				}
			;

			this.getPost().done(function(){
				Upfront.Util.post({
					action: 'upfront_get_postlayout',
					type: layoutType,
					id: id,
					layout_cascade: Upfront.Application.current_subapplication.get_layout_data().layout,
					post_id: me.postId,
					post_type: me.post.get('post_type'),
					properties: properties
				}).done(function(response){
					var layoutData = response.data;
					if(!layoutData.partOptions)
						layoutData.partOptions = {};

					_.extend(me.postView, layoutData);

					if(!me.postView.parts)
						me.postView.parts = {};

					me.postView.parts[me.postId] = layoutData.partContents;
					me.parts = layoutData.partContents;

					me.layoutData = true;

					deferred.resolve(layoutData);
				}).fail(function(error){
					console.log('error!!');
				});
			});

			return deferred.promise();
		},

		render: function(){
			var me = this,
				markupper = ContentTools.getMarkupper()
			;

			if(!this.layoutData){
				this.$el.html(Upfront.Settings.l10n.global.content.loading);
				return this.loadingLayout.done(function(){
					me.render();
				});
			}

			var wrappers = this.postView.postLayout || {},
				options = this.postView.partOptions || {},
				layout = {
					wrappers: wrappers,
					wrappersLength: wrappers.length,
					extraClasses: {},
					attributes: {}
				}
			;

			_.each(wrappers, function(wrapper, w){
				wrapper.objectsLength = wrapper.objects.length;
				_.each(wrapper.objects, function(object, o){

					var attributes = options && options[object.slug] && options[object.slug].attributes ? options[object.slug].attributes : {},
						attrs = ''
					;
					_.each(attributes, function(value, key){
						attrs += key +'="' + value + '" ';
					});

					layout.attributes[object.slug] = attrs;
					layout.extraClasses[object.slug] = options && options[object.slug] && options[object.slug].extraClasses ? options[object.slug].extraClasses : '';

					if ( object.slug in me.parts.classes && me.parts.classes[object.slug] && me.parts.classes[object.slug].length ) {
						layout.extraClasses[object.slug] = me.parts.classes[object.slug].join(' ');
					}
					
					if ( object.classes.indexOf('part-module-' + object.slug) === -1 ) {
						object.classes += ' part-module-' + object.slug;
					}

					object.markup = markupper.markup(object.slug, me.parts.replacements, me.getTemplate(object.slug));
				});
			});


			this.$el.html(this.tpl(layout));
			this.setContentPadding();
			this.trigger('rendered');


		},

		getTemplate: function(part){
			var templates = this.postView.partTemplates;

			if(part == 'contents' && this.content_mode == 'post_excerpt')
				part = 'excerpt';
			if(templates && templates[part])
				return templates[part];

			return Upfront.data.thisPost.templates[part];
		},

		fetchPost: function(){
			var me = this,
				deferred = $.Deferred()
			;
			this.post = new Upfront.Models.Post({ID: this.postId});

			//this.bindPostEvents();
			me.loadingPost = deferred.promise();
			this.post.fetch({withMeta: true, filterContent: true}).done(function(response){
				if(!Upfront.data.posts)
					Upfront.data.posts = {};
				Upfront.data.posts[me.postId] = me.post;
				deferred.resolve(me.post);
			});


			return this.loadingPost;
		},

		editContents: function(e, focusElement){
			var me = this,
				ram = function () {
					arguments.callee.iter = arguments.callee.iter || 0;
					arguments.callee.iter++;
					if (arguments.callee.iter < 30) setTimeout(function () { // Total 3s wait time
						me.editContents(e, focusElement);
					}, 100);
				}
			;

			//If we are already editing, don't do anything
			if(this.contentEditor || Upfront.Application.is_builder())// || Upfront.Application.current_subapplication == Upfront.Application.PostContentEditor)
				return;

			//If we haven't fetched all the data, return too
			if(!this.layoutData || !this.post) {
				// Yeah, so wait a bit and ram this again. It'll give at some point.
				ram();
				return;
			}

			// Make sure that the content is ready for editing, if not, render again and...
			if(this.$el.find('.upfront-content-marker').length < 1) {
				this.render();
				// Yeah, so wait a bit and ram this again. It'll give at some point.
				ram();
				return;
			}

			var target = e ? $(e.currentTarget) : focusElement;


			this.contentEditor = new ContentTools.PostContentEditor({
				post: this.post,
				postView: this.postView,
				content_mode: this.content_mode,
				el: this.el,
				triggeredBy: target,
				authorTpl: this.getTemplate('author'),
				partOptions: this.postView.partOptions,
				rawContent: this.parts.replacements['%raw_content%'],
				rawExcerpt: this.parts.replacements['%raw_excerpt%']
			});

			this.$el.closest('.upfront-wrapper').addClass('upfront-postcontent-editor');
			Upfront.Events.trigger('post:content:edit:start', this.contentEditor);

			this.listenTo(this.contentEditor, 'cancel', this.cancelChanges);
			this.listenTo(this.contentEditor, 'publish', this.publish);
			this.listenTo(this.contentEditor, 'draft', this.saveDraft);
			this.listenTo(this.contentEditor, 'auto-draft', this.saveAutoDraft);
			this.listenTo(this.contentEditor, 'trash', this.trash);

			// So let's focus on title
			this.contentEditor.focus(this.contentEditor.parts.titles, true);
		},

		stopEditContents: function(){
			this.stopListening(this.contentEditor);
			this.contentEditor.stop();
			this.contentEditor = false;
			this.$el.closest('.upfront-wrapper').removeClass('upfront-postcontent-editor');
			Upfront.Events.trigger('post:content:edit:stop', this.contentEditor);
		},

		cancelChanges: function(){
			this.stopEditContents();
			this.render();
		},

		publish: function(results){
			this.save(results, 'publish', Upfront.Settings.l10n.global.content.publishing.replace(/%s/, this.post.get('post_type')), Upfront.Settings.l10n.global.content.published.replace(/%s/, this.capitalize(this.post.get('post_type'))));
		},
		saveDraft:function(results){
			this.save(results, 'draft', Upfront.Settings.l10n.global.content.saving.replace(/%s/, this.post.get('post_type')), Upfront.Settings.l10n.global.content.drafted.replace(/%s/, this.capitalize(this.post.get('post_type'))));
		},
        saveAutoDraft:function(results){
            this.save(results, 'auto-draft');
        },
		trash: function(){
			var me = this,
				postType = this.post.get('post_type'),
				loading = new Upfront.Views.Editor.Loading({
					loading: Upfront.Settings.l10n.global.content.deleting.replace(/%s/, postType),
					done: Upfront.Settings.l10n.global.content.here_we_are,
					fixed: false
				})
			;
			loading.render();
			this.$el.append(loading.$el);
			this.post.set('post_status', 'trash').save().done(function(){
				loading.$el.remove();
				Upfront.Views.Editor.notify(Upfront.Settings.l10n.global.content.deleted.replace(/%s/, postType));
				me.stopEditContents();

				if(me.postView.property('type') == 'UpostsModel')
					me.postView.refreshMarkup();

                // navigate to home
                Upfront.Application.sidebar.toggleSidebar();
                Upfront.Application.navigate( "/" , true);
			});
		},

		save: function(results, status, loadingMsg, successMsg){
			var me = this,
				changed = this.changed,
				updateMeta = true,
				metaUpdated = !updateMeta,
                is_auto_draft = status === "auto-draft",
                post_name = this.post.get("post_name"),
                loading = new Upfront.Views.Editor.Loading({
					loading: loadingMsg,
					done: Upfront.Settings.l10n.global.content.here_we_are,
					fixed: false
				}),
				postUpdated = false
			;

            if (!is_auto_draft && status !== 'draft') {
                loading.render();
                this.$el.append(loading.$el);
                this.contentEditor.box.$el.hide();
            } else {
                status = "draft";
            }



			if(results.title)
				this.post.set('post_title', results.title);
			if(results.content) {
				if(this.postView.property('content_type') == 'excerpt')
					this.post.set('post_excerpt', results.content);
				else
					this.post.set('post_content', results.content);
			}
			if(results.author)
				this.post.set('post_author', results.author);

            if(results.excerpt)
                this.post.set('post_excerpt', results.excerpt);

			if(results.inserts){
				this.post.meta.setValue('_inserts_data', results.inserts);
			}

			if(results.date)
				this.post.set('post_date', results.date);

			if(results.visibility){
				this.post.setVisibility(results.visibility);
				if(results.pass)
					this.post.set('post_password', results.pass);
			}

			if(results.visibility == 'private')
				this.post.set('post_status', 'private');
			else
				this.post.set('post_status', status);

			this.post.save().done(function(result){
                if( me.post.is_new && post_name.length){
                    me.post.set("post_name", post_name).save();
                }
                me.post.set("post_name", result.data.post_name);
                me.post.permalink = result.data.permalink;
				if(metaUpdated){
                    if( !is_auto_draft ) {
                        loading.done();
                        Upfront.Views.Editor.notify(successMsg);
                    }
					me.fetchPostLayout().then(function(){
                        if (!is_auto_draft && 'draft' !== status) {
                            me.stopEditContents();
                            me.render();
                        }
					});
				}

				postUpdated = true;
			});

			if(updateMeta){
				me.post.meta.save().done(function(){
                    if(postUpdated){
                        if( !is_auto_draft ) {
                            loading.done();
                            Upfront.Views.Editor.notify(successMsg);
                        }
						me.fetchPostLayout().then(function(){
                            if( !is_auto_draft ) {
                                me.stopEditContents();
                                me.render();
                            }
						});
					}
					metaUpdated = true;
				});
			}
			else
				metaUpdated

            this.post.is_new = false;
		},

		capitalize: function(str){
			return str.charAt(0).toUpperCase() + str.slice(1);
		},

		preventLinkNavigation: function(e){
			e.preventDefault();
		},

		setContentPadding: function(){
			var colSize = Upfront.Behaviors.GridEditor.col_size,
				options = this.postView.partOptions,
				rightPadding = options.contents ? options.contents.padding_right * colSize : 0,
				leftPadding = options.contents ? options.contents.padding_left * colSize : 0,
				styles = this.postView.$('.upfront-post-padding'),
				rules = '#' + this.postView.property('element_id') + ' .upfront-content-marker-contents>* {'
			;

			if(!styles.length){
				styles = $('<style class="upfront-post-padding"></style>');
				this.postView.$el.append(styles);
			}

			rules += 'padding-left: ' + leftPadding + 'px; padding-right: ' + rightPadding + 'px;}';

			styles.html(rules);
		}
	});

	// Publish the post editor to the Upfront.Content object, make sure Upfront.Content object exists
	if(!Upfront.Content)
		Upfront.Content = {};
	Upfront.Content.PostEditor = PostEditor;
});

})(jQuery);

(function($) {
	
define('scripts/upfront/bg-settings/mixins',[],function(){
	return {
		bind_toggles: function () {
			this.on('show', function(){
				this.$el.show();
			});
			this.on('hide', function(){
				this.$el.hide();
			})
		},
		save_fields: function () {
			// changes are auto saved, no need to invoke this, so blank it out
		},
		preview_color: function (color) {
			var rgb = color.toRgb(),
				rgba_string = 'rgba('+rgb.r+','+rgb.g+','+rgb.b+','+color.alpha+')';

			rgba_string = color.get_is_theme_color() !== false ?  color.theme_color : rgba_string;
			this.model.set_breakpoint_property('background_color', rgba_string);
		},
		update_color: function (color) {
			this.preview_color(color);
			this._default_color = this.model.get_breakpoint_property_value('background_color', true);
		},
		reset_color: function () {
			this.model.set_breakpoint_property('background_color', this._default_color);
		},
		upload_image: function () {
			var me = this;
			Upfront.Views.Editor.ImageSelector.open().done(function(images){
				var sizes = {},
					image_id;
				_.each(images, function(image, id){
					sizes = image;
					image_id = id;
				});
				$('<img>').attr('src', sizes.full[0]).load(function(){
					Upfront.Views.Editor.ImageSelector.close();
					me.model.set_breakpoint_property('background_image', sizes.full[0]);
					me.model.set_breakpoint_property('background_image_ratio', Math.round(sizes.full[2]/sizes.full[1]*100)/100);
				});
			});
		}
	};
});

})(jQuery);

(function($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('scripts/upfront/bg-settings/color-item',[
	'scripts/upfront/bg-settings/mixins'
], function(Mixins) {
	
	var ColorItem = Upfront.Views.Editor.Settings.Item.extend(_.extend({}, Mixins, {
		group: false,
		initialize: function (options) {
			var me = this;
			
			options.fields = [
				new Upfront.Views.Editor.Field.Color({
					model: this.model,
					label: l10n.bg_color_short,
					property: 'background_color',
					use_breakpoint_property: true,
					default_value: '#ffffff',
					spectrum: {
						move: function (color) {
							me.preview_color(color);
						},
						change: function (color) {
							me.update_color(color);
						},
						hide: function (color) {
							me.reset_color();
						}
					},
					rendered: function (){
						this.$el.addClass('uf-bgsettings-color-pick');
					}
				})
				
			];
			this.$el.addClass('uf-bgsettings-item uf-bgsettings-coloritem');
			
			this.bind_toggles();
			this.constructor.__super__.initialize.call(this, options);
		}
	}));

	return ColorItem;
});
})(jQuery);

(function($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('scripts/upfront/bg-settings/image-item',[
	'scripts/upfront/bg-settings/mixins'
], function(Mixins) {
	
	var ImageItem = Upfront.Views.Editor.Settings.Item.extend(_.extend({}, Mixins, {
		group: false,
		initialize: function (options) {
			var me = this,
				pos_option = {
					default_value: 50,
					min: 0,
					max: 100,
					step: 1
				},
				tile_fields = ['bg_tile'],
				fixed_fields = ['bg_color', 'bg_position_x', 'bg_position_y', 'bg_position_x_num', 'bg_position_y_num'],
				fields = {
					pick_image: new Upfront.Views.Editor.Field.Button({
						label: l10n.pick_image,
						compact: true,
						classname: 'uf-button-alt uf-bgsettings-image-pick',
						on_click: function(){
							me.upload_image();
						}
					}),
					bg_style: new Upfront.Views.Editor.Field.Select({
						model: this.model,
						label: l10n.image_type,
						className: 'upfront-field-wrap upfront-field-wrap-select background-image-field',
						property: 'background_style',
						use_breakpoint_property: true,
						default_value: 'full',
						icon_class: 'upfront-region-field-icon',
						values: this.get_bg_style_values(),
						change: function () {
							var value = this.get_value();
							if ( value == 'tile' ){
								_.each(tile_fields, function(key){ fields[key].$el.show(); });
								_.each(fixed_fields, function(key){ fields[key].$el.hide(); });
							}
							else if ( value == 'fixed' ){
								_.each(tile_fields, function(key){ fields[key].$el.hide(); });
								_.each(fixed_fields, function(key){ fields[key].$el.show(); });
							}
							else {
								_.each(tile_fields, function(key){ fields[key].$el.hide(); });
								_.each(fixed_fields, function(key){ fields[key].$el.hide(); });
							}
							me._bg_style = value;
							me.update_image();
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-style');
						}
					}),
					bg_tile: new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						layout: 'horizontal-inline',
						default_value: ['y', 'x'],
						values: [
							{ label: l10n.tile_vertically, value: 'y' },
							{ label: l10n.tile_horizontally, value: 'x' }
						],
						change: function () {
							var value = this.get_value();
							me._bg_tile = value;
							me.update_image();
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-tile');
						}
					}),
					bg_color: new Upfront.Views.Editor.Field.Color({
						model: this.model,
						label: l10n.bg_color_short,
						property: 'background_color',
						use_breakpoint_property: true,
						default_value: '#ffffff',
						spectrum: {
							move: function (color) {
								me.preview_color(color);
							},
							change: function (color) {
								me.update_color(color);
							},
							hide: function (color) {
								me.reset_color();
							}
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-color');
						}
					}),
					bg_position_y: new Upfront.Views.Editor.Field.Slider(_.extend({
						model: this.model,
						label: l10n.image_position,
						orientation: 'vertical',
						property: 'background_position_y',
						use_breakpoint_property: true,
						range: false,
						change: function () {
							var value = this.get_value();
							fields.bg_position_y_num.get_field().val(value);
							me._bg_position_y = value;
							this.model.set_breakpoint_property(this.property_name, value);
							me.update_image();
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-pos-y');
						}
					}, pos_option)),
					bg_position_x: new Upfront.Views.Editor.Field.Slider(_.extend({
						model: this.model,
						property: 'background_position_x',
						use_breakpoint_property: true,
						range: false,
						change: function () {
							var value = this.get_value();
							fields.bg_position_x_num.get_field().val(value);
							me._bg_position_x = value;
							this.model.set_breakpoint_property(this.property_name, value);
							me.update_image();
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-pos-x');
						}
					}, pos_option)),
					bg_position_y_num: new Upfront.Views.Editor.Field.Number(_.extend({
						model: this.model,
						label: "Y:",
						label_style: 'inline',
						suffix: '%',
						change: function () {
							var value = this.get_value(),
								s = fields.bg_position_y;
							s.$el.find('#'+s.get_field_id()).slider('value', value);
							s.get_field().val(value);
							s.trigger('changed');
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-pos-y-num');
						}
					}, pos_option)),
					bg_position_x_num: new Upfront.Views.Editor.Field.Number(_.extend({
						model: this.model,
						label: "X:",
						label_style: 'inline',
						suffix: '%',
						change: function () {
							var value = this.get_value(),
								s = fields.bg_position_x;
							s.$el.find('#'+s.get_field_id()).slider('value', value);
							s.get_field().val(value);
							s.trigger('changed');
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-image-pos-x-num');
						}
					}, pos_option))
				};
			this.$el.addClass('uf-bgsettings-item uf-bgsettings-imageitem');
			options.fields = _.map(fields, function(field){ return field; });
			
			this.on('show', function(){
				var bg_type = me.model.get_breakpoint_property_value('background_type', true),
					bg_image = me.model.get_breakpoint_property_value('background_image', true);
				if ( bg_type == 'featured' ) {
					fields.pick_image.$el.hide();
				}
				else {
					if ( !bg_image )
						me.upload_image();
				}
				me._bg_style = fields.bg_style.get_value();
				me._bg_tile = fields.bg_tile.get_value();
				me._bg_position_y = fields.bg_position_y.get_value();
				fields.bg_position_y.trigger('changed');
				me._bg_position_x = fields.bg_position_x.get_value();
				fields.bg_position_x.trigger('changed');
				//me._default_color = fields.bg_color.get_value();
				fields.bg_style.trigger('changed');
			});
			
			this.bind_toggles();
			this.constructor.__super__.initialize.call(this, options);
		},
		update_image: function () {
			var style = this._bg_style,
				tile = this._bg_tile,
				is_repeat_y = _.contains(tile, 'y'),
				is_repeat_x = _.contains(tile, 'x'),
				pos_y = this._bg_position_y,
				pos_x = this._bg_position_x;
			if ( style == 'full' ) {
				this.model.set_breakpoint_property('background_style', 'full');
			}
			else {
				if ( style == 'tile' ){
					this.model.set_breakpoint_property('background_style', 'tile');
					if ( is_repeat_x && is_repeat_y )
						this.model.set_breakpoint_property('background_repeat', 'repeat');
					else if ( is_repeat_y )
						this.model.set_breakpoint_property('background_repeat', 'repeat-y');
					else if ( is_repeat_x )
						this.model.set_breakpoint_property('background_repeat', 'repeat-x');
					else
						this.model.set_breakpoint_property('background_repeat', 'no-repeat');
				}
				else if ( style == 'fixed' ){
					this.model.set_breakpoint_property('background_style', 'fixed');
					this.model.set_breakpoint_property('background_repeat', 'no-repeat');
					this.model.set_breakpoint_property('background_position', pos_x + '% ' + pos_y + '%');
				}
				else {
					this.model.set_breakpoint_property('background_style', style);
				}
			}
		},
		get_bg_style_values: function () {
			var values = [
				{ label: l10n.full_width_bg, value: 'full', icon: 'bg-image-full' },
				{ label: l10n.tiled_pattern, value: 'tile', icon: 'bg-image-tile' },
				{ label: l10n.fixed_position, value: 'fixed', icon: 'bg-image-fixed' }
			];
			if ( this.model instanceof Upfront.Models.Region ) {
				values.push({ label: l10n.parallax, value: 'parallax', icon: 'bg-image-full' });
			}
			return values;
		}
	}));

	return ImageItem;
});
})(jQuery);


define('text!scripts/upfront/templates/map-editor.html',[],function () { return '\n<div class="upfront_map-editor-complex-wrapper">\n\t<div class="upfront-css-top">\n\t\t<div class="upfront_map-custom_map_code" data-for="script">{{ l10n.custom_map_code }}</div>\n\t\t<i class="upfront-icon-info">{{ l10n.paste_below }}</i>\n\t\t<div class="upfront_map-jsalert error javascript"><i class="upfront-icon-button" title="{{ l10n.code_error }}"></i></div>\n\t\t<a class="upfront-css-close" href="#">{{ l10n.close }}</a>\n\t</div>\n\t<div class="upfront-css-body">\n\t\t<div class="upfront_map-editor-section upfront_map-script active">\n\t\t\t<div class="upfront_map-ace" data-type="script" >{{script}}</div>\n\t\t</div>\n\t\t<button>{{ l10n.save }}</button>\n\t</div>\n</div>\n';});

(function ($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('scripts/upfront/inline-panels/map-editor',[
	'text!scripts/upfront/templates/map-editor.html'
], function (editorTpl) {

	var MapEditorView = Upfront.Views.ObjectView.extend({

		is_editing: false,
		script_error: false,

		SYNTAX_TYPES: {
			"script": "json"
		},

		MIN_HEIGHT: 200,

		editorTpl: _.template(editorTpl),

		content_editable_selector: ".editable",

		initialize: function() {
			var json = this.fallback('script');
			this.checkJSon(json);
		},

		on_render: function () {
			this.start_json_editor();
		},

		start_json_editor: function () {
			if (this.is_editing) return false;

			this.is_editing = true;
			var $editor = $('#upfront_map-editor'),
				me = this
			;

			if(!$editor.length){
				$editor = $('<section id="upfront_map-editor" class="upfront-ui upfront_map-editor upfront_map-editor-complex"></section>');
				$('body').append($editor);
			}

			require([Upfront.Settings.ace_url], function () {
				me.createEditor($editor);
			});

		},

		on_edit: function(){
			if (this.is_editing) return false;

			// Since we're doing double duty here, let's first check if content editing mode is to boot
			var $contenteditables = this.$el.find('.upfront_map-element ' + this.content_editable_selector);
			if ($contenteditables.length) {
				// Yes? go for it
				return this.bootContentEditors($contenteditables);
			}
			// Oh well, let's just go ahead and boot code editing mode.
			this.is_editing = true;
			var $editor = $('#upfront_map-editor');

			if(!$editor.length){
				$editor = $('<section id="upfront_map-editor" class="upfront-ui upfront_map-editor upfront_map-editor-complex"></section>');
				$('body').append($editor);
			}

			this.createEditor($editor);
		},

		bootContentEditors: function ($editables) {
			if (!$editables || !$editables.length) return false;
			var $markup = $(this.fallback("markup")),
				me = this
			;
			$editables.each(function (idx) {
				var $me = $(this),
					start = idx <= 0
				;
				if ($me.data('ueditor')) return true;
				$me
					.ueditor({
						autostart: start,
						placeholder: "",
						disableLineBreak: true
					})
					.on("start", function () {
						me.is_editing = true;
					})
					.on("stop", function () {
						me.is_editing = false;
					})
					.on('syncAfter', function(){
						var $existing = $($markup.find(me.content_editable_selector)[idx]);
						if (!$existing.length) return false;
						$existing.html($me.html());
						me.property(
							"markup",
							$("<div />").append($markup).html()
						);
					})
				;
			});
		},

		createEditor: function($editor){
			var me = this;
			$editor.html(this.editorTpl({
				markup: this.fallback('markup'),
				style: this.fallback('style'),
				script: this.fallback('script'),
				l10n: l10n.template
			}));

			$('#page').css('padding-bottom', '200px');
			$editor.show();

			this.resizeHandler = this.resizeHandler || function(){
				$editor.width($(window).width() - $('#sidebar-ui').width() -1);
			};
			$(window).on('resize', this.resizeHandler);
			this.resizeHandler();

			//Start the editors
			this.editors = {};
			this.timers = {};

			$editor.find('.upfront_map-ace').each(function(){
				var $this = $(this),
					html = $this.html(),
					editor = ace.edit(this),
					syntax = $this.data('type')
				;

				editor.getSession().setUseWorker(false);
				editor.setTheme("ace/theme/monokai");
				editor.getSession().setMode("ace/mode/" + me.SYNTAX_TYPES[syntax]);
				editor.setShowPrintMargin(false);

				if ("markup" === syntax && html)
						editor.getSession().setValue(html);

				// Live update
				editor.on('change', function(){
					if(me.timers[syntax])
						clearTimeout(me.timers[syntax]);
					me.timers[syntax] = setTimeout(function(){
						var value = editor.getValue();

						if(syntax == 'script')
							me.checkJSon(value);

						if(me.script_error)
							$editor.find('.upfront_map-jsalert').show().find('i').attr('title', l10n.create.js_error + ' ' + me.script_error);
						else
							$editor.find('.upfront_map-jsalert').hide();

						me.property(syntax, value, false);
					}, 1000);
				});

				// Set up the proper vscroller width to go along with new change.
				editor.renderer.scrollBar.width = 5;
				editor.renderer.scroller.style.right = "5px";

				me.editors[syntax] = editor;
			});
			this.currentEditor = this.editors['markup'];

			var editorTop = $editor.find('.upfront-css-top'),
				editorBody = $editor.find('.upfront-css-body')
			;

			//Start resizable
			editorBody.height(this.MIN_HEIGHT - editorTop.outerHeight());
			$editor.find(".upfront_map-editor-complex-wrapper").resizable({
				handles: {
					n: ".upfront-css-top"
				},
				resize: function(e, ui){
					editorBody.height(ui.size.height - editorTop.outerHeight());
					_.each(me.editors, function(editor){
						editor.resize();
					});
				},
				minHeight: me.MIN_HEIGHT,
				delay:  100
			});

			//save edition
			$editor.find('button').on('click', function(e){
				_.each(me.editors, function(editor, type){
					me.property(type, editor.getValue());
				});

				me.property('map_styles', me.fallback('script'), false);
				me.is_editing = false;
				me.destroyEditor();
			});

			//Highlight element
			$editor
				.on('click', '.upfront-css-type', function(e){
					me.hiliteElement(e);
				}) // Close editor
				.on('click', '.upfront-css-close', function(e){
					e.preventDefault();
					me.destroyEditor();
					$('#page').css('padding-bottom', 0);
				})
			;
		},

		destroyEditor: function(){
			var me = this;
			if(this.editors && this.editors.length){
				_.each(this.editors, function(ed){
					ed.destroy();
				});
				me.editors = false;
			}
			this.currentEditor = false;
			$('#upfront_map-editor').html('').hide();
			$(window).off('resize', this.resizeHandler);
			this.is_editing = false;
		},

		hiliteElement: function(e){
			e.preventDefault();
			var element = this.$el.find('.upfront-object-content');
			var offset = element.offset().top - 50;
			$(document).scrollTop(offset > 0 ? offset : 0);
			this.blink(element, 4);
		},

		blink: function(element, times) {
			var me = this;
			element.css('outline', '3px solid #3ea');
			setTimeout(function(){
				element.css('outline', 'none');

				times--;
				if(times > 0){
					setTimeout(function(){
						me.blink(element, times - 1);
					}, 100);
				}

			}, 100);
		},

		checkJSon: function(json){
			this.script_error = false;
			try {
				eval(json);
			} catch (e) {
				this.script_error = e.message;
			}
		},

		fallback: function(attribute){
			return this.model.get_property_value_by_name(attribute) || Upfront.data.upfront_code.defaults.fallbacks[attribute];
		},

		property: function(name, value, silent) {
			if(typeof value != "undefined"){
				if(typeof silent == "undefined")
					silent = true;
				return this.model.set_property(name, value, silent);
			}
			return this.model.get_property_value_by_name(name);
		}
	});

	return MapEditorView;

});

})(jQuery);

(function($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('scripts/upfront/bg-settings/map-item',[
	'scripts/upfront/bg-settings/mixins',
	'scripts/upfront/inline-panels/map-editor'
], function(Mixins, MapEditorView) {
	
	var MapItem = Upfront.Views.Editor.Settings.Item.extend(_.extend({}, Mixins, {
		events: {
			"click .open-map-code-panel-button": "init_code_panel"
		},
		group: false,
		initialize: function (options) {
			var me = this,
				map_center = this.model.get_property_value_by_name('background_map_center'),
				set_value = function () {
					var value = this.get_value();
					this.model.set_breakpoint_property(this.property_name, value);
				};
				
			if ( ! map_center ){
				this.model.init_property('background_map_center', [-37.8180, 144.9760]);
				this.model.init_property('background_map_zoom', 10);
				this.model.init_property('background_map_style', "ROADMAP");
				this.model.init_property('background_map_controls', "");
				this.model.init_property('background_show_markers', "");
				this.model.init_property('background_use_custom_map_code', "");
			}
			
			var fields = {
					location: new Upfront.Views.Editor.Field.Text({
						model: this.model,
						label: l10n.location + ":",
						property: 'background_map_location',
						use_breakpoint_property: true,
						placeholder: "e.g 123 Nice St",
						change: function () {
							var value = this.get_value();
							this.model.set_breakpoint_property(this.property_name, value, true);
							me._location = value;
							me._location_changed = true;
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-map-location');
						}
					}),
					refresh: new Upfront.Views.Editor.Field.Button({
						label: "",
						compact: true,
						classname: 'upfront-field-icon upfront-field-icon-refresh-2 upfront-refresh-map',
						on_click: function(){
							var $loc = me.$el.find('input[name="background_map_location"]');
							if ($loc.length) me._location = $loc.val();
							me._location_changed = true;
							me.geocode_location();
						}
					}),
					zoom: new Upfront.Views.Editor.Field.Slider({
						model: this.model,
						label: l10n.zoom + ":",
						property: 'background_map_zoom',
						use_breakpoint_property: true,
						default_value: 8,
						min: 1,
						max: 19,
						step: 1,
						change: set_value,
						rendered: function (){
							this.$el.addClass('uf-bgsettings-map-zoom');
						}
					}),
					style: new Upfront.Views.Editor.Field.Select({
						model: this.model,
						label: l10n.map_style + ":",
						property: 'background_map_style',
						use_breakpoint_property: true,
						values: [
							{ label: l10n.roadmap, value: 'ROADMAP' },
							{ label: l10n.satellite, value: 'SATELLITE' },
							{ label: l10n.hybrid, value: 'HYBRID' },
							{ label: l10n.terrain, value: 'TERRAIN' }
						],
						change: set_value,
						rendered: function (){
							this.$el.addClass('uf-bgsettings-map-style');
						}
					}),
					controls: new Upfront.Views.Editor.Field.Select({
						model: this.model,
						label: l10n.controls + ":",
						placeholder: l10n.choose_ctrl,
						property: 'background_map_controls',
						use_breakpoint_property: true,
						multiple: true,
						default_value: ["pan"],
						values: [
							{ label: l10n.pan, value: "pan" },
							{ label: l10n.zoom, value: "zoom" },
							{ label: l10n.map_type, value: "map_type" },
							{ label: l10n.scale, value: "scale" },
							{ label: l10n.street_view, value: "street_view" },
							{ label: l10n.overview_map, value: "overview_map" }
						],
						change: set_value,
						rendered: function (){
							this.$el.addClass('uf-bgsettings-map-controls');
						}
					}),
					show_markers: new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						label: l10n.show_markers,
						property: "background_show_markers",
						use_breakpoint_property: true,
						hide_label: true,
						values: [{label: l10n.show_markers, value: 1}],
						multiple: false,
						change: set_value,
						rendered: function () {
							this.$el.addClass('uf-bgsettings-map-show-marker');
						}
					}),
					custom_map_code: new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						label: l10n.custom_map_code,
						property: "background_use_custom_map_code",
						hide_label: true,
						values: [{label: l10n.custom_map_code + '<span class="checkbox-info" title="' + l10n.custom_map_code_info + '"></span>', value: 1}],
						multiple: false,
						change: function () {
							var value = this.get_value();

							this.property.set({value: value});

							if(value == 1) {
								$('.open-map-code-panel-button', this.$el.parent()).show();
							}
							else {
								$('.open-map-code-panel-button', this.$el.parent()).hide();
							}
						},
						rendered: function () {
							this.$el.addClass('uf-bgsettings-map-custom-map-code');
						}
					}),
					open_map_code_panel: new Upfront.Views.Editor.Field.Button({
						model: me.model,
						label: l10n.open_map_code_panel,
						className: "open-map-code-panel-button",
						compact: true,
					}),
				};
			
			this.$el.addClass('uf-bgsettings-item uf-bgsettings-mapitem');
			
			options.fields = _.map(fields, function(field){ return field; });
			
			this._location = fields.location.get_value();
			
			this.$el.on('keypress', 'input[name="background_map_location"]', function (e) {
				if( e.keyCode === 13 ){
					me._location = $(this).val();
					me._location_changed = true;
					me.geocode_location();
				}
			});
			
			this.bind_toggles();
			this.constructor.__super__.initialize.call(this, options);
		},
		render: function () {
			Upfront.Views.Editor.Settings.Item.prototype.render.call(this);
			$('[name="background_use_custom_map_code"]', this.$el).trigger('change');
		},
		geocode_location: function () {
			if ( this._geocoding == true || !this._location_changed )
				return;
			var me = this,
				location = this._location,
				geocoder = new google.maps.Geocoder()
			;
			if (!location) return;
			this._geocoding = true;
			geocoder.geocode({address: location}, function (results, status) {
				if (status != google.maps.GeocoderStatus.OK) return false;
				var pos = results[0].geometry.location;

				me.model.set_breakpoint_property("background_map_center", [pos.lat(), pos.lng()]);
				me._geocoding = false;
				me._location_changed = false;
			});
		},
		init_code_panel: function () {
			var view = new MapEditorView({model: this.model});
			view.render();
		}
	}));

	return MapItem;
});
})(jQuery);

(function($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('scripts/upfront/bg-settings/slider-item',[
	'scripts/upfront/bg-settings/mixins'
], function(Mixins) {
	
	var SliderItem = Upfront.Views.Editor.Settings.Item.extend(_.extend({}, Mixins, {
		group: false,
		initialize: function (options) {
			var me = this,
				set_value = function () {
					var value = this.get_value();
					this.model.set_breakpoint_property(this.property_name, value);
				},
				fields = {
					transition: new Upfront.Views.Editor.Field.Select({
						model: this.model,
						label: l10n.slider_transition,
						property: 'background_slider_transition',
						use_breakpoint_property: true,
						default_value: 'crossfade',
						icon_class: 'upfront-region-field-icon',
						values: [
							{ label: l10n.slide_down, value: 'slide-down', icon: 'bg-slider-slide-down' },
							{ label: l10n.slide_up, value: 'slide-up', icon: 'bg-slider-slide-up' },
							{ label: l10n.slide_left, value: 'slide-left', icon: 'bg-slider-slide-left' },
							{ label: l10n.slide_right, value: 'slide-right', icon: 'bg-slider-slide-right' },
							{ label: l10n.crossfade, value: 'crossfade', icon: 'bg-slider-crossfade' }
						],
						change: set_value,
						rendered: function (){
							this.$el.addClass('uf-bgsettings-slider-transition');
						}
					}),
					rotate: new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						property: 'background_slider_rotate',
						use_breakpoint_property: true,
						default_value: true,
						layout: 'horizontal-inline',
						multiple: false,
						values: [ { label: l10n.autorotate_each + " ", value: true } ],
						change: function () {
							var value = this.get_value();
							this.property.set({value: value ? true : false});
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-slider-rotate');
						}
					}),
					rotate_time: new Upfront.Views.Editor.Field.Number({
						model: this.model,
						property: 'background_slider_rotate_time',
						use_breakpoint_property: true,
						default_value: 5,
						min: 1,
						max: 60,
						step: 1,
						suffix: 'sec',
						change: set_value,
						rendered: function (){
							this.$el.addClass('uf-bgsettings-slider-time');
						}
					}),
					control: new Upfront.Views.Editor.Field.Radios({
						model: this.model,
						property: 'background_slider_control',
						use_breakpoint_property: true,
						default_value: 'always',
						layout: 'horizontal-inline',
						values: [
							{ label: l10n.always_show_ctrl, value: 'always' },
							{ label: l10n.show_ctrl_hover, value: 'hover' }
						],
						change: set_value,
						rendered: function (){
							this.$el.addClass('uf-bgsettings-slider-control');
						}
					})
				};
			
			this.$el.addClass('uf-bgsettings-item uf-bgsettings-slideritem');
			
			options.fields = _.map(fields, function(field){ return field; });
			
			// Also add the slides item to the panel settings
			this.slides_item = new SliderSlidesItem({
				model: this.model,
				title: l10n.slides_order + ":"
			});
			if ( !_.isUndefined(options.slides_item_el) ){
				this.slides_item.render();
				options.slides_item_el.append(this.slides_item.$el);
			}
			else {
				this.on('panel:set', function(){
					me.panel.settings.push(me.slides_item);
					me.slides_item.panel = me.panel;
					me.slides_item.trigger('panel:set');
				});
			}
			this.on('show', function(){
				var slide_images = this.model.get_breakpoint_property_value('background_slider_images', true);
				if ( !slide_images )
					me.upload_slider_images();
				me.slides_item.trigger('show');
			});
			this.on('hide', function(){
				me.slides_item.trigger('hide');
			});
			
			
			
			this.bind_toggles();
			this.constructor.__super__.initialize.call(this, options);
		},
		upload_slider_images: function () {
			var me = this;
			Upfront.Views.Editor.ImageSelector.open({multiple: true}).done(function(images){
				var image_ids = [];
				_.each(images, function(image, id){
					image_ids.push(id);
				});
				me.model.set_breakpoint_property('background_slider_images', image_ids);
				//me.update_slider_slides($slides_content);
				me.slides_item.update_slider_slides();
				Upfront.Views.Editor.ImageSelector.close();
			});
		}
	}));
	
	var SliderSlidesItem = Upfront.Views.Editor.Settings.Item.extend(_.extend({}, Mixins, {
		initialize: function (options) {
			var me = this;
			
			this.$el.on('click', '.upfront-region-bg-slider-add-image', function (e) {
				e.preventDefault();
				e.stopPropagation();
				Upfront.Views.Editor.ImageSelector.open({multiple: true}).done(function(images){
					var slide_images = _.clone(me.model.get_breakpoint_property_value('background_slider_images', true) || []);
					_.each(images, function(image, id){
						slide_images.push(id);
					});
					me.model.set_breakpoint_property('background_slider_images', slide_images);
					Upfront.Views.Editor.ImageSelector.close();
					me.update_slider_slides();
				});
			});
			this.$el.on('click', '.upfront-region-bg-slider-delete-image', function (e) {
				e.preventDefault();
				e.stopPropagation();
				var $image = $(this).closest('.upfront-region-bg-slider-image'),
					image_id = $image.data('image-id'),
					slide_images = me.model.get_breakpoint_property_value('background_slider_images', true);

				if (_.isString(image_id) && image_id.match(/^[0-9]+$/))
					image_id = parseInt(image_id, 10);

				slide_images = _.without(slide_images, image_id);
				me.model.set_breakpoint_property('background_slider_images', slide_images);
				$image.remove();
				
				me.update_slider_slides();
			});
			
			this.on('show', function(){
				me.update_slider_slides();
			});
			
			this.$el.addClass('uf-bgsettings-item uf-bgsettings-slider-slidesitem');
			
			this.bind_toggles();
			this.constructor.__super__.initialize.call(this, options);
		},
		update_slider_slides: function () {
			var me = this,
				slide_images = me.model.get_breakpoint_property_value('background_slider_images', true),
				$add = $('<div class="upfront-region-bg-slider-add-image upfront-icon upfront-icon-region-add-slide">' + l10n.add_slide + '</div>'),
				$wrap = this.$el.find('.upfront-settings-item-content');
			$wrap.html('');

			if ( slide_images.length > 0 ) {
				Upfront.Views.Editor.ImageEditor.getImageData(slide_images).done(function(response){
					var images = response.data.images;
					// Rewrite slide images because in builder mode they will be just paths of theme images
					// and slider needs image objects to work.
					//slide_images = images;
					_.each(slide_images, function (id) {
						var image = _.isNumber(id) || id.match(/^\d+$/) ? images[id] : _.find(images, function(img){
							return img.full[0].split(/[\\/]/).pop() == id.split(/[\\/]/).pop();
						}),
						$image = $('<div class="upfront-region-bg-slider-image" />');
						$image.data('image-id', id);
						if(typeof image.thumbnail !== "undefined") {
							$image.css({
								background: 'url("' + image.thumbnail[0] + '") no-repeat 50% 50%',
								backgroundSize: '100% auto'
							});
						}
						$image.append('<span href="#" class="upfront-region-bg-slider-delete-image">&times;</span>');
						$wrap.append($image);
					});
					if ( $wrap.hasClass('ui-sortable') )
						$wrap.sortable('refresh');
					else
						$wrap.sortable({
							items: '>  .upfront-region-bg-slider-image',
							update: function () {
								var slide_images = [];
								$wrap.find('.upfront-region-bg-slider-image').each(function(){
									var id = $(this).data('image-id');
									if ( id )
										slide_images.push(id);
								});
								me.model.set_breakpoint_property('background_slider_images', slide_images);
							}
						});
					$wrap.append($add);
				});
			}
			else {
				$wrap.append($add);
			}
		}
	}));

	return SliderItem;
});
})(jQuery);

(function($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('scripts/upfront/bg-settings/video-item',[
	'scripts/upfront/bg-settings/mixins'
], function(Mixins) {
	
	var VideoItem = Upfront.Views.Editor.Settings.Item.extend(_.extend({}, Mixins, {
		group: false,
		initialize: function (options) {
			var me = this,
				fields = {
					mute: new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						property: 'background_video_mute',
						use_breakpoint_property: true,
						default_value: 1,
						layout: 'horizontal-inline',
						multiple: false,
						values: [ { label: l10n.mute_on_play, value: 1 } ],
						change: function () {
							var value = this.get_value();
							this.model.set_breakpoint_property(this.property_name, value ? 1 : 0);
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-video-mute');
						}
					}),
					autoplay: new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						property: 'background_video_autoplay',
						use_breakpoint_property: true,
						default_value: 1,
						layout: 'horizontal-inline',
						multiple: false,
						values: [ { label: l10n.autoplay, value: 1 } ],
						change: function () {
							var value = this.get_value();
							this.model.set_breakpoint_property(this.property_name, value ? 1 : 0);
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-video-autoplay');
						}
					}),
					style: new Upfront.Views.Editor.Field.Radios({
						model: this.model,
						property: 'background_video_style',
						use_breakpoint_property: true,
						layout: 'horizontal-inline',
						default_value: ["crop"],
						values: [
							{ label: l10n.scale_and_crop, value: "crop" },
							{ label: l10n.no_crop_embed, value: "full" },
							{ label: l10n.no_crop_bg, value: "inside" }
						],
						change: function () {
							var value = this.get_value();
							if ( value == 'inside' )
								fields.color.$el.show();
							else
								fields.color.$el.hide();
							this.model.set_breakpoint_property(this.property_name, value);
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-video-style');
						}
					}),
					color: new Upfront.Views.Editor.Field.Color({
						model: this.model,
						label: l10n.area_bg_color + ":",
						label_style: 'inline',
						property: 'background_color',
						use_breakpoint_property: true,
						default_value: '#ffffff',
						spectrum: {
							move: function (color) {
								me.preview_color(color);
							},
							change: function (color) {
								me.update_color(color);
							},
							hide: function (color) {
								me.reset_color();
							}
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-video-color');
						}
					}),
					video: new Upfront.Views.Editor.Field.Text({
						model: this.model,
						label: l10n.video_url,
						property: 'background_video',
						use_breakpoint_property: true,
						default_value: '',
						placeholder: l10n.video_source,
						change: function () {
							var value = this.get_value();
							if ( value ){
								me.model.set_breakpoint_property('background_video_embed', "");
								me.get_video_embed(value).done(function(response){
									if ( !response.data || !response.data.width || !response.data.height )
										return;
									me.model.set_breakpoint_property('background_video_width', response.data.width);
									me.model.set_breakpoint_property('background_video_height', response.data.height);
									me.model.set_breakpoint_property('background_video_embed', response.data.html);
								});
							}
							this.model.set_breakpoint_property(this.property_name, value);
						},
						rendered: function (){
							this.$el.addClass('uf-bgsettings-video-url');
						}
					})
				};
				
			this.$el.addClass('uf-bgsettings-item uf-bgsettings-videoitem');
				
			options.fields = _.map(fields, function(field){ return field; });
			
			this.on('show', function(){
				fields.style.trigger('changed');
			})
			
			this.bind_toggles();
			this.constructor.__super__.initialize.call(this, options);
		},
		get_video_embed: function (url) {
			return Upfront.Util.post({
				action: "upfront-media-get_embed_raw",
				media: url
			});
		}
	}));

	return VideoItem;
});
})(jQuery);

(function($) {
	
var l10n = Upfront.Settings && Upfront.Settings.l10n
	? Upfront.Settings.l10n.global.views
	: Upfront.mainData.l10n.global.views
;

define('bg-settings',[
	'scripts/upfront/bg-settings/color-item',
	'scripts/upfront/bg-settings/image-item',
	'scripts/upfront/bg-settings/map-item',
	'scripts/upfront/bg-settings/slider-item',
	'scripts/upfront/bg-settings/video-item'
], function(ColorItem, ImageItem, MapItem, SliderItem, VideoItem) {
	
	var BgItem = Upfront.Views.Editor.Settings.Item.extend({
		initialize: function (options) {
			var me = this,
				bg_image = this.model.get_breakpoint_property_value('background_image', true),
				types = [
					{ label: l10n.solid_color, value: 'color', icon: 'color' },
					{ label: l10n.image, value: 'image', icon: 'image' },
					{ label: l10n.video, value: 'video', icon: 'video' },
					{ label: l10n.image_slider, value: 'slider', icon: 'slider' },
					{ label: l10n.map, value: 'map', icon: 'map' }
				];
				
			if (_upfront_post_data.post_id) {
				types.push({ label: l10n.featured_image, value: 'featured', icon: 'feat' });
			}
			if ( _.isArray(options.enable_types) )
				types = _.filter(types, function(type){
					return _.contains(options.enable_types, type.value);
				});
			
			options.fields = [
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					property: 'use_padding',
					use_breakpoint_property: true,
					default_value: 0,
					layout: 'horizontal-inline',
					multiple: false,
					values: [ { label: l10n.use_theme_padding, value: 1 } ],
					change: function () {
						var value = this.get_value();
						this.model.set_breakpoint_property(this.property_name, value ? 1 : 0);
					}
				}),
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: 'upfront-field-wrap upfront-field-wrap-select background-type-field',
					label: l10n.group_bg,
					property: 'background_type',
					use_breakpoint_property: true,
					default_value: !bg_image ? 'color' : 'image',
					icon_class: 'upfront-region-field-icon',
					values: types,
					change: function () {
						var value = this.get_value();
						me.panel.parent_view.toggle_setting(value);
						this.model.set_breakpoint_property(this.property_name, value);
					}
				})
			];
			this.$el.addClass('uf-bgsettings-item');
			this.constructor.__super__.initialize.call(this, options);
		}
	});
	
	var BgSettings = Upfront.Views.Editor.Settings.Settings.extend({
		initialize: function (options) {
			this.options = options;
			this.has_tabs = false;
			
			var me = this,
				types = {
					color: ColorItem, 
					image: ImageItem,
					featured: ImageItem,
					slider: SliderItem, 
					video: VideoItem, 
					map: MapItem
				};
			if ( !_.isUndefined(options.enable_types) )
				this.enable_types = options.enable_types;
			
			this.settings = {};
			
			_.each(types, function(view, type){
				if ( !_.contains(me.enable_types, type) )
					return;
				me.settings[type] = new view({
					model: me.model
				});
				me.settings[type].once('rendered', function(){
					this.trigger('hide');
				});
			});
			
			var bg_item_options = {
					model: this.model,
					enable_types: this.enable_types
				};
			if ( this.bg_title )
				bg_item_options.title = this.bg_title;
			else
				bg_item_options.group = false;
			var	bg_item = new BgItem(bg_item_options);
			
			this.panels = _([
	  	 		new Upfront.Views.Editor.Settings.Panel({
					model: this.model,
					settings: _.union(
						[ bg_item ],
						_.map(this.settings, function(setting){ return setting; })
					)
				})
	 		]);
	 		
	 		this.once('open', function(){
	 			var bg_type = me.model.get_breakpoint_property_value('background_type', true),
	 				bg_image = me.model.get_breakpoint_property_value('background_image', true);
	 			if ( bg_type )
	 				me.toggle_setting(bg_type);
	 			else
	 				me.toggle_setting( bg_image ? 'image' : 'color' );
	 		});
		},
		
		toggle_setting: function (active) {
			_.each(this.settings, function(setting, type){
				if ( type == active )
					setting.trigger('show');
				else
					setting.trigger('hide');
			});
		}
		
	});

	Upfront.Views.Editor.BgSettings = {
		Settings: BgSettings,
		BgItem: BgItem,
		ColorItem: ColorItem,
		ImageItem: ImageItem,
		MapItem: MapItem,
		SliderItem: SliderItem,
		VideoItem: VideoItem
	};
});
})(jQuery);

define('elements/upfront-accordion/js/model',[],function() {
	var UaccordionModel = Upfront.Models.ObjectModel.extend({
		init: function () {
			var properties = _.clone(Upfront.data.uaccordion.defaults);

			var defaults = Upfront.data.uaccordion.defaults;

			// Copy the default panel data by value, so that the source does not get updated if passed by reference
			properties.accordion = [];
			properties.accordion[0] = {};
			properties.accordion[0].content = _.clone(defaults.accordion[0].content);
			properties.accordion[0].title = _.clone(defaults.accordion[0].title);

			properties.accordion[1] = {};
			properties.accordion[1].content = _.clone(defaults.accordion[1].content);
			properties.accordion[1].title = _.clone(defaults.accordion[1].title);

			properties.element_id = Upfront.Util.get_unique_id('uaccordion-object');
			this.init_properties(properties);
		}
	});

	return UaccordionModel;
});

define('elements/upfront-accordion/js/element',[
	'elements/upfront-accordion/js/model'
], function(UaccordionModel) {
	var l10n = Upfront.Settings.l10n.accordion_element;

	var AccordionElement = Upfront.Views.Editor.Sidebar.Element.extend({
		priority: 140,
		render: function () {
			this.$el.addClass('upfront-icon-element upfront-icon-element-accordion');
			this.$el.html(l10n.element_name);
		},
		add_element: function () {
			var object = new UaccordionModel(),
			module = new Upfront.Models.Module({
				'name': '',
				'properties': [
					{'name': 'element_id', 'value': Upfront.Util.get_unique_id('module')},
					{'name': 'class', 'value': 'c9 upfront-accordion_module'},
					{'name': 'has_settings', 'value': 0},
					{'name': 'row', 'value': Upfront.Util.height_to_row(225)}
				],
				'objects': [
					object
				]
			})
			;
			this.add_module(module);
		}
	});

	return AccordionElement;
});

define('scripts/upfront/element-settings/settings-container',[], function () {
	var SettingsContainer = Backbone.View.extend({
		save_settings: function () {
			if (!this.settings) return;

			var me = this;
			this.settings.each(function (setting) {
				if ( !setting.handlesSaving && (setting.fields || setting.settings).size() > 0 ) {
					setting.save_fields();
				} else  if (!setting.handlesSaving) {
					var value = me.model.get_property_value_by_name(setting.get_name());
					if ( value != setting.get_value() ) {
						me.model.set_property(
							setting.get_name(),
							setting.get_value()
						);
					}
				}
			});
			// some backward compatibility
			if (this.on_save) this.on_save();
			if (this.onSaveSettings) this.onSaveSettings();
		},

		cleanUp: function() {
			if(this.settings) {
				this.settings.each(function(setting){
					setting.remove();
				});
			}

			this.$el.off();
			this.remove();
		}

	});

	return SettingsContainer;
});

(function ($) {
define('scripts/upfront/element-settings/root-panel-mixin',[
], function () {
	var RootPanelMixin = {
		className: 'uf-settings-panel upfront-settings_panel',

		events: {
			'click .uf-settings-panel__title': 'toggleBody'
		},

		getTitle: function () {
			var title = this.options.title ? this.options.title : this.title;
			title = title ? title : 'Default Panel Title';
			return title;
		},

		/**
		 * Child classes need to override this method to return div with markup.
		 */
		getBody: function() {
			var $body = $('<div />');
			$body.append('<p>Implement getBody() in child class</p>');
			return $body;
		},

		toggleBody: function () {
			this.$el.find('.uf-settings-panel__body').toggle();
			this.$el.toggleClass('uf-settings-panel--expanded');
		},

		/**
		 * Hides panel body
		 */
		hideBody: function () {
			this.$el.find('.uf-settings-panel__body').hide();
			this.$el.removeClass('uf-settings-panel--expanded');
		},

		/**
		 * Shows panel body
		 */
		showBody: function () {
			this.$el.find('.uf-settings-panel__body').show();
			this.$el.addClass('uf-settings-panel--expanded');
		},

		render: function () {
			var body;

			this.$el.html('<div class="uf-settings-panel__title">' + this.getTitle() + '</div>');

			body = this.getBody();
			body.addClass('uf-settings-panel__body');
			this.$el.append(body);
			this.$el.addClass('uf-settings-panel--expanded');
		}
	};

	return RootPanelMixin;
});
})(jQuery);


define('text!elements/upfront-slider/tpl/backend.html',[],function () { return '<div>\n<script type="text/template" id="slides-setting-tpl">\n<div class="uslider-slides-setting">\n{[ slides.each(function(slide){ ]}\n<div class="uslider_content_imgslide uslider_content_slide" rel="{{slide.id}}">\n\t\t<img src="{{slide.get(\'src\')}}" />\n\t\t<span class="remove-slide"></span>\n\t</div>\n{[ }) ]}\n<div class="uslider-add upfront-region-bg-slider-add-image upfront-icon upfront-icon-region-add-slide">{{l10n.add_slide}}</div>\n</div>\n</script>\n\n\n<script type="text/template" id="startingTpl">\n\t<div class="upfront-image-starting-select upfront-ui upfront-initial-overlay-wrapper" style="min-height:{{startingHeight}}px">\n\t\t<div class="uslider-starting-centered upfront-initial-overlay-wrapper" style="height: 100px">\n\t\t\t<div class="uslider-starting-title">{{l10n.choose_type}}</div>\n\t\t\t<div class="uslider-starting-info">{{l10n.can_change}}</div>\n\t\t\t<a href="#" class="button upfront-image-select">{{l10n.choose_img}}</a>\n\t\t</div>\n\t</div>\n</script>\n\n\n</div>\n';});

(function ($) {
define('scripts/upfront/settings/fields/slides',[
	'text!elements/upfront-slider/tpl/backend.html',
], function(editorTpl) {
	var l10n = Upfront.Settings.l10n.slider_element;

	var SlidesField = Upfront.Views.Editor.Field.Field.extend({
		template: _.template($(editorTpl).find('#slides-setting-tpl').html()),
		events: {
			'click .uslider-add' : 'addSlides',
			'click .remove-slide' : 'onRemoveSlide'
		},
		initialize: function(){
			this.listenTo(this.model.slideCollection, 'add remove sort reset', this.render);
		},

		onRemoveSlide: function(event) {
			this.model.view.removeSlide($(event.currentTarget).parent());
		},

		render: function() {
			var me = this;
			this.$el.html(this.template({slides: this.model.slideCollection, l10n: l10n}));

			//Make the thumbs sortable
			this.$('.uslider-slides-setting').sortable({
				items: '.uslider_content_imgslide',
				start: function(event, ui) {
					ui.item.addClass('uslider-is-dragged');
				},
				stop: function(event, ui) {
					// When the drag stops we record the list of IDs into our array for use later.
					var slideId = ui.item.attr('rel'),
						newPosition = me.getSlidePosition(slideId),
						slide = false;

					if(newPosition != -1) {
						slide = me.model.slideCollection.get(slideId);
						me.model.slideCollection.remove(slideId, {silent:true});
						me.model.slideCollection.add(slide, {at: newPosition});
					}
				}
			});

			setTimeout(function(){
				var settings = $('#settings');
				settings.height(settings.find('.upfront-settings_panel:visible').outerHeight());
			},100)

		},

		addSlides: function(){
			this.model.trigger('addRequest');
		},

		getSlidePosition: function(slideId){
			var i = 0,
				found = false;
			this.$('div.uslider_content_slide').each(function(item){
				if($(this).attr('rel') == slideId)
					found = i;
				i++;
			});
			if(found !== false)
				return found;
			return -1;
		},
		get_name: function() {
			return 'slides';
		},
		get_value: function() {
			return this.model.slideCollection.toJSON();
		}
	});

	return SlidesField;
});
})(jQuery);

define('scripts/upfront/settings/field-factory',[
	'scripts/upfront/settings/fields/slides'
], function(SlidesField) {
	var FieldFactory = function() {
		var fieldClasses = {
			'SlidesField': SlidesField
		};

		this.createField = function(type, options) {
			var fieldClass = Upfront.Views.Editor.Field[type];

			if (_.isUndefined(fieldClass)) {
				fieldClass = fieldClasses[type];
			}

			if (type === 'Settings_CSS') fieldClass = Upfront.Views.Editor.Settings.Settings_CSS;
			if (_.isUndefined(fieldClass)) throw 'There is no \'' + type + '\' field class defined.';

			if (_.isFunction(options.values)) {
				options.values = options.values();
			}

			return new fieldClass(options);
		};
	};

	fieldFactory = new FieldFactory();

	return fieldFactory;
});

(function($) {
define('scripts/upfront/settings/modules/base-module',[
], function() {
	var BaseModule = Backbone.View.extend({
		initialize: function (opts) {
			var me = this;
			me.options = opts;
			this.fields = opts.fields ? _(opts.fields) : _([]);
			this.on('panel:set', function(){
				me.fields.each(function(field){
					field.panel = me.panel;
					field.trigger('panel:set');
				});
			});
		},

		render: function () {
			this.$el.html('');
			if (this.options.title && this.options.toggle !== true) {
				this.$el.append('<div class="upfront-settings-item-title">' + this.options.title + '</div>');
			}
			this.$el.append('<div class="upfront-settings-item-content"></div>');

			var $content = this.$el.find('.upfront-settings-item-content');
			this.fields.each(function(field){
				field.render();
				field.delegateEvents();
				$content.append(field.el);
			});

			this.trigger('rendered');
		},

		save_fields: function () {
			var changed = _([]);
			this.fields.each(function(field, index, list){
				if(field.property){
					var value = field.get_value();
					var saved_value = field.get_saved_value();
					if ( ! field.multiple && value != saved_value ){
						changed.push(field);
					}
					else if ( field.multiple && (value.length != saved_value.length || _.difference(value, saved_value).length !== 0) ) {
						changed.push(field);
					}
				}
			});
			changed.each(function(field, index, list){
				if ( field.use_breakpoint_property )
					field.model.set_breakpoint_property(field.property_name, field.get_value(), true);
				else
					field.property.set({'value': field.get_value()}, {'silent': true});
			});
			if ( changed.size() > 0 )
				this.panel.is_changed = true;
		},

		remove: function(){
			if(this.fields)
				this.fields.each(function(field){
					field.remove();
				});
			Backbone.View.prototype.remove.call(this);
		}
	});

	return BaseModule
});
})(jQuery);

/*
* Field names properies
* `use` - Overwrite theme settings
* `element` - Font element
* `typeface` - Font family
* `weight` - Font weight / style
* `size` - Font size
* `line_height` - Font line height
* `color` - Font color
*/
define('scripts/upfront/settings/modules/typography',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var TypographySettingsItem = BaseModule.extend({
		className: 'settings_module typography_settings_item',
		group: true,

		get_title: function() {
			return this.options.title;
		},

		initialize: function(options) {
			this.options = options || {};
			this.fieldCounter = 0;
			this.currentElement = '';
			var me = this,
				state = this.options.state,
				toggleClass = 'no-toggle';

			//Increase field counter if inner elements
			if(typeof me.options.elements !== "undefined") {
				this.fieldCounter++;
			}

			//Set default element
			if(typeof this.options.default_element !== "undefined") {
				this.currentElement = this.options.default_element + '-';
			}

			//Set saved element to default element
			if(typeof this.model.get(state + '-element-type') !== "undefined" && typeof this.options.elements !== "undefined") {
				this.currentElement = this.model.get(state + '-element-type') + '-';
			}

			if(this.options.toggle === true) {
				this.fieldCounter++;
				toggleClass = 'element-toggled';
			}

			this.fields = _([
				new Upfront.Views.Editor.Field.Typeface_Chosen_Select({
					name: this.currentElement + this.options.fields.typeface,
					model: this.model,
					values: Upfront.Views.Editor.Fonts.theme_fonts_collection.get_fonts_for_select(),
					default_value: this.model.get(this.currentElement + this.options.fields.typeface),
					label: l10n.typeface,
					select_width: '225px',
					label_style: 'inline',
					className: state + '-font-face static typeFace ' + toggleClass,
					change: function(value) {
						me.model.set(me.currentElement + me.options.fields.typeface, value);
						me.fields._wrapped[1 + me.fieldCounter].stopListening();
						me.fields._wrapped[1 + me.fieldCounter] = new Upfront.Views.Editor.Field.Typeface_Style_Chosen_Select({
							model: this.model,
							name: me.currentElement + me.options.fields.fontstyle,
							values: Upfront.Views.Editor.Fonts.theme_fonts_collection.get_variants_for_select(me.model.get(me.currentElement + me.options.fields.typeface)),
							label: l10n.weight_style,
							font_family: me.model.get(me.options.fields.typeface),
							select_width: '225px',
							label_style: 'inline',
							className: state + '-font-style static weightStyle ' + toggleClass,
							change: function(value) {
								//Explode Font style and font weight and save them as separate values
								var parsed_variant = Upfront.Views.Font_Model.parse_variant(value);
								var data = {};
								data[me.currentElement + me.options.fields.fontstyle] = value;
								data[me.currentElement + me.options.fields.weight] = parsed_variant.weight;
								data[me.currentElement + me.options.fields.style] = parsed_variant.style;
								me.model.set(data);
							},
							show: function(value) {
								if(value !== null) {
									me.fields._wrapped[1 + me.fieldCounter].set_option_font(value);
								}
							}
						});
						me.$el.empty();
						me.render();
					}
				}),

				new Upfront.Views.Editor.Field.Typeface_Style_Chosen_Select({
					model: this.model,
					name: this.currentElement + this.options.fields.fontstyle,
					values: Upfront.Views.Editor.Fonts.theme_fonts_collection.get_variants_for_select(me.model.get(this.currentElement + me.options.fields.typeface)),
					default_value: this.model.get(this.currentElement + this.options.fields.fontstyle),
					label: l10n.weight_style,
					font_family: me.model.get(this.options.fields.typeface),
					select_width: '225px',
					label_style: 'inline',
					className: state + '-font-style static weightStyle ' + toggleClass,
					change: function(value) {
						//Explode Font style and font weight and save them as separate values
						var parsed_variant = Upfront.Views.Font_Model.parse_variant(value);
						me.model.set(me.currentElement + me.options.fields.fontstyle, value);
						me.model.set(me.currentElement + me.options.fields.weight, parsed_variant.weight);
						me.model.set(me.currentElement + me.options.fields.style, parsed_variant.style);
					},
					show: function(value) {
						if(value !== null) {
							me.fields._wrapped[1 + me.fieldCounter].set_option_font(value);

						}
					}
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-font-size fontSize ' + toggleClass,
					name: this.currentElement + this.options.fields.size,
					default_value: this.model.get(this.currentElement + this.options.fields.size),
					label: l10n.size,
					label_style: 'inline',
					suffix: l10n.px,
					change: function(value) {
						me.model.set(me.currentElement + me.options.fields.size, value);
					}
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-font-lineheight lineHeight ' + toggleClass,
					name: this.currentElement + this.options.fields.line_height,
					label: l10n.line_height,
					label_style: 'inline',
					default_value: this.model.get(this.currentElement + this.options.fields.line_height),
					min: 0,
					step: 0.1,
					change: function(value) {
						me.model.set(me.currentElement + me.options.fields.line_height, value);
					}
				}),

				new Upfront.Views.Editor.Field.Color({
					model: this.model,
					className: state + '-font-color upfront-field-wrap upfront-field-wrap-color sp-cf fontColor ' + toggleClass,
					name: this.currentElement + this.options.fields.color,
					default_value: this.model.get(this.currentElement + this.options.fields.color),
					blank_alpha : 0,
					label_style: 'inline',
					label: l10n.color,
					spectrum: {
						preferredFormat: 'rgb',
						change: function(value) {
							if (!value) return false;
							var c = value.get_is_theme_color() !== false ? value.theme_color : value.toRgbString();
							me.model.set(me.currentElement + me.options.fields.color, c);
						},
						move: function(value) {
							if (!value) return false;
							var c = value.get_is_theme_color() !== false ? value.theme_color : value.toRgbString();
							me.model.set(me.currentElement + me.options.fields.color, c);
						}
					}
				}),

			]);


			//Add fields select box
			if(typeof me.options.elements !== "undefined") {
				this.fields.unshift(
					new Upfront.Views.Editor.Field.Select({
						model: this.model,
						label: l10n.type_element,
						label_style: 'inline',
						name: state + '-element-type',
						className: state + '-select-element selectElement ' + toggleClass,
						values: me.options.elements,
						change: function (value) {
							//Update element type value to keep it on typography re-render
							me.model.set(state + '-element-type', value);
							me.$el.empty();
							me.render();
						},
						show: function(value) {
							me.currentElement = value + '-';
							var settings = me.get_field_values(value);
							me.update_fields(settings);
						}
					})
				);
			}

			//Add toggle typography checkbox
			if(this.options.toggle === true) {
				this.group = false;
				this.fields.unshift(
					new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						className: 'useTypography checkbox-title ' + toggleClass,
						name: me.options.fields.use,
						label: '',
						multiple: false,
						values: [
							{
								label: l10n.typography,
								value: 'yes',
								checked: this.model.get(me.options.fields.use)
							}
						],
						change: function(value) {
							console.log('triggered change on checkbox');
							me.model.set(me.options.fields.use, value);
							me.reset_fields(value);
						},
						show: function(value, $el) {
							var stateSettings = $el.closest('.state_modules');
							//Toggle typography fields
							if(value == "yes") {
								stateSettings.find('.'+ state +'-select-element').show();
								stateSettings.find('.'+ state +'-font-face').show();
								stateSettings.find('.'+ state +'-font-style').show();
								stateSettings.find('.'+ state +'-font-size').show();
								stateSettings.find('.'+ state +'-font-lineheight').show();
								stateSettings.find('.'+ state +'-font-color').show();
							} else {
								stateSettings.find('.'+ state +'-select-element').hide();
								stateSettings.find('.'+ state +'-font-face').hide();
								stateSettings.find('.'+ state +'-font-style').hide();
								stateSettings.find('.'+ state +'-font-size').hide();
								stateSettings.find('.'+ state +'-font-lineheight').hide();
								stateSettings.find('.'+ state +'-font-color').hide();
							}
						}
					})
				);
			}
		},

		reset_fields: function(value) {
			var settings,
				me = this;
			if(typeof value !== "undefined" && value === "yes") {
				if(typeof this.options.elements !== "undefined") {
					_.each(this.options.elements, function(element) {
						var currentElementValue = element.value + '-';
						settings = me.get_static_field_values(me.options.prepend, currentElementValue);
						me.update_fields(settings);
						me.save_static_values(settings, currentElementValue);
					});
				} else {
					settings = this.get_static_field_values(this.options.prepend, '');
					me.update_fields(settings);
					this.save_static_values(settings, '');
				}
				this.$el.empty();
				this.render();
			}
		},

		save_static_values: function(settings, element) {
			//Save preset values from static state
			var parsed_variant = Upfront.Views.Font_Model.parse_variant(settings.fontstyle);
			this.model.set(element + this.options.fields.typeface, settings.typeface);
			this.model.set(element + this.options.fields.fontstyle, settings.fontstyle);
			this.model.set(element + this.options.fields.weight, parsed_variant.weight);
			this.model.set(element + this.options.fields.style, parsed_variant.style);
			this.model.set(element + this.options.fields.size, settings.fontsize);
			this.model.set(element + this.options.fields.line_height, settings.line_height);
			this.model.set(element + this.options.fields.color, settings.color);
		},

		get_static_field_values: function(prepend, element) {
			var settings = {},
				prefix = '';

			if(typeof this.options.prefix !== "undefined") {
				prefix = this.options.prefix + '-';
			}

			settings.typeface = this.model.get(this.clear_prepend(element + prefix + this.options.fields.typeface, prepend)) || '';
			settings.fontstyle = this.model.get(this.clear_prepend(element + prefix + this.options.fields.fontstyle, prepend)) || '';
			settings.fontsize = this.model.get(this.clear_prepend(element + prefix + this.options.fields.size, prepend)) || '';
			settings.line_height = this.model.get(this.clear_prepend(element + prefix + this.options.fields.line_height, prepend)) || '';
			settings.color = this.model.get(this.clear_prepend(element + prefix + this.options.fields.color, prepend)) || '';

			return settings;
		},

		clear_prepend: function(field, prepend) {
			return field.replace(prepend, '');
		},

		get_field_values: function(value) {
			var settings = {};
			//Get stored values else load from Global Typography settings
			if(typeof this.options.global_typography !== "undefined" && this.options.global_typography === true) {
				var font_settings = Upfront.mainData.global_typography[this.normalize_elements_selector(value)];
				font_settings = font_settings || {};
				settings.typeface = this.model.get(this.currentElement + this.options.fields.typeface) || font_settings.font_face || '';
				settings.fontstyle = this.model.get(this.currentElement + this.options.fields.fontstyle) || font_settings.weight + ' ' + font_settings.style || '';
				settings.fontsize = this.model.get(this.currentElement + this.options.fields.size) || font_settings.size || '';
				settings.line_height = this.model.get(this.currentElement + this.options.fields.line_height) || font_settings.line_height || '';
				settings.color = this.model.get(this.currentElement + this.options.fields.color) || font_settings.color || '';
			} else {
				settings.typeface = this.model.get(this.currentElement + this.options.fields.typeface) || '';
				settings.fontstyle = this.model.get(this.currentElement + this.options.fields.fontstyle) || '';
				settings.fontsize = this.model.get(this.currentElement + this.options.fields.size) || '';
				settings.line_height = this.model.get(this.currentElement + this.options.fields.line_height) || '';
				settings.color = this.model.get(this.currentElement + this.options.fields.color) || '';
			}

			return settings;
		},

		update_fields: function(settings) {
			//Update selected element

			//Update typography fields for selected element
			this.fields._wrapped[this.fieldCounter].set_value(settings.typeface);
			this.fields._wrapped[this.fieldCounter].set_option_font(settings.typeface);
			this.fields._wrapped[this.fieldCounter + 1].options.values = Upfront.Views.Editor.Fonts.theme_fonts_collection.get_variants_for_select(settings.typeface);
			this.fields._wrapped[this.fieldCounter + 1].set_value(settings.fontstyle);
			this.fields._wrapped[this.fieldCounter + 1].set_option_font(settings.fontstyle);
			this.fields._wrapped[this.fieldCounter + 2].set_value(settings.fontsize);
			this.fields._wrapped[this.fieldCounter + 3].set_value(settings.line_height);
			this.fields._wrapped[this.fieldCounter + 4].set_value(settings.color);
			this.fields._wrapped[this.fieldCounter + 4].update_input_border_color(settings.color);
		},

		normalize_elements_selector: function(value) {
			if(value === 'a-hover') {
				return 'a:hover';
			}
			if(value === "blockquote-alternative") {
				return 'blockquote.upfront-quote-alternative';
			}
			return value;
		}
	});

	return TypographySettingsItem;
});

/*
* Field names properties
* `use` - Toggle border settings
* `width` - Border width
* `type` - Border type
* `color` - Border color
*/
define('scripts/upfront/settings/modules/border',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var BorderSettingsModule = BaseModule.extend({
		className: 'settings_module border_settings_item clearfix',
		group: false,

		initialize: function(options) {
			this.options = options || {};
			this.fieldCounter = 0;
			this.currentElement = '';
			var me = this,
				state = this.options.state,
				custom_class = '';

			//If fields added increase field counter
			if(typeof this.options.elements !== "undefined") {
				this.fieldCounter++;
			}

			//Set default element
			if(typeof this.options.default_element !== "undefined") {
				this.currentElement = this.options.default_element + '-';
				custom_class = 'border-with-fields';
			}

			this.fields = _([
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'useBorder checkbox-title',
					name: me.options.fields.use,
					label: '',
					default_value: 1,
					multiple: false,
					values: [
						{ label: me.options.label || l10n.border, value: 'yes' }
					],
					change: function(value) {
						me.model.set(me.options.fields.use, value);
						me.reset_fields(value);
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.state_modules');

						//Toggle border settings when depending on checkbox value
						if(value == "yes") {
							stateSettings.find('.' + state + '-border-width').show();
							stateSettings.find('.' + state + '-border-type').show();
							stateSettings.find('.' + state + '-border-color').show();
							stateSettings.find('.' + state + '-border-select-element').css("opacity", "1");
						} else {
							stateSettings.find('.' + state + '-border-width').hide();
							stateSettings.find('.' + state + '-border-type').hide();
							stateSettings.find('.' + state + '-border-color').hide();
							stateSettings.find('.' + state + '-border-select-element').css("opacity", "0.5");
						}
					}
				}),
				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-border-width borderWidth ' + custom_class,
					name: this.currentElement + me.options.fields.width,
					label: '',
					default_value: 1,
					suffix: l10n.px,
					values: [
						{ label: "", value: '1' }
					],
					change: function(value) {
						me.model.set(me.currentElement + me.options.fields.width, value);
						if (typeof me.options.elements !== "undefined") {
							_.each(me.options.elements, function(element) {
								me.model.set(element.value + '-' + me.options.fields.width, value);
							});
						}
						this.trigger('change');
					}
				}),
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-border-type borderType ' + custom_class,
					name: this.currentElement + me.options.fields.type,
					default_value: "solid",
					values: [
						{ label: l10n.solid, value: 'solid' },
						{ label: l10n.dashed, value: 'dashed' },
						{ label: l10n.dotted, value: 'dotted' }
					],
					change: function(value) {
						me.model.set(me.currentElement + me.options.fields.type, value);
						if (typeof me.options.elements !== "undefined") {
							_.each(me.options.elements, function(element) {
								me.model.set(element.value + '-' + me.options.fields.type, value);
							});
						}
					}
				}),

				new Upfront.Views.Editor.Field.Color({
					model: this.model,
					className: state + '-border-color upfront-field-wrap upfront-field-wrap-color sp-cf borderColor ' + custom_class,
					name: this.currentElement + me.options.fields.color,
					blank_alpha : 0,
					label_style: 'inline',
					label: l10n.color,
					default_value: '#000',
					spectrum: {
						preferredFormat: 'rgb',
						change: function(value) {
							if (!value) return false;
							var c = value.get_is_theme_color() !== false ? value.theme_color : value.toRgbString();
							me.model.set(me.currentElement + me.options.fields.color, c);
							if (typeof me.options.elements !== "undefined") {
								_.each(me.options.elements, function(element) {
									me.model.set(element.value + '-' + me.options.fields.color, c);
								});
							}
						},
						move: function(value) {
							if (!value) return false;
							var c = value.get_is_theme_color() !== false ? value.theme_color : value.toRgbString();
							me.model.set(me.currentElement + me.options.fields.color, c);
							if (typeof me.options.elements !== "undefined") {
								_.each(me.options.elements, function(element) {
									me.model.set(element.value + '-' + me.options.fields.color, c);
								});
							}
						}
					}
				})
			]);

			//Add fields select box
			if (typeof me.options.elements !== "undefined") {
				this.fields.unshift(
					new Upfront.Views.Editor.Field.Select({
						className: state + '-border-select-element border_selectElement',
						name: 'tagsToApply',
						default_value: me.model.get('tagsToApply') || 'field-button',
						values: me.options.elements,
						change: function () {
							var value = this.get_value();
							me.model.set({'tagsToApply': value});
							me.currentElement = value + '-';
						}
					})
				);
			}
		},

		reset_fields: function(value) {
			var settings,
				me = this;
			if(typeof value !== "undefined" && value === "yes") {
				if(typeof this.options.elements !== "undefined") {
					_.each(this.options.elements, function(element) {
						var currentElementValue = element.value + '-';
						settings = me.get_static_field_values(me.options.prepend, currentElementValue);
						me.update_fields(settings);
						me.save_static_values(settings, currentElementValue);
					});
				} else {
					settings = this.get_static_field_values(this.options.prepend, '');
					this.update_fields(settings);
					this.save_static_values(settings, '');
				}
				this.$el.empty();
				this.render();
			}
		},

		save_static_values: function(settings, element) {
			//Save preset values from static state
			this.model.set(element + this.options.fields.width, settings.width);
			this.model.set(element + this.options.fields.type, settings.type);
			this.model.set(element + this.options.fields.color, settings.color);
		},

		get_static_field_values: function(prepend, element) {
			var settings = {},
				prefix = '';

			if(typeof this.options.prefix !== "undefined") {
				prefix = this.options.prefix + '-';
			}

			settings.width = this.model.get(this.clear_prepend(element + prefix + this.options.fields.width, prepend)) || '';
			settings.type = this.model.get(this.clear_prepend(element + prefix + this.options.fields.type, prepend)) || '';
			settings.color = this.model.get(this.clear_prepend(element + prefix + this.options.fields.color, prepend)) || '';

			return settings;
		},

		clear_prepend: function(field, prepend) {
			return field.replace(prepend, '');
		},

		update_fields: function(settings) {
			//Update selected element
			this.fields._wrapped[this.fieldCounter + 1].set_value(settings.width);
			this.fields._wrapped[this.fieldCounter + 2].set_value(settings.type);
			this.fields._wrapped[this.fieldCounter + 3].set_value(settings.color);
			this.fields._wrapped[this.fieldCounter + 3].update_input_border_color(settings.color);
		},
	});

	return BorderSettingsModule;
});

/*
* Field names properies
* `duration` - Animation duration
* `easing` - Animation effect
*/
define('scripts/upfront/settings/modules/hov-animation',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var HovAnimationSettingsModule = BaseModule.extend({
		className: 'settings_module hov_animation_settings_item clearfix',
		group: false,

		initialize: function(options) {
			this.options = options || {};
			var me = this,
				state = this.options.state,
				toggleClass = 'no-toggle';

			if(me.options.toggle === true) {
				toggleClass = 'element-toggled';
			}

			this.fields = _([
				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-duration duration ' + toggleClass,
					name: me.options.fields.duration,
					min: 0,
					label: l10n.animate_hover_changes,
					step: 0.1,
					values: [
						{ label: '', value: '12' }
					],
					change: function(value) {
						me.model.set(me.options.fields.duration, value);
					}
				}),
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					name: me.options.fields.easing,
					label: l10n.sec,
					step: 0.1,
					label_style: 'inline',
					values: [
						{ label: 'ease', value: 'ease' },
						{ label: 'linear', value: 'linear' },
						{ label: 'ease-in', value: 'ease-in' },
						{ label: 'ease-out', value: 'ease-out' },
						{ label: 'ease-in-out', value: 'ease-in-out' }
					],
					className: state + '-transition transition ' + toggleClass,
					change: function(value) {
						me.model.set(me.options.fields.easing, value);
					}
				}),
			]);

			//Add toggle typography checkbox
			if(this.options.toggle === true) {
				this.group = false;
				this.fields.unshift(
					new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						className: 'useAnimation checkbox-title',
						name: me.options.fields.use,
						label: '',
						default_value: 1,
						multiple: false,
						values: [
							{ label: l10n.animate_hover_changes, value: 'yes' }
						],
						change: function(value) {
							me.model.set(me.options.fields.use, value);
						},
						show: function(value, $el) {
							var stateSettings = $el.closest('.state_modules');
							//Toggle color fields
							if(value == "yes") {
								stateSettings.find('.'+ state +'-transition').show();
								stateSettings.find('.'+ state +'-duration').show();
							} else {
								stateSettings.find('.'+ state +'-transition').hide();
								stateSettings.find('.'+ state +'-duration').hide();
							}
						}
					})
				);
			}
		},
	});

	return HovAnimationSettingsModule;
});

/*
* Field names properies
* `use` - Toggle radius settings
* `lock` - Lock radius
* `radius` - Radius slider
* `radius_number` - Radius number field
* `radius1` - Top left corner
* `radius2` - Top right corner
* `radius3` - Bottom left corner
* `radius4` - Bottom right corner
*/
define('scripts/upfront/settings/modules/radius',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var RadiusSettingsModule = BaseModule.extend({
		className: 'settings_module corner_radius_settings_item clearfix',
		group: false,

		get_title: function() {
			return this.options.title;
		},

		initialize: function(options) {
			this.options = options || {};
			var me = this,
				state = this.options.state;

			var sliderOnChange = function () {
				//Update border radius
				var value = this.get_value();
				var data = {};
				data[me.options.fields.radius1] = value;
				data[me.options.fields.radius2] = value;
				data[me.options.fields.radius3] = value;
				data[me.options.fields.radius4] = value;
				data[me.options.fields.radius] = value;
				me.model.set(data, {silent: true});
				me.model.set(me.options.fields.radius_number, value);
				me.$el.find("input[name="+ me.options.fields.radius1 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius2 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius3 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius4 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius_number +"]").val(value);

				//Set opacity to 1
				me.$el.closest('.state_modules').find('.'+ state +'-radius-slider').css('opacity', 1);
			};
			var throttledSliderOnChange = _.throttle(sliderOnChange, 16);

			var radiusOnChange = function(value) {
/*
// --- Don't do any of this - it's duplicated code and will fail to update properly as a result ---
				me.model.set(me.options.fields.radius_number, value);
				//Update border radius
				var data = {};
				data[me.options.fields.radius1] = value;
				data[me.options.fields.radius2] = value;
				data[me.options.fields.radius3] = value;
				data[me.options.fields.radius4] = value;
				data[me.options.fields.radius] = value;
				me.model.set(data, {silent: true});

				me.$el.find("input[name="+ me.options.fields.radius1 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius2 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius3 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius4 +"]").val(value);
				me.$el.find("input[name="+ me.options.fields.radius +"]").val(value);
*/
// --- Instead, just update slider value and deal with changes there ---
				//Update slider value
				s = me.fields._wrapped[2];
				s.$el.find('#'+s.get_field_id()).slider('value', value);
				s.get_field().val(value);
				
				// Now, once we updated the slider value, let that handler take care of it
				sliderOnChange.apply(s);
				
				//Lower opacity if value is bigger than the slider MAX_VALUE
				if(value > me.options.max_value) {
					me.$el.closest('.state_modules').find('.'+ state +'-radius-slider').css('opacity', 0.6);
				} else {
					me.$el.closest('.state_modules').find('.'+ state +'-radius-slider').css('opacity', 1);
				}
			};
			var throttledRadiusOnChange = _.throttle(radiusOnChange, 16);

			this.fields = _([
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'useRadius checkbox-title',
					name: me.options.fields.use,
					label: '',
					default_value: 1,
					multiple: false,
					values: [
						{ label: l10n.rounded_corners, value: 'yes' }
					],
					change: function(value) {
						me.model.set(me.options.fields.use, value);
						me.reset_fields(value);
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.state_modules');
						var lock = me.model.get(me.options.fields.lock);
						//Toggle border radius fields
						if(value == "yes") {
							if(lock == "yes") {
								stateSettings.find('.'+ state +'-radius-slider').show();
								stateSettings.find('.'+ state +'-radius-slider-number').show();
							} else {
								stateSettings.find('.'+ state +'-radius-slider').hide();
								stateSettings.find('.'+ state +'-radius-slider-number').hide();
								stateSettings.find('.'+ state +'-radius1').show();
								stateSettings.find('.'+ state +'-radius2').show();
								stateSettings.find('.'+ state +'-radius3').show();
								stateSettings.find('.'+ state +'-radius4').show();
							}
						} else {
							stateSettings.find('.'+ state +'-radius1').hide();
							stateSettings.find('.'+ state +'-radius2').hide();
							stateSettings.find('.'+ state +'-radius3').hide();
							stateSettings.find('.'+ state +'-radius4').hide();
							stateSettings.find('.'+ state +'-radius-slider').hide();
							stateSettings.find('.'+ state +'-radius-slider-number').hide();
						}
					}
				}),

				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: state + '-radius-lock border_radius_lock',
					name: me.options.fields.lock,
					label: "",
					default_value: 0,
					multiple: false,
					values: [
						{ label: '', value: 'yes' }
					],
					show: function(value) {
						me.model.set(me.options.fields.lock, value);

						var stateSettings = me.$el.closest('.state_modules');
						var useRadius = me.model.get(me.options.fields.use);

						//Toggle border radius fields
						if(value == "yes" && useRadius == "yes") {
							stateSettings.find('.'+ state +'-radius-slider').show();
							stateSettings.find('.'+ state +'-radius-slider-number').show();
							stateSettings.find('.'+ state +'-radius1').hide();
							stateSettings.find('.'+ state +'-radius2').hide();
							stateSettings.find('.'+ state +'-radius3').hide();
							stateSettings.find('.'+ state +'-radius4').hide();
						} else {
							if(useRadius == "yes") {
								stateSettings.find('.'+ state +'-radius-slider').hide();
								stateSettings.find('.'+ state +'-radius-slider-number').hide();
								stateSettings.find('.'+ state +'-radius1').show();
								stateSettings.find('.'+ state +'-radius2').show();
								stateSettings.find('.'+ state +'-radius3').show();
								stateSettings.find('.'+ state +'-radius4').show();
							}
						}
					}
				}),


				new Upfront.Views.Editor.Field.Slider({
					className: state + '-radius-slider upfront-field-wrap upfront-field-wrap-slider radius-slider',
					model: this.model,
					name: me.options.fields.radius,
					suffix: l10n.px,
					min: 1,
					max: me.options.max_value,
					change: throttledSliderOnChange,
					show: function() {
						var value = me.model.get(me.options.fields.radius_number);
						if(value > me.options.max_value) {
							me.$el.closest('.state_modules').find('.'+ state +'-radius-slider').css('opacity', 0.6);
						} else {
							me.$el.closest('.state_modules').find('.'+ state +'-radius-slider').css('opacity', 1);
						}
					}
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-radius-slider-number border_radius_number',
					name: me.options.fields.radius_number,
					label: '',
					min: 0,
					max: me.options.max_value,
					default_value: 0,
					values: [
						{ label: "", value: '0' }
					],
					change: throttledRadiusOnChange
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-radius1 border_radius border_radius1',
					name: me.options.fields.radius1,
					label: '',
					min: 0,
					max: me.options.max_value,
					default_value: 0,
					values: [
						{ label: "", value: '0' }
					],
					change: function(value) {
						me.model.set(me.options.fields.radius1, value);
					}
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-radius2 border_radius border_radius2 border_radius2_static',
					name: me.options.fields.radius2,
					label: '',
					min: 0,
					max: me.options.max_value,
					default_value: 0,
					values: [
						{ label: "", value: '0' }
					],
					change: function(value) {
						me.model.set(me.options.fields.radius2, value);
					}
				}),

				new	Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-radius4 border_radius border_radius4',
					name: me.options.fields.radius4,
					label: '',
					min: 0,
					max: me.options.max_value,
					default_value: 0,
					values: [
						{ label: "", value: '0' }
					],
					change: function(value) {
						me.model.set(me.options.fields.radius4, value);
					}
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-radius3 border_radius border_radius3',
					name: me.options.fields.radius3,
					label: '',
					min: 0,
					max: me.options.max_value,
					default_value: 0,
					values: [
						{ label: "", value: '0' }
					],
					change: function(value) {
						me.model.set(me.options.fields.radius3, value);
					}
				}),


			]);
		},
		reset_fields: function(value) {
			if(typeof value !== "undefined" && value === "yes") {
				var settings = this.get_static_field_values(value, this.options.prepend);
				this.update_fields(value, settings);
				this.save_static_values(value, settings);
				this.$el.empty();
				this.render();
			}
		},

		save_static_values: function(value, settings) {
			//Save preset values from static state
			this.model.set(this.options.fields.lock, settings.lock);
			this.model.set(this.options.fields.radius, settings.radius);
			this.model.set(this.options.fields.radius_number, settings.radius_number);
			this.model.set(this.options.fields.radius1, settings.radius1);
			this.model.set(this.options.fields.radius2, settings.radius2);
			this.model.set(this.options.fields.radius3, settings.radius3);
			this.model.set(this.options.fields.radius4, settings.radius4);
		},

		get_static_field_values: function(value, prepend) {
			var settings = {},
				prefix = '';

			if(typeof this.options.prefix !== "undefined") {
				prefix = this.options.prefix + '-';
			}

			settings.lock = this.model.get(this.clear_prepend(prefix + this.options.fields.lock, prepend)) || '';
			settings.radius = this.model.get(this.clear_prepend(prefix + this.options.fields.radius, prepend)) || '';
			settings.radius_number = this.model.get(this.clear_prepend(prefix + this.options.fields.radius_number, prepend)) || '';
			settings.radius1 = this.model.get(this.clear_prepend(prefix + this.options.fields.radius1, prepend)) || '';
			settings.radius2 = this.model.get(this.clear_prepend(prefix + this.options.fields.radius2, prepend)) || '';
			settings.radius3 = this.model.get(this.clear_prepend(prefix + this.options.fields.radius3, prepend)) || '';
			settings.radius4 = this.model.get(this.clear_prepend(prefix + this.options.fields.radius4, prepend)) || '';

			return settings;
		},

		clear_prepend: function(field, prepend) {
			return field.replace(prepend, '');
		},

		update_fields: function(value, settings) {
			//Update slider value
			s = this.fields._wrapped[2];
			s.$el.find('#'+s.get_field_id()).slider('value', settings.radius);
			s.get_field().val(settings.radius);
			s.trigger('changed');
		},
	});

	return RadiusSettingsModule;
});

/*
* Field names properies
* `name` - Select box name
*/
define('scripts/upfront/settings/modules/selectbox',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var SelectboxSettingsModule = BaseModule.extend({
		className: 'settings_module selectbox_settings_item clearfix',
		group: true,
		get_title: function() {
			return this.options.title;
		},
		initialize: function(options) {
			this.options = options || {};

			if(typeof this.options.title === "undefined") {
				this.group = false;
			}

			var me = this,
				custom_class = this.options.custom_class,
				state = this.options.state;

			this.fields = _([
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-select select-module ' + custom_class,
					name: me.options.fields.name,
					default_value: me.options.default_value,
					label: me.options.label,
					values: me.options.values,
					change: function(value) {
						me.model.set(me.options.fields.name, value);
					}
				})
			]);
		},
	});

	return SelectboxSettingsModule;
});

/**
 * Field names properies
 * `checkbox` - Enable / Disable
 */

define('scripts/upfront/settings/modules/checkbox',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var CheckboxSettingsModule = BaseModule.extend({
		className: 'settings_module checkbox_settings_item clearfix',
		group: false,

		initialize: function(options) {
			this.options = options || {};
			var me = this,
				state = this.options.state;
				
			var TooltipField = Upfront.Views.Editor.Field.Text.extend({
				get_field_html: function () {
					return '<button class="checkbox-tooltip" title="' + me.options.tooltip_label +'">&nbsp;</button>';
				}
			});	

			this.fields = _([
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'checkbox-module checkbox-title',
					name: me.options.fields.checkbox,
					label: '',
					default_value: 1,
					multiple: false,
					values: [
						{ label: me.options.label, value: 'yes' }
					],
					change: function(value) {
						me.model.set(me.options.fields.checkbox, value);
					},
					show: function(value, $el) {

					}
				})
			]);
			
			if(typeof me.options.tooltip !== "undefined" && me.options.tooltip) {
				this.fields.push(
					new TooltipField({
						model: this.model,
						label: '',
						className: 'tooltip-icon',
					})
				);
			}
		},
	});

	return CheckboxSettingsModule;
});

define('scripts/upfront/settings/modules/caption-location',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.image_element;
	var CaptionLocationSettingsModule = BaseModule.extend({
		className: 'settings_module image-caption-location caption_location clearfix',
		group: false,

		initialize: function(options) {
			this.options = options || {};
			var me = this,
				state = this.options.state;

			this.fields = _([
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'useCaptions checkbox-title',
					name: 'use_captions',
					label: '',
					default_value: 1,
					multiple: false,
					values: [
						{ label: l10n.settings.show_caption, value: 'yes' }
					],
					change: function(value) {
						me.model.set('use_captions', value);
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.state_modules');
						//Toggle color fields
						if(value == "yes") {
							stateSettings.find('.'+ state +'-caption-select').show();
							stateSettings.find('.'+ state +'-caption-trigger').show();
						} else {
							stateSettings.find('.'+ state +'-caption-select').hide();
							stateSettings.find('.'+ state +'-caption-trigger').hide();
						}
					}
				}),

				new Upfront.Views.Editor.Field.Radios({
					className: state + '-caption-trigger field-caption_trigger upfront-field-wrap upfront-field-wrap-multiple upfront-field-wrap-radios over_image_field',
					model: this.model,
					name: 'caption-trigger',
					label: '',
					layout: 'horizontal-inline',
					values: [
						{
							label: l10n.settings.always,
							value: 'always_show'
						},
						{
							label: l10n.settings.hover,
							value: 'hover_show'
						}
					],
					change: function(value) {
						me.model.set('caption-trigger', value);
					}
				}),

				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-caption-select caption_select',
					name: 'caption-position-value',
					default_value: 'topOver',
					label: l10n.ctrl.caption_position,
					values: [
						{ label: l10n.ctrl.over_top, value: 'topOver', icon: 'topOver' },
						{ label: l10n.ctrl.over_bottom, value: 'bottomOver', icon: 'bottomOver' },
						{ label: l10n.ctrl.cover_top, value: 'topCover', icon: 'topCover' },
						{ label: l10n.ctrl.cover_middle, value: 'middleCover', icon: 'middleCover' },
						{ label: l10n.ctrl.cover_bottom, value: 'bottomCover', icon: 'bottomCover' },
						{ label: l10n.ctrl.below, value: 'below', icon: 'below' },
					],
					change: function(value) {
						me.model.set('caption-position-value', value);
						switch(value){
							case 'topOver':
								me.model.set('caption-position', 'over_image');
								me.model.set('caption-alignment', 'top');
								break;
							case 'bottomOver':
								me.model.set('caption-position', 'over_image');
								me.model.set('caption-alignment', 'bottom');
								break;
							case 'topCover':
								me.model.set('caption-position', 'over_image');
								me.model.set('caption-alignment', 'fill');
								break;
							case 'middleCover':
								me.model.set('caption-position', 'over_image');
								me.model.set('caption-alignment', 'fill_middle');
								break;
							case 'bottomCover':
								me.model.set('caption-position', 'over_image');
								me.model.set('caption-alignment', 'fill_bottom');
								break;
							case 'below':
								me.model.set('caption-position', 'below_image');
								me.model.set('caption-alignment', false);
						}
					}
				})
			]);
		},
	});

	return CaptionLocationSettingsModule;
});

define('scripts/upfront/settings/modules/gallery-caption-location',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.gallery_element;
	var CaptionLocation = BaseModule.extend({
		className: 'settings_module caption_location gallery-caption-location clearfix',
		group: false,

		initialize: function(options) {
			this.options = options || {};
			var me = this,
				state = this.options.state;

			this.fields = _([
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'useCaptions checkbox-title',
					name: 'use_captions',
					label: '',
					default_value: 1,
					multiple: false,
					values: [
						{ label: l10n.panel.show_caption, value: 'yes' }
					],
					change: function(value) {
						me.model.set('use_captions', value);
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.state_modules');
						//Toggle color fields
						if(value == "yes") {
							stateSettings.find('.'+ state +'-caption-select').show();
							stateSettings.find('.'+ state +'-caption-trigger').show();
							stateSettings.find('.'+ state +'-caption-height').show();
							var height_type = me.model.get('caption-height', value);
							if(height_type === "fixed") {
								stateSettings.find('.'+ state +'-caption-height-number').show();
							}
						} else {
							stateSettings.find('.'+ state +'-caption-select').hide();
							stateSettings.find('.'+ state +'-caption-trigger').hide();
							stateSettings.find('.'+ state +'-caption-height').hide();
							stateSettings.find('.'+ state +'-caption-height-number').hide();
						}
					}
				}),
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-caption-select caption_select',
					name: 'captionType',
					default_value: 'below',
					label: l10n.panel.caption_location,
					values: [
						{value: 'over', label: l10n.panel.over, icon: 'over'},
						{value: 'below', label: l10n.panel.under, icon: 'below'}
					],
					change: function(value) {
						me.model.set('captionType', value);
						
						//If caption below image, we should set captionOnHover to false
						if(value == "below") {
							me.model.set('showCaptionOnHover', '0');
						}
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.state_modules');
						if(value == "below") {
							stateSettings.find('.gallery-caption-on-hover').hide();
						} else {
							stateSettings.find('.gallery-caption-on-hover').show();
						}
					}
				}),

				new Upfront.Views.Editor.Field.Radios({
					className: state + '-caption-trigger field-caption_trigger gallery-caption-on-hover upfront-field-wrap upfront-field-wrap-multiple upfront-field-wrap-radios over_image_field',
					model: this.model,
					name: 'showCaptionOnHover',
					label: '',
					layout: 'horizontal-inline',
					values: [
						{
							label: l10n.panel.always,
							value: '0'
						},
						{
							label: l10n.panel.hover,
							value: '1'
						}
					],
					change: function(value) {
						me.model.set('showCaptionOnHover', value);
					},
				}),

				new Upfront.Views.Editor.Field.Radios({
					className: state + '-caption-height field-caption-height upfront-field-wrap upfront-field-wrap-multiple upfront-field-wrap-radios',
					model: this.model,
					name: 'caption-height',
					label: l10n.panel.caption_height,
					layout: 'horizontal-inline',
					values: [
						{
							label: l10n.panel.auto,
							value: 'auto'
						},
						{
							label: l10n.panel.fixed,
							value: 'fixed'
						}
					],
					change: function(value) {
						me.model.set('caption-height', value);
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.state_modules');
						//Toggle color fields
						if(value == "fixed") {
							stateSettings.find('.'+ state +'-caption-height-number').show();
						} else {
							stateSettings.find('.'+ state +'-caption-height-number').hide();
						}
					}
				}),

				new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: state + '-caption-height-number caption-height-number',
					name: 'thumbCaptionsHeight',
					min: 1,
					label: '',
					default_value: 20,
					values: [
						{ label: 'px', value: '1' }
					],
					change: function(value) {
						me.model.set('thumbCaptionsHeight', value);
					}
				})
			]);
		},
	});

	return CaptionLocation;
});

define('scripts/upfront/settings/modules/colors',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var ColorsSettingsModule = BaseModule.extend({
		className: 'settings_module colors_settings_item clearfix',
		group: true,

		get_title: function() {
			return this.options.title;
		},

		initialize: function(options) {
			this.options = options || {};
			this.fieldCounter = 0;
			var me = this,
				state = this.options.state,
				per_row = 'single',
				toggleClass = 'no-toggle',
				fields = [];

			if(this.options.toggle === true) {
				this.fieldCounter++;
			}

			if(this.options.single !== true) {
				per_row = 'two';
			}
			_.each(this.options.abccolors, function(color) {
				if(me.options.toggle === true) {
					toggleClass = 'element-toggled';
				}
				var colorField = new Upfront.Views.Editor.Field.Color({
					className: state + '-color-field upfront-field-wrap-color color-module module-color-field ' + toggleClass + ' ' + per_row,
					blank_alpha : 0,
					model: me.model,
					name: color.name,
					default_value: me.model.get(color.name),
					label_style: 'inline',
					label: color.label,
					spectrum: {
						preferredFormat: 'hex',
						change: function(value) {
							if (!value) return false;
							var c = value.get_is_theme_color() !== false ? value.theme_color : value.toRgbString();
							me.model.set(color.name, c);
						},
						move: function(value) {
							if (!value) return false;
							var c = value.get_is_theme_color() !== false ? value.theme_color : value.toRgbString();
							me.model.set(color.name, c);
						}
					}
				});
				fields.push(colorField);
			});

			this.fields = _(fields);

			//Add toggle colors checkbox
			if(this.options.toggle === true) {
				this.group = false;
				this.fields.unshift(
					new Upfront.Views.Editor.Field.Checkboxes({
						model: this.model,
						className: 'useColors checkbox-title',
						name: me.options.fields.use,
						label: '',
						multiple: false,
						values: [
							{
								label: l10n.color,
								value: 'yes',
								checked: this.model.get(me.options.fields.use)
							}
						],
						change: function(value) {
							me.model.set(me.options.fields.use, value);
							me.reset_fields(value);
						},
						show: function(value, $el) {
							var stateSettings = $el.closest('.state_modules');
							//Toggle color fields
							if(value == "yes") {
								stateSettings.find('.'+ state +'-color-field').show();
							} else {
								stateSettings.find('.'+ state +'-color-field').hide();
							}
						}
					})
				);
			}
		},

		reset_fields: function(value) {
			var me = this;
			if(typeof value !== "undefined" && value === "yes") {
				_.each(this.options.abccolors, function(color) {
					var settings = me.get_static_field_value(color, me.options.prepend);
					me.update_field(color, settings);
					me.save_static_value(color, settings);
					this.fieldCounter++;
				});

				this.$el.empty();
				this.render();
			}
		},

		save_static_value: function(color, settings) {
			//Save preset values from static state
			this.model.set(color.name, settings.color);
		},

		get_static_field_value: function(color, prepend) {
			var settings = {},
				prefix = '';

			if(typeof this.options.prefix !== "undefined") {
				prefix = this.options.prefix + '-';
			}

			settings.color = this.model.get(this.clear_prepend(prefix + color.name, prepend)) || '';

			return settings;
		},

		clear_prepend: function(field, prepend) {
			return field.replace(prepend, '');
		},

		update_field: function(color, settings) {
			//Update selected element
			this.fields._wrapped[this.fieldCounter].set_value(settings.color);
			this.fields._wrapped[this.fieldCounter].update_input_border_color(settings.color);
		},
		render: function() {
			var me = this;
			this.constructor.__super__.render.call(this);
			this.fields.each( function (field) {
				if(typeof field.spectrumOptions !== "undefined") {
					var color = me.model.get(field.name);
					field.set_value(color);
					field.update_input_border_color(Upfront.Util.colors.to_color_value(color));
				}
      });
		}
	});

	return ColorsSettingsModule;
});

define('scripts/upfront/settings/modules/element-style',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var ElementStyleModule = BaseModule.extend({
		className: "upfront-settings-item-anchor",

		initialize: function (opts) {
			this.options = opts;
			var me = this;
			var displayStyle = new Upfront.Views.Editor.Field.Text({
				model: this.model,
				property: 'theme_style',
				label: 'Element style:'
			});

			var openEditor = new Upfront.Views.Editor.Field.Button({
				label: 'Show style',
				compact: true,
				on_click: function(){
					me.openCssEditor();
				},
				display: 'inline'
			});

			var removeStyle = new Upfront.Views.Editor.Field.Button({
				label: 'Remove style',
				compact: true,
				on_click: function(){
					me.removeStyle();
				},
				display: 'inline'
			});

			this.listenTo(displayStyle, 'rendered', function() {
				displayStyle.$el.find('input').attr('readonly', 'readonly');
			});

			this.fields = _([
				displayStyle,
				openEditor,
				removeStyle
			]);

			this.on('panel:set', function(){
				me.fields.each(function(field){
					field.panel = me.panel;
					field.trigger('panel:set');
				});
			});
		},

		openCssEditor: function() {
			var elementStyleName = this.model.get_property_value_by_name('theme_style');

			Upfront.Application.cssEditor.init({
				model: this.model,
				stylename: elementStyleName,
				sidebar: false,
				toolbar: false,
				readOnly: true
			});
		},

		removeStyle: function() {
			this.$el.find('input[type=text]').val('');
			this.$el.hide();
			this.model.set_property('theme_style', '');
		}
	});

	return ElementStyleModule;
});

define('scripts/upfront/settings/modules/padding',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var PaddingSettingsModule = BaseModule.extend({
		className: 'padding-settings sidebar-settings clearfix',

		initialize: function(options) {
			this.options = options || {};
			var me = this,
				column_padding = Upfront.Settings.LayoutEditor.Grid.column_padding;

			this.listenTo(Upfront.Events, "upfront:paddings:updated", this.refresh);

			this.fields = _([
				new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'use-padding checkbox-title',
					use_breakpoint_property: true,
					property: 'use_padding',
					label: '',
					default_value: this.model.get_breakpoint_property_value('top_padding_use') || this.model.get_breakpoint_property_value('bottom_padding_use') || this.model.get_breakpoint_property_value('left_padding_use') || this.model.get_breakpoint_property_value('right_padding_use'),
					multiple: false,
					values: [
						{ label: 'Customize Padding', value: 'yes' }
					],
					change: function(value) {
						me.model.set_breakpoint_property('use_padding', value);
						
						if(typeof value === "undefined") {
							//Disable custom padding, update to theme default padding
							me.model.set_breakpoint_property('left_padding_num', column_padding, true);
							me.model.set_breakpoint_property('top_padding_num', column_padding, true);
							me.model.set_breakpoint_property('right_padding_num', column_padding, true);
							me.model.set_breakpoint_property('bottom_padding_num', column_padding, true);
							padding_left.get_field().val(column_padding);
							padding_top.get_field().val(column_padding);
							padding_right.get_field().val(column_padding);
							padding_bottom.get_field().val(column_padding);
							
							//Disable paddings
							me.disable_paddings();
						}
					},
					show: function(value, $el) {
						var stateSettings = $el.closest('.upfront-settings-item-content');
						var lock = me.model.get_breakpoint_property_value('lock_padding');
						//Toggle padding fields
						if(value == "yes") {
							if(lock == "yes") {
								stateSettings.find('.padding-slider').show();
								stateSettings.find('.padding-number').show();
							} else {
								stateSettings.find('.padding-top').show();
								stateSettings.find('.padding-bottom').show();
								stateSettings.find('.padding-left').show();
								stateSettings.find('.padding-right').show();
							}
						} else {
							stateSettings.find('.padding-top').hide();
							stateSettings.find('.padding-bottom').hide();
							stateSettings.find('.padding-left').hide();
							stateSettings.find('.padding-right').hide();
							stateSettings.find('.padding-slider').hide();
							stateSettings.find('.padding-number').hide();
						}
					}
				}),

				lock_padding = new Upfront.Views.Editor.Field.Checkboxes({
					model: this.model,
					className: 'padding-lock',
					use_breakpoint_property: true,
					property: 'lock_padding',
					label: "",
					default_value: 0,
					multiple: false,
					values: [
						{ label: '', value: 'yes' }
					],
					show: function(value) {
						me.model.set_breakpoint_property('lock_padding', value);

						var stateSettings = me.$el;
						var usePadding = me.model.get_breakpoint_property_value('use_padding');
						var padding = me.model.get_breakpoint_property_value('padding_number');

						//Toggle border radius fields
						if(value == "yes" && usePadding == "yes") {
							stateSettings.find('.padding-slider').show();
							stateSettings.find('.padding-number').show();
							stateSettings.find('.padding-top').hide();
							stateSettings.find('.padding-bottom').hide();
							stateSettings.find('.padding-left').hide();
							stateSettings.find('.padding-right').hide();
							
							me.model.set_breakpoint_property('left_padding_num', padding);
							me.model.set_breakpoint_property('top_padding_num', padding);
							me.model.set_breakpoint_property('right_padding_num', padding);
							me.model.set_breakpoint_property('bottom_padding_num', padding);
							padding_left.get_field().val(padding);
							padding_top.get_field().val(padding);
							padding_right.get_field().val(padding);
							padding_bottom.get_field().val(padding);

							if(typeof(Upfront.data.currentEntity.paddingControl) !== 'undefined') {
								Upfront.data.currentEntity.paddingControl.refresh();
							}
						} else {
							if(usePadding == "yes") {
								stateSettings.find('.padding-slider').hide();
								stateSettings.find('.padding-number').hide();
								stateSettings.find('.padding-top').show();
								stateSettings.find('.padding-bottom').show();
								stateSettings.find('.padding-left').show();
								stateSettings.find('.padding-right').show();
							}
						}
					},
					change: function(value) {
						me.model.set_property('lock_padding', value);
					}
				}),


				locked_slider = new Upfront.Views.Editor.Field.Slider({
					className: 'padding-slider upfront-field-wrap',
					model: this.model,
					use_breakpoint_property: true,
					property: 'padding_slider',
					default_value: this.model.get_breakpoint_property_value('padding_slider') || column_padding,
					suffix: l10n.px,
					step: 5,
					min: 0,
					max: 250,
					change: function (value) {
						//Update all padding values
						me.model.set_breakpoint_property('padding_slider', value);
						me.model.set_breakpoint_property('padding_number', value, true);
						me.model.set_breakpoint_property('left_padding_num', value, true);
						me.model.set_breakpoint_property('top_padding_num', value, true);
						me.model.set_breakpoint_property('right_padding_num', value, true);
						me.model.set_breakpoint_property('bottom_padding_num', value, true);
						
						locked_num.get_field().val(value);
						padding_left.get_field().val(value);
						padding_top.get_field().val(value);
						padding_right.get_field().val(value);
						padding_bottom.get_field().val(value);
						
						//Enable padding fields
						me.enable_lock_padding();
						
						me.re_render_entity();
					},
					show: function() {
						var value = me.model.get_property_value_by_name('padding_number');
						if(value > 250) {
							me.$el.find('.padding-slider').css('opacity', 0.6);
						} else {
							me.$el.find('.padding-slider').css('opacity', 1);
						}
					}
				}),

				locked_num = new Upfront.Views.Editor.Field.Number({
					className: 'padding-number',
					model: this.model,
					use_breakpoint_property: true,
					property: 'padding_number',
					default_value: this.model.get_breakpoint_property_value('padding_number') || column_padding,
					label: '',
					step: 5,
					min: 0,
					change: function(value) {
						// me.model.set('padding_number', value);
						me.model.set_breakpoint_property('padding_slider', value);
						me.model.set_breakpoint_property('padding_number', value);
						locked_slider.$el.find('#'+locked_slider.get_field_id()).slider('value', value);
						
						//Update all padding values
						me.model.set_breakpoint_property('left_padding_num', value, true);
						me.model.set_breakpoint_property('top_padding_num', value, true);
						me.model.set_breakpoint_property('right_padding_num', value, true);
						me.model.set_breakpoint_property('bottom_padding_num', value, true);
						padding_left.get_field().val(value);
						padding_top.get_field().val(value);
						padding_right.get_field().val(value);
						padding_bottom.get_field().val(value);
						
						//Enable padding fields
						me.enable_lock_padding();
									
						me.re_render_entity();
						
						//Lower opacity if value is bigger than the slider MAX_VALUE
						if(value > 250) {
							me.$el.find('.padding-slider').css('opacity', 0.6);
						} else {
							me.$el.find('.padding-slider').css('opacity', 1);
						}
					}
				}),

				padding_top = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: 'padding-top',
					use_breakpoint_property: true,
					property: 'top_padding_num',
					label: '',
					step: 5,
					min: 0,
					default_value: this.model.get_breakpoint_property_value('top_padding_num') || column_padding,
					change: function(value) {
						me.model.set_breakpoint_property('top_padding_num', value);
						me.enable_padding('top_padding_use');
					},
					focus: function() {
						me.$el.find('.padding-bottom label').css('border-top', '3px solid #7bebc6');
					},
					blur: function() {
						me.$el.find('.padding-bottom label').css('border', '1px dotted #7d99b3');
					}
				}),

				padding_left = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: 'padding-left',
					use_breakpoint_property: true,
					property: 'left_padding_num',
					label: '',
					step: 5,
					min: 0,
					default_value: this.model.get_breakpoint_property_value('left_padding_num') || column_padding,
					change: function(value) {
						me.model.set_breakpoint_property('left_padding_num', value);
						me.enable_padding('left_padding_use');
					},
					focus: function() {
						me.$el.find('.padding-bottom label').css('border-left', '3px solid #7bebc6');
					},
					blur: function() {
						me.$el.find('.padding-bottom label').css('border', '1px dotted #7d99b3');
					}
				}),

				padding_right = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: 'padding-right',
					use_breakpoint_property: true,
					property: 'right_padding_num',
					label: '',
					step: 5,
					min: 0,
					default_value: this.model.get_breakpoint_property_value('right_padding_num') || column_padding,
					change: function(value) {
						me.model.set_breakpoint_property('right_padding_num', value);
						me.enable_padding('right_padding_use');
					},
					focus: function() {
						me.$el.find('.padding-bottom label').css('border-right', '3px solid #7bebc6');
					},
					blur: function() {
						me.$el.find('.padding-bottom label').css('border', '1px dotted #7d99b3');
					}
				}),

				padding_bottom = new Upfront.Views.Editor.Field.Number({
					model: this.model,
					className: 'padding-bottom',
					use_breakpoint_property: true,
					property: 'bottom_padding_num',
					label: '',
					step: 5,
					min: 0,
					default_value: this.model.get_breakpoint_property_value('bottom_padding_num') || column_padding,
					change: function(value) {
						me.model.set_breakpoint_property('bottom_padding_num', value);
						me.enable_padding('bottom_padding_use');
					},
					focus: function() {
						me.$el.find('.padding-bottom label').css('border-bottom', '3px solid #7bebc6');
					},
					blur: function() {
						me.$el.find('.padding-bottom label').css('border', '1px dotted #7d99b3');
					}
				}),

			]);
		},
		
		refresh: function() {
			//Check use_padding when default settings are overwriten
			this.model.set_breakpoint_property('use_padding', 'yes');

			//Update fields when element padding is changed
			var lockPadding      = this.model.get_breakpoint_property_value('lock_padding'),
				lockPaddingField = this.fields._wrapped[1].get_field(),
				topPadding       = this.model.get_breakpoint_property_value('top_padding_num'),
				bottomPadding    = this.model.get_breakpoint_property_value('bottom_padding_num'),
				leftPadding      = this.model.get_breakpoint_property_value('left_padding_num'),
				rightPadding     = this.model.get_breakpoint_property_value('right_padding_num')
			;

			lockPadding ? lockPaddingField.attr('checked', 'checked') : lockPaddingField.removeAttr('checked');
			lockPaddingField.trigger('change');
			this.fields._wrapped[4].get_field().val(topPadding);
			this.fields._wrapped[5].get_field().val(leftPadding);
			this.fields._wrapped[6].get_field().val(rightPadding);
			this.fields._wrapped[7].get_field().val(bottomPadding);
		},
		
		enable_padding: function(field) {
			//Enable padding when settings is changed
			this.model.set_breakpoint_property(field, 'yes');
			
			Upfront.Events.trigger("upfront:paddings:updated");
		},
		
		disable_paddings: function() {
			//Enable padding when settings is changed
			this.model.set_breakpoint_property('top_padding_use', '');
			this.model.set_breakpoint_property('bottom_padding_use', '');
			this.model.set_breakpoint_property('left_padding_use', '');
			this.model.set_breakpoint_property('right_padding_use', '');
			Upfront.Events.trigger("upfront:paddings:updated");
		},
		
		enable_lock_padding: function() {
			var is_group = this.model instanceof Upfront.Models.ModuleGroup;
			
			this.enable_padding('top_padding_use');
			this.enable_padding('bottom_padding_use');
			if( ! is_group ) {
				this.enable_padding('left_padding_use');
				this.enable_padding('right_padding_use');
			}
		},

		re_render_entity: function() {							
			var currentEntity = Upfront.data.currentEntity;
			clearTimeout(this.refresh_timer);
			this.refresh_timer = setTimeout(function() {
				if(typeof(currentEntity.render) === 'function') currentEntity.render();
			}, 200);
		}
	});

	return PaddingSettingsModule;
});

define('scripts/upfront/settings/modules/anchor',[
	'scripts/upfront/settings/modules/base-module'
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var Field_Complex_Toggleable_Text_Field = Upfront.Views.Editor.Field.Field.extend({
		className: "upfront-field-complex_field-boolean_toggleable_text upfront-field-multiple",
		tpl: '<input type="checkbox" class = "upfront-field-checkbox" /> <label><span class="upfront-field-label-text">{{element_label}}</span></label> <div class="upfront-embedded_toggleable" style="display:none">{{field}}<div class="upfront-embedded_toggleable-notice">' + Upfront.Settings.l10n.global.views.anchor_nag + '</div></div>',
		initialize: function (opts) {
			Upfront.Views.Editor.Field.Field.prototype.initialize.call(this, opts);
			this.options.field = new Upfront.Views.Editor.Field.Text(this.options);
		},
		render: function () {
			var me = this;
			this.$el.empty();
			this.$el.append(this.get_field_html());

			this.$el.on("click", ':checkbox', function (e) {
				e.stopPropagation();
				me.field_toggle.apply(me);
			});
			if (this.model.get_property_value_by_name(this.options.field.get_name())) {
				this.$el.find(':checkbox').attr("checked", true);
				this.check_value();
				this.field_toggle();
			}

			this.$el.on("keyup", '[name="' + this.options.field.get_name() + '"]', function (e) {
				e.stopPropagation();
				me.check_value.apply(me);
			});

			setTimeout(function () {
				me.trigger("anchor:updated");
			}, 50);
		},
		field_toggle: function () {
			if (this.$el.find(":checkbox").is(":checked")) {
				this.$el.find(".upfront-embedded_toggleable").show();
			} else {
				this.$el.find(".upfront-embedded_toggleable").hide();
			}
			this.property.set({value: this.get_value()});
			this.trigger("anchor:updated");
		},
		check_value: function () {
			var $field = this.$el.find('[name="' + this.options.field.get_name() + '"]'),
				$root = this.$el.find(".upfront-embedded_toggleable"),
				val = $field.length && $field.val ? $field.val() : ''
			;
			$root.removeClass("error").removeClass("ok");
			if (val.length && !val.match(/^[a-zA-Z]+$/)) {
				$root.addClass("error");
			} else if (val.length) {
				$root.addClass("ok");
			}
			this.property.set({value: this.get_value()});
		},
		get_field_html: function () {
			this.options.field.render();
			var $input = this.options.field.$el;
			return _.template(this.tpl, _.extend({}, this.options, {field: $input.html()}));
		},
		get_value: function () {
			var data = {},
				$field = this.$el.find(":checkbox"),
				$subfield = this.$el.find('[name="' + this.options.field.get_name() + '"]'),
				value = $subfield.val().replace(/[^a-zA-Z]/g, '')
			;
			return $field.is(":checked") && value ? value : ''; // was false
		}
	});

	var AnchorSettingsModule = BaseModule.extend({
		className: "upfront-settings-item-anchor",

		initialize: function (opts) {
			this.options = opts;

			var anchorField = new Field_Complex_Toggleable_Text_Field({
				element_label: Upfront.Settings.l10n.global.views.make_element_anchor,
				className: 'upfront-field-complex_field-boolean_toggleable_text upfront-field-multiple checkbox-title',
				model: this.model,
				property: 'anchor'
			});

			anchorField.on("anchor:updated", function () {
				this.trigger("anchor:item:updated");
			}, this);

			this.fields = _([anchorField]);
		},

		save_fields: function () {
			this.fields.invoke("check_value");
			BaseModule.prototype.save_fields.call(this);
		}
	});

	return AnchorSettingsModule;
});

define('elements/upfront-newnavigation/js/menu-util',[], function () {
	var l10n = Upfront.Settings.l10n.newnavigation_element;

	var MenuUtil = function() {
		var self = this;
		// Array of wp menus with all data
		var wpMenus = Upfront.mainData.menus;
		// Array of {label: "Menu Name", value: "42"} items
		var selectMenuOptions = _.map(wpMenus, function (menu, index) {
			return  {label: menu.name, value: menu.term_id};
		});

		this.getMenuById = function(id) {
			var id_str = id + '',
				id_int = parseInt(id_str, 10),
				menu = _.findWhere(wpMenus, {term_id: id_int})
			;
			if (_.isUndefined(menu)) 
				menu = _.findWhere(wpMenus, {term_id: id_str})
			return menu;
		};

		this.getMenuSlugById = function(id) {
			return (this.getMenuById(id) || {}).slug;
		};

		this.getSelectMenuOptions = function() {
			return selectMenuOptions;
		};

		this.addMenu = function(menuData) {
			menuData.term_id = menuData.term_id + '';
			wpMenus.push(menuData);
			selectMenuOptions.unshift({label: menuData.slug, value: menuData.term_id});
		};

		this.deleteMenu = function(menuId) {
			selectMenuOptions = _.reject(selectMenuOptions, function(option) {
				return option.value === menuId;
			});
			wpMenus = _.reject(wpMenus, function(menu) {
				return menu['term_id'] === menuId;
			});
		};

		Upfront.Events.on('menu_element:menu_created', function(menuData) {
			self.addMenu(menuData);
		});

		Upfront.Events.on('menu_element:delete', function(menuId) {
			self.deleteMenu(menuId);
		});
	};

	var menuUtil = new MenuUtil();

	return menuUtil;
});


define('text!scripts/upfront/settings/modules/menu-structure/menu-item-editor.tpl',[],function () { return '<form>\n\t<label>Menu Item Label:</label>\n\t<input type="text" class="menu-item-title" value="{{ title }}">\n\t<label class="item-links-to-label">{{Upfront.Settings.l10n.global.content.links_to}}</label>\n\t<div class="menu-item-type-editor">\n\t\t{[if(type == \'external\') { ]}\n\t\t\t<input type="text" class="menu-item-external-input" value="{{url}}" placeholder="Type link URL" >\n\t\t{[ } ]}\n\t\t{[if(type == \'entry\') { ]}\n\t\t\t<span class="menu-item-entry-display">{{url}}</span>\n\t\t\t<span class="menu-item-entry-input" >Edit Link</span>\n\t\t{[ } ]}\n\t\t{[if(type == \'anchor\') { ]}\n\t\t<div class="anchor-selector">\n\t\t</div>\n\t\t{[ } ]}\n\t\t{[if(type == \'email\') { ]}\n\t\t<div class="upfront-field-wrap ulinkpanel-external-wrap">\n\t\t\t<input type="text" value="{{url}}" placeholder="johnsmith@example.com" class="menu-item-email-input">\n\t\t</div>\n\t\t{[ } ]}\n\t\t{[if(type == \'lightbox\') { ]}\n\t\t\t{[ if(lightboxes.length) { ]}\n\t\t\t\t<div class="lightbox-selector">\n\t\t\t\t</div>\n\t\t\t{[ } else { ]}\n\n\t\t\t{[ } ]}\n\n\t\t\t\t<div class="new-lightbox">\n\t\t\t\t\t\t<label>Create lightbox</label>\n\t\t\t\t\t\t<input type="text" name="menu-item-lightbox-input" class="menu-item-lightbox-input upfront-field upfront-field-text upfront-field-empty" value="" placeholder="{{Upfront.Settings.l10n.global.content.lightbox_name}}" />\n\t\t\t\t</div>\n\t\t{[ } ]}\n\t\t{[if(type !== \'lightbox\' && type !== \'anchor\') { ]}\n\t\t\t<label class="menu-item-target-label">Link Opens In:</label>\n\t\t{[ } ]}\n\t</div>\n</form>\n';});

(function ($) {
define('scripts/upfront/settings/modules/menu-structure/menu-item-editor',[
	'text!scripts/upfront/settings/modules/menu-structure/menu-item-editor.tpl'
], function(tpl) {
	var getLightBoxes = function() {
		var lightboxes = [],
			regions = Upfront.Application.layout.get('regions');

		_.each(regions.models, function(model) {
			if(model.attributes.sub == 'lightbox') {
				lightboxes.push({id: '#' + model.get('name'), label: model.get('title')});
			}
		});

		return lightboxes;
	};

	var getAnchors = function() {
		var regions = Upfront.Application.layout.get("regions"),
			anchors = [],
			find;

		find = function (modules) {
			modules.each(function(module) {
				var group_anchor = module.get_property_value_by_name("anchor");
				if (group_anchor && group_anchor.length) {
					anchors.push({id: '#' + group_anchor, label: group_anchor});
				}
				if (module.get("objects")) {
					module.get("objects").each(function (object) {
						var anchor = object.get_property_value_by_name("anchor");
						if (anchor && anchor.length) {
							anchors.push({id: '#' + anchor, label: anchor});
						}
					});
				} else if ( module.get("modules") ) {
					find(module.get("modules"));
				}
			});
		};

		regions.each(function(r) {
			find(r.get("modules"));
		});

		return anchors;
	};

	var getPostTypes = function(){
		var types = [];

		_.each(Upfront.data.ugallery.postTypes, function(type){
			if(type.name != 'attachment') {
				types.push({name: type.name, label: type.label});
			}
		});

		return types;
	};

	var MenuItemEditor = Backbone.View.extend({
		className: 'menu-item-editor',

		events: {
			'click .menu-item-entry-input': 'showPagePostSelector',
			'keydown .menu-item-lightbox-input': 'onLightboxNameInputChange',
			'keydown .menu-item-external-input': 'onUrlNameKeydown',
			'change .menu-item-external-input': 'onUrlNameChange',
			'keydown .menu-item-email-input': 'onEmailNameKeydown',
			'change .menu-item-email-input': 'onEmailNameChange',
			'keydown .menu-item-title': 'onItemNameKeydown',
			'change .menu-item-title': 'onItemNameChange'
		},

		initialize: function(options) {
			this.options = options || {};
			this.type = Upfront.Util.guessLinkType(this.model.get('menu-item-url'));
		},

		render: function() {
			this.$el.html(_.template(tpl, {
				title: this.model.get('menu-item-title'),
				type:  this.type,
				lightboxes: getLightBoxes(),
				url: this.model.get('menu-item-url')
			}));

			this.renderTypeSelect();

			if (this.type === 'anchor') {
				this.renderAnchorSelect();
			}

			if (this.type === 'lightbox' && getLightBoxes()) {
				this.renderLightBoxesSelect();
			}

			if (this.type !== 'anchor' && this.type !== 'anchor') {
				this.renderLinkTargetSelect();
			}

			return this;
		},

		renderTypeSelect: function() {
			var me = this;

			var typeSelectValues = [];
			_.each(['unlink', 'external', 'entry', 'anchor', 'lightbox', 'email'], function(t) {
				typeSelectValues.push(this.getLinkTypeValue(t));
			}, this);

			this.typeSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: typeSelectValues,
				default_value: this.type || 'external',
				change: function (value) {
					me.onTypeChange(value);
				}
			});

			this.typeSelect.render();
			this.$el.find('.item-links-to-label').after(this.typeSelect.el);
		},

		renderLinkTargetSelect: function() {
			var me = this;

			var targetSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: [
					{ value: '', label: 'Same Browser Tab' },
					{ value: '_blank', label: 'New Browser Tab' }
				],
				default_value: this.model.get('menu-item-target'),
				change: function (value) {
					me.onTargetChange(value);
				}
			});

			targetSelect.render();
			this.$el.find('.menu-item-target-label').after(targetSelect.el);
		},

		/**
		 * Determine proper link type select value/label based on link type. Used
		 * to populate link type select field.
		 */
		getLinkTypeValue: function(type) {
			var contentL10n = Upfront.Settings.l10n.global.content;
			switch(type) {
				case 'unlink':
					return { value: 'unlink', label: contentL10n.no_link };
				case 'external':
					return { value: 'external', label: contentL10n.url };
				case 'email':
					return { value: 'email', label: contentL10n.email_address };
				case 'entry':
					return { value: 'entry', label: contentL10n.post_or_page };
				case 'anchor':
					return { value: 'anchor', label: contentL10n.anchor };
				case 'image':
					return { value: 'image', label: contentL10n.larger_image };
				case 'lightbox':
					return { value: 'lightbox', label: contentL10n.lightbox };
			}
		},

		showPagePostSelector: function(event) {
			if (event) {
				event.preventDefault();
			}

			var me = this,
				selectorOptions = {
					postTypes: getPostTypes()
				};

			Upfront.Views.Editor.PostSelector.open(selectorOptions).done(
				function(post) {
					me.model.set({'menu-item-url' : post.get('permalink')});
					me.saveItem();
					me.render();
				}
			);
		},

		saveItem: function() {
			var me = this;
			Upfront.Util.post({
				action: 'upfront_update_single_menu_item',
				menuId: this.options.menuId,
				menuItemData: this.model.toJSON()
			}).done( function() {
				me.trigger('change');
			});
		},

		onTypeChange: function(value) {
			// First reset url property
			// We don't want funny results when changing from one type to another.
			this.model.set({'menu-item-url': ''});
			this.type = value;
			this.render();

			if (this.type === 'entry') {
				this.showPagePostSelector();
			}
			this.$el.parent().find('.menu-item-type').first().text(this.getLinkTypeLabel(value));
		},

		onTargetChange: function(value) {
			this.model.set({'menu-item-target': value});
			this.saveItem();
		},

		renderAnchorSelect: function() {
			var me = this;

			var anchorValues = [{label: 'Choose Anchor...', value: ''}];
			_.each(getAnchors(), function(anchor) {
				anchorValues.push({label: anchor.label, value: anchor.id});
			});

			var anchorValue = this.model.get('menu-item-url');
			anchorValue = anchorValue ? anchorValue : '';
			anchorValue = anchorValue.match(/^#/) ? anchorValue : '';

			this.anchorSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: anchorValues,
				default_value: anchorValue,
				change: function () {
					me.model.set({'menu-item-url': this.get_value()});
					me.saveItem();
				}
			});
			this.anchorSelect.render();
			this.$el.find('.anchor-selector').append(this.anchorSelect.el);
		},

		renderLightBoxesSelect: function() {
			var me = this;

			var lightboxValues = [{label: 'Choose Lightbox...', value: ''}];
			_.each(getLightBoxes() || [], function(lightbox) {
				lightboxValues.push({label: lightbox.label, value: lightbox.id});
			});

			var lightboxValue = this.model.get('menu-item-url');
			lightboxValue = lightboxValue ? lightboxValue : '';
			lightboxValue = lightboxValue.match(/^#/) ? lightboxValue : '';

			this.lightboxSelect = new Upfront.Views.Editor.Field.Select({
				label: '',
				values: lightboxValues,
				default_value: lightboxValue,
				change: function () {
					me.model.set({'url': this.get_value()});
					me.saveItem();
				}
			});
			this.lightboxSelect.render();
			this.$el.find('.lightbox-selector').append(this.lightboxSelect.el);
		},

		onLightboxNameInputChange: function(event) {
			if (event.which == 13) {
				event.preventDefault();
				this.createLightBox();
			}
		},

		createLightBox: function() {
			var name = $.trim(this.$('.menu-item-lightbox-input').val());
			if (!name) {
				Upfront.Views.Editor.notify(l10n.ltbox_empty_name_nag, 'error');
				return false;
			}

			this.model.set({
				'menu-item-url': '#' + Upfront.Application.LayoutEditor.createLightboxRegion(name)
			});
			this.saveItem();
			this.render();
		},

		onUrlNameKeydown: function(event) {
			if (event.which == 13) {
				event.preventDefault();
				this.onUrlNameChange();
			}
		},

		onUrlNameChange: function() {
			this.model.set({
				'menu-item-url': $.trim(this.$el.find('.menu-item-external-input').val())
			});
			this.saveItem();
		},
		
		onEmailNameKeydown: function(event) {
			if (event.which == 13) {
				event.preventDefault();
				this.onEmailNameChange();
			}
		},

		onEmailNameChange: function() {
			this.model.set({
				'menu-item-url': 'mailto:' + $.trim(this.$el.find('.menu-item-email-input').val())
			});
			this.saveItem();
		},

		onItemNameKeydown: function(event) {
			if (event.which == 13) {
				event.preventDefault();
				this.onItemNameChange();
			}
		},

		onItemNameChange: function() {
			var newTitle = $.trim(this.$el.find('.menu-item-title').val());
			this.model.set({
				'menu-item-title': newTitle
			});
			this.$el.parent().find('.menu-item-title').first().text(newTitle);
			this.saveItem();
		},

		getLinkTypeLabel: function(type) {
			var contentL10n = Upfront.Settings.l10n.global.content;
			switch(type) {
				case 'unlink':
					return contentL10n.no_link ;
				case 'external':
					return contentL10n.url;
				case 'email':
					return contentL10n.email_address;
				case 'entry':
					return contentL10n.post_or_page;
				case 'anchor':
					return contentL10n.anchor;
				case 'image':
					return contentL10n.larger_image;
				case 'lightbox':
					return contentL10n.lightbox;
			}
		}
	});

	return MenuItemEditor;
});
})(jQuery);


define('text!scripts/upfront/settings/modules/menu-structure/menu-item.tpl',[],function () { return '<div class="menu-item-header">\n\t<span class="menu-item-title" title="{{ title }}">{{ title }}</span>\n\t<span class="menu-item-type" title="{{ type }}">{{ type }}</span>\n\t<i class="menu-item-delete">x</i>\n</div>\n';});

define('scripts/upfront/settings/modules/menu-structure/menu-item',[
	'scripts/upfront/settings/modules/menu-structure/menu-item-editor',
	'text!scripts/upfront/settings/modules/menu-structure/menu-item.tpl'
], function(MenuItemEditor, tpl) {
	var MenuItem = Backbone.View.extend({
		className: 'menu-structure-module-item',

		events: {
			'click .menu-item-header': 'toggleEditor',
			'click .menu-item-delete': 'deleteItem'
		},

		initialize: function(options) {
			this.options = options || {};
			this.subViews = [];
			this.depth = this.options.depth || 0;
			this.parent_view = options.parent_view;
			var sub = this.model.get('sub');

			if (sub) {
				_.each(sub, function(itemOptions) {
					this.subViews.unshift(
						new MenuItem({
							model: new Backbone.Model(itemOptions),
							depth: this.depth + 1,
							menuId: this.options.menuId
						})
					);
				}, this);
			}
		},

		render: function() {
			var me = this;
			this.$el.html(_.template(tpl, {
				title: this.model.get('menu-item-title'),
				type:  this.getLinkTypeLabel(Upfront.Util.guessLinkType(this.model.get('menu-item-url')))
			}));
			this.$el.data('menu-item-object-id', this.model.get('menu-item-object-id'));
			this.$el.data('menu-item-depth', this.depth);
			this.$el.addClass('menu-structure-item-depth-' + this.depth);

			var editor = new MenuItemEditor({
				model: this.model,
				menuId: this.options.menuId
			});
			this.$el.append(editor.render().el);
			this.listenTo(editor, 'change', function() {
				me.trigger('change', me.model.toJSON());
			});

			// Gotta let this.$el render to use $.after()
			setTimeout(function() {
				_.each(me.subViews, function(view) {
					me.$el.after(view.render().el);
				});
			}, 100);

			this.delegateEvents();

			return this;
		},

		toggleEditor: function() {
			this.$el.toggleClass('menu-item-expanded');
			this.$el.find('.menu-item-editor').toggle();
		},

		/**
		 * Determine proper link type select value/label based on link type. Used
		 * to populate link type select field.
		 */
		getLinkTypeLabel: function(type) {
			var contentL10n = Upfront.Settings.l10n.global.content;
			switch(type) {
				case 'unlink':
					return contentL10n.no_link ;
				case 'external':
					return contentL10n.url;
				case 'email':
					return contentL10n.email_address;
				case 'entry':
					return contentL10n.post_or_page;
				case 'anchor':
					return contentL10n.anchor;
				case 'image':
					return contentL10n.larger_image;
				case 'lightbox':
					return contentL10n.lightbox;
			}
		},
		
		deleteItem: function(e) {
			e.preventDefault();
			e.stopPropagation();

			if(typeof this.model.get('menu-item-db-id') != 'undefined') {
				Upfront.Util.post({"action": "upfront_new_delete_menu_item", "menu_item_id": this.model.get('menu-item-db-id')})
					.success(function (ret) {
						//Make sure deleted element is removed from the list
						Upfront.Events.trigger("menu_element:edit");
					})
					.error(function (ret) {
						Upfront.Util.log("Error Deleting Menu Item");
					})
				;
			}
		},
	});

	return MenuItem;
});


define('text!scripts/upfront/settings/modules/menu-structure/menu-structure.tpl',[],function () { return '<div class="menu-structure-header">\n\t<span class="upfront-settings-item-title">MENU STRUCTURE</span>\n\t<span class="add-menu-item">Add item</span>\n</div>\n<div class="menu-structure-body"></div>\n';});

(function ($) {
define('scripts/upfront/settings/modules/menu-structure',[
	'elements/upfront-newnavigation/js/menu-util',
	'scripts/upfront/settings/modules/menu-structure/menu-item',
	'text!scripts/upfront/settings/modules/menu-structure/menu-structure.tpl'
], function(MenuUtil, MenuStructureItem, tpl) {
	var l10n = Upfront.Settings.l10n.preset_manager;
	var scrollDown = false;
	var MenuStructureModule = Backbone.View.extend({
		className: 'settings_module menu_structure_module clearfix',
		handlesSaving: true,

		events: {
			'mouseenter .menu-item-header': 'enableSorting',
			'mouseleave .menu-item-header': 'disableSortingOnHeaderLeave',
			'click .add-menu-item': 'addItem',
		},

		initialize: function(options) {
			var me = this;
			this.options = options || {};

			this.listenTo(this.model.get('properties'), 'change', function() {
				me.reloadItems();
			});

			Upfront.Events.on('menu_element:edit', function(menuData) {
				me.reloadItems();
			});

			this.setup();
		},
		
		reloadItems: function() {
			this.setup();
			this.render();
		},

		setup: function() {
			this.menuId = this.model.get_property_value_by_name('menu_id');
			this.menuItems = [];
			this.menuItemViews = [];
			this.menu = MenuUtil.getMenuById(this.menuId);

			if (this.menuId === false) return;

			this._load_items();
		},

		/**
		 * Check if we have a promise queued in
		 *
		 * @param {Object} args_obj The raw key used for promise - will be stringified before checking
		 *
		 * @return {Boolean}
		 */
		_has_promise: function (args_obj) {
			var key = JSON.stringify(args_obj);
			return !!(this._promises || {})[key];
		},

		/**
		 * Queue up a promise
		 *
		 * @param {Object} args_obj The raw key used for promise - will be stringified before checking
		 * @param {$.Deferred} promise Promise to queue up
		 */
		_add_promise: function (args_obj, promise) {
			var key = JSON.stringify(args_obj);
			this._promises = this._promises || {};
			this._promises[key] = promise;
			return true;
		},

		/**
		 * Drops a promise from the queue
		 *
		 * @param {Object} args_obj The raw key used for promise - will be stringified before checking
		 */
		_drop_promise: function (args_obj) {
			var key = JSON.stringify(args_obj);
			this._promises = this._promises || {};
			this._promises[key] = false;
			return true;
		},

		/**
		 * Loads the menu items.
		 *
		 * Also hooks up to promise response and sets up `this.menuItemViews` collection.
		 */
		_load_items: function () {
			var me = this,
				args = {
					action: "upfront_new_load_menu_array",
					"data": this.menuId + ''
				},
				promise
			;
			if (this._has_promise(args)) return true; // We're already waiting for this

			promise = Upfront.Util.post(_.extend({}, args));
			this._add_promise(args, promise); // So, stack up this promise

			promise
				.success(function (response) {
					me.menuItems = response.data || [];
					_.each(me.menuItems, function(itemOptions, index) {
						var menuStructureItem = new MenuStructureItem({
							model: new Backbone.Model(itemOptions),
							menuId: me.menuId
						});
						me.menuItemViews.push(menuStructureItem);
						me.listenTo(menuStructureItem, 'change', function(data) {
							me.menuItems[index] = data;
							me.model.trigger('change');
						});
					});
					me.model.set_property('menu_items', response.data, true);
					me.model.trigger('change'); // do not trigger change on this.model.get('properties') it will cause endless recursion
																			// this is needed for menu element to re-render on item position change
					me.render();
					me._drop_promise(args); // And pop it off the stack once we're done
				})
				.error(function (response) {
					Upfront.Util.log("Error loading menu items");
				})
			;
			return true;
		},

		render: function() {
			var me = this,
				$body;

			this.$el.html(tpl);

			if (this.menuId === false) return;

			$body = this.$el.find('.menu-structure-body');

			_.each(this.menuItemViews, function(view) {
				$body.append(view.render().el);
			});
			
			/**
			 * This will scroll the panel down to the position of the newly added menu item i.e., 
			 * at the bottom of the list
			 */
			 
			if(scrollDown) {

				// Scroll down to where the new menu item has been added.
				var menu_items_panel = me.$el.closest('.uf-settings-panel--expanded');
				var scroll_wrap = menu_items_panel.closest('#sidebar-scroll-wrapper');
				scroll_wrap.scrollTop(menu_items_panel.height()-175);
				scrollDown = false;

			}
		},

		enableSorting: function(event) {
			if (this.sortingInProggres === true) return;
			// highlight all sortables
			var $items = this.$el.find('.menu-structure-module-item'),
				hoveredItem = $(event.target).parent(),
				addedChildren = false,
				me = this,
				hoveredItemDepth;

			// First add sortable class to all items
			$items.addClass('menu-structure-sortable-item');

			// Leave only items that are not children of current item sortable
			// Than make a group that is wrapped with sortable from hovered item
			// and its children.
			$items.each(function() {
				if (addedChildren) {
					return;
				}
				if (!_.isUndefined(hoveredItemDepth) && $(this).data('menuItemDepth') <= hoveredItemDepth) {
					addedChildren = true;
					return;
				}

				if (!_.isUndefined(hoveredItemDepth) && $(this).data('menuItemDepth') > hoveredItemDepth) {
					$(this).addClass('hovered-item-group-member');
					$(this).removeClass('menu-structure-sortable-item');
					return;
				}

				if (_.isUndefined(hoveredItemDepth) && $(this).is(hoveredItem)) {
					hoveredItemDepth = $(this).data('menuItemDepth');
					$(this).addClass('hovered-item-group-member');
					$(this).removeClass('menu-structure-sortable-item');
				}
			});
			this.$el.find('.hovered-item-group-member').wrapAll('<div class="menu-structure-sortable-item"></div>');

			this.$el.sortable({
				axis: "y",
				items: '.menu-structure-sortable-item',
				start: function(event, ui) {
					me.sortingInProggres = true;
					me.watchItemDepth(ui.item);
				},
				stop: function(event, ui) {
					me.stopWatchingItemDepth(ui.item);
					me.updateItemsPosition(ui.item);
					me.sortingInProggres = false;
				},
			});
		},

		// Disable on mouse header leave only if sorting is not in progress,
		// otherwise sortable with break.
		disableSortingOnHeaderLeave: function() {
			if (this.sortingInProggres === true) return;
			this.disableSorting();
		},

		disableSorting: function() {
			var $items = this.$el.find('.menu-structure-module-item'),
				$hoveredItems = this.$el.find('.hovered-item-group-member');

			$hoveredItems.unwrap();
			$hoveredItems.removeClass('hovered-item-group-member');
			$items.removeClass('menu-structure-sortable-item');
			this.$el.sortable('destroy');
		},

		watchItemDepth: function(movedItem) {
			var me = this,
				mouseX;

			this.$el.on('mousemove', function(event) {
				if (_.isUndefined(mouseX)) {
					mouseX = event.pageX;
					return;
				}

				// Increase tolerance for movement
				if (Math.abs(mouseX - event.pageX) < 15) return;

				me.updateSortableDepth(mouseX, event.pageX, movedItem);

				mouseX = event.pageX;
			});
		},

		updateSortableDepth: function(oldX, newX, item) {
			var itemDepth = item.hasClass('menu-structure-module-item') ?
					item.data('menuItemDepth') : item.children().first().data('menu-item-depth'),
				prevDepth = item.prev().data('menu-item-depth'),
				nextDepth = item.nextAll().not('.ui-sortable-placeholder').first().data('menu-item-depth');

			// Decrease item depth
			if (oldX > newX) {
				this.decreaseGroupDepth(itemDepth, prevDepth, nextDepth, item);
			}
			// Increase item depth
			if (oldX < newX) {
				this.increaseGroupDepth(itemDepth, prevDepth, nextDepth, item);
			}
		},

		decreaseGroupDepth: function(itemDepth, prevDepth, nextDepth, item) {
			var me = this;

			if (
				(prevDepth < itemDepth && nextDepth < itemDepth) ||
				(prevDepth === itemDepth && nextDepth < itemDepth) ||
				_.isUndefined(nextDepth) || // This is the last item in menu, allow any decrease
				nextDepth < itemDepth // This is the last submenu item, allow any decrease
			){
				if (item.hasClass('menu-structure-module-item')) {
					if (item.data('menuItemDepth') === 0) return; // Do not allow decrease below 0
					this.decreaseItemDepth(item);
					return;
				}

				if (item.children().first().data('menuItemDepth') === 0) return; // Do not allow decrease below 0
				item.children().each(function() {
					me.decreaseItemDepth($(this));
				});
			}
		},

		increaseGroupDepth: function(itemDepth, prevDepth, nextDepth, item) {
			var me = this;

			if (
				(prevDepth >= itemDepth) ||
				(prevDepth === itemDepth && nextDepth < itemDepth)
			){
				if (item.hasClass('menu-structure-module-item')) {
					this.increaseItemDepth(item);
					return;
				}
				item.children().each(function() {
					me.increaseItemDepth($(this));
				});
			}
		},

		decreaseItemDepth: function(item) {
			item.removeClass('menu-structure-item-depth-' + item.data('menuItemDepth'));
			item.data('menu-item-depth', item.data('menuItemDepth') - 1);
			item.addClass('menu-structure-item-depth-' + item.data('menuItemDepth'));
		},

		increaseItemDepth: function(item) {
			item.removeClass('menu-structure-item-depth-' + item.data('menuItemDepth'));
			item.data('menuItemDepth', item.data('menuItemDepth') + 1);
			item.addClass('menu-structure-item-depth-' + item.data('menuItemDepth'));
		},

		stopWatchingItemDepth: function() {
			this.$el.off('mousemove');
		},

		flattenItem: function(item) {
			var me = this,
				allItems = [item];

			if (item.sub) {
				_.each(item.sub, function(subItem) {
					allItems = _.union(allItems, me.flattenItem(subItem));
				});
			}

			return allItems;
		},

		updateItemsPosition: function() {
			var me = this;
			// Flatten items
			var oldItems = [];
			_.each(this.menuItems, function(item) {
				oldItems = _.union(oldItems, me.flattenItem(item));
			});

			// Get all items
			var $items = this.$el.find('.menu-structure-module-item');
			var changedItems = [];
			// Start from top and keep track of parent item.
			// It needs to be an array because multiple levels of depth
			var parentItem = [0];
			var prevItemId = 0;
			var position = 1;
			var currentDepth = 0;
			var depthChange;
			var i;
			$items.each(function() {
				var itemData = _.findWhere(
					oldItems, {'menu-item-object-id': $(this).data('menuItemObjectId')}
				);
				var itemDepth = $(this).data('menuItemDepth');

				// If depth increased change parent to previous item id
				if (itemDepth > currentDepth) {
					parentItem.push(prevItemId);
					currentDepth = currentDepth + 1;
				} else if (itemDepth === currentDepth) {
					// do nothing
				} else if (itemDepth < currentDepth) {
					// Drop levels if depth decreased
					depthChange = currentDepth - itemDepth;
					for (i = 0; i < depthChange; i++) {
						parentItem = _.initial(parentItem);
					}
					currentDepth = itemDepth;
				}

				changedItems.push(_.extend(itemData, {
					'menu-item-parent-id': _.last(parentItem) || 0,
					'menu-item-position': position
				}));

				// Must be done in the end
				position = position + 1;
				prevItemId = itemData['menu-item-object-id'];
			});

			Upfront.Util.post({
				action: 'upfront_update_menu_items',
				data: {
					items: changedItems,
					menuId: this.menuId
				}
				}
			).done(
				function() {
					me.setup();
				}
			).fail(
				function(response) {
					Upfront.Util.log('Failed saving menu items.');
				}
			);
		},

		addItem: function() {
			var me = this,
				newItem = {
					'menu-item-object': 'custom',
					'menu-item-parent-id': 0,
					//'menu-item-position': -1,
					'menu-item-target': '',
					'menu-item-title': 'New Item',
					'menu-item-type': 'custom',
					'menu-item-url': ''
				};

			Upfront.Util.post({
				action: 'upfront_update_single_menu_item',
				menuId: this.menuId,
				menuItemData: newItem
			}).done(

					function(response) {
						
						newItem['menu-item-db-id'] = response.data.itemId;
						newItem['menu-item-object-id'] = response.data.itemId + '';

						// Gotta do this to save item now with id to make it published
						Upfront.Util.post({
							action: 'upfront_update_single_menu_item',
							menuId: me.menuId,
							menuItemData: newItem
						}).done(function() {
							me.model.get_property_value_by_name('menu_items').unshift(newItem);
							me.model.get('properties').trigger('change');

							/**
							 * This will flag the settings panel to scroll down 
							 * to the position of the newly added menu item i.e., 
							 * at the bottom of the list
							 */
							scrollDown = true;
						});

					}
				).fail(
					function(response) {
						Upfront.Util.log('Failed saving menu items.');
					}
				);

		},

		save_fields: function() {
		}
	});

	return MenuStructureModule;
});
})(jQuery);

define('elements/upfront-newnavigation/js/settings/menu-style',[],function() {
	var l10n = Upfront.Settings.l10n.newnavigation_element;

	var MenuStyle = Upfront.Views.Editor.Settings.Item.extend({
		className: 'settings_module menustyle_settings_item clearfix',
		group: true,
		get_title: function() {
			return this.options.title;
		},
		initialize: function(options) {

			this.options = options || {};

			var me = this,
				state = this.options.state;

			this.fields = _([
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-select select-module menu_style',
					name: 'menu_style',
					default_value: this.model.get('menu_style'),
					label: l10n.mnu.style,
					values: [
						{ label: l10n.mnu.horiz, value: 'horizontal' },
						{ label: l10n.mnu.vert, value: 'vertical' },
						{ label: l10n.mnu.triggered, value: 'burger' }
					],
					change: function(value) {
						me.model.set('menu_style', value);
						if (value !== 'burger') {
							me.fields._wrapped[3].$el.hide();
							me.fields._wrapped[3].set_value('over');
						} else if (me.model.get('burger_alignment') === 'top') {
							me.fields._wrapped[3].$el.show();
						}
					},
					show: function(value, $el) {
						if(value === "burger") {
							$el.parent().find('.burger_alignment').show();
						} else {
							$el.parent().find('.burger_alignment').hide();
						}
					}
				}),
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-select select-module menu_alignment',
					name: 'menu_alignment',
					default_value: this.model.get('menu_alignment'),
					label: l10n.mnu.alignment,
					values: [
						{ label: l10n.mnu.left, value: 'left' },
						{ label: l10n.mnu.center, value: 'center' },
						{ label: l10n.mnu.right, value: 'right' },
					],
					change: function(value) {
						me.model.set('menu_alignment', value);
					}
				}),
				new Upfront.Views.Editor.Field.Select({
					model: this.model,
					className: state + '-select select-module burger_alignment',
					name: 'burger_alignment',
					default_value: this.model.get('burger_alignment'),
					label: l10n.mnu.show_on_click,
					values: [
						{ label: l10n.mnu.left, value: 'left', icon: 'burger-left'},
						{ label: l10n.mnu.right, value: 'right', icon: 'burger-right'},
						{ label: l10n.mnu.top, value: 'top', icon: 'burger-top'},
						{ label: l10n.mnu.whole, value: 'whole', icon: 'burger-whole'}
					],
					change: function(value) {
						me.model.set('burger_alignment', value);
						if(value === 'left' || value === 'right' || value === 'whole') {
							me.fields._wrapped[3].$el.hide();
							me.fields._wrapped[3].set_value('over');
						}
						else {
							me.fields._wrapped[3].$el.show();
						}
					}
				}),
				new Upfront.Views.Editor.Field.Radios({
					model: this.model,
					default_value: this.model.get('burger_over'),
					name: 'burger_over',
					label: "",
					layout: "vertical",
					values: [
						{ label: l10n.mnu.over, value: 'over' },
						{ label: l10n.mnu.push, value: 'pushes' }
					],
					change: function(value) {
						me.model.set('burger_over', value);
					}
				})
			]);
			this.listenTo(this, 'rendered', function() {
				var alignment = me.model.get('burger_alignment');
				if(alignment === 'left' || alignment === 'right' || alignment === 'whole') {
					me.fields._wrapped[3].$el.hide();
					me.fields._wrapped[3].set_value('over');
				}
				else {
					me.fields._wrapped[3].$el.show();
				}
				var style = me.model.get('menu_style');
				if (style !== 'burger') {
					me.fields._wrapped[3].$el.hide();
					me.fields._wrapped[3].set_value('over');
				}
			});
		},
	});

	return MenuStyle;
});

define('scripts/upfront/settings/module-factory',[
	'scripts/upfront/settings/modules/typography',
	'scripts/upfront/settings/modules/border',
	'scripts/upfront/settings/modules/hov-animation',
	'scripts/upfront/settings/modules/radius',
	'scripts/upfront/settings/modules/selectbox',
	'scripts/upfront/settings/modules/checkbox',
	'scripts/upfront/settings/modules/caption-location',
	'scripts/upfront/settings/modules/gallery-caption-location',
	'scripts/upfront/settings/modules/colors',
	'scripts/upfront/settings/modules/element-style',
	'scripts/upfront/settings/modules/padding',
	'scripts/upfront/settings/modules/anchor',
	'scripts/upfront/settings/modules/menu-structure',
	'elements/upfront-newnavigation/js/settings/menu-style',
], function(TypographySettingsModule, BorderSettingsModule, HovAnimationSettingsModule, RadiusSettingsModule,
			SelectboxSettingsModule, CheckboxSettingsModule, CaptionLocationSettingsModule, GalleryCaptionLocationSettingsModule,
			ColorsSettingsModule, ElementStyleModule, PaddingSettingsModule, AnchorSettingsModule, MenuStructureModule, MenuStyleModule) {
	var ModuleFactory = function() {
		var classes = {
			'Typography': TypographySettingsModule,
			'Border': BorderSettingsModule,
			'HovAnimation': HovAnimationSettingsModule,
			'Radius': RadiusSettingsModule,
			'Selectbox': SelectboxSettingsModule,
			'Checkbox': CheckboxSettingsModule,
			'CaptionLocation': CaptionLocationSettingsModule,
			'GalleryCaptionLocation': GalleryCaptionLocationSettingsModule,
			'Colors': ColorsSettingsModule,
			'ElementStyle': ElementStyleModule,
			'Padding': PaddingSettingsModule,
			'Anchor': AnchorSettingsModule,
			'MenuStructure': MenuStructureModule,
			'MenuStyle': MenuStyleModule
		};

		this.createModule = function(module, options, model) {
			var initializationOptions = _.extend({}, options, { model: model });
			if (typeof module === 'string') {
				return new classes[module](initializationOptions);
			}

			return new module(initializationOptions);
		};
	};

	moduleFactory = new ModuleFactory();

	return moduleFactory;
});

(function ($) {
define('scripts/upfront/element-settings/root-settings-panel',[
	'scripts/upfront/element-settings/settings-container',
	'scripts/upfront/element-settings/root-panel-mixin',
	'scripts/upfront/settings/field-factory',
	'scripts/upfront/settings/module-factory'
], function (SettingsContainer, RootPanelMixin, FieldFactory, ModuleFactory) {
	var l10n = Upfront.Settings && Upfront.Settings.l10n
		? Upfront.Settings.l10n.global.views
		: Upfront.mainData.l10n.global.views
	;

	var RootSettingsPanel = SettingsContainer.extend(_.extend({}, RootPanelMixin, {
		initialize: function (options) {
			var me = this,
				settings = [];

			this.options = options;
			this.settings = _(this.settings);

			this.settings.each(function(settingOptions){
				var setting;
				if (settingOptions.type === 'SettingsItem') {
					setting = new Upfront.Views.Editor.Settings.Item({
						title: settingOptions.title,
						model: me.model,
						className: settingOptions.className,
						fields: []
					});
				} else {
					setting = ModuleFactory.createModule(
						settingOptions.type, settingOptions || {}, me.model
					);
				}

				if(settingOptions.identifier) {
					// Use for selecting settings instead crawling DOM
					setting.identifier = settingOptions.identifier;
				}

				_.each(settingOptions.fields, function(fieldOptions) {
					var field;

					// Proxy the 'change' callback, and revert when finished
					if ("change" in fieldOptions) {
						if (!fieldOptions.preservedChangeCallback) {
							// Store the callback
							fieldOptions.preservedChangeCallback = fieldOptions.change;
						}

						// Proxy the stored callback to provide context
						fieldOptions.change = function (value) {
							fieldOptions.preservedChangeCallback(value, me);
						};

						// Reset change callback to avoid zombies
						Upfront.Events.once('entity:settings:deactivate', function() {
							fieldOptions.change = fieldOptions.preservedChangeCallback;
						});
					}
					if ("show" in fieldOptions) {
						if (!fieldOptions.preservedShowCallback) {
							// Store the callback
							fieldOptions.preservedShowCallback = fieldOptions.show;
						}

						// Proxy the stored callback to provide context
						fieldOptions.show = function (value) {
							fieldOptions.preservedShowCallback(value, me);
						};

						// Reset show callback to avoid zombies
						Upfront.Events.once('entity:settings:deactivate', function() {
							fieldOptions.show = fieldOptions.preservedShowCallback;
						});
					}

					field = FieldFactory.createField(fieldOptions.type, _.extend({ model: me.model }, _.omit(fieldOptions, ['type'])));

					if (settingOptions.triggerChange) {
						me.listenTo(field, 'change changed', function() {
							me.save_settings();
							me.model.trigger('change');
						});
					}

					if(fieldOptions.identifier) {
						// Use for selecting field instead crawling DOM
						field.identifier = fieldOptions.identifier;
					}

					setting.fields.push(field);
				});
				setting.panel = me;
				setting.trigger('panel:set');

				settings.push(setting);
			});

			this.settings = _(settings);
		},

		getBody: function () {
			var $body = $('<div />'),
				me = this;

			this.settings.each(function (setting) {
				if ( ! setting.panel ) setting.panel = me;
				setting.render();
				$body.append(setting.el);
			});

			return $body;
		}
	}));

	return RootSettingsPanel;
});
})(jQuery);

define('scripts/upfront/settings/fields/select-preset',[],function() {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var SelectPresetField = Upfront.Views.Editor.Field.Chosen_Select.extend({
		className: 'preset select-preset-field',
		render: function() {
			Upfront.Views.Editor.Field.Chosen_Select.prototype.render.call(this);
			var me = this;
			var selectWidth = '';
			var preset = this.$el.find('.upfront-chosen-select').val();

			if(preset == 'default' && Upfront.Application.get_current() === Upfront.Application.MODE.THEME) {
				selectWidth = '230px';
			} else {
				selectWidth = '175px';
			}

			this.$el.find('.upfront-chosen-select').chosen({
				search_contains: true,
				width: selectWidth
			});

			var html = ['<a href="#" title="'+ l10n.add_preset_label +'" class="upfront-preset-add">'+ l10n.add_label +'</a>'];
			this.$el.find('.chosen-search').append(html.join(''));

			this.$el.on('click', '.upfront-preset-add', function(event) {
				event.preventDefault();

				var preset_name = me.$el.find('.chosen-search input').val();

				if (preset_name.trim() === '') {
					alert(l10n.not_empty_label);
					return;
				}
				if (preset_name.match(/[^A-Za-z0-9 ]/)) {
					alert(l10n.special_character_label);
					return;
				}

				me.trigger('upfront:presets:new', preset_name.trim());
			});

			return this;
		},

		get_value_html: function (value, index) {
			var selected = '';
			var currentPreset = this.get_saved_value() ? this.get_saved_value() : 'default';
			if (value.value === this.clear_preset_name(currentPreset)) selected = ' selected="selected"';
			return ['<option value="', value.value, '"', selected, '>', value.label, '</option>'].join('');
		},

		clear_preset_name: function(preset) {
			preset = preset.replace(' ', '-');
			preset = preset.replace(/[^-a-zA-Z0-9]/, '');
			return preset;
		},
	});

	return SelectPresetField;
});

define('scripts/upfront/settings/modules/select-preset',[
	'scripts/upfront/settings/modules/base-module',
	'scripts/upfront/settings/fields/select-preset'
], function(BaseModule, SelectPresetField) {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var SelectPresetModule = BaseModule.extend({
		className: 'select-presets',
		initialize: function (options) {
			this.options = options || {};
			this.group = false;
			var me = this;

			this.selectPresetField = new SelectPresetField({
					model: this.model,
					label: l10n.select_preset_label,
					property: 'preset',
					values: this.get_presets(),
					change: function(value) {
						me.model.set_property('preset', this.get_value());
					}
				});

			this.fields = _([
				this.selectPresetField
			]);

			this.listenTo(this.selectPresetField, 'upfront:presets:new', this.createPreset);
			this.listenTo(this.selectPresetField, 'changed', this.changePreset);
		},

		changePreset: function() {
			this.trigger('upfront:presets:change', this.selectPresetField.get_value());
		},

		createPreset: function(preset) {
			this.trigger('upfront:presets:new', preset);
		},

		get_title: function() {
			return l10n.select_preset;
		},

		get_presets: function () {
			return _.map(this.options.presets.models, function(model) {
				if('undefined' === typeof model.get('name')) {
				  return { label: model.get('id'), value: model.get('id') };
				} else {
				  return { label: model.get('name'), value: model.get('id') };
				}
			});
		}
	});

	return SelectPresetModule;
});

define('scripts/upfront/settings/fields/show-state',[],function() {
	var ShowStateSettingsButton = Upfront.Views.Editor.Field.Button.extend({
		className: 'state_settings_button',

		initialize: function(options) {
			this.options = options || {};
			this.label = this.options.state;
			this.options.compact = true;
			this.$el.addClass('state_settings_button_' + this.options.state.toLowerCase());
		},

		on_click: function() {
			this.trigger('upfront:presets:state_show', this.options.state.toLowerCase());
		}
	});

	return ShowStateSettingsButton;
});

define('scripts/upfront/settings/modules-container',[
	'scripts/upfront/settings/module-factory'
],function(ModuleFactory) {
	var ModulesContainer = Backbone.View.extend({
		initialize: function(options) {
			this.options = options || {};

			var modules = [],
				me = this,
				modulesConfig = this.options.modules;

			// Try to get from child class if there is none in options
			if (_.isUndefined(modulesConfig)) modulesConfig = this.modules;

			if (typeof this.getAdditionalModules === 'function') {
				modulesConfig = this.getAdditionalModules(_.clone(modulesConfig));
			}

			// Create modules
			_.each(modulesConfig, function (moduleConfig) {
				moduleConfig.options = moduleConfig.options || {};

				// Proxy the 'change' callback, and revert when finished
				if (("change" in moduleConfig.options)) {
					if (!moduleConfig.options.preservedChangeCallback) {
						// Store the callback
						moduleConfig.options.preservedChangeCallback = moduleConfig.options.change;
					}

					// Proxy the stored callback to provide context
					moduleConfig.options.change = function (value) {
						moduleConfig.options.preservedChangeCallback(value, me);
					};

					// Reset change callback to avoid zombies
					Upfront.Events.once('entity:settings:deactivate', function() {
						moduleConfig.options.change = moduleConfig.options.preservedChangeCallback;
					});
				}

				var module = ModuleFactory.createModule(
					moduleConfig.moduleType, moduleConfig.options || {}, this.options.model
				);

				module.panel = this;
				modules.push(module);
			}, this);

			this.modules = _(modules);

			if (this.onInitialize) this.onInitialize(options);
		},

		render: function () {
			this.$el.html('');
			this.$el.append('<div class="upfront-settings-item-content"></div>');

			var $content = this.$el.find('.upfront-settings-item-content');
			this.modules.each(function(module){
				module.render();
				module.delegateEvents();
				$content.append(module.el);
			});
		},

		save_settings: function () {
			if (!this.modules) return;

			var me = this;
			this.modules.each(function (module) {
				if ( module.fields.size() > 0 ) {
					module.save_fields();
				}
			});
		}
	});

	return ModulesContainer;
});

define('scripts/upfront/preset-settings/state-settings',[
	'scripts/upfront/settings/modules-container'
], function(ModulesContainer) {

	var StateSettings = ModulesContainer.extend({
		onInitialize: function(options) {
			if(this.options.state !== "Global") {
				this.$el.addClass('state_modules state_settings state_settings_' + this.options.state.toLowerCase());
			} else {
				this.$el.addClass('state_modules global_modules');
			}
		}
	});

	return StateSettings;
});

define('scripts/upfront/settings/modules/edit-preset',[
	'scripts/upfront/settings/modules/base-module',
	'scripts/upfront/settings/fields/show-state',
	'scripts/upfront/preset-settings/state-settings'
], function(BaseModule, ShowStateSettingsButton, StateSettings) {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var EditPresetModule = BaseModule.extend({
		className: 'preset_specific',

		initialize: function(options) {
			this.options = options || {};

			this.listenTo(this.model, 'change', this.onPresetUpdate);

			var me = this,
				firstStateButton = false,
				firstStateSettings = false;

			if((Upfront.Application.get_current() === Upfront.Application.MODE.THEME || this.options.model.get('theme_preset') !== true)
					&& this.options.model.get('id') !== 'default') {
				var fields = [
					new Upfront.Views.Editor.Field.Button({
						model: this.model,
						label: l10n.delete_label,
						className: 'delete_preset',
						compact: true,
						on_click: function() {
							if (confirm('Are you sure to delete this preset?')) {
								me.deletePreset();
							}
						}
					})
				];
			} else if(Upfront.Application.get_current() !== Upfront.Application.MODE.THEME
						&& (this.options.model.get('id') === 'default' || this.options.model.get('theme_preset') === true)) {
				var fields = [
					new Upfront.Views.Editor.Field.Button({
						model: this.model,
						label: 'Reset',
						className: 'delete_preset',
						compact: true,
						on_click: function() {
							me.resetPreset();
						}
					})
				];
			} else {
				var fields = [];
			}

			// First add global settings
			_.each(this.options.stateModules, function(stateModules, state) {
				if(state === "Global") {
					var stateSettings = new StateSettings({
						model: this.model,
						modules: stateModules,
						state: state
					});
					fields.push(stateSettings);
				}
			}, this);

			// Than add settings state tabs
			_.each(this.options.stateModules, function(stateModules, state) {
				if(state !== "Global") {
					var showStateButton = new ShowStateSettingsButton({
						state: state
					});
					fields.push(showStateButton);
					this.listenTo(showStateButton, 'upfront:presets:state_show', this.showState);

					if (!firstStateButton) {
						firstStateButton = showStateButton;
					}
				}
			}, this);

			// Than add non-global settings state panels
			_.each(this.options.stateModules, function(stateModules, state) {
				if(state !== "Global") {
					var stateSettings = new StateSettings({
						model: this.model,
						modules: stateModules,
						state: state
					});
					fields.push(stateSettings);
					if (!firstStateSettings) {
						firstStateSettings = stateSettings;
					} else {
						stateSettings.$el.hide();
					}
				}
			}, this);

			//Wrap tab buttons
			setTimeout(function(){
				me.$el.find('.state_settings_button').wrapAll('<div class="state_settings_button_wrapper">');

				var wrapper = me.$el.find('.state_settings_button_wrapper');
				if(wrapper.prev().hasClass('delete_preset')) {
					wrapper.addClass('move-wrapper-top');
				}
			}, 50);

			if (firstStateButton) firstStateButton.$el.addClass('active');
			if (firstStateSettings) firstStateSettings.$el.show();

			this.fields =_(fields);
		},

		onPresetUpdate: function() {
			this.trigger('upfront:presets:update', this.model.toJSON());
		},

		deletePreset: function() {
			this.trigger('upfront:presets:delete', this.model);
		},

		resetPreset: function() {
			this.trigger('upfront:presets:reset', this.model);
		},

		showState: function(state) {
			this.$el.find('.state_settings_button').removeClass('active');
			this.$el.find('.state_settings_button_' + state).addClass('active');
			this.$el.find('.state_settings').hide();
			this.$el.find('.state_settings_' + state).show();
			this.trigger('upfront:presets:state_show', state);
		}
	});

	return EditPresetModule;
});

define('scripts/upfront/settings/modules/migrate-preset',[
	'scripts/upfront/settings/modules/base-module',
], function(BaseModule) {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var MigratePresetModule = BaseModule.extend({
		className: 'migrate-preset-overlay',

		initialize: function(options) {
			this.options = options || {};
			
			var me = this;
			
			var SimpleTextField = Upfront.Views.Editor.Field.Text.extend({
				get_field_html: function () {
					return '';
				}
			});
			
			var SelectPresetField = Upfront.Views.Editor.Field.Chosen_Select.extend({
				className: 'preset select-preset-field-overlay',
				render: function() {
					Upfront.Views.Editor.Field.Chosen_Select.prototype.render.call(this);
					var me = this;
					var preset = this.$el.find('.upfront-chosen-select').val();

					this.$el.find('.upfront-chosen-select').chosen({
						search_contains: true,
						width: '171px'
					});

					return this;
				},

				get_value_html: function (value, index) {
					var selected = '';
					var currentPreset = this.get_saved_value() ? this.get_saved_value() : 'default';
					if (value.value === this.clear_preset_name(currentPreset)) selected = ' selected="selected"';
					return ['<option value="', value.value, '"', selected, '>', value.label, '</option>'].join('');
				},

				clear_preset_name: function(preset) {
					preset = preset.replace(' ', '-');
					preset = preset.replace(/[^-a-zA-Z0-9]/, '');
					return preset;
				},
				
				on_change: function(e) {
					this.trigger('change', this.get_value());
				}
			});
			
			this.selectPresetField = new SelectPresetField({
					model: this.model,
					label: '',
					property: 'preset',
					values: this.get_presets(),
					change: function(value) {
						//me.model.set_property('preset', this.get_value());
					}
				}),
			
			this.listenTo(this.selectPresetField, 'change', this.previewPreset);

			var fields = [
				new Upfront.Views.Editor.Settings.Item({
				model: this.model,
				className: 'new-preset-module',
				fields: [
					new SimpleTextField({
						model: this.model,
						label: l10n.convert_preset_info,
						className: 'migrate-preset-info migrate-info-icon',
					}),
					
					new Upfront.Views.Editor.Field.Button({
						model: this.model,
						label: l10n.convert_style_to_preset,
						className: 'migrate-preset-button',
						compact: true,
						on_click: function() {
							me.show_new_preset_fields();
						}
					}),
					
					//New preset fields
					
					new Upfront.Views.Editor.Field.Button({
						model: this.model,
						label: l10n.cancel_label,
						className: 'new-preset-button-cancel',
						compact: true,
						on_click: function() {
							me.hide_new_preset_fields();
						}
					}),
					
					new Upfront.Views.Editor.Field.Text({
						model: this.model,
						label: '',
						default_value: me.suggestPresetName(this.options.elementPreset),
						className: 'new-preset-button-input',
					}),
					
					new Upfront.Views.Editor.Field.Button({
						model: this.model,
						label: l10n.ok_label,
						className: 'new-preset-button-submit',
						compact: true,
						on_click: function() {
							var preset_name = me.$el.find('.new-preset-button-input input').val();

							if (preset_name.trim() === '') {
								alert(l10n.not_empty_label);
								return;
							}
							if (preset_name.match(/[^A-Za-z0-9 ]/)) {
								alert(l10n.special_character_label);
								return;
							}

							me.trigger('upfront:presets:new', preset_name.trim());
						}
					}),
				]
				//End new preset fields
			}),
			new Upfront.Views.Editor.Settings.Item({
				model: this.model,
				className: 'existing-preset-module migrate-separator',
				fields: [
					new SimpleTextField({
						model: this.model,
						label: l10n.select_preset_info,
						className: 'migrate-preset-info',
					}),

					this.selectPresetField,
					
					new Upfront.Views.Editor.Field.Button({
						model: this.model,
						label: l10n.apply_label,
						className: 'migrate-preset-apply',
						compact: true,
						on_click: function() {
							me.trigger('upfront:presets:change', me.selectPresetField.get_value());
						}
					}),
				]
			})
			]
			
			setTimeout(function(){
				me.hide_new_preset_fields();
			}, 20);

			this.fields =_(fields);
		},
		
		suggestPresetName: function(presetName) {
			var preset = this.capitalisePreset(presetName.replace(/-preset/, '')),
				name = preset + l10n.preset;
			
			return name
		},
		
		capitalisePreset: function(preset) {
			return preset.charAt(0).toUpperCase() + preset.slice(1).toLowerCase();
		},
		
		hide_new_preset_fields() {
			var me = this;
			me.$el.find('.new-preset-button-cancel').hide();
			me.$el.find('.new-preset-button-input').hide();
			me.$el.find('.new-preset-button-submit').hide();
			me.$el.find('.migrate-preset-button').show();
			
			me.$el.find('.existing-preset-overlay-layout').remove();
		},
		
		show_new_preset_fields() {
			var me = this;
			me.$el.find('.new-preset-button-cancel').show();
			me.$el.find('.new-preset-button-input').show();
			me.$el.find('.new-preset-button-submit').show();
			me.$el.find('.migrate-preset-button').hide();
			
			me.$el.find('.existing-preset-module').append('<div class="existing-preset-overlay-layout">&nbsp;</div>');
		},
		
		previewPreset: function(value) {
			this.trigger('upfront:presets:preview', value);
		},
		
		get_presets: function () {
			return _.map(this.options.presets.models, function(model) {
				if('undefined' === typeof model.get('name')) {
				  return { label: model.get('id'), value: model.get('id') };
				} else {
				  return { label: model.get('name'), value: model.get('id') };
				}
			});
		}
	});

	return MigratePresetModule;
});

(function ($) {
define('scripts/upfront/preset-settings/preset-css-editor',[
	'text!upfront/templates/popup.html'
], function(popupTemplate) {
	var l10n = Upfront.Settings && Upfront.Settings.l10n
		? Upfront.Settings.l10n.global.views
		: Upfront.mainData.l10n.global.views
	;

	var PresetCSSEditor = Backbone.View.extend({
		className: 'upfront-ui',
		id: 'upfront-csseditor',
		tpl: _.template($(popupTemplate).find('#csseditor-tpl').html()),
		prepareAce: false,
		ace: false,
		events: {
			'click .upfront-css-save-ok': 'save',
			'click .upfront-css-close': 'close',
			'click .upfront-css-theme_image': 'openThemeImagePicker',
			'click .upfront-css-media_image': 'openImagePicker',
			'click .upfront-css-font': 'startInsertFontWidget',
			'click .upfront-css-selector': 'addSelector',
			'click .upfront-css-type' : 'scrollToElement',
			'mouseenter .upfront-css-selector': 'hiliteElement',
			'mouseleave .upfront-css-selector': 'unhiliteElement',
		},
		//elemenTypes' element id matches model's 'id_slug' attribute
		elementTypes: {
			UaccordionModel: {label: l10n.accordion, id: 'accordion'},
			UcommentModel: {label: l10n.comments, id: 'comment'},
			UcontactModel: {label: l10n.contact_form, id: 'contact'},
			UgalleryModel: {label: l10n.gallery, id: 'gallery', preset_container: 'inline'},
			UimageModel: {label: l10n.image, id: 'image'},
			LoginModel: {label: l10n.login, id: 'upfront-login_element'},
			LikeBox: {label: l10n.like_box, id: 'Like-box-object'},
			MapModel: {label: l10n.map, id: 'upfront-map_element'},
			UnewnavigationModel: {label: l10n.navigation, id: 'nav', preset_container: 'inline'},
			ButtonModel: {label: l10n.button, id: 'button', preset_container: 'inline'},
			//UpostsModel: {label: l10n.posts, id: 'uposts'},WW
			PostsModel: {label: l10n.posts, id: 'posts', preset_container: 'inline'},
			UsearchModel: {label: l10n.search, id: 'search'},
			USliderModel: {label: l10n.slider, id: 'slider'},
			SocialMediaModel: {label: l10n.social, id: 'SocialMedia'},
			UtabsModel: {label: l10n.tabs, id: 'tab', preset_container: 'inline'},
			ThisPageModel: {label: l10n.page, id: 'this_page'},
			ThisPostModel: {label: l10n.post, id: 'this_post'},
			UwidgetModel: {label: l10n.widget, id: 'widget'},
			UyoutubeModel: {label: l10n.youtube, id: 'youtube'},
			PlainTxtModel: {label: l10n.text, id:'text', preset_container: 'inline'},
		},
		initialize: function(options) {
			var me = this,
				deferred = $.Deferred(),
				style_selector;

			this.options = options || {};
			this.model = options.model;
			this.sidebar = ( options.sidebar !== false );
			this.global = ( options.global === true );

			this.prepareAce = deferred.promise();
			require(['//cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/ace.js'], function(){
				deferred.resolve();
			});

			this.resizeHandler = this.resizeHandler || function(){
				me.$el.width($(window).width() - $('#sidebar-ui').width() -1);
			};

			//Destroy editor when Cancel or Save button is clicked
			Upfront.Events.on('element:settings:saved', this.close, this);
			Upfront.Events.on('element:settings:canceled', this.close, this);

			$(window).on('resize', this.resizeHandler);

			this.modelType = this.options.model.get_property_value_by_name('type');
			this.elementType = this.elementTypes[this.modelType] || {label: 'Unknown', id: 'unknown'};

			style_selector = this.options.preset.get('id');
			// DO NOT DO THIS!!! DELEGATE STYLE RENDERING TO PRESET (look at preset-css module
			// $style = $('#' + style_selector);
			// if ($style.length === 0) {
				// this.$style = $('<style id="' + style_selector + '"></style>');
				// $('body').append(this.$style);
			// } else {
				// this.$style = $style;
			// }

			this.createSelectors(Upfront.Application.LayoutEditor.Objects);

			this.selectors = this.elementSelectors[this.modelType] || {};

			this.element_id = options.element_id ? options.element_id : this.model.get_property_value_by_name('element_id');

			if ( typeof options.change == 'function' ) this.listenTo(this, 'change', options.change);

			if (this.options.doNotRender === true) return;

			this.render();
			this.startResizable();
		},
		close: function(event) {
			if(event)
				event.preventDefault();

			$(window).off('resize', this.resizeHandler);

			if(this.editor)
				this.editor.destroy();

			$('#page').css('padding-bottom', 0);
			this.remove();
		},
		render: function() {
			var me = this;

			$('#page').append(this.$el);

			if (!this.sidebar)
				this.$el.addClass('upfront-css-no-sidebar');
			else
				this.$el.removeClass('upfront-css-no-sidebar');

			this.$el.html(this.tpl({
				name: this.stylename,
				elementType: this.elementType.label,
				selectors: this.selectors,
				show_style_name: false,
				showToolbar: true
			}));

			this.resizeHandler('.');

			var bodyHeight = this.$el.height() - this.$('.upfront-css-top').outerHeight();
			this.$('.upfront-css-body').height(bodyHeight);

			this.prepareAce.done(function(){
				me.startAce();
			});

			this.prepareSpectrum();

			this.$el.show();
		},
		renderCss: function(rawCss) {
			var styles_with_selector;
			var preset_class = this.get_css_selector();
			styles_with_selector = this.stylesAddSelector($.trim(rawCss), '#page ' + preset_class);
			// Solve case of button loosing its styles
			styles_with_selector = Upfront.Util.colors.convert_string_ufc_to_color(styles_with_selector.replace(new RegExp(this.get_css_selector() + ' .upfront-button', 'g'), this.get_css_selector() + '.upfront-button'));

			return styles_with_selector;
		},
		cleanUpStyles: function(styles) {
			var scope = new RegExp(this.get_css_selector() + '\\s*', 'g');
			styles = styles.replace(new RegExp('#page ' + this.get_css_selector() + '\\s*', 'g'), '');
			styles = styles.replace(scope, '');
			// Unescape quotes a few times
			styles = styles.replace(/\\'/g, "'");
			styles = styles.replace(/\\'/g, "'");
			styles = styles.replace(/\\'/g, "'");
			styles = styles.replace(/\\"/g, '"');
			styles = styles.replace(/\\"/g, '"');
			styles = styles.replace(/\\"/g, '"');

			styles = styles.replace(/\.tablet-breakpoint/g, '');
			styles = styles.replace(/\.mobile-breakpoint/g, '');
			styles = styles.replace(/#page/g, '');

			styles = Upfront.Util.colors.convert_string_color_to_ufc(styles.replace(/div#page.upfront-layout-view .upfront-editable_entity.upfront-module/g, '#page'));

			return styles;
		},
		startAce: function() {
			var me = this,
				editor = ace.edit(this.$('.upfront-css-ace')[0]),
				session = editor.getSession()
			;

			session.setUseWorker(false);
			editor.setShowPrintMargin(false);

			session.setMode("ace/mode/css");
			editor.setTheme('ace/theme/monokai');

			editor.on('change', function(event){
				var styles_with_selector = me.renderCss(editor.getValue());
				// DO NOT DO THIS!!! DELEGATE STYLE RENDERING TO PRESET (look at preset-css module
				// me.$style.html(styles_with_selector);
				me.trigger('change', styles_with_selector);
			});


			var styles = this.options.preset.get('preset_style') ? this.options.preset.get('preset_style') : '';
			styles = this.cleanUpStyles(styles);
			editor.setValue($.trim(styles), -1);

			// Set up the proper vscroller width to go along with new change.
			editor.renderer.scrollBar.width = 5;
			editor.renderer.scroller.style.right = "5px";

			editor.focus();
			this.editor = editor;
		},
		prepareSpectrum: function(){
			var me = this,
				color_picker = new Upfront.Views.Editor.Field.Color({
					default_value: '#ffffff',
					showAlpha: true,
					showPalette: true,
					maxSelectionSize: 9,
					localStorageKey: "spectrum.recent_bgs",
					preferredFormat: "hex",
					chooseText: "Ok",
					showInput: true,
					allowEmpty:true,
					autohide: false,
					spectrum: {
						show: function(){
							//spectrum = $('.sp-container:visible');
						},
						choose: function(color) {
							var colorString = color.alpha < 1 ? color.toRgbString() : color.toHexString();
							me.editor.insert(colorString);
							me.editor.focus();
						}
					}
				})
			;
			color_picker.render();
			me.$('.upfront-css-color').html(color_picker.el);
		},
		createSelectors: function(objects){
			var me = this,
				selectors = {}
			;

			_.each(objects, function(object){
				selectors[object.cssSelectorsId] = object.cssSelectors || {};
			});
			me.elementSelectors = selectors;
		},

		createSelector: function(model_class, view_class, id) {
			var model = new model_class(),
				view = new view_class({model: model});
			this.elementSelectors[id] = view.cssSelectors || {};
			view.remove();
		},
		startResizable: function() {
			// Save the fetching inside the resize
			var me = this,
				$cssbody = me.$('.upfront-css-body'),
				topHeight = 0,
				$selectors = me.$('.upfront-css-selectors'),
				$saveform = me.$('.upfront-css-save-form'),
				$rsz = this.$('.upfront-css-resizable'),
				onResize = function(e, ui){
					var height = ui ? ui.size.height : me.$('.upfront-css-resizable').height(),
						bodyHeight = height  - topHeight;
					$cssbody.height(bodyHeight);
					if(me.editor)
						me.editor.resize();
					$selectors.height(bodyHeight - $saveform.outerHeight());
					// Clean unneeded CSS
					$rsz.css({
						width: "",
						height: "",
						left: "",
						top: ""
					});
					$('#page').css('padding-bottom', height);
				}
			;
			// Add appropriate handle classes
			$rsz.find(".upfront-css-top")
				.removeClass("ui-resizable-handle").addClass("ui-resizable-handle")
				.removeClass("ui-resizable-n").addClass("ui-resizable-n")
			;
			topHeight = me.$('.upfront-css-top').outerHeight();
			onResize();
			$rsz.resizable({
				handles: {n: '.upfront-css-top'},
				resize: onResize,
				minHeight: 200,
				delay: 100
			});
		},
		remove: function() {
			Backbone.View.prototype.remove.call(this);
			$(window).off('resize', this.resizeHandler);
		},
		openThemeImagePicker: function () {
			this._open_media_popup({themeImages: true});
		},

		openImagePicker: function(){
			this._open_media_popup();
		},

		/**
		 * Handles media popups.
		 * In this context, used for both theme and media images list.
		 *
		 * @param object opts Boot-time options to be passed to Upfront.Media.Manager
		 */
		_open_media_popup: function (opts) {
			opts = _.isObject(opts) ? opts : {};
			var me = this,
				options = _.extend({}, opts)
			;

			Upfront.Media.Manager.open(options).done(function(popup, result){
				Upfront.Events.trigger('upfront:element:edit:stop');
				if (!result) return;

				var imageModel = result.models[0],
					img = imageModel.get('image') ? imageModel.get('image') : result.models[0],
					url = 'src' in img ? img.src : ('get' in img ? img.get('original_url') : false)
				;

				me.editor.insert('url("' + url + '")');
				me.editor.focus();
			});
		},
		startInsertFontWidget: function() {
			var insertFontWidget = new Preset_Insert_Font_Widget({
				editor: this.editor,
				collection: Upfront.Views.Editor.Fonts.theme_fonts_collection
			});

			$('#insert-font-widget').html(insertFontWidget.render().el);
		},
		scrollToElement: function(){
			var $element = $('#' + this.element_id);
			if(!$element.length)
				return;

			var offset = $element.offset().top - 50;
			$(document).scrollTop(offset > 0 ? offset : 0);

			this.blink($element, 4);
		},
		hiliteElement: function(e){
			var preset_selector = this.get_css_selector();
			
			//Do not add empty space for posts element
			if(this.elementType.id !== "posts") {
				preset_selector = preset_selector + ' ';
			}

			var selector = preset_selector + $(e.target).data('selector');

			if(!selector.length)
				return;
			var element = $('#' + this.element_id + selector);

			element.addClass('upfront-css-hilite');
		},

		unhiliteElement: function(e){
			var preset_selector = this.get_css_selector();

			//Do not add empty space for posts element
			if(this.elementType.id !== "posts") {
				preset_selector = preset_selector + ' ';
			}
			
			var selector = preset_selector + $(e.target).data('selector');

			if(!selector.length)
				return;
			var element = $('#' + this.element_id + selector);
			element.removeClass('upfront-css-hilite');
		},
		addSelector: function(e) {
			var selector = $(e.target).data('selector');
			this.editor.insert(selector);
			this.editor.focus();
		},
		get_css_selector: function() {
			if (this.is_global_stylesheet) return '';

			var preset_class = '.' + this.options.preset.get('id');

			if(typeof this.elementType.preset_container === "undefined") {
				preset_class = preset_class + ' ';
			}

			return preset_class;
		},
		updateStyles: function(contents){
			var $el = this.get_style_element();
			Upfront.Util.Transient.push('css-' + this.element_id, $el.html());
			contents = Upfront.Util.colors.convert_string_ufc_to_color( contents);
			$el.html(
				this.stylesAddSelector(
					contents, (this.is_default_style ? '' : '#page ' + this.get_css_selector())
					).replace(/#page/g, 'div#page.upfront-layout-view .upfront-editable_entity.upfront-module')
			);
			this.trigger('updateStyles', this.element_id);
		},

		stylesAddSelector: function(contents, selector) {
			if (this.is_global_stylesheet && empty(selector)) return contents;
			var me = this,
				rules = contents.split('}'),
				processed = ''
			;
			_.each(rules, function (rl) {
				var src = $.trim(rl).split('{');
				if (src.length != 2) return true; // wtf
				var individual_selectors = src[0].split(','),
					processed_selectors = []
				;
				_.each(individual_selectors, function (sel) {
					sel = $.trim(sel);
					var clean_selector = sel.replace(/:[^\s]+/, ''); // Clean up states states such as :hover, so as to not mess up the matching
					var	is_container = clean_selector[0] === '@' || me.recursiveExistence(selector, clean_selector),
						spacer = is_container
							? '' // This is not a descentent selector - used for containers
							: ' ' // This is a descentent selector
					;

					processed_selectors.push('' +
						selector + spacer + sel +
					'');
				});
				processed += processed_selectors.join(', ') + ' {' +
					src[1] + // Actual rule
				'\n}\n';
			});
			return processed;
		/*
			var rules = contents.split('}'),
				separator = '\n\n' + selector + ' ';


			rules = _.map(rules, function(rule){return $.trim(rule);});

			rules.pop();

			return separator + rules.join('\n}' + separator) + '\n}';
		*/
		},
		recursiveExistence: function(selector, clean_selector) {
			var splitted = clean_selector.split(' ');
			var me = this;
			while(splitted.length > 0) {
				try{
					if(!!$(selector + splitted.join(' ')).closest('#' + me.element_id).length)
						return true;
				}
				catch (err) {

				}
				splitted.pop();
			}

			return false;
		},
		save: function(event) {
			if (event) event.preventDefault();
			var me = this,
				styles = $.trim(this.editor.getValue()),
				data;

			if (this.is_global_stylesheet === false && this.stylename === this.get_temp_stylename())
				return Upfront.Views.Editor.notify(l10n.style_name_nag, 'error');

			return Upfront.Views.Editor.notify(l10n.preset_style_saved.replace(/%s/,  this.elementType.id));
		},
	});

	var Preset_Insert_Font_Widget = Backbone.View.extend({
		initialize: function(options) {
			var me = this;

			this.editor = options.editor;

			this.fields = [
				new Upfront.Views.Editor.Field.Typeface_Chosen_Select({
					label: '',
					compact: true,
					values: Upfront.Views.Editor.Fonts.theme_fonts_collection.get_fonts_for_select(),
					additional_classes: 'choose-typeface',
					select_width: '230px'
				}),
				new Upfront.Views.Editor.Field.Typeface_Style_Chosen_Select({
					label: '',
					compact: true,
					values: [],
					additional_classes: 'choose-variant',
					select_width: '120px'
				}),
				new Upfront.Views.Editor.Field.Button({
					label: l10n.insert_font,
					compact: true,
					on_click: function(){
						me.finish();
					}
				})
			];
		},
		render: function() {
			$('#insert-font-widget').html('').addClass('open');
			this.$el.html('');
			_.each(this.fields, function(field) {
				field.render();
				this.$el.append(field.el);
			}, this);

			this.listenTo(this.fields[0], 'changed', function() {
				var variants = Upfront.Views.Editor.Fonts.theme_fonts_collection.get_variants(this.fields[0].get_value());
				this.render_variants(variants);
			});
			this.listenTo(this.fields[1], 'changed', function() {
				this.preview_font();
			});

			return this;
		},
		render_variants: function(variants) {
			var $variant_field = this.$el.find('.choose-variant select');
			$variant_field.find('option').remove();
			$variant_field.append('<option value="">' + l10n.choose_variant + '</option>');
			_.each(variants, function(variant) {
				$variant_field.append('<option value="' + variant + '">' + variant + '</option>');
			});
			$variant_field.trigger('chosen:updated');
		},
		preview_font: function() {
			this.replaceFont({
				font_family: this.fields[0].get_value(),
				variant: Upfront.Views.Font_Model.parse_variant(this.fields[1].get_value())
			});
		},
		replaceFont: function(font) {
			var lines;

			this.style_doc = this.editor.getSession().getDocument();

			this.last_selected_font = font;

			// Insert selected font family
			if (!this.font_family_range) {
				this.font_family_range = this.editor.getSelection().getRange();
			} else {
				this.font_family_range.end = this.end_point;
			}
			this.end_point = this.style_doc.replace(this.font_family_range, font.font_family);

			// Insert selected weight and style, first reset them
			this.reset_properties();
			lines = [];
			if (font.variant.weight) {
				lines.push('    font-weight: ' + font.variant.weight + ';');
			}
			if (font.variant.style) {
				lines.push('    font-style: ' + font.variant.style + ';');
			}
			if (lines.length > 0) {
				this.style_doc.insertLines(this.font_family_range.start.row + 1, lines);
			}
		},
		reset_properties: function() {
			var row, line, result;
			this.style_doc = this.editor.getSession().getDocument();
			// Search forward only from font family row since lower properties override upper
			result = {};
			row = this.font_family_range.start.row + 1;
			line = this.style_doc.getLine(row);
			while (line.indexOf('}') < 0) {
				if (line.indexOf('font-weight') !== -1) {
					result.weight = row;
					if (!this.starting_weight) this.starting_weight = line;
				}
				if (line.indexOf('font-style') !== -1) {
					result.style = row;
					if (!this.starting_style) this.starting_style = line;
				}

				row++;
				line = this.style_doc.getLine(row);
				if (!line) {
					// Fix missing closing paren
					//this.style_doc.insertLines(row, ['}']); // This adds a standalone new brace for some reason
					break;
				}
			}

			// Reset properties. This is complicated. If both font style and font weight properties are in current style rule
			// we need to remove them carefully because when we remove first, seconds' row number might change
			// so first remove one with higher row number.
			if (result.weight && result.style) {
				if (result.weight > result.style) {
					this.style_doc.removeLines(result.weight, result.weight);
					this.style_doc.removeLines(result.style, result.style);
				} else {
					this.style_doc.removeLines(result.style, result.style);
					this.style_doc.removeLines(result.weight, result.weight);
				}
				result.weight = false;
				result.style = false;
			}
			if (result.weight) {
				this.style_doc.removeLines(result.weight, result.weight);
			}
			if (result.style) {
				this.style_doc.removeLines(result.style, result.style);
			}
		},
		finish: function() {
			$('#insert-font-widget').html('<a class="upfront-css-font" href="#">' + l10n.insert_font + '</a>').removeClass('open');
		}
	});

	return PresetCSSEditor;
});
})(jQuery);

define('scripts/upfront/settings/modules/preset-css',[
	'scripts/upfront/settings/modules/base-module',
	'scripts/upfront/preset-settings/preset-css-editor'
], function(BaseModule, PresetCSSEditor) {
	var l10n = Upfront.Settings.l10n.preset_manager;

	var PresetCssModule = BaseModule.extend({
		className: 'upfront-settings-css',
		events: {
			'click input[name=preset_css]': 'openEditor'
		},
		initialize: function(options) {
			var me = this;

			BaseModule.prototype.initialize.call(this, options);

			this.fields = _([
				new Upfront.Views.Editor.Field.Button({
					model: me.model,
					className: 'edit_preset_label',
					compact: true,
					label: l10n.edit_preset_label,
				}),

				new Upfront.Views.Editor.Field.Button({
					model: me.model,
					className: 'edit_preset_css',
					compact: true,
					name: 'preset_css',
					label: l10n.edit_preset_css,
				})
			]);
		},

		onPresetUpdate: function(preset) {
			this.trigger('upfront:presets:update', preset);
		},

		updateCss: function(preset, newCss, me) {
			newCss.replace(/'/g, '"'); // Force double quotes, menu el. uses singlequotes to surround value of an attribute, if single quote slips in it will break the elelent
			preset.set({'preset_style': newCss});
		},

		openEditor: function(e){
			var me = this;
			e.preventDefault();

			Upfront.Events.trigger("entity:settings:beforedeactivate");

			var styleType = Upfront.Application.cssEditor.getElementType(this.model);
			var styleName = styleType.label.toLowerCase() + '-preset-' + this.options.preset.get('id');

			this.presetCSSEditor = new PresetCSSEditor({
				model: this.model,
				preset: this.options.preset,
				stylename: styleName
			});

			var updateCssDebounced = _.debounce(this.updateCss, 1000);

			this.listenTo(this.presetCSSEditor, 'upfront:presets:update', this.onPresetUpdate);
			this.listenTo(this.presetCSSEditor, 'change', function(newCss) {
				updateCssDebounced(me.options.preset, newCss, me);
			});

			Upfront.Events.trigger("entity:settings:deactivate");
		}
	});


	return PresetCssModule;
});


(function($) {
define(
'scripts/upfront/preset-settings/util',[],function() {
	var expandBreakpoints = function(properties) {
		if (properties['breakpoint'] && properties['breakpoint']['tablet']) {
			properties['tablet'] = [];
			_.each(properties['breakpoint']['tablet'], function(property, name) {
				properties['tablet'][name] = property;
			});
		}
		if (properties['breakpoint'] && properties['breakpoint']['mobile']) {
			properties['mobile'] = [];
			_.each(properties['breakpoint']['mobile'], function(property, name) {
				properties['mobile'][name] = property;
			});
		}
		return properties;
	};
	/**
	 * Generates CSS rules for placing into page styles.
	 *
	 * @param properties - preset properties
	 * @return String - CSS for preset
	 */
	var generateCss = function(properties, styleTpl) {
		var tpl = Upfront.Util.template(styleTpl);
		
		//Increase preset_style css specificity
		if(typeof properties.preset_style !== "undefined") {
			properties.preset_style = properties.preset_style
			.replace(/#page/g, '#page.upfront-layout-view .upfront-editable_entity.upfront-module');
		}
		
		return tpl({properties: expandBreakpoints(properties)})
			.replace(/#page/g, 'div#page.upfront-layout-view')
			// Solve case of button loosing its styles
			.replace(new RegExp(properties.id + ' .upfront-button', 'g'), properties.id + '.upfront-button')
			.replace(/\\'/g, "'")
			.replace(/\\'/g, "'")
			.replace(/\\'/g, "'")
			.replace(/\\"/g, '"')
			.replace(/\\"/g, '"')
			.replace(/\\"/g, '"');
	};

	var Util = {
		generateCss: generateCss,
		/**
		 * Generates and appends element preset styles to page using element presets from
		 * Upfront.mainData and preset style template.
		 *
		 * @param element String - element name
		 * @param styleTpl String - style template
		 */
		generatePresetsToPage: function(element, styleTpl) {
			_.each(Upfront.mainData[element + 'Presets'], function(properties) {
				Util.updatePresetStyle(element, expandBreakpoints(properties), styleTpl);
			});
		},

		getPresetProperties: function (element, preset_id) {
			var presets = Upfront.mainData[element + 'Presets'] || [],
				props = {}
			;
			
			$.each(presets, function (idx, preset) {
				if (!(preset && preset.id && preset_id === preset.id)) return true;
				props = _.extend({}, preset);
			});
			return props;
		},

		updatePresetStyle: function (element, properties, styleTpl) {
			var styleId = element + '-preset-' + properties.id,
				props = _.extend({}, properties)
			;

			// Do we have come colors here? Yes? Expand them then
			_.each(props, function (prop, idx) {
				if (Upfront.Util.colors.is_theme_color(prop)) {
					props[idx] = Upfront.Util.colors.get_color(prop);
				}
			});

			if ($('style#' + styleId).length === 0) {
				$('body').append('<style id="' + styleId + '"></style>');
			}
			$('style#' + styleId).text(generateCss(props, styleTpl));
		}
	};

	return Util;
});
})(jQuery);

(function($) {
define('scripts/upfront/preset-settings/preset-manager',[
	'scripts/upfront/element-settings/root-settings-panel',
	'scripts/upfront/settings/modules/select-preset',
	'scripts/upfront/settings/modules/edit-preset',
	'scripts/upfront/settings/modules/migrate-preset',
	'scripts/upfront/settings/modules/preset-css',
	'scripts/upfront/preset-settings/util',
	'scripts/upfront/preset-settings/preset-css-editor'
], function(RootSettingsPanel, SelectPresetModule, EditPresetModule, MigratePresetModule, PresetCssModule, Util, PresetCSSEditor) {
	/**
	 * Handles presets: load, edit, delete and update for elements.
	 *
	 * API
	 * ---
	 * Options that are needed for this to work:
	 * mainDataCollection - name of property that holds preset collection
	 * styleElementPrefix - this will be used to identify style elements in page
	 * ajaxActionSlug - slug that will be used to call ajax actions for updating and deleting presets
	 * panelTitle - title of panel
	 * presetDefaults - these include all preset properties except name and id that will be usde to
	 *		create new presets
	 * stateModules - presets handle element states like hover, static and active; for each state all
	 *		properties can be set this is object containing all states and their properties see Tab Element
	 *		settings for example.
	 *		In state fields, fields that have change callback can use second parameter which will be parent
	 *		element, using parent element change function can set value on model.
	 *
	 * styleTpl - Upfront.Util.template parsed styles template
	 */
	var l10n = Upfront.Settings.l10n.preset_manager;

	var PresetManager = RootSettingsPanel.extend({
		className: 'uf-settings-panel upfront-settings_panel preset-manager-panel',

		initialize: function (options) {
			var me = this;

			this.options = options;
			_.each(this.options, function(option, index) {
				this[index] = option;
			}, this);

			var defaultPreset = false;

			_.each(Upfront.mainData[this.mainDataCollection], function(preset, presetIndex) {
				if (preset.id === 'default') {
					defaultPreset = true;
				}
			});

			if(!defaultPreset) {
				Upfront.mainData[this.mainDataCollection] = _.isArray(Upfront.mainData[this.mainDataCollection]) ?
						Upfront.mainData[this.mainDataCollection] : [];

				Upfront.mainData[this.mainDataCollection].unshift(this.getPresetDefaults('default'));
			}


			this.presets = new Backbone.Collection(Upfront.mainData[this.mainDataCollection] || []);

			var savePreset = function(properties) {
				Upfront.Util.post({
					action: 'upfront_save_' + this.ajaxActionSlug + '_preset',
					data: properties
				}).done( function() {
					me.model.trigger("preset:updated");
				});
			};

			// Let's not flood server on some nuber property firing changes like crazy
			this.debouncedSavePreset = _.debounce(savePreset, 1000);

			this.createBackup();

			this.defaultOverlay();

			this.listenToOnce(Upfront.Events, 'element:settings:canceled', function() {
				this.updateCanceledPreset(this.backupPreset);
			});

			// Listen to breakpoint change and close off the interface
			this.listenToOnce(Upfront.Events, 'upfront:layout_size:change_breakpoint', this.cancelPresetChanges);
		},

		createBackup: function() {
			var preset = this.property('preset') ? this.clear_preset_name(this.property('preset')) : 'default',
				backupModel = this.presets.findWhere({id: preset});

			if(typeof backupModel === "undefined") {
				backupModel = this.presets.findWhere({id: 'default'});
			}

			// Backup preset model properties for later use in reset (on settings cancel)
			if(typeof this.backupPreset === "undefined") {
				this.backupPreset = Upfront.Util.clone(backupModel.toJSON());
			}
		},

		defaultOverlay: function() {
			var me = this,
				preset = this.property('preset') ? this.clear_preset_name(this.property('preset')) : 'default';

			if(preset === "default") {
				setTimeout( function() {
					//Wrap settings and preset styles
					me.$el.find('.preset_specific').next().andSelf().wrapAll('<div class="default-overlay-wrapper" />');

					//Append overlay div
					me.$el.find('.default-overlay-wrapper').append('<div class="default-overlay">' +
					'<div class="overlay-title">' + l10n.default_overlay_title + '</div>' +
					'<div class="overlay-text">' + l10n.default_overlay_text + '</div>' +
					'<div class="overlay-button"><button type="button" class="overlay-button-input">'+ l10n.default_overlay_button +'</button></div>' +
					'</div>');

					//Disable preset reset button
					me.$el.find('.delete_preset input').prop('disabled', true);
					me.$el.find('.delete_preset input').css({ opacity: 0.6 });
				}, 100);
			}

			this.$el.on('click', '.overlay-button-input', function(event) {
				event.preventDefault();

				//Remove overlay div
				me.$el.find('.default-overlay').remove();

				//Update wrapper min-height
				me.$el.find('.default-overlay-wrapper').css('min-height', '30px');

				//Enable preset reset button
				me.$el.find('.delete_preset input').prop('disabled', false);
				me.$el.find('.delete_preset input').css({ opacity: 1 });
			});
		},

		updateMainDataCollectionPreset: function(properties) {
			var index;

			_.each(Upfront.mainData[this.mainDataCollection], function(preset, presetIndex) {
				if (preset.id === properties.id) {
					index = presetIndex;
				}
			});

			if (typeof index !== 'undefined') {
				Upfront.mainData[this.mainDataCollection][index] = properties;
			} else {
				Upfront.mainData[this.mainDataCollection].push(properties);
			}
		},

		/**
		 * Allow element appearance panels to migrate properties from old type of settings
		 * to new preset based settings.
		 */
		migratePresetProperties: function(newPreset) {
			return newPreset;
		},

		/**
		 Migrate theme_style classes
		 */

		migrateElementStyle: function(styles) {
			return styles;
		},

		setupItems: function() {
			this.trigger('upfront:presets:setup-items', this);
			var preset = this.clear_preset_name(this.model.decode_preset() || 'default'),
				presetModel = this.presets.findWhere({id: preset}),
				currentBreakpoint,
				breakpointsData,
				breakpointData;

			if(typeof presetModel === "undefined") {
				presetModel = this.presets.findWhere({id: 'default'});
			}

			// Add items
			if (this.selectPresetModule && this.selectPresetModule.stopListening) {
				this.selectPresetModule.stopListening();
				this.stopListening(this.selectPresetModule);
			}
			this.selectPresetModule = new SelectPresetModule({
				model: this.model,
				presets: this.presets
			});

			// Setup preset model so that it uses breakpoint values
			if (this.options.hasBreakpointSettings === true) {
				currentBreakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active();
				breakpointsData = presetModel.get('breakpoint') || {};
				breakpointData = breakpointsData[currentBreakpoint.id] || {};
				_.each(this.options.breakpointSpecificPresetSettings, function(settingOptions) {
					if (!_.isUndefined(breakpointData[settingOptions.name])) {
						var data = {};
						data[settingOptions.name] = breakpointData[settingOptions.name];
						presetModel.set(data, {silent: true});
					}
				}, this);
			}

			if (this.editPresetModule && this.editPresetModule.stopListening) {
				this.editPresetModule.stopListening();
				this.stopListening(this.editPresetModule);
			}
			this.editPresetModule = new EditPresetModule({
				model: presetModel,
				stateModules: this.stateModules
			});

			if (this.presetCssModule && this.presetCssModule.stopListening) {
				this.presetCssModule.stopListening();
				this.stopListening(this.presetCssModule);
			}
			this.presetCssModule = new PresetCssModule({
				model: this.model,
				preset: presetModel
			});

			//When element is not migrated yet
			this.migratePresetModule = new MigratePresetModule({
				model: this.model,
				presets: this.presets,
				elementPreset: this.styleElementPrefix
			});

			this.listenTo(this.selectPresetModule, 'upfront:presets:new', this.createPreset);
			this.listenTo(this.selectPresetModule, 'upfront:presets:change', this.changePreset);
			this.listenTo(this.editPresetModule, 'upfront:presets:delete', this.deletePreset);
			this.listenTo(this.editPresetModule, 'upfront:presets:reset', this.resetPreset);
			this.listenTo(this.editPresetModule, 'upfront:presets:update', this.updatePreset);
			this.listenTo(this.editPresetModule, 'upfront:presets:state_show', this.stateShow);
			this.listenTo(this.presetCssModule, 'upfront:presets:update', this.updatePreset);
			this.listenTo(this.selectPresetModule, 'upfront:presets:migrate', this.migratePreset);

			//Migration listeners
			this.listenTo(this.migratePresetModule, 'upfront:presets:preview', this.previewPreset);
			this.listenTo(this.migratePresetModule, 'upfront:presets:change', this.applyExistingPreset);
			this.listenTo(this.migratePresetModule, 'upfront:presets:new', this.migratePreset);

			this.settings = _([
				this.selectPresetModule,
				this.editPresetModule,
				this.presetCssModule
			]);
		},

		getTitle: function() {
			return 'Appearance';
		},

		getPresetDefaults: function(presetName) {
			return _.extend(this.presetDefaults, {
				id: presetName.toLowerCase().replace(/ /g, '-'),
				name: presetName
			});
		},

		updateCanceledPreset: function(properties) {
			Util.updatePresetStyle(this.styleElementPrefix.replace(/-preset/, ''), properties, this.styleTpl);

			this.debouncedSavePreset(properties);

			this.updateMainDataCollectionPreset(properties);
		},

		updatePreset: function(properties) {
			var index,
				styleElementId,
			 	currentBreakpoint,
				breakpointsData
			;

			// Setup model so that it saves breakpoint values to breakpoint property
			if (this.options.hasBreakpointSettings === true) {
				currentBreakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active();
				breakpointsData = properties.breakpoint || {};
				breakpointsData[currentBreakpoint.id] = breakpointsData[currentBreakpoint.id] || {};
				_.each(this.options.breakpointSpecificPresetSettings, function(settingOptions) {
					breakpointsData[currentBreakpoint.id][settingOptions.name] = properties[settingOptions.name];
					// Delete property from root properties so that model remians clean (these properties should only be saved in breakpoint data)
					delete properties[settingOptions.name];
				}, this);
				// Finally update breakpoints in model
				properties.breakpoint = breakpointsData;
			}
			Util.updatePresetStyle(this.styleElementPrefix.replace(/-preset/, ''), properties, this.styleTpl);

			this.debouncedSavePreset(properties);

			this.updateMainDataCollectionPreset(properties);
		},

		migratePreset: function(presetName) {

			//Check if preset already exist
			var existingPreset = this.presets.findWhere({id: presetName.toLowerCase().replace(/ /g, '-')});

			if(typeof existingPreset !== "undefined") {
				Upfront.Views.Editor.notify(l10n.preset_already_exist.replace(/%s/, presetName), 'error');
				return;
			}

			var elementStyleName = this.property('theme_style');

			// We need to set to _default first so that css editor can get style properly
			if (!elementStyleName) elementStyleName = '_default';

			// We need to initialize cssEditor to get element styles
			Upfront.Application.cssEditor.init({
				model: this.model,
				stylename: elementStyleName,
				no_render: true
			});

			var style = $.trim(Upfront.Application.cssEditor.get_style_element().html().replace(/div#page.upfront-layout-view .upfront-editable_entity.upfront-module/g, '#page'));

			//Apply style only for the current preset
			style = style.replace(new RegExp(elementStyleName, 'g'), presetName.toLowerCase());

			//Migrate element styles
			style = this.migrateElementStyle(style);

			newPreset = new Backbone.Model(this.getPresetDefaults(presetName));

			//Migrate element styles to preset
			if(typeof style !== "undefined") {
				newPreset.set({
					preset_style: style
				});
			}

			//Migrate element properties to preset
			this.migratePresetProperties(newPreset);

			// And remove element style
			this.property('preset', newPreset.id);
			this.presets.add(newPreset);
			presetOptions = newPreset;
			properties = newPreset.toJSON();

			this.property('theme_style', '');

			//Render new preset
			Util.updatePresetStyle(this.styleElementPrefix.replace(/-preset/, ''), properties, this.styleTpl);

			//Save preset
			this.debouncedSavePreset(properties);
			this.updateMainDataCollectionPreset(properties);

			//Set element as migrated
			this.property('usingNewAppearance', true);

			// Trigger change so that whole element re-renders again.
			// (to replace element style class with preset class, look upfront-views.js
			this.model.get('properties').trigger('change');

			//Notify preset is created
			Upfront.Views.Editor.notify(l10n.preset_created.replace(/%s/, presetName));

			this.render();
		},

		createPreset: function(presetName) {
			//Check if preset already exist

			var existingPreset = this.presets.findWhere({id: presetName.toLowerCase().replace(/ /g, '-')});
			if(typeof existingPreset !== "undefined") {
				Upfront.Views.Editor.notify(l10n.preset_already_exist.replace(/%s/, presetName), 'error');
				return;
			}

			var preset = this.getPresetDefaults(presetName);

			this.presets.add(preset);
			this.model.set_property('preset', preset.id);
			this.updatePreset(preset);

			// Make sure we don't lose our current preset
			this.model.encode_preset(preset.id);

			//Notify preset is created
			Upfront.Views.Editor.notify(l10n.preset_created.replace(/%s/, presetName));

			this.render();
		},

		deletePreset: function(preset) {
			var index;

			Upfront.Util.post({
				data: preset.toJSON(),
				action: 'upfront_delete_' + this.ajaxActionSlug + '_preset'
			});

			_.each(Upfront.mainData[this.mainDataCollection], function(storedPreset, presetIndex) {
				if (storedPreset.id === preset.get('id')) {
					index = presetIndex;
				}
			});
			Upfront.mainData[this.mainDataCollection].splice(index, 1);

			this.model.set_property('preset', 'default');
			this.model.encode_preset('default');

			this.presets.remove(preset);

			this.render();

			this.defaultOverlay();
		},

		resetPreset: function(preset) {
			var index;
			var me = this;

			Upfront.Util.post({
				data: preset.toJSON(),
				action: 'upfront_reset_' + this.ajaxActionSlug + '_preset'
			}).success(function (ret) {
				var resetPreset = ret.data;
				if(_.isEmpty(ret.data) || ret.data === false) {
					resetPreset = me.getPresetDefaults('default');
				}

				//Update preset CSS with reset properties
				Util.updatePresetStyle(me.styleElementPrefix.replace(/-preset/, ''), resetPreset, me.styleTpl);

				me.updateMainDataCollectionPreset(resetPreset);

				me.presets = new Backbone.Collection(Upfront.mainData[me.mainDataCollection] || []);

				//Notify preset is reset
				Upfront.Views.Editor.notify(l10n.preset_reset.replace(/%s/, preset.get('id')));

				me.$el.empty();
				me.render();
			}).error(function (ret) {
				//Notify error
				Upfront.Views.Editor.notify(ret);
			});
		},

		applyExistingPreset: function(preset) {
			//Set element as already migrated
			this.property('usingNewAppearance', true);

			//Set existing preset
			this.changePreset(preset);

			this.defaultOverlay();
		},

		changePreset: function(preset) {
			// Add items
			this.stopListening();

			// Make sure we don't lose our current preset
			this.model.encode_preset(preset);

			//this.setupItems(); // called in render -> getBody
			this.render();

			this.defaultOverlay();

			//Display notification
			Upfront.Views.Editor.notify(l10n.preset_changed.replace(/%s/, preset));
		},

		previewPreset: function(preset) {
			var element_id = this.property('element_id'),
				elementType = this.styleElementPrefix.replace(/-preset/, '');

			//We need to manage Tabs, Accordions & Buttons are they are using another classes for presets
			if(elementType === "accordion") {
				var $selector = $('#' + element_id).find(".upfront-accordion-container");

				$selector.removeClass(this.getPresetClasses(elementType));
				$selector.addClass(elementType + '-preset-' + preset);

			} else if(elementType === "tab") {
				//Remove original preset classes
				var $selector = $('#' + element_id).find(".upfront-tabs-container");

				$selector.removeClass(this.getPresetClasses(elementType));
				$selector.addClass(elementType + '-preset-' + preset);

			} else if(elementType === "button") {
				var $selector = $('#' + element_id).find(".upfront_cta");

				$selector.removeClass(this.getPresetClasses(elementType));
				$selector.addClass(elementType + '-preset-' + preset);

			} else {
				//Remove original preset classes
				$('#' + element_id).removeClass(this.getPresetClasses());

				//Add preset class to element
				$('#' + element_id).addClass(preset);
			}

		},

		getPresetClasses: function(elementType) {
			var presetClasses = '';

			_.map(this.presets.models, function(model) {
				if(typeof elementType !== "undefined" && elementType) {
					presetClasses += elementType + '-preset-' + model.get('id') + ' ';
				} else {
					presetClasses += model.get('id') + ' ';
				}
			});

			return presetClasses;
		},

		stateShow: function(state) {
			this.trigger('upfront:presets:state_show', state);
		},
		
		/**
		 * Allow element appearance panels to migrate properties from old type of settings
		 * to new preset based settings.
		 */
		getModifiedProperties: function() {
			return true;
		},
		
		migrateToDefault: function() {
			var needMigration = this.getModifiedProperties(),
				alreadyMigrated = this.property('usingNewAppearance');
			
			if(!needMigration && !alreadyMigrated) {
				//Set element as already migrated
				this.property('usingNewAppearance', true);

				//Set preset to default
				this.property('preset', 'default');

				this.defaultOverlay();
			}
			
			return false;
		},

		getBody: function () {
			this.setupItems();
			var $body = $('<div />'),
				me = this;
			
			/**
			 *	Automatically migrate Text & Accordion elements to Default if no options are not modified.
			 */
			this.migrateToDefault();

			if(this.property('usingNewAppearance') !== true) {
				this.settings = _([
					this.migratePresetModule
				]);
			}

			this.settings.each(function (setting) {
				if ( ! setting.panel ) setting.panel = me;
				setting.render();
				$body.append(setting.el)
			});


			return $body;
		},

		// utils
		clear_preset_name: function(preset) {
			preset = preset.replace(' ', '-');
			preset = preset.replace(/[^-a-zA-Z0-9]/, '');
			return preset;
		},

		property: function(name, value, silent) {
			if(typeof value != "undefined"){
				if(typeof silent == "undefined")
					silent = true;
				return this.model.set_property(name, value, silent);
			}
			return this.model.get_property_value_by_name(name);
		},

		save_settings: function() {
			// Deliberately disable save_settings, preset manager saves preset as it changes
		}
	});

	return PresetManager;
});
})(jQuery);

(function ($) {
define('scripts/upfront/settings/root-modules-panel',[
	'scripts/upfront/settings/modules-container',
	'scripts/upfront/element-settings/root-panel-mixin'
],function(ModulesContainer, RootPanelMixin) {

	var RootModulesPanel = ModulesContainer.extend(
		_.extend({}, RootPanelMixin, {
			getBody: function() {
				var $body = $('<div />');

				$body.append('<div class="upfront-settings-item-content"></div>');

				var $content = $body.find('.upfront-settings-item-content');
				this.modules.each(function(module){
					module.render();
					module.delegateEvents();
					$content.append(module.el);
				});

				return $body;
			}
		})
	);

	return RootModulesPanel;
});
})(jQuery);

define('scripts/upfront/element-settings/advanced-settings',[
	'scripts/upfront/settings/root-modules-panel'
], function(RootModulesPanel) {
	var AdvancedSettings = RootModulesPanel.extend({
		className: 'uf-settings-panel upfront-settings_panel advanced-settings',
		modules: [
			{
				moduleType: 'Padding'
			},
			{
			 moduleType: 'Anchor'
			}
		],

		getAdditionalModules: function(modulesConfig) {
			var hadPresets = _.contains(['UtabsView', 'UaccordionView', 'ButtonView'], this.model.get_property_value_by_name('view_class')),
				elementStyleName;

			// Show only for tab, accordion and button
			if (!hadPresets) return modulesConfig;

			// And only if element used element styles
			elementStyleName = this.model.get_property_value_by_name('theme_style');
			if (!elementStyleName || elementStyleName === '_default') return modulesConfig;

			modulesConfig.unshift({moduleType:'ElementStyle'});
			return modulesConfig;
		},

		title: 'Advanced Settings'
	});

	return AdvancedSettings;
});

(function ($) {
define('scripts/upfront/element-settings/settings',[
	'scripts/upfront/preset-settings/preset-manager',
	'scripts/upfront/element-settings/advanced-settings'
], function (PresetManager, AdvancedSettings) {
	var l10n = Upfront.Settings && Upfront.Settings.l10n
		? Upfront.Settings.l10n.global.views
		: Upfront.mainData.l10n.global.views
	;

	var ElementSettings = Backbone.View.extend({
		id: 'settings',
		events: {
			'click .upfront-save_settings' : 'saveSettings',
			'click .upfront-cancel_settings' : 'cancelSettings'
		},

		initialize: function(opts) {
			this.options = opts;
			var me = this,
				panels = {},
				currentBreakpoint,
				breakpointsData,
				breakpointData;

			// Setup model so that it uses breakpoint values
			if (this.hasBreakpointSettings === true) {
				currentBreakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active();
				breakpointsData = this.model.get_property_value_by_name('breakpoint') || {};
				breakpointData = breakpointsData[currentBreakpoint.id] || {};
				// Breakpoint specific settings
				_.each(this.breakpointSpecificSettings, function(settingOptions) {
					if (!_.isUndefined(breakpointData[settingOptions.name])) {
						this.model.set_property(settingOptions.name, breakpointData[settingOptions.name], true);
					}
				}, this);
			}

			// Instantiate panels
			_.each(this.panels, function(panel, index) {
				if (index === 'Appearance') {
					this.appearancePanel = new PresetManager(
					_.extend(
							{
								hasBreakpointSettings: this.hasBreakpointSettings,
								breakpointSpecificPresetSettings: this.breakpointSpecificPresetSettings,
								model: this.model
							},
							panel
						)
					);

					this.listenTo(this.appearancePanel, 'upfront:presets:state_show', this.stateShow);

					panels.Appearance = this.appearancePanel;
					return;
				}
				if(_.isFunction(panel)) {
					panels[index] = new panel({ model: this.model });
				}
			}, this);

			// Hard wiring here instead having every element define advanced panel
			// because all elements have identical advanced settings panel
			panels.Advanced = new AdvancedSettings({model: this.model});

			// Have to do this because overwriting own property
			this.panels = panels;

			this.on('open', function(){
				me.model.trigger('settings:open', me);
			});
		},

		saveSettings: function() {
			var currentBreakpoint,
				breakpointsData;

			this.removePreviewClasses();

			// Setup model so that it saves breakpoint values to breakpoint property
			if (this.hasBreakpointSettings === true && this.breakpointSpecificSettings) {
				currentBreakpoint = Upfront.Views.breakpoints_storage.get_breakpoints().get_active();
				breakpointsData = this.model.get_property_value_by_name('breakpoint') || {};
				breakpointsData[currentBreakpoint.id] = breakpointsData[currentBreakpoint.id] || {};
				_.each(this.breakpointSpecificSettings, function(settingOptions) {
					breakpointsData[currentBreakpoint.id][settingOptions.name] = this.model.get_property_value_by_name(settingOptions.name);
					// Always save width to breakpoint, comes handy in public scripts
					breakpointsData[currentBreakpoint.id].width = currentBreakpoint.get('width');
				}, this);
				// Finally update breakpoints in model
				this.model.set_property('breakpoint', breakpointsData, true);
			}
			_.each(this.panels, function(panel){
				panel.save_settings();
			});

			this.model.get("properties").trigger('change');
			Upfront.Events.trigger("element:settings:saved");
			Upfront.Events.trigger("element:settings:deactivate");
			if ( _upfront_post_data.layout.specificity && _upfront_post_data.layout.item && !_upfront_post_data.layout.item.match(/-page/) )
				Upfront.Events.trigger("command:layout:save_as");
			else
				Upfront.Events.trigger("command:layout:save");

			if (this.onSaveSettings) this.onSaveSettings();
		},

		cancelSettings: function() {
			this.removePreviewClasses();
			Upfront.Events.trigger("element:settings:canceled");
		},

		stateShow: function(state) {
			var elementContainer = this.for_view.$el.find('.upfront-object');
			if(state !== "static") {
				this.removePreviewClasses();
				elementContainer.addClass('live-preview-' + state);
			} else {
				this.removePreviewClasses();
			}
		},

		removePreviewClasses: function() {
			var elementContainer = this.for_view.$el.find('.upfront-object');
			elementContainer.removeClass('live-preview-hover live-preview-focus live-preview-active');
		},

		render: function () {
			var me = this;

			this.$el
				.html(
					'<div class="upfront-settings-title">' + this.title + '</div><div id="sidebar-scroll-wrapper" />'
				)
			;

			/*
			 * This event is broadcast so that other plugins can register their
			 * own Upfront element for the CSS Editor before the settings panel
			 * is displayed.
			 *
			 * Example:
			 * Upfront.Events.on( 'settings:prepare', function() {
			 *   args = {label: 'My Element', id: 'my_element'};
			 *   Upfront.Application.cssEditor.elementTypes['ElementModel'] = args;
			 * });
			 */
			Upfront.Events.trigger("settings:prepare");

			_.each(this.panels, function (panel) {
				panel.render();
				panel.parent_view = me;
				me.$el.find('#sidebar-scroll-wrapper').append(panel.el);
			});

			this.$el.addClass('upfront-ui');
			this.$el.append(
				"<div class='upfront-settings-button_panel'>" +
					"<button type='button' class='upfront-cancel_settings'>" + l10n.cancel + "</button>" +
					"<button type='button' class='upfront-save_settings'><i class='icon-ok'></i> " + l10n.save_element + "</button>" +
				'</div>'
			);
		},

		cleanUp: function(){
			if (this.panels) {
				_.each(this.panels, function(panel){
					if (panel.cleanUp) panel.cleanUp();
				});
			}
			this.remove();
		}
	});

	return ElementSettings;
});
})(jQuery);


define('text!elements/upfront-accordion/tpl/preset-style.html',[],function () { return '.upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-title,\n.upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-title p {\n\t<?php if(!empty($properties[\'static-header-bg-color\'])) { ?>background: <?php echo $properties[\'static-header-bg-color\'] ?>; <?php } ?>\n\t<?php if(!empty($properties[\'static-font-color\'])) { ?>color: <?php echo $properties[\'static-font-color\']  ?>; <?php } ?>\n\t<?php if(!empty($properties[\'static-font-family\'])) { ?>font-family: <?php echo $properties[\'static-font-family\']  ?>; <?php } ?>\n\t<?php if(!empty($properties[\'static-font-size\'])) { ?>font-size: <?php echo $properties[\'static-font-size\']  ?>px; <?php } ?>\n\t<?php if(!empty($properties[\'static-weight\'])) { ?>font-weight: <?php echo $properties[\'static-weight\']  ?>;<?php } ?>\n\t<?php if(!empty($properties[\'static-style\'])) { ?>font-style: <?php echo $properties[\'static-style\']  ?>;<?php } ?>\n\t<?php if(!empty($properties[\'static-line-height\'])) { ?>line-height: <?php echo $properties[\'static-line-height\']  ?>;<?php } ?>\n\t<?php if(!empty($properties[\'static-useborder\'])) { ?>\n        <?php if(!empty($properties[\'static-borderwidth\']) && !empty($properties[\'static-bordertype\']) && !empty($properties[\'static-bordercolor\'])) { ?>border: <?php echo $properties[\'static-borderwidth\'] ?>px <?php echo $properties[\'static-bordertype\'] ?> <?php echo $properties[\'static-bordercolor\'] ?>;<?php } ?>\n    <?php } else { ?>\n        border: none;\n    <?php } ?>\n\t<?php if(!empty($properties[\'hover-use-animation\'])) { ?>\n\t\ttransition: all <?php echo $properties[\'hover-transition-duration\']  ?>s <?php echo $properties[\'hover-transition-easing\']  ?>;\n\t<?php } else { ?>\n\t\ttransition: none;\n\t<?php } ?>\n}\n\n.upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-title:hover,\n.upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-title:hover p,\n.upfront-accordion.<?php echo $properties[\'id\']  ?>.live-preview-hover .upfront-accordion-container .accordion-panel-title {\n\t<?php if(!empty($properties[\'hover-use-colors\'])) { ?>\n\t\t<?php if(!empty($properties[\'hover-header-bg-color\'])) { ?>background: <?php echo $properties[\'hover-header-bg-color\'] ?>; <?php } ?>\n\t<?php } else { ?>\n\t\t<?php if(!empty($properties[\'static-header-bg-color\'])) { ?>background: <?php echo $properties[\'static-header-bg-color\'] ?>; <?php } ?>\n\t<?php } ?>\n\t<?php if(!empty($properties[\'hover-use-typography\'])) { ?>\n\t\t<?php if(!empty($properties[\'hover-font-color\'])) { ?>color: <?php echo $properties[\'hover-font-color\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'hover-font-family\'])) { ?>font-family: <?php echo $properties[\'hover-font-family\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'hover-font-size\'])) { ?>font-size: <?php echo $properties[\'hover-font-size\']  ?>px; <?php } ?>\n\t\t<?php if(!empty($properties[\'hover-weight\'])) { ?>font-weight: <?php echo $properties[\'hover-weight\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'hover-style\'])) { ?>font-style: <?php echo $properties[\'hover-style\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'hover-line-height\'])) { ?>line-height: <?php echo $properties[\'hover-line-height\']  ?>;<?php } ?>\n\t<?php } else { ?>\n\t\t<?php if(!empty($properties[\'static-font-color\'])) { ?>color: <?php echo $properties[\'static-font-color\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'static-font-family\'])) { ?>font-family: <?php echo $properties[\'static-font-family\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'static-font-size\'])) { ?>font-size: <?php echo $properties[\'static-font-size\']  ?>px; <?php } ?>\n\t\t<?php if(!empty($properties[\'static-weight\'])) { ?>font-weight: <?php echo $properties[\'static-weight\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'static-style\'])) { ?>font-style: <?php echo $properties[\'static-style\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'static-line-height\'])) { ?>line-height: <?php echo $properties[\'static-line-height\']  ?>;<?php } ?>\n\t<?php } ?>\n\t<?php if(!empty($properties[\'hover-useborder\'])) { ?>\n        <?php if(!empty($properties[\'hover-borderwidth\']) && !empty($properties[\'hover-bordertype\']) && !empty($properties[\'hover-bordercolor\'])) { ?>border: <?php echo $properties[\'hover-borderwidth\'] ?>px <?php echo $properties[\'hover-bordertype\'] ?> <?php echo $properties[\'hover-bordercolor\'] ?>;<?php } ?>\n    <?php } else { ?>\n        border: none;\n    <?php } ?>\n}\n\n.upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-active .accordion-panel-title,\n.upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-active .accordion-panel-title p,\n.upfront-accordion.<?php echo $properties[\'id\']  ?>.live-preview-active .upfront-accordion-container .accordion-panel-title {\n\t<?php if(!empty($properties[\'active-use-color\'])) { ?>\n\t\t<?php if(!empty($properties[\'active-header-bg-color\'])) { ?>background: <?php echo $properties[\'active-header-bg-color\'] ?>; <?php } ?>\n\t<?php } else { ?>\n\t\t<?php if(!empty($properties[\'static-header-bg-color\'])) { ?>background: <?php echo $properties[\'static-header-bg-color\'] ?>; <?php } ?>\n\t<?php } ?>\n\t<?php if(!empty($properties[\'active-use-typography\'])) { ?>\n\t\t<?php if(!empty($properties[\'active-font-color\'])) { ?>color: <?php echo $properties[\'active-font-color\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'active-font-family\'])) { ?>font-family: <?php echo $properties[\'active-font-family\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'active-font-size\'])) { ?>font-size: <?php echo $properties[\'active-font-size\']  ?>px; <?php } ?>\n\t\t<?php if(!empty($properties[\'active-weight\'])) { ?>font-weight: <?php echo $properties[\'active-weight\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'active-style\'])) { ?>font-style: <?php echo $properties[\'active-style\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'active-line-height\'])) { ?>line-height: <?php echo $properties[\'active-line-height\']  ?>;<?php } ?>\n\t<?php } else { ?>\n\t\t<?php if(!empty($properties[\'static-font-color\'])) { ?>color: <?php echo $properties[\'static-font-color\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'static-font-family\'])) { ?>font-family: <?php echo $properties[\'static-font-family\']  ?>; <?php } ?>\n\t\t<?php if(!empty($properties[\'static-font-size\'])) { ?>font-size: <?php echo $properties[\'static-font-size\']  ?>px; <?php } ?>\n\t\t<?php if(!empty($properties[\'static-weight\'])) { ?>font-weight: <?php echo $properties[\'static-weight\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'static-style\'])) { ?>font-style: <?php echo $properties[\'static-style\']  ?>;<?php } ?>\n\t\t<?php if(!empty($properties[\'static-line-height\'])) { ?>line-height: <?php echo $properties[\'static-line-height\']  ?>;<?php } ?>\n\t<?php } ?>\n\t<?php if(!empty($properties[\'active-useborder\'])) { ?>\n        <?php if(!empty($properties[\'active-borderwidth\']) && !empty($properties[\'active-bordertype\']) && !empty($properties[\'active-bordercolor\'])) { ?>border: <?php echo $properties[\'active-borderwidth\'] ?>px <?php echo $properties[\'active-bordertype\'] ?> <?php echo $properties[\'active-bordercolor\'] ?>;<?php } ?>\n    <?php } else { ?>\n        border: none;\n    <?php } ?>\n\ttransition: none;\n}\n#page .upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-content,\n#page .upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-content p {\n\t<?php if (!empty($properties[\'active-content-bg-color\'])) { ?>\n\t\tbackground: <?php echo $properties[\'active-content-bg-color\'] ?>;\n\t<?php } ?>\n\t<?php if(!empty($properties[\'global-useborder\'])) { ?>\n        <?php if(!empty($properties[\'global-borderwidth\']) && !empty($properties[\'global-bordertype\']) && !empty($properties[\'global-bordercolor\'])) { ?>border: <?php echo $properties[\'global-borderwidth\'] ?>px <?php echo $properties[\'global-bordertype\'] ?> <?php echo $properties[\'global-bordercolor\'] ?>;<?php } ?>\n\t<?php } ?>\n}\n#page .upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-title:after {\n\tborder-top-color: <?php echo $properties[\'static-triangle-icon-color\'] ?>;\n\tborder-left-color: transparent;\n}\n#page .upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-title:hover:after {\n\t<?php if(!empty($properties[\'hover-use-colors\'])) { ?>\n\tborder-top-color: <?php echo $properties[\'hover-triangle-icon-color\'] ?>;\n\t<?php } else { ?>\n\tborder-top-color: <?php echo $properties[\'static-triangle-icon-color\'] ?>;\n\t<?php } ?>\n\tborder-left-color: transparent;\n}\n#page .upfront-accordion-container.accordion-preset-<?php echo $properties[\'id\'] ?> .accordion-panel-active .accordion-panel-title:after {\n\tborder-top-color: transparent;\n\t<?php if(!empty($properties[\'active-use-color\'])) { ?>\n\t\tborder-left-color: <?php echo $properties[\'active-triangle-icon-color\'] ?>;\n\t<?php } else { ?>\n\t\tborder-left-color: <?php echo $properties[\'static-triangle-icon-color\'] ?>;\n\t<?php } ?>\n}\n\n<?php if(!empty($properties[\'preset_style\'])) { ?><?php echo $properties[\'preset_style\'] ?><?php } ?>\n';});

define('elements/upfront-accordion/js/settings',[
	'scripts/upfront/element-settings/settings',
	'scripts/upfront/preset-settings/util',
	'text!elements/upfront-accordion/tpl/preset-style.html'
], function(ElementSettings, Util, styleTpl) {
	var l10n = Upfront.Settings.l10n.accordion_element;

	var AccordionSettings = ElementSettings.extend({
		panels: {
			Appearance: {
				mainDataCollection: 'accordionPresets',
				styleElementPrefix: 'accordion-preset',
				ajaxActionSlug: 'accordion',
				panelTitle: l10n.settings,
				styleTpl: styleTpl,
				presetDefaults: Upfront.mainData.presetDefaults.accordion,
				stateModules: {
					Global: [
						{
							moduleType: 'Colors',
							options: {
								title: l10n.content_area_colors_label,
								multiple: false,
								single: true,
								abccolors: [
									{
										name: 'active-content-bg-color',
										label: l10n.content_area_bg_label
									},
								]
							}
						},
						{
							moduleType: 'Border',
							options: {
								state: 'static',
								title: '',
								fields: {
									use: 'global-useborder',
									width: 'global-borderwidth',
									type: 'global-bordertype',
									color: 'global-bordercolor',
								}
							}
						}
					],
					Static: [
						{
							moduleType: 'Colors',
							toggle: false,
							options: {
								title: l10n.colors_label,
								abccolors: [
									{
										name: 'static-header-bg-color',
										label: l10n.header_bg_label
									},
									{
										name: 'static-triangle-icon-color',
										label: l10n.triangle_icon_label
									}
								]
							}
						},
						{
							moduleType: 'Typography',
							toggle: false,
							options: {
								state: 'static',
								title: l10n.typography_tab_label,
								fields: {
									typeface: 'static-font-family',
									fontstyle: 'static-font-style',
									weight: 'static-weight',
									style: 'static-style',
									size: 'static-font-size',
									line_height: 'static-line-height',
									color: 'static-font-color',
								}
							}
						},
						{
							moduleType: 'Border',
							options: {
								state: 'static',
								title: '',
								fields: {
									use: 'static-useborder',
									width: 'static-borderwidth',
									type: 'static-bordertype',
									color: 'static-bordercolor',
								}
							}
						}
					],
					Hover: [
						{
							moduleType: 'Colors',
							options: {
								title: l10n.colors_label,
								toggle: true,
								prepend: 'hover-',
								prefix: 'static',
								fields: {
									use: 'hover-use-colors'
								},
								abccolors: [
									{
										name: 'hover-header-bg-color',
										label: l10n.header_bg_label
									},
									{
										name: 'hover-triangle-icon-color',
										label: l10n.triangle_icon_label
									}
								]
							}
						},
						{
							moduleType: 'Typography',
							options: {
								state: 'hover',
								toggle: true,
								prepend: 'hover-',
								prefix: 'static',
								title: l10n.typography_tab_label,
								fields: {
									use: 'hover-use-typography',
									typeface: 'hover-font-family',
									fontstyle: 'hover-font-style',
									weight: 'hover-weight',
									style: 'hover-style',
									size: 'hover-font-size',
									line_height: 'hover-line-height',
									color: 'hover-font-color',
								}
							}
						},
						{
							moduleType: 'Border',
							options: {
								state: 'hover',
								title: '',
								prepend: 'hover-',
								prefix: 'static',
								fields: {
									use: 'hover-useborder',
									width: 'hover-borderwidth',
									type: 'hover-bordertype',
									color: 'hover-bordercolor',
								}
							}
						},
						{
							moduleType: 'HovAnimation',
							options: {
								state: 'hover',
								title: '',
								toggle: true,
								fields: {
									use: 'hover-use-animation',
									duration: 'hover-transition-duration',
									easing: 'hover-transition-easing',
								}
							}
						}
					],
					Active: [
						{
							moduleType: 'Colors',
							options: {
								title: l10n.colors_label,
								toggle: true,
								prepend: 'active-',
								prefix: 'static',
								fields: {
									use: 'active-use-color'
								},
								abccolors: [
									{
										name: 'active-header-bg-color',
										label: l10n.header_bg_label
									},
									{
										name: 'active-triangle-icon-color',
										label: l10n.triangle_icon_label
									}
								]
							}
						},
						{
							moduleType: 'Typography',
							options: {
								state: 'active',
								toggle: true,
								prepend: 'active-',
								prefix: 'static',
								title: l10n.typography_tab_label,
								fields: {
									use: 'active-use-typography',
									typeface: 'active-font-family',
									fontstyle: 'active-font-style',
									weight: 'active-weight',
									style: 'active-style',
									size: 'active-font-size',
									line_height: 'active-line-height',
									color: 'active-font-color',
								}
							}
						},
						{
							moduleType: 'Border',
							options: {
								state: 'active',
								title: '',
								prepend: 'active-',
								prefix: 'static',
								fields: {
									use: 'active-useborder',
									width: 'active-borderwidth',
									type: 'active-bordertype',
									color: 'active-bordercolor',
								}
							}
						}
					]
				},
				
				migratePresetProperties: function(newPreset) {
					
					var preset = this.property('preset') ? this.clear_preset_name(this.property('preset')) : 'default',
						props = this.presets.findWhere({id: preset}),
						obj = {};

					_.each(props.attributes, function(preset_value, index) {
						
						if(index === 'id' || index === 'name' || index === 'theme_preset') {
							return;
						}
						
						obj[index] = preset_value;
					});
					
					//Migrate properties from existing preset
					newPreset.set(obj);
				},
			}
		},
		title: 'Accordion Settings'
	});

	// Generate presets styles to page
	Util.generatePresetsToPage('accordion', styleTpl);

	return AccordionSettings;
});


define('text!elements/upfront-accordion/tpl/uaccordion.html',[],function () { return '<div class="upfront-accordion-container accordion-preset-<?php echo $preset ?>">\r\n\t<div class="upfront-accordion-wrap">\r\n        <!-- <b class="upfront-entity_meta upfront-ui">\r\n            <a href="#" class="upfront-icon-button upfront-icon-button-accordion-add-panel accordion-add-panel"></a>\r\n        </b> -->\r\n        <?php for ($i = 0; $i < $accordion_count; $i++) { ?>\r\n        <div class="accordion-panel <?php if($i === 0) { ?>accordion-panel-active<?php } ?>">\r\n            <div class="accordion-panel-title" id="title_<?php echo $element_id ?>-<?php echo $i ?>"><?php echo $accordion[$i][\'title\'] ?></div>\r\n            <div id="<?php echo $element_id ?>-<?php echo $i ?>" class="accordion-panel-content">\r\n                <?php echo $accordion[$i][\'content\'] ?>\r\n            </div>\r\n            <i>x</i>\r\n        </div>\r\n        <?php } ?>\r\n    </div>\r\n</div>\r\n';});

(function ($) {
define('uaccordion',[
	'elements/upfront-accordion/js/model',
	'elements/upfront-accordion/js/element',
	'elements/upfront-accordion/js/settings',
	'scripts/upfront/preset-settings/util',
	'text!elements/upfront-accordion/tpl/uaccordion.html',
	'text!elements/upfront-accordion/tpl/preset-style.html'
], function(UaccordionModel, AccordionElement, AccordionSettings, PresetUtil, accordionTpl, settingsStyleTpl) {

	var l10n = Upfront.Settings.l10n.accordion_element;

	var UaccordionView = Upfront.Views.ObjectView.extend({
		model: UaccordionModel,
		currentEditItem: '',
		accordionTpl: Upfront.Util.template(accordionTpl),
		elementSize: {width: 0, height: 0},

		initialize: function(){
			if(! (this.model instanceof UaccordionModel)){
				this.model = new UaccordionModel({properties: this.model.get('properties')});
			}
			this.events = _.extend({}, this.events, {
				'click .accordion-panel-title': 'onPanelTitleClick',
				'dblclick .accordion-panel-title': 'onPanelTitleDblClick',
				'click i': 'deletePanel'
			});
			this.delegateEvents();

			this.model.get('properties').bind('change', this.render, this);
			this.model.get('properties').bind('change', this.handle_visual_padding_hint, this);
			this.model.get('properties').bind('add', this.render, this);
			this.model.get('properties').bind('remove', this.render, this);

			Upfront.Events.on('entity:deactivated', this.stopEdit, this);

			this.listenTo(Upfront.Events, "theme_colors:update", this.update_colors, this);
		},
		update_colors: function () {
			var me = this,
				preset = this.model.get_property_value_by_name("preset"),
				props = PresetUtil.getPresetProperties('accordion', preset) || {}
			;
			
			if (_.size(props) <= 0) return false; // No properties, carry on

			PresetUtil.updatePresetStyle('accordion', props, settingsStyleTpl);

		},

		/**
		 * Stops content editing for the active panel
		 */
		stopEdit: function() {
			var $panelcontent = this.$el.find('.accordion-panel-active .accordion-panel-content');
			$panelcontent.each(function () {
				var $me = $(this),
					editor = $me.data('ueditor');

				if (editor && editor.stop) {
					editor.stop();
				}
			});

			var $paneltitle = this.$el.find('.accordion-panel .accordion-panel-title');
			$paneltitle.each(function () {
				var $me = $(this),
					editor = $me.data('ueditor');

				if (editor && editor.stop) {
					editor.stop();
				}
			});

			Upfront.Events.trigger('upfront:element:edit:stop');

		},
		addPanel: function(event) {
			event.preventDefault();
			this.property('accordion').push({
				title: l10n.panel_label + ' ' + (1 + this.property('accordion_count')),
				content: l10n.content_label.replace("</p>",   ' ' + (1 + this.property('accordion_count') + "</p>" ) ) // inject the number into p tag
			});
			this.property('accordion_count', this.property('accordion').length, false);
		},

		deletePanel: function(event) {
			var element = $(event.currentTarget);
			var panel = element.parents('.accordion-panel');
			var id = panel.index();
			this.property('accordion').splice(id, 1);
			this.property('accordion_count', this.property('accordion_count') - 1, false);
		},

		/**
		 * Toggle panels on title click
		 *
		 * @param {Object} event Event object
		 */
		onPanelTitleClick: function(event) {
			var $panelTitle = $(event.currentTarget),
				$panel_wrapper = $panelTitle.closest(".accordion-panel")
			;
			if (!$panel_wrapper.hasClass('accordion-panel-active')) {
				this.$el.find('.accordion-panel-content').each(function () {
					var ed = $(this).data('ueditor');
					if (ed) {
						ed.stop();
					}
				});

				$panel_wrapper.addClass('accordion-panel-active').find('.accordion-panel-content').slideDown();
				$panel_wrapper.siblings().removeClass('accordion-panel-active').find('.accordion-panel-content').slideUp();
			}
		},

		/**
		 * Activate title editor on panel double-click
		 *
		 * @param {Object} e Event object
		 */
		onPanelTitleDblClick: function (e) {
			var $panel = this.$el.find('.accordion-panel-active'),
				$title = $panel.find(".accordion-panel-title"),
				ed = $title.data("ueditor")
			;
			if (ed && ed.start && !ed.active) ed.start();
		},

/*
		saveTitle: function () {
			var panel = this.$el.find('.accordion-panel-active'),
				$content = panel.find('.accordion-panel-title'),
				panelId = panel.index(),
				ed = $content.data('ueditor'),
				text = ''
			;
			try { text = ed.getValue(true); } catch (e) { text = ''; }

			this.property('accordion')[panelId].title = text || $content.html();
			if (text) {
				this.render();
			}
		},
		savePanelContent: function() {
			var panel = this.$el.find('.accordion-panel-active'),
				$content = panel.find('.accordion-panel-content'),
				panelId = panel.index(),
				ed = $content.data('ueditor'),
				text = ''
			;
			try { text = ed.getValue(true); } catch (e) { text = ''; }

			this.property('accordion')[panelId].content = text || $content.html();
			if (text) {
				this.render();
			}
		},
*/

		/**
		 * Save both the title and content of the edited panel
		 *
		 * This method is used instead of (and deprecates) the dedicated individuals methods above.
		 */
		save_panel_content: function () {
			var $panel = this.$el.find('.accordion-panel-active'),
				panelId = $panel.index(),
				$content = $panel.find('.accordion-panel-content'),
				$title = $panel.find('.accordion-panel-title'),
				content_ed = $content.data('ueditor'),
				title_ed = $title.data('ueditor'),
				content = '',
				title = ''
			;
			try { content = content_ed.getValue(true); } catch (e) { content = ''; }
			try { title = title_ed.getValue(true); } catch (e) { title = ''; }

			this.property('accordion')[panelId].content = content || $content.html();
			this.property('accordion')[panelId].title = title || $title.html();
		},


		get_content_markup: function () {
			var props = this.extract_properties();

			props.preset = props.preset || 'default';
			props.show_add = true;
			props.show_remove = this.property('accordion_count') > 1 ? true : false;

			return this.accordionTpl(props);
		},

		extract_properties: function() {
			var props = {};
			this.model.get('properties').each(function(prop){
				props[prop.get('name')] = prop.get('value');
			});
			return props;
		},

		on_render: function () {
			var count = 1,
				self = this
			;
			this.$el.find('.accordion-panel-title').each(function () {
				var $title = $(this);
				if ($title.data('ueditor')) {
					return true;
				}
				$title
					.ueditor({
						linebreaks: false,
						disableLineBreak: true,
						airButtons: false,
						placeholder: 'Panel '+count
					})
					.on('start', function () {
						Upfront.Events.trigger('upfront:element:edit:start', 'text');
					})
					.on('stop', function () {
						self.save_panel_content();
						self.render();
						Upfront.Events.trigger('upfront:element:edit:stop');
					})
					.on('syncAfter', function () { self.save_panel_content(); })
					.on('keydown', function (e) {
						// ... so apparently, `linebreaks` argument above wreaks havoc on everything when set to `true`,
						// and `disableLineBreak` does nothing.
						// Very well then, do it ourselves.
						if (13 === e.which) return false;
						if (e.which === 9) {
							e.preventDefault();
							self.editContent();
						}
					})
					.addClass('uf-click-to-edit-text')
				;

				$title.data('ueditor').stop();
				count++;
			});
			self.$el.find('.accordion-panel-content').each(function() {
				var $me = $(this);
				if ($me.data('ueditor')) {
					return true;
				}
				$me
					.ueditor({
						linebreaks: false,
						inserts: {},
						autostart: false
					})
					.on('start', function(){
						Upfront.Events.trigger('upfront:element:edit:start');
					})
					.on('syncAfter', function () { self.save_panel_content(); })
					.on('stop', function(){
						self.save_panel_content();
						self.render();
						Upfront.Events.trigger('upfront:element:edit:stop');
					})
				;
			});
			this.$el.find('.accordion-panel:not(.accordion-panel-active) .accordion-panel-content').hide();

		},

		editContent: function() {
			this.$el.find('.accordion-panel-active .accordion-panel-content').data('ueditor').start();
			setTimeout(function() {
				Upfront.Events.trigger('upfront:element:edit:start');
			}, 250);
		},

		addTooltips: function() {
			$('.accordion-panel').each(function() {
				var span = $(this).find('span')[0];
				if (span.offsetWidth < span.scrollWidth) {
					$(this).attr('title', $(span).text().trim());
				}
			});
		},

		property: function(name, value, silent) {
			if(typeof value !== 'undefined'){
				if(typeof silent === 'undefined') {
					silent = true;
				}
				return this.model.set_property(name, value, silent);
			}
			return this.model.get_property_value_by_name(name);
		},

		getControlItems: function(){
			return _([
				this.createControl('add', l10n.add_panel, 'addPanel'),
				this.createPaddingControl(),
				this.createControl('settings', l10n.settings, 'on_settings_click')
			]);
		}
	});

		Upfront.Application.LayoutEditor.add_object('Uaccordion', {
			'Model': UaccordionModel,
			'View': UaccordionView,
			'Element': AccordionElement,
			'Settings': AccordionSettings,
			'anchor': {
				is_target: false
			},
			cssSelectors: {
				'.accordion-panel': {label: l10n.css.containers_label, info: l10n.css.containers_info},
				'.accordion-panel-title': {label: l10n.css.header_label, info: l10n.css.header_info},
				'.accordion-panel-active .accordion-panel-title': {label: l10n.css.active_header_label, info: l10n.css.active_header_info},
				'.accordion-panel-content': {label: l10n.css.body_label, info: l10n.css.body_info},
				'.accordion-panel:first-of-type' : {label: l10n.css.first_label, info: l10n.css.first_info},
				'.accordion-panel:last-child' : {label: l10n.css.last_label, info: l10n.css.last_info},
				'.accordion-panel:nth-child(2n+3)' : {label: l10n.css.odd_label, info: l10n.css.odd_info},
				'.accordion-panel:nth-child(2n)' : {label: l10n.css.even_label, info: l10n.css.even_info},
				'.upfront-accordion-wrap': {label: l10n.css.wrap, info: l10n.css.wrap_info}
			},
			cssSelectorsId: Upfront.data.uaccordion.defaults.type
		});

		Upfront.Models.UaccordionModel = UaccordionModel;
		Upfront.Views.UaccordionView = UaccordionView;

}); //End require

})(jQuery);

/*
    Redactor v10.0.9
    Updated: March 16, 2015

    http://imperavi.com/redactor/

    Copyright (c) 2009-2015, Imperavi LLC.
    License: http://imperavi.com/redactor/license/

    Usage: $('#content').redactor();
*/

(function($)
{
    'use strict';

    if (!Function.prototype.bind)
    {
        Function.prototype.bind = function(scope)
        {
            var fn = this;
            return function()
            {
                return fn.apply(scope);
            };
        };
    }

    var uuid = 0;

    var reUrlYoutube = /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube\.com\S*[^\w\-\s])([\w\-]{11})(?=[^\w\-]|$)(?![?=&+%\w.\-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig;
    var reUrlVimeo = /https?:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/;

    // Plugin
    $.fn.redactor = function(options)
    {
        var val = [];
        var args = Array.prototype.slice.call(arguments, 1);

        if (typeof options === 'string')
        {
            this.each(function()
            {
                var instance = $.data(this, 'redactor');
                var func;

                if (options.search(/\./) != '-1')
                {
                    func = options.split('.');
                    if (typeof instance[func[0]] != 'undefined')
                    {
                        func = instance[func[0]][func[1]];
                    }
                }
                else
                {
                    func = instance[options];
                }

                if (typeof instance !== 'undefined' && $.isFunction(func))
                {
                    var methodVal = func.apply(instance, args);
                    if (methodVal !== undefined && methodVal !== instance)
                    {
                        val.push(methodVal);
                    }
                }
                else
                {
                    $.error('No such method "' + options + '" for Redactor');
                }
            });
        }
        else
        {
            this.each(function()
            {
                $.data(this, 'redactor', {});
                $.data(this, 'redactor', Redactor(this, options));
            });
        }

        if (val.length === 0) return this;
        else if (val.length === 1) return val[0];
        else return val;

    };

    // Initialization
    function Redactor(el, options)
    {
        return new Redactor.prototype.init(el, options);
    }

    // Functionality
    $.Redactor = Redactor;
    $.Redactor.VERSION = '10.0.9';
    $.Redactor.modules = ['alignment', 'autosave', 'block', 'buffer', 'build', 'button',
                          'caret', 'clean', 'code', 'core', 'dropdown', 'file', 'focus',
                          'image', 'indent', 'inline', 'insert', 'keydown', 'keyup',
                          'lang', 'line', 'link', 'list', 'modal', 'observe', 'paragraphize',
                          'paste', 'placeholder', 'progress', 'selection', 'shortcuts',
                          'tabifier', 'tidy',  'toolbar', 'upload', 'utils'];

    $.Redactor.opts = {

        // settings
        lang: 'en',
        direction: 'ltr', // ltr or rtl

        plugins: false, // array

        focus: false,
        focusEnd: false,

        placeholder: false,

        visual: true,
        tabindex: false,

        minHeight: false,
        maxHeight: false,

        linebreaks: false,
        replaceDivs: true,
        paragraphize: true,
        cleanStyleOnEnter: false,
        enterKey: true,

        cleanOnPaste: true,
        cleanSpaces: true,
        pastePlainText: false,

        autosave: false, // false or url
        autosaveName: false,
        autosaveInterval: 60, // seconds
        autosaveOnChange: false,
        autosaveFields: false,

        linkTooltip: true,
        linkProtocol: 'http',
        linkNofollow: false,
        linkSize: 50,

        imageEditable: true,
        imageLink: true,
        imagePosition: true,
        imageFloatMargin: '10px',
        imageResizable: true,

        imageUpload: null,
        imageUploadParam: 'file',

        uploadImageField: false,

        dragImageUpload: true,

        fileUpload: null,
        fileUploadParam: 'file',

        dragFileUpload: true,

        s3: false,

        convertLinks: true,
        convertUrlLinks: true,
        convertImageLinks: true,
        convertVideoLinks: true,

        preSpaces: 4, // or false
        tabAsSpaces: false, // true or number of spaces
        tabKey: true,

        scrollTarget: false,

        toolbar: true,
        toolbarFixed: true,
        toolbarFixedTarget: document,
        toolbarFixedTopOffset: 0, // pixels
        toolbarExternal: false, // ID selector
        toolbarOverflow: false,

        source: true,
        buttons: ['html', 'formatting', 'bold', 'italic', 'deleted', 'unorderedlist', 'orderedlist',
                  'outdent', 'indent', 'image', 'file', 'link', 'alignment', 'horizontalrule'], // + 'underline'

        buttonsHide: [],
        buttonsHideOnMobile: [],

        formatting: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        formattingAdd: false,

        tabifier: true,

        deniedTags: ['script', 'style'],
        allowedTags: false, // or array

        removeComments: false,
        replaceTags: [
            ['strike', 'del']
        ],
        replaceStyles: [
            ['font-weight:\\s?bold', "strong"],
            ['font-style:\\s?italic', "em"],
            ['text-decoration:\\s?underline', "u"],
            ['text-decoration:\\s?line-through', 'del']
        ],
        removeDataAttr: false,

        removeAttr: false, // or multi array
        allowedAttr: false, // or multi array

        removeWithoutAttr: ['span'], // or false
        removeEmpty: ['p'], // or false;

        activeButtons: ['deleted', 'italic', 'bold', 'underline', 'unorderedlist', 'orderedlist',
                        'alignleft', 'aligncenter', 'alignright', 'justify'],
        activeButtonsStates: {
            b: 'bold',
            strong: 'bold',
            i: 'italic',
            em: 'italic',
            del: 'deleted',
            strike: 'deleted',
            ul: 'unorderedlist',
            ol: 'orderedlist',
            u: 'underline'
        },

        shortcuts: {
            'ctrl+shift+m, meta+shift+m': { func: 'inline.removeFormat' },
            'ctrl+b, meta+b': { func: 'inline.format', params: ['bold'] },
            'ctrl+i, meta+i': { func: 'inline.format', params: ['italic'] },
            'ctrl+h, meta+h': { func: 'inline.format', params: ['superscript'] },
            'ctrl+l, meta+l': { func: 'inline.format', params: ['subscript'] },
            'ctrl+k, meta+k': { func: 'link.show' },
            'ctrl+shift+7':   { func: 'list.toggle', params: ['orderedlist'] },
            'ctrl+shift+8':   { func: 'list.toggle', params: ['unorderedlist'] }
        },
        shortcutsAdd: false,

        // private
        buffer: [],
        rebuffer: [],
        emptyHtml: '<p>&#x200b;</p>',
        invisibleSpace: '&#x200b;',
        imageTypes: ['image/png', 'image/jpeg', 'image/gif'],
        indentValue: 20,
        verifiedTags:       ['a', 'img', 'b', 'strong', 'sub', 'sup', 'i', 'em', 'u', 'small', 'strike', 'del', 'cite', 'ul', 'ol', 'li'], // and for span tag special rule
        inlineTags:         ['strong', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small'],
        alignmentTags:      ['P', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6',  'DL', 'DT', 'DD', 'DIV', 'TD', 'BLOCKQUOTE', 'OUTPUT', 'FIGCAPTION', 'ADDRESS', 'SECTION', 'HEADER', 'FOOTER', 'ASIDE', 'ARTICLE'],
        blockLevelElements: ['PRE', 'UL', 'OL', 'LI'],


        // lang
        langs: {
            en: {
                html: 'HTML',
                video: 'Insert Video',
                image: 'Insert Image',
                table: 'Table',
                link: 'Link',
                link_insert: 'Insert link',
                link_edit: 'Edit link',
                unlink: 'Unlink',
                formatting: 'Formatting',
                paragraph: 'Normal text',
                quote: 'Quote',
                code: 'Code',
                header1: 'Header 1',
                header2: 'Header 2',
                header3: 'Header 3',
                header4: 'Header 4',
                header5: 'Header 5',
                bold: 'Bold',
                italic: 'Italic',
                fontcolor: 'Font Color',
                backcolor: 'Back Color',
                unorderedlist: 'Unordered List',
                orderedlist: 'Ordered List',
                outdent: 'Outdent',
                indent: 'Indent',
                cancel: 'Cancel',
                insert: 'Insert',
                save: 'Save',
                _delete: 'Delete',
                insert_table: 'Insert Table',
                insert_row_above: 'Add Row Above',
                insert_row_below: 'Add Row Below',
                insert_column_left: 'Add Column Left',
                insert_column_right: 'Add Column Right',
                delete_column: 'Delete Column',
                delete_row: 'Delete Row',
                delete_table: 'Delete Table',
                rows: 'Rows',
                columns: 'Columns',
                add_head: 'Add Head',
                delete_head: 'Delete Head',
                title: 'Title',
                image_position: 'Position',
                none: 'None',
                left: 'Left',
                right: 'Right',
                center: 'Center',
                image_web_link: 'Image Web Link',
                text: 'Text',
                mailto: 'Email',
                web: 'URL',
                video_html_code: 'Video Embed Code or Youtube/Vimeo Link',
                file: 'Insert File',
                upload: 'Upload',
                download: 'Download',
                choose: 'Choose',
                or_choose: 'Or choose',
                drop_file_here: 'Drop file here',
                align_left: 'Align text to the left',
                align_center: 'Center text',
                align_right: 'Align text to the right',
                align_justify: 'Justify text',
                horizontalrule: 'Insert Horizontal Rule',
                deleted: 'Deleted',
                anchor: 'Anchor',
                link_new_tab: 'Open link in new tab',
                underline: 'Underline',
                alignment: 'Alignment',
                filename: 'Name (optional)',
                edit: 'Edit',
                upload_label: 'Drop file here or '

            }
        }
    };

    // Functionality
    Redactor.fn = $.Redactor.prototype = {

        keyCode: {
            BACKSPACE: 8,
            DELETE: 46,
            DOWN: 40,
            ENTER: 13,
            SPACE: 32,
            ESC: 27,
            TAB: 9,
            CTRL: 17,
            META: 91,
            SHIFT: 16,
            ALT: 18,
            RIGHT: 39,
            LEFT: 37,
            LEFT_WIN: 91
        },

        // Initialization
        init: function(el, options)
        {
            this.$element = $(el);
            this.uuid = uuid++;

            // if paste event detected = true
            this.rtePaste = false;
            this.$pasteBox = false;

            this.loadOptions(options);
            this.loadModules();

            // formatting storage
            this.formatting = {};

            // block level tags
            $.merge(this.opts.blockLevelElements, this.opts.alignmentTags);
            this.reIsBlock = new RegExp('^(' + this.opts.blockLevelElements.join('|' ) + ')$', 'i');

            // setup allowed and denied tags
            this.tidy.setupAllowed();

            // setup denied tags
            if (this.opts.deniedTags !== false)
            {
                var tags = ['html', 'head', 'link', 'body', 'meta', 'applet'];
                for (var i = 0; i < tags.length; i++)
                {
                    this.opts.deniedTags.push(tags[i]);
                }
            }

            // load lang
            this.lang.load();

            // extend shortcuts
            $.extend(this.opts.shortcuts, this.opts.shortcutsAdd);

            // start callback
            this.core.setCallback('start');

            // build
            this.start = true;
            this.build.run();
        },

        loadOptions: function(options)
        {
            this.opts = $.extend(
                {},
                $.extend(true, {}, $.Redactor.opts),
                this.$element.data(),
                options
            );
        },
        getModuleMethods: function(object)
        {
            return Object.getOwnPropertyNames(object).filter(function(property)
            {
                return typeof object[property] == 'function';
            });
        },
        loadModules: function()
        {
            var len = $.Redactor.modules.length;
            for (var i = 0; i < len; i++)
            {
                this.bindModuleMethods($.Redactor.modules[i]);
            }
        },
        bindModuleMethods: function(module)
        {
            if (typeof this[module] == 'undefined') return;

            // init module
            this[module] = this[module]();

            var methods = this.getModuleMethods(this[module]);
            var len = methods.length;

            // bind methods
            for (var z = 0; z < len; z++)
            {
                this[module][methods[z]] = this[module][methods[z]].bind(this);
            }
        },

        alignment: function()
        {
            return {
                left: function()
                {
                    this.alignment.set('');
                },
                right: function()
                {
                    this.alignment.set('right');
                },
                center: function()
                {
                    this.alignment.set('center');
                },
                justify: function()
                {
                    this.alignment.set('justify');
                },
                set: function(type)
                {
                    // focus
                    if (!this.utils.browser('msie')) this.$editor.focus();

                    this.buffer.set();
                    this.selection.save();

                    // get blocks
                    this.alignment.blocks = this.selection.getBlocks();
                    this.alignment.type = type;

                    // set alignment
                    if (this.alignment.isLinebreaksOrNoBlocks())
                    {
                        this.alignment.setText();
                    }
                    else
                    {
                        this.alignment.setBlocks();
                    }

                    // sync
                    this.selection.restore();
                    this.code.sync();
                },
                setText: function()
                {
                    var wrapper = this.selection.wrap('div');
                    $(wrapper).attr('data-tagblock', 'redactor').css('text-align', this.alignment.type);
                },
                setBlocks: function()
                {
                    $.each(this.alignment.blocks, $.proxy(function(i, el)
                    {
                        var $el = this.utils.getAlignmentElement(el);
                        if (!$el) return;

                        if (this.alignment.isNeedReplaceElement($el))
                        {
                            this.alignment.replaceElement($el);
                        }
                        else
                        {
                            this.alignment.alignElement($el);
                        }

                    }, this));
                },
                isLinebreaksOrNoBlocks: function()
                {
                    return (this.opts.linebreaks && this.alignment.blocks[0] === false);
                },
                isNeedReplaceElement: function($el)
                {
                    return (this.alignment.type === '' && typeof($el.data('tagblock')) !== 'undefined');
                },
                replaceElement: function($el)
                {
                    $el.replaceWith($el.html());
                },
                alignElement: function($el)
                {
                    $el.css('text-align', this.alignment.type);
                    this.utils.removeEmptyAttr($el, 'style');
                }
            };
        },
        autosave: function()
        {
            return {
                enable: function()
                {
                    if (!this.opts.autosave) return;

                    this.autosave.html = false;
                    this.autosave.name = (this.opts.autosaveName) ? this.opts.autosaveName : this.$textarea.attr('name');

                    if (this.opts.autosaveOnChange) return;
                    this.autosaveInterval = setInterval(this.autosave.load, this.opts.autosaveInterval * 1000);
                },
                onChange: function()
                {
                    if (!this.opts.autosaveOnChange) return;
                    this.autosave.load();
                },
                load: function()
                {
                    this.autosave.source = this.code.get();

                    if (this.autosave.html === this.autosave.source) return;
                    if (this.utils.isEmpty(this.autosave.source)) return;

                    // data
                    var data = {};
                    data['name'] = this.autosave.name;
                    data[this.autosave.name] = this.autosave.source;
                    data = this.autosave.getHiddenFields(data);

                    // ajax
                    var jsxhr = $.ajax({
                        url: this.opts.autosave,
                        type: 'post',
                        data: data
                    });

                    jsxhr.done(this.autosave.success);
                },
                getHiddenFields: function(data)
                {
                    if (this.opts.autosaveFields === false || typeof this.opts.autosaveFields !== 'object')
                    {
                        return data;
                    }

                    $.each(this.opts.autosaveFields, $.proxy(function(k, v)
                    {
                        if (v !== null && v.toString().indexOf('#') === 0) v = $(v).val();
                        data[k] = v;

                    }, this));

                    return data;

                },
                success: function(data)
                {
                    var json;
                    try
                    {
                        json = $.parseJSON(data);
                    }
                    catch(e)
                    {
                        //data has already been parsed
                        json = data;
                    }

                    var callbackName = (typeof json.error == 'undefined') ? 'autosave' :  'autosaveError';

                    this.core.setCallback(callbackName, this.autosave.name, json);
                    this.autosave.html = this.autosave.source;
                },
                disable: function()
                {
                    clearInterval(this.autosaveInterval);
                }
            };
        },
        block: function()
        {
            return {
                formatting: function(name)
                {
                    this.block.clearStyle = false;
                    var type, value;

                    if (typeof this.formatting[name].data != 'undefined') type = 'data';
                    else if (typeof this.formatting[name].attr != 'undefined') type = 'attr';
                    else if (typeof this.formatting[name]['class'] != 'undefined') type = 'class';

                    if (typeof this.formatting[name].clear != 'undefined')
                    {
                        this.block.clearStyle = true;
                    }

                    if (type) value = this.formatting[name][type];

                    this.block.format(this.formatting[name].tag, type, value);

                },
                format: function(tag, type, value)
                {
                    if (tag == 'quote') tag = 'blockquote';

                    var formatTags = ['p', 'pre', 'blockquote', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                    if ($.inArray(tag, formatTags) == -1) return;

                    this.block.isRemoveInline = (tag == 'pre' || tag.search(/h[1-6]/i) != -1);

                    // focus
                    if (!this.utils.browser('msie')) this.$editor.focus();

                    this.block.blocks = this.selection.getBlocks();

                    this.block.blocksSize = this.block.blocks.length;
                    this.block.type = type;
                    this.block.value = value;

                    this.buffer.set();
                    this.selection.save();

                    this.block.set(tag);

                    this.selection.restore();
                    this.code.sync();

                },
                set: function(tag)
                {
                    this.selection.get();
                    this.block.containerTag = this.range.commonAncestorContainer.tagName;

                    if (this.range.collapsed)
                    {
                        this.block.setCollapsed(tag);
                    }
                    else
                    {
                        this.block.setMultiple(tag);
                    }
                },
                setCollapsed: function(tag)
                {
                    var block = this.block.blocks[0];
                    if (block === false) return;

                    if (block.tagName == 'LI')
                    {
                        if (tag != 'blockquote') return;

                        this.block.formatListToBlockquote();
                        return;
                    }

                    var isContainerTable = (this.block.containerTag  == 'TD' || this.block.containerTag  == 'TH');
                    if (isContainerTable && !this.opts.linebreaks)
                    {

                        document.execCommand('formatblock', false, '<' + tag + '>');

                        block = this.selection.getBlock();
                        this.block.toggle($(block));

                    }
                    else if (block.tagName.toLowerCase() != tag)
                    {
                        if (this.opts.linebreaks && tag == 'p')
                        {
                            $(block).prepend('<br>').append('<br>');
                            this.utils.replaceWithContents(block);
                        }
                        else
                        {
                            var $formatted = this.utils.replaceToTag(block, tag);

                            this.block.toggle($formatted);

                            if (tag != 'p' && tag != 'blockquote') $formatted.find('img').remove();
                            if (this.block.isRemoveInline) this.utils.removeInlineTags($formatted);
                            if (tag == 'p' || this.block.headTag) $formatted.find('p').contents().unwrap();

                            this.block.formatTableWrapping($formatted);
                        }
                    }
                    else if (tag == 'blockquote' && block.tagName.toLowerCase() == tag)
                    {
                        // blockquote off
                        if (this.opts.linebreaks)
                        {
                            $(block).prepend('<br>').append('<br>');
                            this.utils.replaceWithContents(block);
                        }
                        else
                        {
                            var $el = this.utils.replaceToTag(block, 'p');
                            this.block.toggle($el);
                        }
                    }
                    else if (block.tagName.toLowerCase() == tag)
                    {
                        this.block.toggle($(block));
                    }

                    if (typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined')
                    {
                        $(block).removeAttr('class').removeAttr('style');
                    }

                },
                setMultiple: function(tag)
                {
                    var block = this.block.blocks[0];
                    var isContainerTable = (this.block.containerTag  == 'TD' || this.block.containerTag  == 'TH');

                    if (block !== false && this.block.blocksSize === 1)
                    {
                        if (block.tagName.toLowerCase() == tag &&  tag == 'blockquote')
                        {
                            // blockquote off
                            if (this.opts.linebreaks)
                            {
                                $(block).prepend('<br>').append('<br>');
                                this.utils.replaceWithContents(block);
                            }
                            else
                            {
                                var $el = this.utils.replaceToTag(block, 'p');
                                this.block.toggle($el);
                            }
                        }
                        else if (block.tagName == 'LI')
                        {
                            if (tag != 'blockquote') return;

                            this.block.formatListToBlockquote();
                        }
                        else if (this.block.containerTag == 'BLOCKQUOTE')
                        {
                            this.block.formatBlockquote(tag);
                        }
                        else if (this.opts.linebreaks && ((isContainerTable) || (this.range.commonAncestorContainer != block)))
                        {
                            this.block.formatWrap(tag);
                        }
                        else
                        {
                            if (this.opts.linebreaks && tag == 'p')
                            {
                                $(block).prepend('<br>').append('<br>');
                                this.utils.replaceWithContents(block);
                            }
                            else if (block.tagName === 'TD')
                            {
                                this.block.formatWrap(tag);
                            }
                            else
                            {
                                var $formatted = this.utils.replaceToTag(block, tag);

                                this.block.toggle($formatted);

                                if (this.block.isRemoveInline) this.utils.removeInlineTags($formatted);
                                if (tag == 'p' || this.block.headTag) $formatted.find('p').contents().unwrap();
                            }
                        }
                    }
                    else
                    {

                        if (this.opts.linebreaks || tag != 'p')
                        {
                            if (tag == 'blockquote')
                            {
                                var count = 0;
                                for (var i = 0; i < this.block.blocksSize; i++)
                                {
                                    if (this.block.blocks[i].tagName == 'BLOCKQUOTE') count++;
                                }

                                // only blockquote selected
                                if (count == this.block.blocksSize)
                                {
                                    $.each(this.block.blocks, $.proxy(function(i,s)
                                    {
                                        var $formatted = false;
                                        if (this.opts.linebreaks)
                                        {
                                            $(s).prepend('<br>').append('<br>');
                                            $formatted = this.utils.replaceWithContents(s);
                                        }
                                        else
                                        {
                                            $formatted = this.utils.replaceToTag(s, 'p');
                                        }

                                        if ($formatted && typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined')
                                        {
                                            $formatted.removeAttr('class').removeAttr('style');
                                        }

                                    }, this));

                                    return;
                                }

                            }


                            this.block.formatWrap(tag);
                        }
                        else
                        {
                            var classSize = 0;
                            var toggleType = false;
                            if (this.block.type == 'class')
                            {
                                toggleType = 'toggle';
                                classSize = $(this.block.blocks).filter('.' + this.block.value).length;

                                if (this.block.blocksSize == classSize) toggleType = 'toggle';
                                else if (this.block.blocksSize > classSize) toggleType = 'set';
                                else if (classSize === 0) toggleType = 'set';

                            }

                            var exceptTags = ['ul', 'ol', 'li', 'td', 'th', 'dl', 'dt', 'dd'];
                            $.each(this.block.blocks, $.proxy(function(i,s)
                            {
                                if ($.inArray(s.tagName.toLowerCase(), exceptTags) != -1) return;

                                var $formatted = this.utils.replaceToTag(s, tag);

                                if (toggleType)
                                {
                                    if (toggleType == 'toggle') this.block.toggle($formatted);
                                    else if (toggleType == 'remove') this.block.remove($formatted);
                                    else if (toggleType == 'set') this.block.setForce($formatted);
                                }
                                else this.block.toggle($formatted);

                                if (tag != 'p' && tag != 'blockquote') $formatted.find('img').remove();
                                if (this.block.isRemoveInline) this.utils.removeInlineTags($formatted);
                                if (tag == 'p' || this.block.headTag) $formatted.find('p').contents().unwrap();

                                if (typeof this.block.type == 'undefined' && typeof this.block.value == 'undefined')
                                {
                                    $formatted.removeAttr('class').removeAttr('style');
                                }


                            }, this));
                        }
                    }
                },
                setForce: function($el)
                {
                    // remove style and class if the specified setting
                    if (this.block.clearStyle)
                    {
                        $el.removeAttr('class').removeAttr('style');
                    }

                    if (this.block.type == 'class')
                    {
                        $el.addClass(this.block.value);
                        return;
                    }
                    else if (this.block.type == 'attr' || this.block.type == 'data')
                    {
                        $el.attr(this.block.value.name, this.block.value.value);
                        return;
                    }
                },
                toggle: function($el)
                {
                    // remove style and class if the specified setting
                    if (this.block.clearStyle)
                    {
                        $el.removeAttr('class').removeAttr('style');
                    }

                    if (this.block.type == 'class')
                    {
                        $el.toggleClass(this.block.value);
                        return;
                    }
                    else if (this.block.type == 'attr' || this.block.type == 'data')
                    {
                        if ($el.attr(this.block.value.name) == this.block.value.value)
                        {
                            $el.removeAttr(this.block.value.name);
                        }
                        else
                        {
                            $el.attr(this.block.value.name, this.block.value.value);
                        }

                        return;
                    }
                    else
                    {
                        $el.removeAttr('style class');
                        return;
                    }
                },
                remove: function($el)
                {
                    $el.removeClass(this.block.value);
                },
                formatListToBlockquote: function()
                {
                    var block = $(this.block.blocks[0]).closest('ul, ol');

                    $(block).find('ul, ol').contents().unwrap();
                    $(block).find('li').append($('<br>')).contents().unwrap();

                    var $el = this.utils.replaceToTag(block, 'blockquote');
                    this.block.toggle($el);
                },
                formatBlockquote: function(tag)
                {
                    document.execCommand('outdent');
                    document.execCommand('formatblock', false, tag);

                    this.clean.clearUnverified();
                    this.$editor.find('p:empty').remove();

                    var formatted = this.selection.getBlock();

                    if (tag != 'p')
                    {
                        $(formatted).find('img').remove();
                    }

                    if (!this.opts.linebreaks)
                    {
                        this.block.toggle($(formatted));
                    }

                    this.$editor.find('ul, ol, tr, blockquote, p').each($.proxy(this.utils.removeEmpty, this));

                    if (this.opts.linebreaks && tag == 'p')
                    {
                        this.utils.replaceWithContents(formatted);
                    }

                },
                formatWrap: function(tag)
                {
                    if (this.block.containerTag == 'UL' || this.block.containerTag == 'OL')
                    {
                        if (tag == 'blockquote')
                        {
                            this.block.formatListToBlockquote();
                        }
                        else
                        {
                            return;
                        }
                    }

                    var formatted = this.selection.wrap(tag);
                    if (formatted === false) return;

                    var $formatted = $(formatted);

                    this.block.formatTableWrapping($formatted);

                    var $elements = $formatted.find(this.opts.blockLevelElements.join(',') + ', td, table, thead, tbody, tfoot, th, tr');

                    if ((this.opts.linebreaks && tag == 'p') || tag == 'pre' || tag == 'blockquote')
                    {
                        $elements.append('<br />');
                    }

                    $elements.contents().unwrap();

                    if (tag != 'p' && tag != 'blockquote') $formatted.find('img').remove();

                    $.each(this.block.blocks, $.proxy(this.utils.removeEmpty, this));

                    $formatted.append(this.selection.getMarker(2));

                    if (!this.opts.linebreaks)
                    {
                        this.block.toggle($formatted);
                    }

                    this.$editor.find('ul, ol, tr, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
                    $formatted.find('blockquote:empty').remove();

                    if (this.block.isRemoveInline)
                    {
                        this.utils.removeInlineTags($formatted);
                    }

                    if (this.opts.linebreaks && tag == 'p')
                    {
                        this.utils.replaceWithContents($formatted);
                    }

                },
                formatTableWrapping: function($formatted)
                {
                    if ($formatted.closest('table').length === 0) return;

                    if ($formatted.closest('tr').length === 0) $formatted.wrap('<tr>');
                    if ($formatted.closest('td').length === 0 && $formatted.closest('th').length === 0)
                    {
                        $formatted.wrap('<td>');
                    }
                },
                removeData: function(name, value)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).removeAttr('data-' + name);

                    this.code.sync();
                },
                setData: function(name, value)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).attr('data-' + name, value);

                    this.code.sync();
                },
                toggleData: function(name, value)
                {
                    var blocks = this.selection.getBlocks();
                    $.each(blocks, function()
                    {
                        if ($(this).attr('data-' + name))
                        {
                            $(this).removeAttr('data-' + name);
                        }
                        else
                        {
                            $(this).attr('data-' + name, value);
                        }
                    });
                },
                removeAttr: function(attr, value)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).removeAttr(attr);

                    this.code.sync();
                },
                setAttr: function(attr, value)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).attr(attr, value);

                    this.code.sync();
                },
                toggleAttr: function(attr, value)
                {
                    var blocks = this.selection.getBlocks();
                    $.each(blocks, function()
                    {
                        if ($(this).attr(name))
                        {
                            $(this).removeAttr(name);
                        }
                        else
                        {
                            $(this).attr(name, value);
                        }
                    });
                },
                removeClass: function(className)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).removeClass(className);

                    this.utils.removeEmptyAttr(blocks, 'class');

                    this.code.sync();
                },
                setClass: function(className)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).addClass(className);

                    this.code.sync();
                },
                toggleClass: function(className)
                {
                    var blocks = this.selection.getBlocks();
                    $(blocks).toggleClass(className);

                    this.code.sync();
                }
            };
        },
        buffer: function()
        {
            return {
                set: function(type)
                {
                    if (typeof type == 'undefined' || type == 'undo')
                    {
                        this.buffer.setUndo();
                    }
                    else
                    {
                        this.buffer.setRedo();
                    }
                },
                setUndo: function()
                {
                    this.selection.save();
                    this.opts.buffer.push(this.$editor.html());
                    this.selection.restore();
                },
                setRedo: function()
                {
                    this.selection.save();
                    this.opts.rebuffer.push(this.$editor.html());
                    this.selection.restore();
                },
                getUndo: function()
                {
                    this.$editor.html(this.opts.buffer.pop());
                },
                getRedo: function()
                {
                    this.$editor.html(this.opts.rebuffer.pop());
                },
                add: function()
                {
                    this.opts.buffer.push(this.$editor.html());
                },
                undo: function()
                {
                    if (this.opts.buffer.length === 0) return;

                    this.buffer.set('redo');
                    this.buffer.getUndo();

                    this.selection.restore();

                    setTimeout($.proxy(this.observe.load, this), 50);
                },
                redo: function()
                {
                    if (this.opts.rebuffer.length === 0) return;

                    this.buffer.set('undo');
                    this.buffer.getRedo();

                    this.selection.restore();

                    setTimeout($.proxy(this.observe.load, this), 50);
                }
            };
        },
        build: function()
        {
            return {
                run: function()
                {
                    this.build.createContainerBox();
                    this.build.loadContent();
                    this.build.loadEditor();
                    this.build.enableEditor();
                    this.build.setCodeAndCall();
                },
                isTextarea: function()
                {
                    return (this.$element[0].tagName === 'TEXTAREA');
                },
                createContainerBox: function()
                {
                    this.$box = $('<div class="redactor-box" />');
                },
                createTextarea: function()
                {
                    this.$textarea = $('<textarea />').attr('name', this.build.getTextareaName());
                },
                getTextareaName: function()
                {
                    return ((typeof(name) == 'undefined')) ? 'content-' + this.uuid : this.$element.attr('id');
                },
                loadContent: function()
                {
                    var func = (this.build.isTextarea()) ? 'val' : 'html';
                    this.content = $.trim(this.$element[func]());
                },
                enableEditor: function()
                {
                    this.$editor.attr({ 'contenteditable': true, 'dir': this.opts.direction });
                },
                loadEditor: function()
                {
                    var func = (this.build.isTextarea()) ? 'fromTextarea' : 'fromElement';
                    this.build[func]();
                },
                fromTextarea: function()
                {
                    this.$editor = $('<div />');
                    this.$textarea = this.$element;
                    this.$box.insertAfter(this.$element).append(this.$editor).append(this.$element);
                    this.$editor.addClass('redactor-editor');

                    this.$element.hide();
                },
                fromElement: function()
                {
                    this.$editor = this.$element;
                    this.build.createTextarea();
                    this.$box.insertAfter(this.$editor).append(this.$editor).append(this.$textarea);
                    this.$editor.addClass('redactor-editor');

                    this.$textarea.hide();
                },
                setCodeAndCall: function()
                {
                    // set code
                    this.code.set(this.content);

                    this.build.setOptions();
                    this.build.callEditor();

                    // code mode
                    if (this.opts.visual) return;
                    setTimeout($.proxy(this.code.showCode, this), 200);
                },
                callEditor: function()
                {
                    this.build.disableMozillaEditing();
                    this.build.setEvents();
                    this.build.setHelpers();

                    // load toolbar
                    if (this.opts.toolbar)
                    {
                        this.opts.toolbar = this.toolbar.init();
                        this.toolbar.build();
                    }

                    // modal templates init
                    this.modal.loadTemplates();

                    // plugins
                    this.build.plugins();

                    // observers
                    setTimeout($.proxy(this.observe.load, this), 4);

                    // init callback
                    this.core.setCallback('init');
                },
                setOptions: function()
                {
                    // textarea direction
                    $(this.$textarea).attr('dir', this.opts.direction);

                    if (this.opts.linebreaks) this.$editor.addClass('redactor-linebreaks');

                    if (this.opts.tabindex) this.$editor.attr('tabindex', this.opts.tabindex);

                    if (this.opts.minHeight) this.$editor.css('minHeight', this.opts.minHeight);
                    if (this.opts.maxHeight) this.$editor.css('maxHeight', this.opts.maxHeight);

                },
                setEventDropUpload: function(e)
                {
                    e.preventDefault();

                    if (!this.opts.dragImageUpload || !this.opts.dragFileUpload) return;

                    var files = e.dataTransfer.files;
                    this.upload.directUpload(files[0], e);
                },
                setEventDrop: function(e)
                {
                    this.code.sync();
                    setTimeout(this.clean.clearUnverified, 1);
                    this.core.setCallback('drop', e);
                },
                setEvents: function()
                {
                    // drop
                    this.$editor.on('drop.redactor', $.proxy(function(e)
                    {
                        e = e.originalEvent || e;

                        if (window.FormData === undefined || !e.dataTransfer) return true;

                        if (e.dataTransfer.files.length === 0)
                        {
                            return this.build.setEventDrop(e);
                        }
                        else
                        {
                            this.build.setEventDropUpload(e);
                        }

                        setTimeout(this.clean.clearUnverified, 1);
                        this.core.setCallback('drop', e);

                    }, this));


                    // click
                    this.$editor.on('click.redactor', $.proxy(function(e)
                    {
                        var event = this.core.getEvent();
                        var type = (event == 'click' || event == 'arrow') ? false : 'click';

                        this.core.addEvent(type);
                        this.utils.disableSelectAll();
                        this.core.setCallback('click', e);

                    }, this));

                    // paste
                    this.$editor.on('paste.redactor', $.proxy(this.paste.init, this));

                    // keydown
                    this.$editor.on('keydown.redactor', $.proxy(this.keydown.init, this));

                    // keyup
                    this.$editor.on('keyup.redactor', $.proxy(this.keyup.init, this));

                    // textarea keydown
                    if ($.isFunction(this.opts.codeKeydownCallback))
                    {
                        this.$textarea.on('keydown.redactor-textarea', $.proxy(this.opts.codeKeydownCallback, this));
                    }

                    // textarea keyup
                    if ($.isFunction(this.opts.codeKeyupCallback))
                    {
                        this.$textarea.on('keyup.redactor-textarea', $.proxy(this.opts.codeKeyupCallback, this));
                    }

                    // focus
                    if ($.isFunction(this.opts.focusCallback))
                    {
                        this.$editor.on('focus.redactor', $.proxy(this.opts.focusCallback, this));
                    }

                    var clickedElement;
                    $(document).on('mousedown', function(e) { clickedElement = e.target; });

                    // blur
                    this.$editor.on('blur.redactor', $.proxy(function(e)
                    {
                        if (this.rtePaste) return;
                        if (!this.build.isBlured(clickedElement)) return;

                        this.utils.disableSelectAll();
                        if ($.isFunction(this.opts.blurCallback)) this.core.setCallback('blur', e);

                    }, this));
                },
                isBlured: function(clickedElement)
                {
                    var $el = $(clickedElement);

                    return (!$el.hasClass('redactor-toolbar, redactor-dropdown') && !$el.is('#redactor-modal') && $el.parents('.redactor-toolbar, .redactor-dropdown, #redactor-modal').length === 0);
                },
                setHelpers: function()
                {
                    // autosave
                    this.autosave.enable();

                    // placeholder
                    this.placeholder.enable();

                    // focus
                    if (this.opts.focus) setTimeout(this.focus.setStart, 100);
                    if (this.opts.focusEnd) setTimeout(this.focus.setEnd, 100);

                },
                plugins: function()
                {
                    if (!this.opts.plugins) return;
                    if (!RedactorPlugins) return;

                    $.each(this.opts.plugins, $.proxy(function(i, s)
                    {
                        if (typeof RedactorPlugins[s] === 'undefined') return;

                        if ($.inArray(s, $.Redactor.modules) !== -1)
                        {
                            $.error('Plugin name "' + s + '" matches the name of the Redactor\'s module.');
                            return;
                        }

                        if (!$.isFunction(RedactorPlugins[s])) return;

                        this[s] = RedactorPlugins[s]();

                        // get methods
                        var methods = this.getModuleMethods(this[s]);
                        var len = methods.length;

                        // bind methods
                        for (var z = 0; z < len; z++)
                        {
                            this[s][methods[z]] = this[s][methods[z]].bind(this);
                        }

                        if ($.isFunction(this[s].init)) this[s].init();


                    }, this));

                },
                disableMozillaEditing: function()
                {
                    if (!this.utils.browser('mozilla')) return;

                    // FF fix
                    try {
                        document.execCommand('enableObjectResizing', false, false);
                        document.execCommand('enableInlineTableEditing', false, false);
                    } catch (e) {}
                }
            };
        },
        button: function()
        {
            return {
                build: function(btnName, btnObject)
                {
                    var $button = $('<a href="#" class="re-icon re-' + btnName + '" rel="' + btnName + '" />').attr('tabindex', '-1');

                    // click
                    if (btnObject.func || btnObject.command || btnObject.dropdown)
                    {
                        this.button.setEvent($button, btnName, btnObject);
                    }

                    // dropdown
                    if (btnObject.dropdown)
                    {
                        var $dropdown = $('<div class="redactor-dropdown redactor-dropdown-' +  + this.uuid + ' redactor-dropdown-box-' + btnName + '" style="display: none;">');
                        $button.data('dropdown', $dropdown);
                        this.dropdown.build(btnName, $dropdown, btnObject.dropdown);
                    }

                    // tooltip
                    if (this.utils.isDesktop())
                    {
                        this.button.createTooltip($button, btnName, btnObject.title);
                    }

                    return $button;
                },
                setEvent: function($button, btnName, btnObject)
                {
                    $button.on('touchstart click', $.proxy(function(e)
                    {
                        if ($button.hasClass('redactor-button-disabled')) return false;

                        var type = 'func';
                        var callback = btnObject.func;

                        if (btnObject.command)
                        {
                            type = 'command';
                            callback = btnObject.command;
                        }
                        else if (btnObject.dropdown)
                        {
                            type = 'dropdown';
                            callback = false;
                        }

                        this.button.onClick(e, btnName, type, callback);

                    }, this));
                },
                createTooltip: function($button, name, title)
                {
                    var $tooltip = $('<span>').addClass('redactor-toolbar-tooltip redactor-toolbar-tooltip-' + name).hide().html(title);
                    $tooltip.appendTo('body');

                    $button.on('mouseover', function()
                    {
                        if ($(this).hasClass('redactor-button-disabled')) return;

                        var pos = $button.offset();

                        $tooltip.show();
                        $tooltip.css({
                            top: (pos.top + $button.innerHeight()) + 'px',
                            left: (pos.left + $button.innerWidth()/2 - $tooltip.innerWidth()/2) + 'px'
                        });
                    });

                    $button.on('mouseout', function()
                    {
                        $tooltip.hide();
                    });

                },
                onClick: function(e, btnName, type, callback)
                {
                    this.button.caretOffset = this.caret.getOffset();

                    e.preventDefault();

                    if (this.utils.browser('msie')) e.returnValue = false;

                    if (type == 'command') this.inline.format(callback);
                    else if (type == 'dropdown') this.dropdown.show(e, btnName);
                    else this.button.onClickCallback(e, callback, btnName);
                },
                onClickCallback: function(e, callback, btnName)
                {
                    var func;

                    if ($.isFunction(callback)) callback.call(this, btnName);
                    else if (callback.search(/\./) != '-1')
                    {
                        func = callback.split('.');
                        if (typeof this[func[0]] == 'undefined') return;

                        this[func[0]][func[1]](btnName);
                    }
                    else this[callback](btnName);

                    this.observe.buttons(e, btnName);
                },
                get: function(key)
                {
                    return this.$toolbar.find('a.re-' + key);
                },
                setActive: function(key)
                {
                    this.button.get(key).addClass('redactor-act');
                },
                setInactive: function(key)
                {
                    this.button.get(key).removeClass('redactor-act');
                },
                setInactiveAll: function(key)
                {
                    if (typeof key === 'undefined')
                    {
                        this.$toolbar.find('a.re-icon').removeClass('redactor-act');
                    }
                    else
                    {
                        this.$toolbar.find('a.re-icon').not('.re-' + key).removeClass('redactor-act');
                    }
                },
                setActiveInVisual: function()
                {
                    this.$toolbar.find('a.re-icon').not('a.re-html').removeClass('redactor-button-disabled');
                },
                setInactiveInCode: function()
                {
                    this.$toolbar.find('a.re-icon').not('a.re-html').addClass('redactor-button-disabled');
                },
                changeIcon: function(key, classname)
                {
                    this.button.get(key).addClass('re-' + classname);
                },
                removeIcon: function(key, classname)
                {
                    this.button.get(key).removeClass('re-' + classname);
                },
                setAwesome: function(key, name)
                {
                    var $button = this.button.get(key);
                    $button.removeClass('redactor-btn-image').addClass('fa-redactor-btn');
                    $button.html('<i class="fa ' + name + '"></i>');
                },
                addCallback: function($btn, callback)
                {
                    var type = (callback == 'dropdown') ? 'dropdown' : 'func';
                    var key = $btn.attr('rel');
                    $btn.on('touchstart click', $.proxy(function(e)
                    {
                        if ($btn.hasClass('redactor-button-disabled')) return false;
                        this.button.onClick(e, key, type, callback);

                    }, this));
                },
                addDropdown: function($btn, dropdown)
                {
                    var key = $btn.attr('rel');
                    this.button.addCallback($btn, 'dropdown');

                    var $dropdown = $('<div class="redactor-dropdown redactor-dropdown-' +  + this.uuid + ' redactor-dropdown-box-' + key + '" style="display: none;">');
                    $btn.data('dropdown', $dropdown);

                    // build dropdown
                    if (dropdown) this.dropdown.build(key, $dropdown, dropdown);

                    return $dropdown;
                },
                add: function(key, title)
                {
                    if (!this.opts.toolbar) return;

                    var btn = this.button.build(key, { title: title });
                    btn.addClass('redactor-btn-image');

                    this.$toolbar.append($('<li>').append(btn));

                    return btn;
                },
                addFirst: function(key, title)
                {
                    if (!this.opts.toolbar) return;

                    var btn = this.button.build(key, { title: title });
                    btn.addClass('redactor-btn-image');
                    this.$toolbar.prepend($('<li>').append(btn));

                    return btn;
                },
                addAfter: function(afterkey, key, title)
                {
                    if (!this.opts.toolbar) return;

                    var btn = this.button.build(key, { title: title });
                    btn.addClass('redactor-btn-image');
                    var $btn = this.button.get(afterkey);

                    if ($btn.length !== 0) $btn.parent().after($('<li>').append(btn));
                    else this.$toolbar.append($('<li>').append(btn));

                    return btn;
                },
                addBefore: function(beforekey, key, title)
                {
                    if (!this.opts.toolbar) return;

                    var btn = this.button.build(key, { title: title });
                    btn.addClass('redactor-btn-image');
                    var $btn = this.button.get(beforekey);

                    if ($btn.length !== 0) $btn.parent().before($('<li>').append(btn));
                    else this.$toolbar.append($('<li>').append(btn));

                    return btn;
                },
                remove: function(key)
                {
                    this.button.get(key).remove();
                }
            };
        },
        caret: function()
        {
            return {
                setStart: function(node)
                {
                    // inline tag
                    if (!this.utils.isBlock(node))
                    {
                        var space = this.utils.createSpaceElement();

                        $(node).prepend(space);
                        this.caret.setEnd(space);
                    }
                    else
                    {
                        this.caret.set(node, 0, node, 0);
                    }
                },
                setEnd: function(node)
                {
                    this.caret.set(node, 1, node, 1);
                },
                set: function(orgn, orgo, focn, foco)
                {
                    // focus
                    // disabled in 10.0.7
                    // if (!this.utils.browser('msie')) this.$editor.focus();

                    orgn = orgn[0] || orgn;
                    focn = focn[0] || focn;

                    if (this.utils.isBlockTag(orgn.tagName) && orgn.innerHTML === '')
                    {
                        orgn.innerHTML = this.opts.invisibleSpace;
                    }

                    if (orgn.tagName == 'BR' && this.opts.linebreaks === false)
                    {
                        var parent = $(this.opts.emptyHtml)[0];
                        $(orgn).replaceWith(parent);
                        orgn = parent;
                        focn = orgn;
                    }

                    this.selection.get();

                    try
                    {
                        this.range.setStart(orgn, orgo);
                        this.range.setEnd(focn, foco);
                    }
                    catch (e) {}

                    this.selection.addRange();
                },
                setAfter: function(node)
                {
                    try
                    {
                        var tag = $(node)[0].tagName;

                        // inline tag
                        if (tag != 'BR' && !this.utils.isBlock(node))
                        {
                            var space = this.utils.createSpaceElement();

                            $(node).after(space);
                            this.caret.setEnd(space);
                        }
                        else
                        {
                            if (tag != 'BR' && this.utils.browser('msie'))
                            {
                                this.caret.setStart($(node).next());
                            }
                            else
                            {
                                this.caret.setAfterOrBefore(node, 'after');
                            }
                        }
                    }
                    catch (e)
                    {
                        var space = this.utils.createSpaceElement();
                        $(node).after(space);
                        this.caret.setEnd(space);
                    }
                },
                setBefore: function(node)
                {
                    // block tag
                    if (this.utils.isBlock(node))
                    {
                        this.caret.setEnd($(node).prev());
                    }
                    else
                    {
                        this.caret.setAfterOrBefore(node, 'before');
                    }
                },
                setAfterOrBefore: function(node, type)
                {
                    // focus
                    if (!this.utils.browser('msie')) this.$editor.focus();

                    node = node[0] || node;

                    this.selection.get();

                    if (type == 'after')
                    {
                        try {

                            this.range.setStartAfter(node);
                            this.range.setEndAfter(node);
                        }
                        catch (e) {}
                    }
                    else
                    {
                        try {
                            this.range.setStartBefore(node);
                            this.range.setEndBefore(node);
                        }
                        catch (e) {}
                    }


                    this.range.collapse(false);
                    this.selection.addRange();
                },
                getOffsetOfElement: function(node)
                {
                    node = node[0] || node;

                    this.selection.get();

                    var cloned = this.range.cloneRange();
                    cloned.selectNodeContents(node);
                    cloned.setEnd(this.range.endContainer, this.range.endOffset);

                    return $.trim(cloned.toString()).length;
                },
                getOffset: function()
                {
                    var offset = 0;
                    var sel = window.getSelection();

                    if (sel.rangeCount > 0)
                    {
                        var range = window.getSelection().getRangeAt(0);
                        var caretRange = range.cloneRange();
                        caretRange.selectNodeContents(this.$editor[0]);
                        caretRange.setEnd(range.endContainer, range.endOffset);
                        offset = caretRange.toString().length;
                    }

                    return offset;
                },
                setOffset: function(start, end)
                {
                    if (typeof end == 'undefined') end = start;
                    if (!this.focus.isFocused()) this.focus.setStart();

                    var sel = this.selection.get();
                    var node, offset = 0;
                    var walker = document.createTreeWalker(this.$editor[0], NodeFilter.SHOW_TEXT, null, null);

                    while (node = walker.nextNode())
                    {
                        offset += node.nodeValue.length;
                        if (offset > start)
                        {
                            this.range.setStart(node, node.nodeValue.length + start - offset);
                            start = Infinity;
                        }

                        if (offset >= end)
                        {
                            this.range.setEnd(node, node.nodeValue.length + end - offset);
                            break;
                        }
                    }

                    this.range.collapse(false);
                    this.selection.addRange();
                },
                // deprecated
                setToPoint: function(start, end)
                {
                    this.caret.setOffset(start, end);
                },
                getCoords: function()
                {
                    return this.caret.getOffset();
                }
            };
        },
        clean: function()
        {
            return {
                onSet: function(html)
                {
                    html = this.clean.savePreCode(html);

                    // convert script tag
                    html = html.replace(/<script(.*?[^>]?)>([\w\W]*?)<\/script>/gi, '<pre class="redactor-script-tag" style="display: none;" $1>$2</pre>');

                    // replace dollar sign to entity
                    html = html.replace(/\$/g, '&#36;');

                    // replace special characters in links
                    html = html.replace(/<a href="(.*?[^>]?)Â®(.*?[^>]?)">/gi, '<a href="$1&reg$2">');

                    if (this.opts.replaceDivs) html = this.clean.replaceDivs(html);
                    if (this.opts.linebreaks)  html = this.clean.replaceParagraphsToBr(html);

                    // save form tag
                    html = this.clean.saveFormTags(html);

                    // convert font tag to span
                    var $div = $('<div>');
                    $div.html(html);
                    var fonts = $div.find('font[style]');
                    if (fonts.length !== 0)
                    {
                        fonts.replaceWith(function()
                        {
                            var $el = $(this);
                            var $span = $('<span>').attr('style', $el.attr('style'));
                            return $span.append($el.contents());
                        });

                        html = $div.html();
                    }
                    $div.remove();

                    // remove font tag
                    html = html.replace(/<font(.*?[^<])>/gi, '');
                    html = html.replace(/<\/font>/gi, '');

                    // tidy html
                    html = this.tidy.load(html);

                    // paragraphize
                    if (this.opts.paragraphize) html = this.paragraphize.load(html);

                    // verified
                    html = this.clean.setVerified(html);

                    // convert inline tags
                    html = this.clean.convertInline(html);

                    return html;
                },
                onSync: function(html)
                {
                    // remove spaces
                    html = html.replace(/[\u200B-\u200D\uFEFF]/g, '');
                    html = html.replace(/&#x200b;/gi, '');

                    if (this.opts.cleanSpaces)
                    {
                        html = html.replace(/&nbsp;/gi, ' ');
                    }

                    if (html.search(/^<p>(||\s||<br\s?\/?>||&nbsp;)<\/p>$/i) != -1)
                    {
                        return '';
                    }

                    // reconvert script tag
                    html = html.replace(/<pre class="redactor-script-tag" style="display: none;"(.*?[^>]?)>([\w\W]*?)<\/pre>/gi, '<script$1>$2</script>');

                    // restore form tag
                    html = this.clean.restoreFormTags(html);

                    var chars = {
                        '\u2122': '&trade;',
                        '\u00a9': '&copy;',
                        '\u2026': '&hellip;',
                        '\u2014': '&mdash;',
                        '\u2010': '&dash;'
                    };
                    // replace special characters
                    $.each(chars, function(i,s)
                    {
                        html = html.replace(new RegExp(i, 'g'), s);
                    });

                    // remove br in the of li
                    html = html.replace(new RegExp('<br\\s?/?></li>', 'gi'), '</li>');
                    html = html.replace(new RegExp('</li><br\\s?/?>', 'gi'), '</li>');
                    // remove verified
                    html = html.replace(new RegExp('<div(.*?[^>]) data-tagblock="redactor"(.*?[^>])>', 'gi'), '<div$1$2>');
                    html = html.replace(new RegExp('<(.*?) data-verified="redactor"(.*?[^>])>', 'gi'), '<$1$2>');
                    html = html.replace(new RegExp('<span(.*?[^>])\srel="(.*?[^>])"(.*?[^>])>', 'gi'), '<span$1$3>');
                    html = html.replace(new RegExp('<img(.*?[^>])\srel="(.*?[^>])"(.*?[^>])>', 'gi'), '<img$1$3>');
                    html = html.replace(new RegExp('<img(.*?[^>])\sstyle="" (.*?[^>])>', 'gi'), '<img$1 $2>');
                    html = html.replace(new RegExp('<img(.*?[^>])\sstyle (.*?[^>])>', 'gi'), '<img$1 $2>');
                    html = html.replace(new RegExp('<span class="redactor-invisible-space">(.*?)</span>', 'gi'), '$1');
                    html = html.replace(/ data-save-url="(.*?[^>])"/gi, '');

                    // remove image resize
                    html = html.replace(/<span(.*?)id="redactor-image-box"(.*?[^>])>([\w\W]*?)<img(.*?)><\/span>/gi, '$3<img$4>');
                    html = html.replace(/<span(.*?)id="redactor-image-resizer"(.*?[^>])>(.*?)<\/span>/gi, '');
                    html = html.replace(/<span(.*?)id="redactor-image-editter"(.*?[^>])>(.*?)<\/span>/gi, '');

                    // remove font tag
                    html = html.replace(/<font(.*?[^<])>/gi, '');
                    html = html.replace(/<\/font>/gi, '');

                    // tidy html
                    html = this.tidy.load(html);

                    // link nofollow
                    if (this.opts.linkNofollow)
                    {
                        html = html.replace(/<a(.*?)rel="nofollow"(.*?[^>])>/gi, '<a$1$2>');
                        html = html.replace(/<a(.*?[^>])>/gi, '<a$1 rel="nofollow">');
                    }

                    // reconvert inline
                    html = html.replace(/\sdata-redactor-(tag|class|style)="(.*?[^>])"/gi, '');
                    html = html.replace(new RegExp('<(.*?) data-verified="redactor"(.*?[^>])>', 'gi'), '<$1$2>');
                    html = html.replace(new RegExp('<(.*?) data-verified="redactor">', 'gi'), '<$1>');

                    return html;
                },
                onPaste: function(html, setMode)
                {
                    html = $.trim(html);

                    html = html.replace(/\$/g, '&#36;');

                    // convert dirty spaces
                    html = html.replace(/<span class="s1">/gi, '<span>');
                    html = html.replace(/<span class="Apple-converted-space">&nbsp;<\/span>/gi, ' ');
                    html = html.replace(/<span class="Apple-tab-span"[^>]*>\t<\/span>/gi, '\t');
                    html = html.replace(/<span[^>]*>(\s|&nbsp;)<\/span>/gi, ' ');

                    if (this.opts.pastePlainText)
                    {
                        return this.clean.getPlainText(html);
                    }

                    if (!this.utils.isSelectAll() && typeof setMode == 'undefined')
                    {
                        if (this.utils.isCurrentOrParent(['FIGCAPTION', 'A']))
                        {
                            return this.clean.getPlainText(html, false);
                        }

                        if (this.utils.isCurrentOrParent('PRE'))
                        {
                            html = html.replace(/â€/g, '"');
                            html = html.replace(/â€œ/g, '"');
                            html = html.replace(/â€˜/g, '\'');
                            html = html.replace(/â€™/g, '\'');

                            return this.clean.getPreCode(html);
                        }

                        if (this.utils.isCurrentOrParent(['BLOCKQUOTE', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6']))
                        {
                            html = this.clean.getOnlyImages(html);

                            if (!this.utils.browser('msie'))
                            {
                                var block = this.selection.getBlock();
                                if (block && block.tagName == 'P')
                                {
                                    html = html.replace(/<img(.*?)>/gi, '<p><img$1></p>');
                                }
                            }

                            return html;
                        }

                        if (this.utils.isCurrentOrParent(['TD']))
                        {
                            html = this.clean.onPasteTidy(html, 'td');

                            if (this.opts.linebreaks) html = this.clean.replaceParagraphsToBr(html);

                            html = this.clean.replaceDivsToBr(html);

                            return html;
                        }


                        if (this.utils.isCurrentOrParent(['LI']))
                        {
                            return this.clean.onPasteTidy(html, 'li');
                        }
                    }


                    html = this.clean.isSingleLine(html, setMode);

                    if (!this.clean.singleLine)
                    {
                        if (this.opts.linebreaks)  html = this.clean.replaceParagraphsToBr(html);
                        if (this.opts.replaceDivs) html = this.clean.replaceDivs(html);

                        html = this.clean.saveFormTags(html);
                    }


                    html = this.clean.onPasteWord(html);
                    html = this.clean.onPasteExtra(html);

                    html = this.clean.onPasteTidy(html, 'all');


                    // paragraphize
                    if (!this.clean.singleLine && this.opts.paragraphize)
                    {
                        html = this.paragraphize.load(html);
                    }

                    html = this.clean.removeDirtyStyles(html);
                    html = this.clean.onPasteRemoveSpans(html);
                    html = this.clean.onPasteRemoveEmpty(html);


                    html = this.clean.convertInline(html);

                    return html;
                },
                onPasteWord: function(html)
                {
                    // comments
                    html = html.replace(/<!--[\s\S]*?-->/gi, '');

                    // style
                    html = html.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');

                    if (/(class=\"?Mso|style=\"[^\"]*\bmso\-|w:WordDocument)/.test(html))
                    {
                        html = this.clean.onPasteIeFixLinks(html);

                        // shapes
                        html = html.replace(/<img(.*?)v:shapes=(.*?)>/gi, '');
                        html = html.replace(/src="file\:\/\/(.*?)"/, 'src=""');

                        // list
                        html = html.replace(/<p(.*?)class="MsoListParagraphCxSpFirst"([\w\W]*?)<\/p>/gi, '<ul><li$2</li>');
                        html = html.replace(/<p(.*?)class="MsoListParagraphCxSpMiddle"([\w\W]*?)<\/p>/gi, '<li$2</li>');
                        html = html.replace(/<p(.*?)class="MsoListParagraphCxSpLast"([\w\W]*?)<\/p>/gi, '<li$2</li></ul>');
                        // one line
                        html = html.replace(/<p(.*?)class="MsoListParagraph"([\w\W]*?)<\/p>/gi, '<ul><li$2</li></ul>');
                        // remove ms word's bullet
                        html = html.replace(/Â·/g, '');
                        html = html.replace(/<p class="Mso(.*?)"/gi, '<p');

                        // classes
                        html = html.replace(/ class=\"(mso[^\"]*)\"/gi, "");
                        html = html.replace(/ class=(mso\w+)/gi, "");

                        // remove ms word tags
                        html = html.replace(/<o:p(.*?)>([\w\W]*?)<\/o:p>/gi, '$2');

                        // ms word break lines
                        html = html.replace(/\n/g, ' ');

                        // ms word lists break lines
                        html = html.replace(/<p>\n?<li>/gi, '<li>');
                    }

                    // remove nbsp
                    if (this.opts.cleanSpaces)
                    {
                        html = html.replace(/(\s|&nbsp;)+/g, ' ');
                    }

                    return html;
                },
                onPasteExtra: function(html)
                {
                    // remove google docs markers
                    html = html.replace(/<b\sid="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi, "$2");
                    html = html.replace(/<b(.*?)id="docs-internal-guid(.*?)">([\w\W]*?)<\/b>/gi, "$3");

                    // google docs styles
                    html = html.replace(/<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>/gi, '<span style="font-weight: bold;"><span style="font-style: italic;">');
                    html = html.replace(/<span[^>]*font-style: italic[^>]*>/gi, '<span style="font-style: italic;">');
                    html = html.replace(/<span[^>]*font-weight: bold[^>]*>/gi, '<span style="font-weight: bold;">');
                    html = html.replace(/<span[^>]*text-decoration: underline[^>]*>/gi, '<span style="text-decoration: underline;">');

                    html = html.replace(/<img>/gi, '');
                    html = html.replace(/\n{3,}/gi, '\n');
                    html = html.replace(/<font(.*?)>([\w\W]*?)<\/font>/gi, '$2');

                    // remove dirty p
                    html = html.replace(/<p><p>/gi, '<p>');
                    html = html.replace(/<\/p><\/p>/gi, '</p>');
                    html = html.replace(/<li>(\s*|\t*|\n*)<p>/gi, '<li>');
                    html = html.replace(/<\/p>(\s*|\t*|\n*)<\/li>/gi, '</li>');

                    // remove space between paragraphs
                    html = html.replace(/<\/p>\s<p/gi, '<\/p><p');

                    // remove safari local images
                    html = html.replace(/<img src="webkit-fake-url\:\/\/(.*?)"(.*?)>/gi, '');

                    // bullets
                    html = html.replace(/<p>â€¢([\w\W]*?)<\/p>/gi, '<li>$1</li>');

                    // FF fix
                    if (this.utils.browser('mozilla'))
                    {
                        html = html.replace(/<br\s?\/?>$/gi, '');
                    }

                    return html;
                },
                onPasteTidy: function(html, type)
                {
                    // remove all tags except these
                    var tags = ['span', 'a', 'pre', 'blockquote', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'address', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del',
                                'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'p', 'br', 'video', 'audio', 'iframe', 'embed', 'param', 'object', 'img', 'table',
                                'td', 'th', 'tr', 'tbody', 'tfoot', 'thead', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                    var tagsEmpty = false;
                    var attrAllowed =  [
                            ['a', '*'],
                            ['img', ['src', 'alt']],
                            ['span', ['class', 'rel', 'data-verified']],
                            ['iframe', '*'],
                            ['video', '*'],
                            ['audio', '*'],
                            ['embed', '*'],
                            ['object', '*'],
                            ['param', '*'],
                            ['source', '*']
                        ];

                    if (type == 'all')
                    {
                        tagsEmpty = ['p', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
                        attrAllowed =  [
                            ['table', 'class'],
                            ['td', ['colspan', 'rowspan']],
                            ['a', '*'],
                            ['img', ['src', 'alt', 'data-redactor-inserted-image']],
                            ['span', ['class', 'rel', 'data-verified']],
                            ['iframe', '*'],
                            ['video', '*'],
                            ['audio', '*'],
                            ['embed', '*'],
                            ['object', '*'],
                            ['param', '*'],
                            ['source', '*']
                        ];
                    }
                    else if (type == 'td')
                    {
                        // remove all tags except these and remove all table tags: tr, td etc
                        tags = ['ul', 'ol', 'li', 'span', 'a', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del',
                                'ol', 'ul', 'li', 'dl', 'dt', 'dd', 'br', 'iframe', 'video', 'audio', 'embed', 'param', 'object', 'img', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];

                    }
                    else if (type == 'li')
                    {
                        // only inline tags and ul, ol, li
                        tags = ['ul', 'ol', 'li', 'span', 'a', 'small', 'em', 'strong', 'code', 'kbd', 'mark', 'cite', 'var', 'samp', 'dfn', 'sup', 'sub', 'b', 'i', 'u', 'del', 'br',
                                'iframe', 'video', 'audio', 'embed', 'param', 'object', 'img'];
                    }

                    var options = {
                        deniedTags: false,
                        allowedTags: tags,
                        removeComments: true,
                        removePhp: true,
                        removeAttr: false,
                        allowedAttr: attrAllowed,
                        removeEmpty: tagsEmpty
                    };

                    // denied tags
                    if (this.opts.deniedTags)
                    {
                        options.deniedTags = this.opts.deniedTags;
                    }

                    // allowed tags
                    if (this.opts.allowedTags)
                    {
                        options.allowedTags = this.opts.allowedTags;
                    }

                    return this.tidy.load(html, options);

                },
                onPasteRemoveEmpty: function(html)
                {
                    html = html.replace(/<(p|h[1-6])>(|\s|\n|\t|<br\s?\/?>)<\/(p|h[1-6])>/gi, '');

                    // remove br in the end
                    if (!this.opts.linebreaks) html = html.replace(/<br>$/i, '');

                    return html;
                },
                onPasteRemoveSpans: function(html)
                {
                    html = html.replace(/<span>(.*?)<\/span>/gi, '$1');
                    html = html.replace(/<span[^>]*>\s|&nbsp;<\/span>/gi, ' ');

                    return html;
                },
                onPasteIeFixLinks: function(html)
                {
                    if (!this.utils.browser('msie')) return html;

                    var tmp = $.trim(html);
                    if (tmp.search(/^<a(.*?)>(.*?)<\/a>$/i) === 0)
                    {
                        html = html.replace(/^<a(.*?)>(.*?)<\/a>$/i, "$2");
                    }

                    return html;
                },
                isSingleLine: function(html, setMode)
                {
                    this.clean.singleLine = false;

                    if (!this.utils.isSelectAll() && typeof setMode == 'undefined')
                    {
                        var blocks = this.opts.blockLevelElements.join('|').replace('P|', '').replace('DIV|', '');

                        var matchBlocks = html.match(new RegExp('</(' + blocks + ')>', 'gi'));
                        var matchContainers = html.match(/<\/(p|div)>/gi);

                        if (!matchBlocks && (matchContainers === null || (matchContainers && matchContainers.length <= 1)))
                        {
                            var matchBR = html.match(/<br\s?\/?>/gi);
                            var matchIMG = html.match(/<img(.*?[^>])>/gi);
                            if (!matchBR && !matchIMG)
                            {
                                this.clean.singleLine = true;
                                html = html.replace(/<\/?(p|div)(.*?)>/gi, '');
                            }
                        }
                    }

                    return html;
                },
                stripTags: function(input, allowed)
                {
                    allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('');
                    var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;

                    return input.replace(tags, function ($0, $1) {
                        return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
                    });
                },
                savePreCode: function(html)
                {
                    html = this.clean.savePreFormatting(html);
                    html = this.clean.saveCodeFormatting(html);

                    return html;
                },
                savePreFormatting: function(html)
                {
                    var pre = html.match(/<pre(.*?)>([\w\W]*?)<\/pre>/gi);
                    if (pre !== null)
                    {
                        $.each(pre, $.proxy(function(i,s)
                        {
                            var arr = s.match(/<pre(.*?)>([\w\W]*?)<\/pre>/i);

                            arr[2] = arr[2].replace(/<br\s?\/?>/g, '\n');
                            arr[2] = arr[2].replace(/&nbsp;/g, ' ');

                            if (this.opts.preSpaces)
                            {
                                arr[2] = arr[2].replace(/\t/g, Array(this.opts.preSpaces + 1).join(' '));
                            }

                            arr[2] = this.clean.encodeEntities(arr[2]);

                            // $ fix
                            arr[2] = arr[2].replace(/\$/g, '&#36;');

                            html = html.replace(s, '<pre' + arr[1] + '>' + arr[2] + '</pre>');

                        }, this));
                    }

                    return html;
                },
                saveCodeFormatting: function(html)
                {
                    var code = html.match(/<code(.*?[^>])>(.*?)<\/code>/gi);
                    if (code !== null)
                    {
                        $.each(code, $.proxy(function(i,s)
                        {
                            var arr = s.match(/<code(.*?[^>])>(.*?)<\/code>/i);

                            arr[2] = arr[2].replace(/&nbsp;/g, ' ');
                            arr[2] = this.clean.encodeEntities(arr[2]);

                            // $ fix
                            arr[2] = arr[2].replace(/\$/g, '&#36;');

                            html = html.replace(s, '<code' + arr[1] + '>' + arr[2] + '</code>');

                        }, this));
                    }

                    return html;
                },
                getTextFromHtml: function(html)
                {
                    html = html.replace(/<br\s?\/?>|<\/H[1-6]>|<\/p>|<\/div>|<\/li>|<\/td>/gi, '\n');

                    var tmp = document.createElement('div');
                    tmp.innerHTML = html;
                    html = tmp.textContent || tmp.innerText;

                    return $.trim(html);
                },
                getPlainText: function(html, paragraphize)
                {
                    html = this.clean.getTextFromHtml(html);
                    html = html.replace(/\n/g, '<br />');

                    if (this.opts.paragraphize && typeof paragraphize == 'undefined' && !this.utils.browser('mozilla'))
                    {
                        html = this.paragraphize.load(html);
                    }

                    return html;
                },
                getPreCode: function(html)
                {
                    html = html.replace(/<img(.*?) style="(.*?)"(.*?[^>])>/gi, '<img$1$3>');
                    html = html.replace(/<img(.*?)>/gi, '&lt;img$1&gt;');
                    html = this.clean.getTextFromHtml(html);

                    if (this.opts.preSpaces)
                    {
                        html = html.replace(/\t/g, Array(this.opts.preSpaces + 1).join(' '));
                    }

                    html = this.clean.encodeEntities(html);

                    return html;
                },
                getOnlyImages: function(html)
                {
                    html = html.replace(/<img(.*?)>/gi, '[img$1]');

                    // remove all tags
                    html = html.replace(/<([Ss]*?)>/gi, '');

                    html = html.replace(/\[img(.*?)\]/gi, '<img$1>');

                    return html;
                },
                getOnlyLinksAndImages: function(html)
                {
                    html = html.replace(/<a(.*?)href="(.*?)"(.*?)>([\w\W]*?)<\/a>/gi, '[a href="$2"]$4[/a]');
                    html = html.replace(/<img(.*?)>/gi, '[img$1]');

                    // remove all tags
                    html = html.replace(/<(.*?)>/gi, '');

                    html = html.replace(/\[a href="(.*?)"\]([\w\W]*?)\[\/a\]/gi, '<a href="$1">$2</a>');
                    html = html.replace(/\[img(.*?)\]/gi, '<img$1>');

                    return html;
                },
                encodeEntities: function(str)
                {
                    str = String(str).replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"');
                    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
                },
                removeDirtyStyles: function(html)
                {
                    if (this.utils.browser('msie')) return html;

                    var div = document.createElement('div');
                    div.innerHTML = html;

                    this.clean.clearUnverifiedRemove($(div));

                    html = div.innerHTML;
                    $(div).remove();

                    return html;
                },
                clearUnverified: function()
                {
                    if (this.utils.browser('msie')) return;

                    this.clean.clearUnverifiedRemove(this.$editor);

                    var headers = this.$editor.find('h1, h2, h3, h4, h5, h6');
                    headers.find('span').removeAttr('style');
                    headers.find(this.opts.verifiedTags.join(', ')).removeAttr('style');

                    this.code.sync();
                },
                clearUnverifiedRemove: function($editor)
                {
                    $editor.find(this.opts.verifiedTags.join(', ')).removeAttr('style');
                    $editor.find('span').not('[data-verified="redactor"]').removeAttr('style');

                    $editor.find('span[data-verified="redactor"], img[data-verified="redactor"]').each(function(i, s)
                    {
                        var $s = $(s);
                        $s.attr('style', $s.attr('rel'));
                    });

                },
                setVerified: function(html)
                {
                    if (this.utils.browser('msie')) return html;

                    html = html.replace(new RegExp('<img(.*?[^>])>', 'gi'), '<img$1 data-verified="redactor">');
                    html = html.replace(new RegExp('<span(.*?[^>])>', 'gi'), '<span$1 data-verified="redactor">');

                    var matches = html.match(new RegExp('<(span|img)(.*?)style="(.*?)"(.*?[^>])>', 'gi'));

                    if (matches)
                    {
                        var len = matches.length;
                        for (var i = 0; i < len; i++)
                        {
                            try {

                                var newTag = matches[i].replace(/style="(.*?)"/i, 'style="$1" rel="$1"');
                                html = html.replace(matches[i], newTag);

                            }
                            catch (e) {}
                        }
                    }

                    return html;
                },
                convertInline: function(html)
                {
                    var $div = $('<div />').html(html);

                    var tags = this.opts.inlineTags;
                    tags.push('span');

                    $div.find(tags.join(',')).each(function()
                    {
                        var $el = $(this);
                        var tag = this.tagName.toLowerCase();
                        $el.attr('data-redactor-tag', tag);

                        if (tag == 'span')
                        {
                            if ($el.attr('style')) $el.attr('data-redactor-style', $el.attr('style'));
                            else if ($el.attr('class')) $el.attr('data-redactor-class', $el.attr('class'));
                        }

                    });

                    html = $div.html();
                    $div.remove();

                    return html;
                },
                normalizeLists: function()
                {
                    this.$editor.find('li').each(function(i,s)
                    {
                        var $next = $(s).next();
                        if ($next.length !== 0 && ($next[0].tagName == 'UL' || $next[0].tagName == 'OL'))
                        {
                            $(s).append($next);
                        }

                    });
                },
                removeSpaces: function(html)
                {
                    html = html.replace(/\n/g, '');
                    html = html.replace(/[\t]*/g, '');
                    html = html.replace(/\n\s*\n/g, "\n");
                    html = html.replace(/^[\s\n]*/g, ' ');
                    html = html.replace(/[\s\n]*$/g, ' ');
                    html = html.replace( />\s{2,}</g, '> <'); // between inline tags can be only one space
                    html = html.replace(/\n\n/g, "\n");
                    html = html.replace(/[\u200B-\u200D\uFEFF]/g, '');

                    return html;
                },
                replaceDivs: function(html)
                {
                    if (this.opts.linebreaks)
                    {
                        html = html.replace(/<div><br\s?\/?><\/div>/gi, '<br />');
                        html = html.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, '$2<br />');
                    }
                    else
                    {
                        html = html.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, '<p$1>$2</p>');
                    }

                    html = html.replace(/<div(.*?[^>])>/gi, '');
                    html = html.replace(/<\/div>/gi, '');

                    return html;
                },
                replaceDivsToBr: function(html)
                {
                    html = html.replace(/<div\s(.*?)>/gi, '<p>');
                    html = html.replace(/<div><br\s?\/?><\/div>/gi, '<br /><br />');
                    html = html.replace(/<div>([\w\W]*?)<\/div>/gi, '$1<br /><br />');

                    return html;
                },
                replaceParagraphsToBr: function(html)
                {
                    html = html.replace(/<p\s(.*?)>/gi, '<p>');
                    html = html.replace(/<p><br\s?\/?><\/p>/gi, '<br />');
                    html = html.replace(/<p>([\w\W]*?)<\/p>/gi, '$1<br /><br />');
                    html = html.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, '</blockquote>');

                    return html;
                },
                saveFormTags: function(html)
                {
                    return html.replace(/<form(.*?)>([\w\W]*?)<\/form>/gi, '<section$1 rel="redactor-form-tag">$2</section>');
                },
                restoreFormTags: function(html)
                {
                    return html.replace(/<section(.*?) rel="redactor-form-tag"(.*?)>([\w\W]*?)<\/section>/gi, '<form$1$2>$3</form>');
                }
            };
        },
        code: function()
        {
            return {
                set: function(html)
                {
                    html = $.trim(html.toString());

                    // clean
                    html = this.clean.onSet(html);

                    this.$editor.html(html);
                    this.code.sync();

                    if (html !== '') this.placeholder.remove();

                    setTimeout($.proxy(this.buffer.add, this), 15);
                    if (this.start === false) this.observe.load();

                },
                get: function()
                {
                    var code = this.$textarea.val();

                    // indent code
                    code = this.tabifier.get(code);

                    return code;
                },
                sync: function()
                {
                    setTimeout($.proxy(this.code.startSync, this), 10);
                },
                startSync: function()
                {
                    var html = this.$editor.html();

                    // is there a need to synchronize
                    if (this.code.syncCode && this.code.syncCode == html)
                    {
                        // do not sync
                        return;
                    }

                    // save code
                    this.code.syncCode = html;

                    // before clean callback
                    html = this.core.setCallback('syncBefore', html);

                    // clean
                    html = this.clean.onSync(html);

                    // set code
                    this.$textarea.val(html);

                    // after sync callback
                    this.core.setCallback('sync', html);

                    if (this.start === false)
                    {
                        this.core.setCallback('change', html);
                    }

                    this.start = false;

                    // autosave on change
                    this.autosave.onChange();
                },
                toggle: function()
                {
                    if (this.opts.visual)
                    {
                        this.code.showCode();
                    }
                    else
                    {
                        this.code.showVisual();
                    }
                },
                showCode: function()
                {
                    this.code.offset = this.caret.getOffset();
                    var scroll = $(window).scrollTop();

                    var height = this.$editor.innerHeight();

                    this.$editor.hide();

                    var html = this.$textarea.val();
                    this.modified = this.clean.removeSpaces(html);

                    // indent code
                    html = this.tabifier.get(html);

                    this.$textarea.val(html).height(height).show().focus();
                    this.$textarea.on('keydown.redactor-textarea-indenting', this.code.textareaIndenting);

                    $(window).scrollTop(scroll);

                    if (this.$textarea[0].setSelectionRange)
                    {
                        this.$textarea[0].setSelectionRange(0, 0);
                    }

                    this.$textarea[0].scrollTop = 0;

                    this.opts.visual = false;

                    this.button.setInactiveInCode();
                    this.button.setActive('html');
                    this.core.setCallback('source', html);
                },
                showVisual: function()
                {
                    if (this.opts.visual) return;

                    var html = this.$textarea.hide().val();

                    if (this.modified !== this.clean.removeSpaces(html))
                    {
                        this.code.set(html);
                    }

                    this.$editor.show();

                    if (!this.utils.isEmpty(html))
                    {
                        this.placeholder.remove();
                    }

                    this.caret.setOffset(this.code.offset);

                    this.$textarea.off('keydown.redactor-textarea-indenting');

                    this.button.setActiveInVisual();
                    this.button.setInactive('html');

                    this.observe.load();
                    this.opts.visual = true;
                    this.core.setCallback('visual', html);
                },
                textareaIndenting: function(e)
                {
                    if (e.keyCode !== 9) return true;

                    var $el = this.$textarea;
                    var start = $el.get(0).selectionStart;
                    $el.val($el.val().substring(0, start) + "\t" + $el.val().substring($el.get(0).selectionEnd));
                    $el.get(0).selectionStart = $el.get(0).selectionEnd = start + 1;

                    return false;
                }
            };
        },
        core: function()
        {
            return {
                getObject: function()
                {
                    return $.extend({}, this);
                },
                getEditor: function()
                {
                    return this.$editor;
                },
                getBox: function()
                {
                    return this.$box;
                },
                getElement: function()
                {
                    return this.$element;
                },
                getTextarea: function()
                {
                    return this.$textarea;
                },
                getToolbar: function()
                {
                    return (this.$toolbar) ? this.$toolbar : false;
                },
                addEvent: function(name)
                {
                    this.core.event = name;
                },
                getEvent: function()
                {
                    return this.core.event;
                },
                setCallback: function(type, e, data)
                {
                    var callback = this.opts[type + 'Callback'];
                    if ($.isFunction(callback))
                    {
                        return (typeof data == 'undefined') ? callback.call(this, e) : callback.call(this, e, data);
                    }
                    else
                    {
                        return (typeof data == 'undefined') ? e : data;
                    }
                },
                destroy: function()
                {
                    this.core.setCallback('destroy');

                    // off events and remove data
                    this.$element.off('.redactor').removeData('redactor');
                    this.$editor.off('.redactor');

                    $(document).off('click.redactor-image-delete.' + this.uuid);
                    $(document).off('click.redactor-image-resize-hide.' + this.uuid);
                    $(document).off('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid);
                    $("body").off('scroll.redactor.' + this.uuid);
                    $(this.opts.toolbarFixedTarget).off('scroll.redactor.' + this.uuid);

                    // common
                    this.$editor.removeClass('redactor-editor redactor-linebreaks redactor-placeholder');
                    this.$editor.removeAttr('contenteditable');

                    var html = this.code.get();

                    // dropdowns off
                    this.$toolbar.find('a').each(function()
                    {
                        var $el = $(this);
                        if ($el.data('dropdown'))
                        {
                            $el.data('dropdown').remove();
                            $el.data('dropdown', {});
                        }
                    });


                    if (this.build.isTextarea())
                    {
                        this.$box.after(this.$element);
                        this.$box.remove();
                        this.$element.val(html).show();
                    }
                    else
                    {
                        this.$box.after(this.$editor);
                        this.$box.remove();
                        this.$element.html(html).show();
                    }

                    // paste box
                    if (this.$pasteBox) this.$pasteBox.remove();

                    // modal
                    if (this.$modalBox) this.$modalBox.remove();
                    if (this.$modalOverlay) this.$modalOverlay.remove();

                    // buttons tooltip
                    $('.redactor-toolbar-tooltip').remove();

                    // autosave
                    clearInterval(this.autosaveInterval);

                }
            };
        },
        dropdown: function()
        {
            return {
                build: function(name, $dropdown, dropdownObject)
                {
                    if (name == 'formatting' && this.opts.formattingAdd)
                    {
                        $.each(this.opts.formattingAdd, $.proxy(function(i,s)
                        {
                            var name = s.tag;
                            if (typeof s['class'] != 'undefined')
                            {
                                name = name + '-' + s['class'];
                            }

                            s.type = (this.utils.isBlockTag(s.tag)) ? 'block' : 'inline';
                            var func = (s.type == 'inline') ? 'inline.formatting' : 'block.formatting';

                            if (this.opts.linebreaks && s.type == 'block' && s.tag == 'p') return;

                            this.formatting[name] = {
                                tag: s.tag,
                                style: s.style,
                                'class': s['class'],
                                attr: s.attr,
                                data: s.data,
                                clear: s.clear
                            };

                            dropdownObject[name] = {
                                func: func,
                                title: s.title
                            };

                        }, this));

                    }

                    $.each(dropdownObject, $.proxy(function(btnName, btnObject)
                    {
                        var $item = $('<a href="#" class="redactor-dropdown-' + btnName + '">' + btnObject.title + '</a>');
                        if (name == 'formatting') $item.addClass('redactor-formatting-' + btnName);

                        $item.on('click', $.proxy(function(e)
                        {
                            e.preventDefault();

                            var type = 'func';
                            var callback = btnObject.func;
                            if (btnObject.command)
                            {
                                type = 'command';
                                callback = btnObject.command;
                            }
                            else if (btnObject.dropdown)
                            {
                                type = 'dropdown';
                                callback = btnObject.dropdown;
                            }

                            this.button.onClick(e, btnName, type, callback);
                            this.dropdown.hideAll();

                        }, this));

                        $dropdown.append($item);

                    }, this));
                },
                show: function(e, key)
                {
                    if (!this.opts.visual)
                    {
                        e.preventDefault();
                        return false;
                    }

                    var $button = this.button.get(key);

                    // Always re-append it to the end of <body> so it always has the highest sub-z-index.
                    var $dropdown = $button.data('dropdown').appendTo(document.body);

                    // ios keyboard hide
                    if (this.utils.isMobile() && !this.utils.browser('msie'))
                    {
                        document.activeElement.blur();
                    }

                    if ($button.hasClass('dropact'))
                    {
                        this.dropdown.hideAll();
                    }
                    else
                    {
                        this.dropdown.hideAll();
                        this.core.setCallback('dropdownShow', { dropdown: $dropdown, key: key, button: $button });

                        this.button.setActive(key);

                        $button.addClass('dropact');

                        var keyPosition = $button.offset();

                        // fix right placement
                        var dropdownWidth = $dropdown.width();
                        if ((keyPosition.left + dropdownWidth) > $(document).width())
                        {
                            keyPosition.left = Math.max(0, keyPosition.left - dropdownWidth);
                        }

                        var left = keyPosition.left + 'px';
                        if (this.$toolbar.hasClass('toolbar-fixed-box'))
                        {
                            var top = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset;
                            var position = 'fixed';
                            if (this.opts.toolbarFixedTarget !== document)
                            {
                                top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top) + this.opts.toolbarFixedTopOffset;
                                position = 'absolute';
                            }

                            $dropdown.css({ position: position, left: left, top: top + 'px' }).show();
                        }
                        else
                        {
                            var top = ($button.innerHeight() + keyPosition.top) + 'px';

                            $dropdown.css({ position: 'absolute', left: left, top: top }).show();
                        }

                        this.core.setCallback('dropdownShown', { dropdown: $dropdown, key: key, button: $button });
                    }

                    $(document).one('click', $.proxy(this.dropdown.hide, this));
                    this.$editor.one('click', $.proxy(this.dropdown.hide, this));

                    // disable scroll whan dropdown scroll
                    var $body = $(document.body);
                    var width = $body.width();

                    $dropdown.on('mouseover', function() {

                        $body.addClass('body-redactor-hidden');
                        $body.css('margin-right', ($body.width() - width) + 'px');

                     });

                    $dropdown.on('mouseout', function() {

                        $body.removeClass('body-redactor-hidden').css('margin-right', 0);

                    });


                    e.stopPropagation();
                },
                hideAll: function()
                {
                    this.$toolbar.find('a.dropact').removeClass('redactor-act').removeClass('dropact');

                    $(document.body).removeClass('body-redactor-hidden').css('margin-right', 0);
                    $('.redactor-dropdown-' + this.uuid).hide();
                    this.core.setCallback('dropdownHide');
                },
                hide: function (e)
                {
                    var $dropdown = $(e.target);
                    if (!$dropdown.hasClass('dropact'))
                    {
                        $dropdown.removeClass('dropact');
                        this.dropdown.hideAll();
                    }
                }
            };
        },
        file: function()
        {
            return {
                show: function()
                {
                    this.modal.load('file', this.lang.get('file'), 700);
                    this.upload.init('#redactor-modal-file-upload', this.opts.fileUpload, this.file.insert);

                    this.selection.save();

                    this.selection.get();
                    var text = this.sel.toString();

                    $('#redactor-filename').val(text);

                    this.modal.show();
                },
                insert: function(json, direct, e)
                {
                    // error callback
                    if (typeof json.error != 'undefined')
                    {
                        this.modal.close();
                        this.selection.restore();
                        this.core.setCallback('fileUploadError', json);
                        return;
                    }

                    var link;
                    if (typeof json == 'string')
                    {
                        link = json;
                    }
                    else
                    {
                        var text = $('#redactor-filename').val();
                        if (typeof text == 'undefined' || text === '') text = json.filename;

                        link = '<a href="' + json.filelink + '" id="filelink-marker">' + text + '</a>';
                    }

                    if (direct)
                    {
                        this.selection.removeMarkers();
                        var marker = this.selection.getMarker();
                        this.insert.nodeToCaretPositionFromPoint(e, marker);
                    }
                    else
                    {
                        this.modal.close();
                    }

                    this.selection.restore();
                    this.buffer.set();

                    this.insert.htmlWithoutClean(link);

                    if (typeof json == 'string') return;

                    var linkmarker = $(this.$editor.find('a#filelink-marker'));
                    if (linkmarker.length !== 0)
                    {
                        linkmarker.removeAttr('id').removeAttr('style');
                    }
                    else linkmarker = false;

                    this.core.setCallback('fileUpload', linkmarker, json);

                }
            };
        },
        focus: function()
        {
            return {
                setStart: function()
                {
                    this.$editor.focus();

                    var first = this.$editor.children().first();

                    if (first.length === 0) return;
                    if (first[0].length === 0 || first[0].tagName == 'BR' || first[0].nodeType == 3)
                    {
                        return;
                    }

                    if (first[0].tagName == 'UL' || first[0].tagName == 'OL')
                    {
                        var child = first.find('li').first();
                        if (!this.utils.isBlock(child) && child.text() === '')
                        {
                            // empty inline tag in li
                            this.caret.setStart(child);
                            return;
                        }
                    }

                    if (this.opts.linebreaks && !this.utils.isBlockTag(first[0].tagName))
                    {
                        this.selection.get();
                        this.range.setStart(this.$editor[0], 0);
                        this.range.setEnd(this.$editor[0], 0);
                        this.selection.addRange();

                        return;
                    }

                    // if node is tag
                    this.caret.setStart(first);
                },
                setEnd: function()
                {
                    if (this.utils.browser('mozilla') || this.utils.browser('msie'))
                    {
                        var last = this.$editor.children().last();

                        this.$editor.focus();
                        this.caret.setEnd(last);
                    }
                    else
                    {
                        this.selection.get();

                        try {
                            this.range.selectNodeContents(this.$editor[0]);
                            this.range.collapse(false);

                            this.selection.addRange();
                        }
                        catch (e) {}
                    }

                },
                isFocused: function()
                {
                    var focusNode = document.getSelection().focusNode;
                    if (focusNode === null) return false;

                    if (this.opts.linebreaks && $(focusNode.parentNode).hasClass('redactor-linebreaks')) return true;
                    else if (!this.utils.isRedactorParent(focusNode.parentNode)) return false;

                    return this.$editor.is(':focus');
                }
            };
        },
        image: function()
        {
            return {
                show: function()
                {
                    this.modal.load('image', this.lang.get('image'), 700);
                    this.upload.init('#redactor-modal-image-droparea', this.opts.imageUpload, this.image.insert);

                    this.selection.save();
                    this.modal.show();

                },
                showEdit: function($image)
                {
                    var $link = $image.closest('a');

                    this.modal.load('imageEdit', this.lang.get('edit'), 705);

                    this.modal.createCancelButton();
                    this.image.buttonDelete = this.modal.createDeleteButton(this.lang.get('_delete'));
                    this.image.buttonSave = this.modal.createActionButton(this.lang.get('save'));

                    this.image.buttonDelete.on('click', $.proxy(function()
                    {
                        this.image.remove($image);

                    }, this));

                    this.image.buttonSave.on('click', $.proxy(function()
                    {
                        this.image.update($image);

                    }, this));

                    $('#redactor-image-title').val($image.attr('alt'));

                    if (!this.opts.imageLink) $('.redactor-image-link-option').hide();
                    else
                    {
                        var $redactorImageLink = $('#redactor-image-link');

                        $redactorImageLink.attr('href', $image.attr('src'));
                        if ($link.length !== 0)
                        {
                            $redactorImageLink.val($link.attr('href'));
                            if ($link.attr('target') == '_blank') $('#redactor-image-link-blank').prop('checked', true);
                        }
                    }

                    if (!this.opts.imagePosition) $('.redactor-image-position-option').hide();
                    else
                    {
                        var floatValue = ($image.css('display') == 'block' && $image.css('float') == 'none') ? 'center' : $image.css('float');
                        $('#redactor-image-align').val(floatValue);
                    }

                    this.modal.show();

                },
                setFloating: function($image)
                {
                    var floating = $('#redactor-image-align').val();

                    var imageFloat = '';
                    var imageDisplay = '';
                    var imageMargin = '';

                    switch (floating)
                    {
                        case 'left':
                            imageFloat = 'left';
                            imageMargin = '0 ' + this.opts.imageFloatMargin + ' ' + this.opts.imageFloatMargin + ' 0';
                        break;
                        case 'right':
                            imageFloat = 'right';
                            imageMargin = '0 0 ' + this.opts.imageFloatMargin + ' ' + this.opts.imageFloatMargin;
                        break;
                        case 'center':
                            imageDisplay = 'block';
                            imageMargin = 'auto';
                        break;
                    }

                    $image.css({ 'float': imageFloat, display: imageDisplay, margin: imageMargin });
                    $image.attr('rel', $image.attr('style'));
                },
                update: function($image)
                {
                    this.image.hideResize();
                    this.buffer.set();

                    var $link = $image.closest('a');

                    $image.attr('alt', $('#redactor-image-title').val());

                    this.image.setFloating($image);

                    // as link
                    var link = $.trim($('#redactor-image-link').val());
                    if (link !== '')
                    {
                        // test url (add protocol)
                        var pattern = '((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}';
                        var re = new RegExp('^(http|ftp|https)://' + pattern, 'i');
                        var re2 = new RegExp('^' + pattern, 'i');

                        if (link.search(re) == -1 && link.search(re2) === 0 && this.opts.linkProtocol)
                        {
                            link = this.opts.linkProtocol + '://' + link;
                        }

                        var target = ($('#redactor-image-link-blank').prop('checked')) ? true : false;

                        if ($link.length === 0)
                        {
                            var a = $('<a href="' + link + '">' + this.utils.getOuterHtml($image) + '</a>');
                            if (target) a.attr('target', '_blank');

                            $image.replaceWith(a);
                        }
                        else
                        {
                            $link.attr('href', link);
                            if (target)
                            {
                                $link.attr('target', '_blank');
                            }
                            else
                            {
                                $link.removeAttr('target');
                            }
                        }
                    }
                    else if ($link.length !== 0)
                    {
                        $link.replaceWith(this.utils.getOuterHtml($image));

                    }

                    this.modal.close();
                    this.observe.images();
                    this.code.sync();


                },
                setEditable: function($image)
                {
                    if (this.opts.imageEditable)
                    {
                        $image.on('dragstart', $.proxy(this.image.onDrag, this));
                    }

                    $image.on('mousedown', $.proxy(this.image.hideResize, this));
                    $image.on('click.redactor touchstart', $.proxy(function(e)
                    {
                        this.observe.image = $image;

                        if (this.$editor.find('#redactor-image-box').length !== 0) return false;

                        this.image.resizer = this.image.loadEditableControls($image);

                        $(document).on('click.redactor-image-resize-hide.' + this.uuid, $.proxy(this.image.hideResize, this));
                        this.$editor.on('click.redactor-image-resize-hide.' + this.uuid, $.proxy(this.image.hideResize, this));

                        // resize
                        if (!this.opts.imageResizable) return;

                        this.image.resizer.on('mousedown.redactor touchstart.redactor', $.proxy(function(e)
                        {
                            this.image.setResizable(e, $image);
                        }, this));


                    }, this));
                },
                setResizable: function(e, $image)
                {
                    e.preventDefault();

                    this.image.resizeHandle = {
                        x : e.pageX,
                        y : e.pageY,
                        el : $image,
                        ratio: $image.width() / $image.height(),
                        h: $image.height()
                    };

                    e = e.originalEvent || e;

                    if (e.targetTouches)
                    {
                         this.image.resizeHandle.x = e.targetTouches[0].pageX;
                         this.image.resizeHandle.y = e.targetTouches[0].pageY;
                    }

                    this.image.startResize();


                },
                startResize: function()
                {
                    $(document).on('mousemove.redactor-image-resize touchmove.redactor-image-resize', $.proxy(this.image.moveResize, this));
                    $(document).on('mouseup.redactor-image-resize touchend.redactor-image-resize', $.proxy(this.image.stopResize, this));
                },
                moveResize: function(e)
                {
                    e.preventDefault();

                    e = e.originalEvent || e;

                    var height = this.image.resizeHandle.h;

                    if (e.targetTouches) height += (e.targetTouches[0].pageY -  this.image.resizeHandle.y);
                    else height += (e.pageY -  this.image.resizeHandle.y);

                    var width = Math.round(height * this.image.resizeHandle.ratio);

                    if (height < 50 || width < 100) return;

                    this.image.resizeHandle.el.width(width);
                    this.image.resizeHandle.el.height(this.image.resizeHandle.el.width()/this.image.resizeHandle.ratio);

                    this.code.sync();
                },
                stopResize: function()
                {
                    this.handle = false;
                    $(document).off('.redactor-image-resize');

                    this.image.hideResize();
                },
                onDrag: function(e)
                {
                    if (this.$editor.find('#redactor-image-box').length !== 0)
                    {
                        e.preventDefault();
                        return false;
                    }

                    this.$editor.on('drop.redactor-image-inside-drop', $.proxy(function()
                    {
                        setTimeout($.proxy(this.image.onDrop, this), 1);

                    }, this));
                },
                onDrop: function()
                {
                    this.image.fixImageSourceAfterDrop();
                    this.observe.images();
                    this.$editor.off('drop.redactor-image-inside-drop');
                    this.clean.clearUnverified();
                    this.code.sync();
                },
                fixImageSourceAfterDrop: function()
                {
                    this.$editor.find('img[data-save-url]').each(function()
                    {
                        var $el = $(this);
                        $el.attr('src', $el.attr('data-save-url'));
                        $el.removeAttr('data-save-url');
                    });
                },
                hideResize: function(e)
                {
                    if (e && $(e.target).closest('#redactor-image-box').length !== 0) return;
                    if (e && e.target.tagName == 'IMG')
                    {
                        var $image = $(e.target);
                        $image.attr('data-save-url', $image.attr('src'));
                    }

                    var imageBox = this.$editor.find('#redactor-image-box');
                    if (imageBox.length === 0) return;

                    if (this.opts.imageEditable)
                    {
                        this.image.editter.remove();
                    }

                    $(this.image.resizer).remove();

                    imageBox.find('img').css({
                        marginTop: imageBox[0].style.marginTop,
                        marginBottom: imageBox[0].style.marginBottom,
                        marginLeft: imageBox[0].style.marginLeft,
                        marginRight: imageBox[0].style.marginRight
                    });

                    imageBox.css('margin', '');
                    imageBox.find('img').css('opacity', '');
                    imageBox.replaceWith(function()
                    {
                        return $(this).contents();
                    });

                    $(document).off('click.redactor-image-resize-hide.' + this.uuid);
                    this.$editor.off('click.redactor-image-resize-hide.' + this.uuid);

                    if (typeof this.image.resizeHandle !== 'undefined')
                    {
                        this.image.resizeHandle.el.attr('rel', this.image.resizeHandle.el.attr('style'));
                    }

                    this.code.sync();

                },
                loadResizableControls: function($image, imageBox)
                {
                    if (this.opts.imageResizable && !this.utils.isMobile())
                    {
                        var imageResizer = $('<span id="redactor-image-resizer" data-redactor="verified"></span>');

                        if (!this.utils.isDesktop())
                        {
                            imageResizer.css({ width: '15px', height: '15px' });
                        }

                        imageResizer.attr('contenteditable', false);
                        imageBox.append(imageResizer);
                        imageBox.append($image);

                        return imageResizer;
                    }
                    else
                    {
                        imageBox.append($image);
                        return false;
                    }
                },
                loadEditableControls: function($image)
                {
                    var imageBox = $('<span id="redactor-image-box" data-redactor="verified">');
                    imageBox.css('float', $image.css('float')).attr('contenteditable', false);

                    if ($image[0].style.margin != 'auto')
                    {
                        imageBox.css({
                            marginTop: $image[0].style.marginTop,
                            marginBottom: $image[0].style.marginBottom,
                            marginLeft: $image[0].style.marginLeft,
                            marginRight: $image[0].style.marginRight
                        });

                        $image.css('margin', '');
                    }
                    else
                    {
                        imageBox.css({ 'display': 'block', 'margin': 'auto' });
                    }

                    $image.css('opacity', '.5').after(imageBox);


                    if (this.opts.imageEditable)
                    {
                        // editter
                        this.image.editter = $('<span id="redactor-image-editter" data-redactor="verified">' + this.lang.get('edit') + '</span>');
                        this.image.editter.attr('contenteditable', false);
                        this.image.editter.on('click', $.proxy(function()
                        {
                            this.image.showEdit($image);
                        }, this));

                        imageBox.append(this.image.editter);

                        // position correction
                        var editerWidth = this.image.editter.innerWidth();
                        this.image.editter.css('margin-left', '-' + editerWidth/2 + 'px');
                    }

                    return this.image.loadResizableControls($image, imageBox);

                },
                remove: function(image)
                {
                    var $image = $(image);
                    var $link = $image.closest('a');
                    var $figure = $image.closest('figure');
                    var $parent = $image.parent();
                    if ($('#redactor-image-box').length !== 0)
                    {
                        $parent = $('#redactor-image-box').parent();
                    }

                    var $next;
                    if ($figure.length !== 0)
                    {
                        $next = $figure.next();
                        $figure.remove();
                    }
                    else if ($link.length !== 0)
                    {
                        $parent = $link.parent();
                        $link.remove();
                    }
                    else
                    {
                        $image.remove();
                    }

                    $('#redactor-image-box').remove();

                    if ($figure.length !== 0)
                    {
                        this.caret.setStart($next);
                    }
                    else
                    {
                        this.caret.setStart($parent);
                    }

                    // delete callback
                    this.core.setCallback('imageDelete', $image[0].src, $image);

                    this.modal.close();
                    this.code.sync();
                },
                insert: function(json, direct, e)
                {
                    // error callback
                    if (typeof json.error != 'undefined')
                    {
                        this.modal.close();
                        this.selection.restore();
                        this.core.setCallback('imageUploadError', json);
                        return;
                    }

                    var $img;
                    if (typeof json == 'string')
                    {
                        $img = $(json).attr('data-redactor-inserted-image', 'true');
                    }
                    else
                    {
                        $img = $('<img>');
                        $img.attr('src', json.filelink).attr('data-redactor-inserted-image', 'true');
                    }


                    var node = $img;
                    var isP = this.utils.isCurrentOrParent('P');
                    if (isP)
                    {
                        // will replace
                        node = $('<blockquote />').append($img);
                    }

                    if (direct)
                    {
                        this.selection.removeMarkers();
                        var marker = this.selection.getMarker();
                        this.insert.nodeToCaretPositionFromPoint(e, marker);
                    }
                    else
                    {
                        this.modal.close();
                    }

                    this.selection.restore();
                    this.buffer.set();

                    this.insert.html(this.utils.getOuterHtml(node), false);

                    var $image = this.$editor.find('img[data-redactor-inserted-image=true]').removeAttr('data-redactor-inserted-image');

                    if (isP)
                    {
                        $image.parent().contents().unwrap().wrap('<p />');
                    }
                    else if (this.opts.linebreaks)
                    {
                        $image.before('<br>').after('<br>');
                    }

                    if (typeof json == 'string') return;

                    this.core.setCallback('imageUpload', $image, json);

                }
            };
        },
        indent: function()
        {
            return {
                increase: function()
                {
                    // focus
                    if (!this.utils.browser('msie')) this.$editor.focus();

                    this.buffer.set();
                    this.selection.save();

                    var block = this.selection.getBlock();

                    if (block && block.tagName == 'LI')
                    {
                        this.indent.increaseLists();
                    }
                    else if (block === false && this.opts.linebreaks)
                    {
                        this.indent.increaseText();
                    }
                    else
                    {
                        this.indent.increaseBlocks();
                    }

                    this.selection.restore();
                    this.code.sync();
                },
                increaseLists: function()
                {
                    document.execCommand('indent');

                    this.indent.fixEmptyIndent();
                    this.clean.normalizeLists();
                    this.clean.clearUnverified();
                },
                increaseBlocks: function()
                {
                    $.each(this.selection.getBlocks(), $.proxy(function(i, elem)
                    {
                        if (elem.tagName === 'TD' || elem.tagName === 'TH') return;

                        var $el = this.utils.getAlignmentElement(elem);

                        var left = this.utils.normalize($el.css('margin-left')) + this.opts.indentValue;
                        $el.css('margin-left', left + 'px');

                    }, this));
                },
                increaseText: function()
                {
                    var wrapper = this.selection.wrap('div');
                    $(wrapper).attr('data-tagblock', 'redactor');
                    $(wrapper).css('margin-left', this.opts.indentValue + 'px');
                },
                decrease: function()
                {
                    this.buffer.set();
                    this.selection.save();

                    var block = this.selection.getBlock();
                    if (block && block.tagName == 'LI')
                    {
                        this.indent.decreaseLists();
                    }
                    else
                    {
                        this.indent.decreaseBlocks();
                    }

                    this.selection.restore();
                    this.code.sync();
                },
                decreaseLists: function ()
                {
                    document.execCommand('outdent');

                    var current = this.selection.getCurrent();

                    var $item = $(current).closest('li');
                    var $parent = $item.parent();
                    if ($item.length !== 0 && $parent.length !== 0 && $parent[0].tagName == 'LI')
                    {
                        $parent.after($item);
                    }

                    this.indent.fixEmptyIndent();

                    if (!this.opts.linebreaks && $item.length === 0)
                    {
                        document.execCommand('formatblock', false, 'p');
                        this.$editor.find('ul, ol, blockquote, p').each($.proxy(this.utils.removeEmpty, this));
                    }

                    this.clean.clearUnverified();
                },
                decreaseBlocks: function()
                {
                    $.each(this.selection.getBlocks(), $.proxy(function(i, elem)
                    {
                        var $el = this.utils.getAlignmentElement(elem);
                        var left = this.utils.normalize($el.css('margin-left')) - this.opts.indentValue;

                        if (left <= 0)
                        {
                            if (this.opts.linebreaks && typeof($el.data('tagblock')) !== 'undefined')
                            {
                                $el.replaceWith($el.html() + '<br />');
                            }
                            else
                            {
                                $el.css('margin-left', '');
                                this.utils.removeEmptyAttr($el, 'style');
                            }
                        }
                        else
                        {
                            $el.css('margin-left', left + 'px');
                        }

                    }, this));
                },
                fixEmptyIndent: function()
                {
                    var block = this.selection.getBlock();

                    if (this.range.collapsed && block && block.tagName == 'LI' && this.utils.isEmpty($(block).text()))
                    {
                        var $block = $(block);
                        $block.find('span').not('.redactor-selection-marker').contents().unwrap();
                        $block.append('<br>');
                    }
                }
            };
        },
        inline: function()
        {
            return {
                formatting: function(name)
                {
                    var type, value;

                    if (typeof this.formatting[name].style != 'undefined') type = 'style';
                    else if (typeof this.formatting[name]['class'] != 'undefined') type = 'class';

                    if (type) value = this.formatting[name][type];

                    this.inline.format(this.formatting[name].tag, type, value);

                },
                format: function(tag, type, value)
                {
                    // Stop formatting pre and headers
                    if (this.utils.isCurrentOrParent('PRE') || this.utils.isCurrentOrParentHeader()) return;

                    var tags = ['b', 'bold', 'i', 'italic', 'underline', 'strikethrough', 'deleted', 'superscript', 'subscript'];
                    var replaced = ['strong', 'strong', 'em', 'em', 'u', 'del', 'del', 'sup', 'sub'];

                    for (var i = 0; i < tags.length; i++)
                    {
                        if (tag == tags[i]) tag = replaced[i];
                    }

                    this.inline.type = type || false;
                    this.inline.value = value || false;

                    this.buffer.set();

                    if (!this.utils.browser('msie'))
                    {
                        this.$editor.focus();
                    }

                    this.selection.get();

                    if (this.range.collapsed)
                    {
                        this.inline.formatCollapsed(tag);
                    }
                    else
                    {
                        this.inline.formatMultiple(tag);
                    }
                },
                formatCollapsed: function(tag)
                {
                    var current = this.selection.getCurrent();
                    var $parent = $(current).closest(tag + '[data-redactor-tag=' + tag + ']');

                    // inline there is
                    if ($parent.length !== 0 && (this.inline.type != 'style' && $parent[0].tagName != 'SPAN'))
                    {
                        // remove empty
                        if (this.utils.isEmpty($parent.text()))
                        {
                            this.caret.setAfter($parent[0]);

                            $parent.remove();
                            this.code.sync();
                        }
                        else if (this.utils.isEndOfElement($parent))
                        {
                            this.caret.setAfter($parent[0]);
                        }

                        return;
                    }

                    // create empty inline
                    var node = $('<' + tag + '>').attr('data-verified', 'redactor').attr('data-redactor-tag', tag);
                    node.html(this.opts.invisibleSpace);

                    node = this.inline.setFormat(node);

                    var node = this.insert.node(node);
                    this.caret.setEnd(node);

                    this.code.sync();
                },
                formatMultiple: function(tag)
                {
                    this.inline.formatConvert(tag);

                    this.selection.save();
                    document.execCommand('strikethrough');

                    this.$editor.find('strike').each($.proxy(function(i,s)
                    {
                        var $el = $(s);

                        this.inline.formatRemoveSameChildren($el, tag);

                        var $span;
                        if (this.inline.type)
                        {
                            $span = $('<span>').attr('data-redactor-tag', tag).attr('data-verified', 'redactor');
                            $span = this.inline.setFormat($span);
                        }
                        else
                        {
                            $span = $('<' + tag + '>').attr('data-redactor-tag', tag).attr('data-verified', 'redactor');
                        }

                        $el.replaceWith($span.html($el.contents()));

                        if (tag == 'span')
                        {
                            var $parent = $span.parent();
                            if ($parent && $parent[0].tagName == 'SPAN' && this.inline.type == 'style')
                            {
                                var arr = this.inline.value.split(';');

                                for (var z = 0; z < arr.length; z++)
                                {
                                    if (arr[z] === '') return;
                                    var style = arr[z].split(':');
                                    $parent.css(style[0], '');

                                    if (this.utils.removeEmptyAttr($parent, 'style'))
                                    {
                                        $parent.replaceWith($parent.contents());
                                    }

                                }

                            }
                        }

                    }, this));

                    // clear text decoration
                    if (tag != 'span')
                    {
                        this.$editor.find(this.opts.inlineTags.join(', ')).each($.proxy(function(i,s)
                        {
                            var $el = $(s);
                            var property = $el.css('text-decoration');
                            if (property == 'line-through')
                            {
                                $el.css('text-decoration', '');
                                this.utils.removeEmptyAttr($el, 'style');
                            }
                        }, this));
                    }

                    if (tag != 'del')
                    {
                        var _this = this;
                        this.$editor.find('inline').each(function(i,s)
                        {
                            _this.utils.replaceToTag(s, 'del');
                        });
                    }

                    this.selection.restore();
                    this.code.sync();

                },
                formatRemoveSameChildren: function($el, tag)
                {
                    var self = this;
                    $el.children(tag).each(function()
                    {
                        var $child = $(this);

                        if (!$child.hasClass('redactor-selection-marker'))
                        {
                            if (self.inline.type == 'style')
                            {
                                var arr = self.inline.value.split(';');

                                for (var z = 0; z < arr.length; z++)
                                {
                                    if (arr[z] === '') return;

                                    var style = arr[z].split(':');
                                    $child.css(style[0], '');

                                    if (self.utils.removeEmptyAttr($child , 'style'))
                                    {
                                        $child.replaceWith($child.contents());
                                    }

                                }
                            }
                            else
                            {
                                $child.contents().unwrap();
                            }
                        }

                    });
                },
                formatConvert: function(tag)
                {
                    this.selection.save();

                    var find = '';
                    if (this.inline.type == 'class') find = '[data-redactor-class=' + this.inline.value + ']';
                    else if (this.inline.type == 'style')
                    {
                        find = '[data-redactor-style="' + this.inline.value + '"]';
                    }

                    var self = this;
                    if (tag != 'del')
                    {
                        this.$editor.find('del').each(function(i,s)
                        {
                            self.utils.replaceToTag(s, 'inline');
                        });
                    }

                    if (tag != 'span')
                    {
                        this.$editor.find(tag).each(function()
                        {
                            var $el = $(this);
                            $el.replaceWith($('<strike />').html($el.contents()));

                        });
                    }

                    this.$editor.find('[data-redactor-tag="' + tag + '"]' + find).each(function()
                    {
                        if (find === '' && tag == 'span' && this.tagName.toLowerCase() == tag) return;

                        var $el = $(this);
                        $el.replaceWith($('<strike />').html($el.contents()));

                    });

                    this.selection.restore();
                },
                setFormat: function(node)
                {
                    switch (this.inline.type)
                    {
                        case 'class':

                            if (node.hasClass(this.inline.value))
                            {
                                node.removeClass(this.inline.value);
                                node.removeAttr('data-redactor-class');
                            }
                            else
                            {
                                node.addClass(this.inline.value);
                                node.attr('data-redactor-class', this.inline.value);
                            }


                        break;
                        case 'style':

                            node[0].style.cssText = this.inline.value;
                            node.attr('data-redactor-style', this.inline.value);

                        break;
                    }

                    return node;
                },
                removeStyle: function()
                {
                    this.buffer.set();
                    var current = this.selection.getCurrent();
                    var nodes = this.selection.getInlines();

                    this.selection.save();

                    if (current && current.tagName === 'SPAN')
                    {
                        var $s = $(current);

                        $s.removeAttr('style');
                        if ($s[0].attributes.length === 0)
                        {
                            $s.replaceWith($s.contents());
                        }
                    }

                    $.each(nodes, $.proxy(function(i,s)
                    {
                        var $s = $(s);
                        if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker'))
                        {
                            $s.removeAttr('style');
                            if ($s[0].attributes.length === 0)
                            {
                                $s.replaceWith($s.contents());
                            }
                        }
                    }, this));

                    this.selection.restore();
                    this.code.sync();

                },
                removeStyleRule: function(name)
                {
                    this.buffer.set();
                    var parent = this.selection.getParent();
                    var nodes = this.selection.getInlines();

                    this.selection.save();

                    if (parent && parent.tagName === 'SPAN')
                    {
                        var $s = $(parent);

                        $s.css(name, '');
                        this.utils.removeEmptyAttr($s, 'style');
                        if ($s[0].attributes.length === 0)
                        {
                            $s.replaceWith($s.contents());
                        }
                    }

                    $.each(nodes, $.proxy(function(i,s)
                    {
                        var $s = $(s);
                        if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker'))
                        {
                            $s.css(name, '');
                            this.utils.removeEmptyAttr($s, 'style');
                            if ($s[0].attributes.length === 0)
                            {
                                $s.replaceWith($s.contents());
                            }
                        }
                    }, this));

                    this.selection.restore();
                    this.code.sync();
                },
                removeFormat: function()
                {
                    this.buffer.set();
                    var current = this.selection.getCurrent();

                    this.selection.save();

                    document.execCommand('removeFormat');

                    if (current && current.tagName === 'SPAN')
                    {
                        $(current).replaceWith($(current).contents());
                    }


                    $.each(this.selection.getNodes(), $.proxy(function(i,s)
                    {
                        var $s = $(s);
                        if ($.inArray(s.tagName.toLowerCase(), this.opts.inlineTags) != -1 && !$s.hasClass('redactor-selection-marker'))
                        {
                            $s.replaceWith($s.contents());
                        }
                    }, this));

                    this.selection.restore();
                    this.code.sync();

                },
                toggleClass: function(className)
                {
                    this.inline.format('span', 'class', className);
                },
                toggleStyle: function(value)
                {
                    this.inline.format('span', 'style', value);
                }
            };
        },
        insert: function()
        {
            return {
                set: function(html, clean)
                {
                    this.placeholder.remove();

                    html = this.clean.setVerified(html);

                    if (typeof clean == 'undefined')
                    {
                        html = this.clean.onPaste(html, false);
                    }

                    this.$editor.html(html);
                    this.selection.remove();
                    this.focus.setEnd();
                    this.clean.normalizeLists();
                    this.code.sync();
                    this.observe.load();

                    if (typeof clean == 'undefined')
                    {
                        setTimeout($.proxy(this.clean.clearUnverified, this), 10);
                    }
                },
                text: function(text)
                {
                    this.placeholder.remove();

                    text = text.toString();
                    text = $.trim(text);
                    text = this.clean.getPlainText(text, false);

                    this.$editor.focus();

                    if (this.utils.browser('msie'))
                    {
                        this.insert.htmlIe(text);
                    }
                    else
                    {
                        this.selection.get();

                        this.range.deleteContents();
                        var el = document.createElement("div");
                        el.innerHTML = text;
                        var frag = document.createDocumentFragment(), node, lastNode;
                        while ((node = el.firstChild))
                        {
                            lastNode = frag.appendChild(node);
                        }

                        this.range.insertNode(frag);

                        if (lastNode)
                        {
                            var range = this.range.cloneRange();
                            range.setStartAfter(lastNode);
                            range.collapse(true);
                            this.sel.removeAllRanges();
                            this.sel.addRange(range);
                        }
                    }

                    this.code.sync();
                    this.clean.clearUnverified();
                },
                htmlWithoutClean: function(html)
                {
                    this.insert.html(html, false);
                },
                html: function(html, clean)
                {
                    this.placeholder.remove();

                    if (typeof clean == 'undefined') clean = true;

                    this.$editor.focus();

                    html = this.clean.setVerified(html);

                    if (clean)
                    {
                        html = this.clean.onPaste(html);
                    }

                    if (this.utils.browser('msie'))
                    {
                        this.insert.htmlIe(html);
                    }
                    else
                    {
                        if (this.clean.singleLine) this.insert.execHtml(html);
                        else document.execCommand('insertHTML', false, html);

                        this.insert.htmlFixMozilla();

                    }

                    this.clean.normalizeLists();

                    // remove empty paragraphs finaly
                    if (!this.opts.linebreaks)
                    {
                        this.$editor.find('p').each($.proxy(this.utils.removeEmpty, this));
                    }

                    this.code.sync();
                    this.observe.load();

                    if (clean)
                    {
                        this.clean.clearUnverified();
                    }

                },
                htmlFixMozilla: function()
                {
                    // FF inserts empty p when content was selected dblclick
                    if (!this.utils.browser('mozilla')) return;

                    var $next = $(this.selection.getBlock()).next();
                    if ($next.length > 0 && $next[0].tagName == 'P' && $next.html() === '')
                    {
                        $next.remove();
                    }

                },
                htmlIe: function(html)
                {
                    if (this.utils.isIe11())
                    {
                        var parent = this.utils.isCurrentOrParent('P');
                        var $html = $('<div>').append(html);
                        var blocksMatch = $html.contents().is('p, :header, dl, ul, ol, div, table, td, blockquote, pre, address, section, header, footer, aside, article');

                        if (parent && blocksMatch) this.insert.ie11FixInserting(parent, html);
                        else this.insert.ie11PasteFrag(html);

                        return;
                    }

                    document.selection.createRange().pasteHTML(html);

                },
                execHtml: function(html)
                {
                    html = this.clean.setVerified(html);

                    this.selection.get();

                    this.range.deleteContents();

                    var el = document.createElement('div');
                    el.innerHTML = html;

                    var frag = document.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild))
                    {
                        lastNode = frag.appendChild(node);
                    }

                    this.range.insertNode(frag);

                    this.range.collapse(true);
                    this.caret.setAfter(lastNode);

                },
                node: function(node, deleteContents)
                {
                    node = node[0] || node;

                    var html = this.utils.getOuterHtml(node);
                    html = this.clean.setVerified(html);

                    if (html.match(/</g) !== null)
                    {
                        node = $(html)[0];
                    }

                    this.selection.get();

                    if (deleteContents !== false)
                    {
                        this.range.deleteContents();
                    }

                    this.range.insertNode(node);
                    this.range.collapse(false);
                    this.selection.addRange();

                    return node;
                },
                nodeToPoint: function(node, x, y)
                {
                    node = node[0] || node;

                    this.selection.get();

                    var range;
                    if (document.caretPositionFromPoint)
                    {
                        var pos = document.caretPositionFromPoint(x, y);

                        this.range.setStart(pos.offsetNode, pos.offset);
                        this.range.collapse(true);
                        this.range.insertNode(node);
                    }
                    else if (document.caretRangeFromPoint)
                    {
                        range = document.caretRangeFromPoint(x, y);
                        range.insertNode(node);
                    }
                    else if (typeof document.body.createTextRange != "undefined")
                    {
                        range = document.body.createTextRange();
                        range.moveToPoint(x, y);
                        var endRange = range.duplicate();
                        endRange.moveToPoint(x, y);
                        range.setEndPoint("EndToEnd", endRange);
                        range.select();
                    }
                },
                nodeToCaretPositionFromPoint: function(e, node)
                {
                    node = node[0] || node;

                    var range;
                    var x = e.clientX, y = e.clientY;
                    if (document.caretPositionFromPoint)
                    {
                        var pos = document.caretPositionFromPoint(x, y);
                        var sel = document.getSelection();
                        range = sel.getRangeAt(0);
                        range.setStart(pos.offsetNode, pos.offset);
                        range.collapse(true);
                        range.insertNode(node);
                    }
                    else if (document.caretRangeFromPoint)
                    {
                        range = document.caretRangeFromPoint(x, y);
                        range.insertNode(node);
                    }
                    else if (typeof document.body.createTextRange != "undefined")
                    {
                        range = document.body.createTextRange();
                        range.moveToPoint(x, y);
                        var endRange = range.duplicate();
                        endRange.moveToPoint(x, y);
                        range.setEndPoint("EndToEnd", endRange);
                        range.select();
                    }

                },
                ie11FixInserting: function(parent, html)
                {
                    var node = document.createElement('span');
                    node.className = 'redactor-ie-paste';
                    this.insert.node(node);

                    var parHtml = $(parent).html();

                    parHtml = '<p>' + parHtml.replace(/<span class="redactor-ie-paste"><\/span>/gi, '</p>' + html + '<p>') + '</p>';
                    $(parent).replaceWith(parHtml);
                },
                ie11PasteFrag: function(html)
                {
                    this.selection.get();
                    this.range.deleteContents();

                    var el = document.createElement("div");
                    el.innerHTML = html;

                    var frag = document.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild))
                    {
                        lastNode = frag.appendChild(node);
                    }

                    this.range.insertNode(frag);
                    this.range.collapse(false);
                    this.selection.addRange();
                }
            };
        },
        keydown: function()
        {
            return {
                init: function(e)
                {
                    if (this.rtePaste) return;

                    var key = e.which;
                    var arrow = (key >= 37 && key <= 40);

                    this.keydown.ctrl = e.ctrlKey || e.metaKey;
                    this.keydown.current = this.selection.getCurrent();
                    this.keydown.parent = this.selection.getParent();
                    this.keydown.block = this.selection.getBlock();

                    // detect tags
                    this.keydown.pre = this.utils.isTag(this.keydown.current, 'pre');
                    this.keydown.blockquote = this.utils.isTag(this.keydown.current, 'blockquote');
                    this.keydown.figcaption = this.utils.isTag(this.keydown.current, 'figcaption');

                    // shortcuts setup
                    this.shortcuts.init(e, key);

                    this.keydown.checkEvents(arrow, key);
                    this.keydown.setupBuffer(e, key);
                    this.keydown.addArrowsEvent(arrow);
                    this.keydown.setupSelectAll(e, key);

                    // callback
                    var keydownStop = this.core.setCallback('keydown', e);
                    if (keydownStop === false)
                    {
                        e.preventDefault();
                        return false;
                    }

                    // ie and ff exit from table
                    if (this.opts.enterKey && (this.utils.browser('msie') || this.utils.browser('mozilla')) && (key === this.keyCode.DOWN || key === this.keyCode.RIGHT))
                    {
                        var isEndOfTable = false;
                        var $table = false;
                        if (this.keydown.block && this.keydown.block.tagName === 'TD')
                        {
                            $table = $(this.keydown.block).closest('table');
                        }

                        if ($table && $table.find('td').last()[0] === this.keydown.block)
                        {
                            isEndOfTable = true;
                        }

                        if (this.utils.isEndOfElement() && isEndOfTable)
                        {
                            var node = $(this.opts.emptyHtml);
                            $table.after(node);
                            this.caret.setStart(node);
                        }
                    }

                    // down
                    if (this.opts.enterKey && key === this.keyCode.DOWN)
                    {
                        this.keydown.onArrowDown();
                    }

                    // turn off enter key
                    if (!this.opts.enterKey && key === this.keyCode.ENTER)
                    {
                        e.preventDefault();
                        // remove selected
                        if (!this.range.collapsed) this.range.deleteContents();
                        return;
                    }

                    // on enter
                    if (key == this.keyCode.ENTER && !e.shiftKey && !e.ctrlKey && !e.metaKey)
                    {
                        var stop = this.core.setCallback('enter', e);
                        if (stop === false)
                        {
                            e.preventDefault();
                            return false;
                        }

                        if (this.keydown.blockquote && this.keydown.exitFromBlockquote(e) === true)
                        {
                            return false;
                        }

                        var current, $next;
                        if (this.keydown.pre)
                        {
                            return this.keydown.insertNewLine(e);
                        }
                        else if (this.keydown.blockquote || this.keydown.figcaption)
                        {
                            current = this.selection.getCurrent();
                            $next = $(current).next();

                            if ($next.length !== 0 && $next[0].tagName == 'BR')
                            {
                                return this.keydown.insertBreakLine(e);
                            }
                            else if (this.utils.isEndOfElement() && (current && current != 'SPAN'))
                            {
                                return this.keydown.insertDblBreakLine(e);
                            }
                            else
                            {
                                return this.keydown.insertBreakLine(e);
                            }
                        }
                        else if (this.opts.linebreaks && !this.keydown.block)
                        {
                            current = this.selection.getCurrent();
                            $next = $(this.keydown.current).next();



                            if ($next.length !== 0 && $next[0].tagName == 'BR')
                            {
                                return this.keydown.insertBreakLine(e);
                            }
                            else if (current !== false && $(current).hasClass('redactor-invisible-space'))
                            {
                                this.caret.setAfter(current);
                                $(current).contents().unwrap();

                                return this.keydown.insertDblBreakLine(e);
                            }
                            else
                            {
                                if (this.utils.isEndOfEditor())
                                {
                                    return this.keydown.insertDblBreakLine(e);
                                }
                                else if ($next.length === 0 && current === false && typeof $next.context != 'undefined')
                                {
                                    return this.keydown.insertBreakLine(e);
                                }

                                return this.keydown.insertBreakLine(e);
                            }
                        }
                        else if (this.opts.linebreaks && this.keydown.block)
                        {
                            setTimeout($.proxy(this.keydown.replaceDivToBreakLine, this), 1);
                        }
                        // paragraphs
                        else if (!this.opts.linebreaks && this.keydown.block)
                        {
                            if (this.keydown.block.tagName !== 'LI')
                            {
                                setTimeout($.proxy(this.keydown.replaceDivToParagraph, this), 1);
                            }
                            else
                            {
                                current = this.selection.getCurrent();
                                var $parent = $(current).closest('li');
                                var $list = $parent.closest('ul,ol');

                                if ($parent.length !== 0 && this.utils.isEmpty($parent.html()) && $list.next().length === 0)
                                {
                                    var node = $(this.opts.emptyHtml);
                                    $list.after(node);
                                    this.caret.setStart(node);

                                    return false;
                                }
                            }
                        }
                        else if (!this.opts.linebreaks && !this.keydown.block)
                        {
                            return this.keydown.insertParagraph(e);
                        }
                    }

                    // Shift+Enter or Ctrl+Enter
                    if (key === this.keyCode.ENTER && (e.ctrlKey || e.shiftKey))
                    {
                        return this.keydown.onShiftEnter(e);
                    }


                    // tab or cmd + [
                    if (key === this.keyCode.TAB || e.metaKey && key === 221 || e.metaKey && key === 219)
                    {
                        return this.keydown.onTab(e, key);
                    }

                    // image delete and backspace
                    if (key === this.keyCode.BACKSPACE || key === this.keyCode.DELETE)
                    {
                        if (this.utils.browser('mozilla') && this.keydown.current && this.keydown.current.tagName === 'TD')
                        {
                            e.preventDefault();
                            return false;
                        }

                        var nodes = this.selection.getNodes();
                        if (nodes)
                        {
                            var len = nodes.length;
                            var last;
                            for (var i = 0; i < len; i++)
                            {
                                var children = $(nodes[i]).children('img');
                                if (children.length !== 0)
                                {
                                    var self = this;
                                    $.each(children, function(z,s)
                                    {
                                        var $s = $(s);
                                        if ($s.css('float') != 'none') return;

                                        // image delete callback
                                        self.core.setCallback('imageDelete', s.src, $s);
                                        last = s;
                                    });
                                }
                                else if (nodes[i].tagName == 'IMG')
                                {
                                    if (last != nodes[i])
                                    {
                                        // image delete callback
                                        this.core.setCallback('imageDelete', nodes[i].src, $(nodes[i]));
                                        last = nodes[i];
                                    }
                                }
                            }
                        }
                    }

                    // backspace
                    if (key === this.keyCode.BACKSPACE)
                    {
                        this.keydown.removeInvisibleSpace();
                        this.keydown.removeEmptyListInTable(e);
                    }

                    this.code.sync();
                },
                checkEvents: function(arrow, key)
                {
                    if (!arrow && (this.core.getEvent() == 'click' || this.core.getEvent() == 'arrow'))
                    {
                        this.core.addEvent(false);

                        if (this.keydown.checkKeyEvents(key))
                        {
                            this.buffer.set();
                        }
                    }
                },
                checkKeyEvents: function(key)
                {
                    var k = this.keyCode;
                    var keys = [k.BACKSPACE, k.DELETE, k.ENTER, k.SPACE, k.ESC, k.TAB, k.CTRL, k.META, k.ALT, k.SHIFT];

                    return ($.inArray(key, keys) == -1) ? true : false;

                },
                addArrowsEvent: function(arrow)
                {
                    if (!arrow) return;

                    if ((this.core.getEvent() == 'click' || this.core.getEvent() == 'arrow'))
                    {
                        this.core.addEvent(false);
                        return;
                    }

                    this.core.addEvent('arrow');
                },
                setupBuffer: function(e, key)
                {
                    if (this.keydown.ctrl && key === 90 && !e.shiftKey && !e.altKey && this.opts.buffer.length) // z key
                    {
                        e.preventDefault();
                        this.buffer.undo();
                        return;
                    }
                    // undo
                    else if (this.keydown.ctrl && key === 90 && e.shiftKey && !e.altKey && this.opts.rebuffer.length !== 0)
                    {
                        e.preventDefault();
                        this.buffer.redo();
                        return;
                    }
                    else if (!this.keydown.ctrl)
                    {
                        if (key == this.keyCode.BACKSPACE || key == this.keyCode.DELETE || (key == this.keyCode.ENTER && !e.ctrlKey && !e.shiftKey) || key == this.keyCode.SPACE)
                        {
                            this.buffer.set();
                        }
                    }
                },
                setupSelectAll: function(e, key)
                {
                    if (this.keydown.ctrl && key === 65)
                    {
                        this.utils.enableSelectAll();
                    }
                    else if (key != this.keyCode.LEFT_WIN && !this.keydown.ctrl)
                    {
                        this.utils.disableSelectAll();
                    }
                },
                onArrowDown: function()
                {
                    var tags = [this.keydown.blockquote, this.keydown.pre, this.keydown.figcaption];

                    for (var i = 0; i < tags.length; i++)
                    {
                        if (tags[i])
                        {
                            this.keydown.insertAfterLastElement(tags[i]);
                            return false;
                        }
                    }
                },
                onShiftEnter: function(e)
                {
                    this.buffer.set();

                    if (this.utils.isEndOfElement())
                    {
                        return this.keydown.insertDblBreakLine(e);
                    }

                    return this.keydown.insertBreakLine(e);
                },
                onTab: function(e, key)
                {
                    if (!this.opts.tabKey) return true;
                    if (this.utils.isEmpty(this.code.get()) && this.opts.tabAsSpaces === false) return true;

                    e.preventDefault();

                    var node;
                    if (this.keydown.pre && !e.shiftKey)
                    {
                        node = (this.opts.preSpaces) ? document.createTextNode(Array(this.opts.preSpaces + 1).join('\u00a0')) : document.createTextNode('\t');
                        this.insert.node(node);
                        this.code.sync();
                    }
                    else if (this.opts.tabAsSpaces !== false)
                    {
                        node = document.createTextNode(Array(this.opts.tabAsSpaces + 1).join('\u00a0'));
                        this.insert.node(node);
                        this.code.sync();
                    }
                    else
                    {
                        if (e.metaKey && key === 219) this.indent.decrease();
                        else if (e.metaKey && key === 221) this.indent.increase();
                        else if (!e.shiftKey) this.indent.increase();
                        else this.indent.decrease();
                    }

                    return false;
                },
                replaceDivToBreakLine: function()
                {
                    var blockElem = this.selection.getBlock();
                    var blockHtml = blockElem.innerHTML.replace(/<br\s?\/?>/gi, '');
                    if ((blockElem.tagName === 'DIV' || blockElem.tagName === 'P') && blockHtml === '' && !$(blockElem).hasClass('redactor-editor'))
                    {
                        var br = document.createElement('br');

                        $(blockElem).replaceWith(br);
                        this.caret.setBefore(br);

                        this.code.sync();

                        return false;
                    }
                },
                replaceDivToParagraph: function()
                {
                    var blockElem = this.selection.getBlock();
                    var blockHtml = blockElem.innerHTML.replace(/<br\s?\/?>/gi, '');
                    if (blockElem.tagName === 'DIV' && blockHtml === '' && !$(blockElem).hasClass('redactor-editor'))
                    {
                        var p = document.createElement('p');
                        p.innerHTML = this.opts.invisibleSpace;

                        $(blockElem).replaceWith(p);
                        this.caret.setStart(p);

                        this.code.sync();

                        return false;
                    }
                    else if (this.opts.cleanStyleOnEnter && blockElem.tagName == 'P')
                    {
                        $(blockElem).removeAttr('class').removeAttr('style');
                    }
                },
                insertParagraph: function(e)
                {
                    e.preventDefault();

                    this.selection.get();

                    var p = document.createElement('p');
                    p.innerHTML = this.opts.invisibleSpace;

                    this.range.deleteContents();
                    this.range.insertNode(p);

                    this.caret.setStart(p);

                    this.code.sync();

                    return false;
                },
                exitFromBlockquote: function(e)
                {
                    if (!this.utils.isEndOfElement()) return;

                    var tmp = $.trim($(this.keydown.block).html());
                    if (tmp.search(/(<br\s?\/?>){2}$/i) != -1)
                    {
                        e.preventDefault();

                        if (this.opts.linebreaks)
                        {
                            var br = document.createElement('br');
                            $(this.keydown.blockquote).after(br);

                            this.caret.setBefore(br);
                            $(this.keydown.block).html(tmp.replace(/<br\s?\/?>$/i, ''));
                        }
                        else
                        {
                            var node = $(this.opts.emptyHtml);
                            $(this.keydown.blockquote).after(node);
                            this.caret.setStart(node);
                        }

                        return true;

                    }

                    return;

                },
                insertAfterLastElement: function(element)
                {
                    if (!this.utils.isEndOfElement()) return;

                    this.buffer.set();

                    if (this.opts.linebreaks)
                    {
                        var contents = $('<div>').append($.trim(this.$editor.html())).contents();
                        var last = contents.last()[0];
                        if (last.tagName == 'SPAN' && last.innerHTML === '')
                        {
                            last = contents.prev()[0];
                        }

                        if (this.utils.getOuterHtml(last) != this.utils.getOuterHtml(element)) return;

                        var br = document.createElement('br');
                        $(element).after(br);
                        this.caret.setAfter(br);

                    }
                    else
                    {
                        if (this.$editor.contents().last()[0] !== element) return;

                        var node = $(this.opts.emptyHtml);
                        $(element).after(node);
                        this.caret.setStart(node);
                    }
                },
                insertNewLine: function(e)
                {
                    e.preventDefault();

                    var node = document.createTextNode('\n');

                    this.selection.get();

                    this.range.deleteContents();
                    this.range.insertNode(node);

                    this.caret.setAfter(node);

                    this.code.sync();

                    return false;
                },
                insertBreakLine: function(e)
                {
                    return this.keydown.insertBreakLineProcessing(e);
                },
                insertDblBreakLine: function(e)
                {
                    return this.keydown.insertBreakLineProcessing(e, true);
                },
                insertBreakLineProcessing: function(e, dbl)
                {
                    e.stopPropagation();

                    this.selection.get();
                    var br1 = document.createElement('br');

                    if (this.utils.browser('msie'))
                    {
                        this.range.collapse(false);
                        this.range.setEnd(this.range.endContainer, this.range.endOffset);
                    }
                    else
                    {
                        this.range.deleteContents();
                    }

                    this.range.insertNode(br1);

                    if (dbl === true)
                    {

                        var $next = $(br1).next();
                        if ($next.length !== 0 && $next[0].tagName === 'BR' && this.utils.isEndOfEditor())
                        {
                            this.caret.setAfter(br1);
                            this.code.sync();
                            return false;
                        }

                        var br2 = document.createElement('br');
                        this.range.insertNode(br2);
                        this.caret.setAfter(br2);
                    }
                    else
                    {
                        this.keydown.insertBreakLineProcessingAfter(br1);
                    }

                    this.code.sync();
                    return false;
                },
                insertBreakLineProcessingAfter: function(node)
                {
                    var space = this.utils.createSpaceElement();
                    $(node).after(space);
                    this.selection.selectElement(space);

                    $(space).replaceWith(function()
                    {
                        return $(this).contents();
                    });
                },
                removeInvisibleSpace: function()
                {
                    var $current = $(this.keydown.current);
                    if ($current.text().search(/^\u200B$/g) === 0)
                    {
                        $current.remove();
                    }
                },
                removeEmptyListInTable: function(e)
                {
                    var $current = $(this.keydown.current);
                    var $parent = $(this.keydown.parent);
                    var td = $current.closest('td');

                    if (td.length !== 0 && $current.closest('li') && $parent.children('li').length === 1)
                    {
                        if (!this.utils.isEmpty($current.text())) return;

                        e.preventDefault();

                        $current.remove();
                        $parent.remove();

                        this.caret.setStart(td);
                    }
                }
            };
        },
        keyup: function()
        {
            return {
                init: function(e)
                {
                    if (this.rtePaste) return;

                    var key = e.which;

                    this.keyup.current = this.selection.getCurrent();
                    this.keyup.parent = this.selection.getParent();
                    var $parent = this.utils.isRedactorParent($(this.keyup.parent).parent());

                    // callback
                    var keyupStop = this.core.setCallback('keyup', e);
                    if (keyupStop === false)
                    {
                        e.preventDefault();
                        return false;
                    }

                    // replace to p before / after the table or body
                    if (!this.opts.linebreaks && this.keyup.current.nodeType == 3 && this.keyup.current.length <= 1 && (this.keyup.parent === false || this.keyup.parent.tagName == 'BODY'))
                    {
                        this.keyup.replaceToParagraph();
                    }

                    // replace div after lists
                    if (!this.opts.linebreaks && this.utils.isRedactorParent(this.keyup.current) && this.keyup.current.tagName === 'DIV')
                    {
                        this.keyup.replaceToParagraph(false);
                    }


                    if (!this.opts.linebreaks && $(this.keyup.parent).hasClass('redactor-invisible-space') && ($parent === false || $parent[0].tagName == 'BODY'))
                    {
                        $(this.keyup.parent).contents().unwrap();
                        this.keyup.replaceToParagraph();
                    }

                    // linkify
                    if (this.keyup.isLinkify(key))
                    {
                        this.formatLinkify(this.opts.linkProtocol, this.opts.convertLinks, this.opts.convertUrlLinks, this.opts.convertImageLinks, this.opts.convertVideoLinks, this.opts.linkSize);

                        this.observe.load();
                        this.code.sync();
                    }

                    if (key === this.keyCode.DELETE || key === this.keyCode.BACKSPACE)
                    {
                        // clear unverified
                        this.clean.clearUnverified();

                        if (this.observe.image)
                        {
                            e.preventDefault();

                            this.image.hideResize();

                            this.buffer.set();
                            this.image.remove(this.observe.image);
                            this.observe.image = false;

                            return false;
                        }

                        // remove empty paragraphs
                        this.$editor.find('p').each($.proxy(this.utils.removeEmpty, this));

                        // remove invisible space
                        if (this.opts.linebreaks && this.keyup.current && this.keyup.current.tagName == 'DIV' && this.utils.isEmpty(this.keyup.current.innerHTML))
                        {
                            $(this.keyup.current).after(this.selection.getMarkerAsHtml());
                            this.selection.restore();
                            $(this.keyup.current).remove();
                        }

                        // if empty
                        return this.keyup.formatEmpty(e);
                    }
                },
                isLinkify: function(key)
                {
                    return this.opts.convertLinks && (this.opts.convertUrlLinks || this.opts.convertImageLinks || this.opts.convertVideoLinks) && key === this.keyCode.ENTER && !this.utils.isCurrentOrParent('PRE');
                },
                replaceToParagraph: function(clone)
                {
                    var $current = $(this.keyup.current);

                    var node;
                    if (clone === false)
                    {
                        node = $('<p>').append($current.html());
                    }
                    else
                    {
                        node = $('<p>').append($current.clone());
                    }

                    $current.replaceWith(node);
                    var next = $(node).next();
                    if (typeof(next[0]) !== 'undefined' && next[0].tagName == 'BR')
                    {
                        next.remove();
                    }

                    this.caret.setEnd(node);
                },
                formatEmpty: function(e)
                {
                    var html = $.trim(this.$editor.html());

                    if (!this.utils.isEmpty(html)) return;

                    e.preventDefault();

                    if (this.opts.linebreaks)
                    {
                        this.$editor.html(this.selection.getMarkerAsHtml());
                        this.selection.restore();
                    }
                    else
                    {
                        html = '<p><br /></p>';

                        this.$editor.html(html);
                        this.focus.setStart();
                    }

                    this.code.sync();

                    return false;
                }
            };
        },
        lang: function()
        {
            return {
                load: function()
                {
                    this.opts.curLang = this.opts.langs[this.opts.lang];
                },
                get: function(name)
                {
                    return (typeof this.opts.curLang[name] != 'undefined') ? this.opts.curLang[name] : '';
                }
            };
        },
        line: function()
        {
            return {
                insert: function()
                {
                    this.buffer.set();

                    var blocks = this.selection.getBlocks();
                    if (blocks[0] !== false && this.line.isExceptLastOrFirst(blocks))
                    {
                        if (!this.utils.browser('msie')) this.$editor.focus();
                        return;
                    }

                    if (this.utils.browser('msie'))
                    {
                        this.line.insertInIe();
                    }
                    else
                    {
                        this.line.insertInOthersBrowsers();
                    }
                },
                isExceptLastOrFirst: function(blocks)
                {
                    var exceptTags = ['li', 'td', 'th', 'blockquote', 'figcaption', 'pre', 'dl', 'dt', 'dd'];

                    var first = blocks[0].tagName.toLowerCase();
                    var last = this.selection.getLastBlock();

                    last = (typeof last == 'undefined') ? first : last.tagName.toLowerCase();

                    var firstFound = $.inArray(first, exceptTags) != -1;
                    var lastFound = $.inArray(last, exceptTags) != -1;

                    if ((firstFound && lastFound) || firstFound)
                    {
                        return true;
                    }
                },
                insertInIe: function()
                {
                    this.utils.saveScroll();
                    this.buffer.set();

                    this.insert.node(document.createElement('hr'));

                    this.utils.restoreScroll();
                    this.code.sync();
                },
                insertInOthersBrowsers: function()
                {
                    this.buffer.set();

                    var extra = '<p id="redactor-insert-line"><br /></p>';
                    if (this.opts.linebreaks) extra = '<br id="redactor-insert-line">';

                    document.execCommand('insertHTML', false, '<hr>' + extra);

                    this.line.setFocus();
                    this.code.sync();
                },
                setFocus: function()
                {
                    var node = this.$editor.find('#redactor-insert-line');
                    var next = $(node).next()[0];

                    if (next)
                    {
                        this.caret.setAfter(node);
                        node.remove();
                    }
                    else
                    {
                        node.removeAttr('id');
                    }
                }
            };
        },
        link: function()
        {
            return {
                show: function(e)
                {
                    if (typeof e != 'undefined' && e.preventDefault) e.preventDefault();

                    this.modal.load('link', this.lang.get('link_insert'), 600);

                    this.modal.createCancelButton();
                    this.link.buttonInsert = this.modal.createActionButton(this.lang.get('insert'));

                    this.selection.get();

                    this.link.getData();
                    this.link.cleanUrl();

                    if (this.link.target == '_blank') $('#redactor-link-blank').prop('checked', true);

                    this.link.$inputUrl = $('#redactor-link-url');
                    this.link.$inputText = $('#redactor-link-url-text');

                    this.link.$inputText.val(this.link.text);
                    this.link.$inputUrl.val(this.link.url);

                    this.link.buttonInsert.on('click', $.proxy(this.link.insert, this));

                    // hide link's tooltip
                    $('.redactor-link-tooltip').remove();

                    // show modal
                    this.selection.save();
                    this.modal.show();
                    this.link.$inputUrl.focus();
                },
                cleanUrl: function()
                {
                    var thref = self.location.href.replace(/\/$/i, '');
                    this.link.url = this.link.url.replace(thref, '');
                    this.link.url = this.link.url.replace(/^\/#/, '#');
                    this.link.url = this.link.url.replace('mailto:', '');

                    // remove host from href
                    if (!this.opts.linkProtocol)
                    {
                        var re = new RegExp('^(http|ftp|https)://' + self.location.host, 'i');
                        this.link.url = this.link.url.replace(re, '');
                    }

                },
                getData: function()
                {
                    this.link.$node = false;

                    var $el = $(this.selection.getCurrent()).closest('a');
                    if ($el.length !== 0 && $el[0].tagName === 'A')
                    {
                        this.link.$node = $el;

                        this.link.url = $el.attr('href');
                        this.link.text = $el.text();
                        this.link.target = $el.attr('target');
                    }
                    else
                    {
                        this.link.text = this.sel.toString();
                        this.link.url = '';
                        this.link.target = '';
                    }

                },
                insert: function()
                {
                    var target = '';
                    var link = this.link.$inputUrl.val();
                    var text = this.link.$inputText.val();

                    if ($.trim(link) === '')
                    {
                        this.link.$inputUrl.addClass('redactor-input-error').on('keyup', function()
                        {
                            $(this).removeClass('redactor-input-error');
                            $(this).off('keyup');

                        });

                        return;
                    }

                    // mailto
                    if (link.search('@') != -1 && /(http|ftp|https):\/\//i.test(link) === false)
                    {
                        link = 'mailto:' + link;
                    }
                    // url, not anchor
                    else if (link.search('#') !== 0)
                    {
                        if ($('#redactor-link-blank').prop('checked'))
                        {
                            target = '_blank';
                        }

                        // test url (add protocol)
                        var pattern = '((xn--)?[a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}';
                        var re = new RegExp('^(http|ftp|https)://' + pattern, 'i');
                        var re2 = new RegExp('^' + pattern, 'i');
                        var re3 = new RegExp('\.(html|php)$', 'i');
                        if (link.search(re) == -1 && link.search(re3) == -1 && link.search(re2) === 0 && this.opts.linkProtocol)
                        {
                            link = this.opts.linkProtocol + '://' + link;
                        }
                    }

                    this.link.set(text, link, target);
                    this.modal.close();
                },
                set: function(text, link, target)
                {
                    text = $.trim(text.replace(/<|>/g, ''));

                    this.selection.restore();

                    if (text === '' && link === '') return;
                    if (text === '' && link !== '') text = link;

                    if (this.link.$node)
                    {
                        this.buffer.set();

                        this.link.$node.text(text).attr('href', link);
                        if (target !== '')
                        {
                            this.link.$node.attr('target', target);
                        }
                        else
                        {
                            this.link.$node.removeAttr('target');
                        }

                        this.code.sync();
                    }
                    else
                    {
                        if (this.utils.browser('mozilla') && this.link.text === '')
                        {
                            var $a = $('<a />').attr('href', link).text(text);
                            if (target !== '') $a.attr('target', target);

                            this.insert.node($a);
                            this.selection.selectElement($a);
                        }
                        else
                        {
                            var $a;
                            if (this.utils.browser('msie'))
                            {
                                $a = $('<a href="' + link + '">').text(text);
                                if (target !== '') $a.attr('target', target);

                                $a = $(this.insert.node($a));
                                this.selection.selectElement($a);
                            }
                            else
                            {
                                document.execCommand('createLink', false, link);

                                $a = $(this.selection.getCurrent()).closest('a');
                                if (this.utils.browser('mozilla'))
                                {
                                    $a = $('a[_moz_dirty=""]');
                                }

                                if (target !== '') $a.attr('target', target);
                                $a.removeAttr('style').removeAttr('_moz_dirty');

                                if (this.link.text !== '' || this.link.text != text)
                                {

                                    $a.text(text);
                                    this.selection.selectElement($a);
                                }
                            }
                        }

                        this.code.sync();
                        this.core.setCallback('insertedLink', $a);

                    }

                    // link tooltip
                    setTimeout($.proxy(function()
                    {
                        this.observe.links();

                    }, this), 5);
                },
                unlink: function(e)
                {
                    if (typeof e != 'undefined' && e.preventDefault)
                    {
                        e.preventDefault();
                    }

                    var nodes = this.selection.getNodes();
                    if (!nodes) return;

                    this.buffer.set();

                    var len = nodes.length;
                    for (var i = 0; i < len; i++)
                    {
                        var $node = $(nodes[i]).closest('a');
                        $node.replaceWith($node.contents());
                    }

                    // hide link's tooltip
                    $('.redactor-link-tooltip').remove();

                    this.code.sync();

                },
                toggleClass: function(className)
                {
                    this.link.setClass(className, 'toggleClass');
                },
                addClass: function(className)
                {
                    this.link.setClass(className, 'addClass');
                },
                removeClass: function(className)
                {
                    this.link.setClass(className, 'removeClass');
                },
                setClass: function(className, func)
                {
                    var links = this.selection.getInlinesTags(['a']);
                    if (links === false) return;

                    $.each(links, function()
                    {
                        $(this)[func](className);
                    });
                }
            };
        },
        list: function()
        {
            return {
                toggle: function(cmd)
                {
                    this.placeholder.remove();
                    if (!this.utils.browser('msie')) this.$editor.focus();

                    this.buffer.set();
                    this.selection.save();

                    var parent = this.selection.getParent();
                    var $list = $(parent).closest('ol, ul');

                    if (!this.utils.isRedactorParent($list) && $list.length !== 0)
                    {
                        $list = false;
                    }

                    var isUnorderedCmdOrdered, isOrderedCmdUnordered;
                    var remove = false;
                    if ($list && $list.length)
                    {
                        remove = true;
                        var listTag = $list[0].tagName;

                        isUnorderedCmdOrdered = (cmd === 'orderedlist' && listTag === 'UL');
                        isOrderedCmdUnordered = (cmd === 'unorderedlist' && listTag === 'OL');
                    }

                    if (isUnorderedCmdOrdered)
                    {
                        this.utils.replaceToTag($list, 'ol');
                    }
                    else if (isOrderedCmdUnordered)
                    {
                        this.utils.replaceToTag($list, 'ul');
                    }
                    else
                    {
                        if (remove)
                        {
                            this.list.remove(cmd);
                        }
                        else
                        {
                            this.list.insert(cmd);
                        }
                    }


                    this.selection.restore();
                    this.code.sync();
                },
                insert: function(cmd)
                {
                    var parent = this.selection.getParent();
                    var current = this.selection.getCurrent();
                    var $td = $(current).closest('td, th');

                    if (this.utils.browser('msie') && this.opts.linebreaks)
                    {
                        this.list.insertInIe(cmd);
                    }
                    else
                    {
                        document.execCommand('insert' + cmd);
                    }

                    var $list = $(this.selection.getParent()).closest('ol, ul');

                    if ($td.length !== 0)
                    {
                        var prev = $td.prev();
                        var html = $td.html();
                        $td.html('');
                        if (prev && prev.length === 1 && (prev[0].tagName === 'TD' || prev[0].tagName === 'TH'))
                        {
                            $(prev).after($td);
                        }
                        else
                        {
                            $(parent).prepend($td);
                        }

                        $td.html(html);
                    }

                    if (this.utils.isEmpty($list.find('li').text()))
                    {
                        var $children = $list.children('li');
                        $children.find('br').remove();
                        $children.append(this.selection.getMarkerAsHtml());
                    }

                    if ($list.length)
                    {
                        // remove block-element list wrapper
                        var $listParent = $list.parent();
                        if (this.utils.isRedactorParent($listParent) && $listParent[0].tagName != 'LI' && this.utils.isBlock($listParent[0]))
                        {
                            $listParent.replaceWith($listParent.contents());
                        }
                    }

                    if (!this.utils.browser('msie'))
                    {
                        this.$editor.focus();
                    }

                    this.clean.clearUnverified();
                },
                insertInIe: function(cmd)
                {
                    var wrapper = this.selection.wrap('div');
                    var wrapperHtml = $(wrapper).html();

                    var tmpList = (cmd == 'orderedlist') ? $('<ol>') : $('<ul>');
                    var tmpLi = $('<li>');

                    if ($.trim(wrapperHtml) === '')
                    {
                        tmpLi.append(this.selection.getMarkerAsHtml());
                        tmpList.append(tmpLi);
                        this.$editor.find('#selection-marker-1').replaceWith(tmpList);
                    }
                    else
                    {
                        var items = wrapperHtml.split(/<br\s?\/?>/gi);
                        if (items)
                        {
                            for (var i = 0; i < items.length; i++)
                            {
                                if ($.trim(items[i]) !== '')
                                {
                                    tmpList.append($('<li>').html(items[i]));
                                }
                            }
                        }
                        else
                        {
                            tmpLi.append(wrapperHtml);
                            tmpList.append(tmpLi);
                        }

                        $(wrapper).replaceWith(tmpList);
                    }
                },
                remove: function(cmd)
                {
                    document.execCommand('insert' + cmd);

                    var $current = $(this.selection.getCurrent());

                    this.indent.fixEmptyIndent();

                    if (!this.opts.linebreaks && $current.closest('li, th, td').length === 0)
                    {
                        document.execCommand('formatblock', false, 'p');
                        this.$editor.find('ul, ol, blockquote').each($.proxy(this.utils.removeEmpty, this));
                    }

                    var $table = $(this.selection.getCurrent()).closest('table');
                    var $prev = $table.prev();
                    if (!this.opts.linebreaks && $table.length !== 0 && $prev.length !== 0 && $prev[0].tagName == 'BR')
                    {
                        $prev.remove();
                    }

                    this.clean.clearUnverified();

                }
            };
        },
        modal: function()
        {
            return {
                callbacks: {},
                loadTemplates: function()
                {
                    this.opts.modal = {
                        imageEdit: String()
                        + '<section id="redactor-modal-image-edit">'
                            + '<label>' + this.lang.get('title') + '</label>'
                            + '<input type="text" id="redactor-image-title" />'
                            + '<label class="redactor-image-link-option">' + this.lang.get('link') + '</label>'
                            + '<input type="text" id="redactor-image-link" class="redactor-image-link-option" />'
                            + '<label class="redactor-image-link-option"><input type="checkbox" id="redactor-image-link-blank"> ' + this.lang.get('link_new_tab') + '</label>'
                            + '<label class="redactor-image-position-option">' + this.lang.get('image_position') + '</label>'
                            + '<select class="redactor-image-position-option" id="redactor-image-align">'
                                + '<option value="none">' + this.lang.get('none') + '</option>'
                                + '<option value="left">' + this.lang.get('left') + '</option>'
                                + '<option value="center">' + this.lang.get('center') + '</option>'
                                + '<option value="right">' + this.lang.get('right') + '</option>'
                            + '</select>'
                        + '</section>',

                        image: String()
                        + '<section id="redactor-modal-image-insert">'
                            + '<div id="redactor-modal-image-droparea"></div>'
                        + '</section>',

                        file: String()
                        + '<section id="redactor-modal-file-insert">'
                            + '<div id="redactor-modal-file-upload-box">'
                                + '<label>' + this.lang.get('filename') + '</label>'
                                + '<input type="text" id="redactor-filename" /><br><br>'
                                + '<div id="redactor-modal-file-upload"></div>'
                            + '</div>'
                        + '</section>',

                        link: String()
                        + '<section id="redactor-modal-link-insert">'
                            + '<label>URL</label>'
                            + '<input type="url" id="redactor-link-url" />'
                            + '<label>' + this.lang.get('text') + '</label>'
                            + '<input type="text" id="redactor-link-url-text" />'
                            + '<label><input type="checkbox" id="redactor-link-blank"> ' + this.lang.get('link_new_tab') + '</label>'
                        + '</section>'
                    };


                    $.extend(this.opts, this.opts.modal);

                },
                addCallback: function(name, callback)
                {
                    this.modal.callbacks[name] = callback;
                },
                createTabber: function($modal)
                {
                    this.modal.$tabber = $('<div>').attr('id', 'redactor-modal-tabber');

                    $modal.prepend(this.modal.$tabber);
                },
                addTab: function(id, name, active)
                {
                    var $tab = $('<a href="#" rel="tab' + id + '">').text(name);
                    if (active)
                    {
                        $tab.addClass('active');
                    }

                    var self = this;
                    $tab.on('click', function(e)
                    {
                        e.preventDefault();
                        $('.redactor-tab').hide();
                        $('.redactor-' + $(this).attr('rel')).show();

                        self.modal.$tabber.find('a').removeClass('active');
                        $(this).addClass('active');

                    });

                    this.modal.$tabber.append($tab);
                },
                addTemplate: function(name, template)
                {
                    this.opts.modal[name] = template;
                },
                getTemplate: function(name)
                {
                    return this.opts.modal[name];
                },
                getModal: function()
                {
                    return this.$modalBody.find('section');
                },
                load: function(templateName, title, width)
                {
                    this.modal.templateName = templateName;
                    this.modal.width = width;

                    this.modal.build();
                    this.modal.enableEvents();
                    this.modal.setTitle(title);
                    this.modal.setDraggable();
                    this.modal.setContent();

                    // callbacks
                    if (typeof this.modal.callbacks[templateName] != 'undefined')
                    {
                        this.modal.callbacks[templateName].call(this);
                    }

                },
                show: function()
                {
                    // ios keyboard hide
                    if (this.utils.isMobile() && !this.utils.browser('msie'))
                    {
                        document.activeElement.blur();
                    }

                    $(document.body).removeClass('body-redactor-hidden');
                    this.modal.bodyOveflow = $(document.body).css('overflow');
                    $(document.body).css('overflow', 'hidden');

                    if (this.utils.isMobile())
                    {
                        this.modal.showOnMobile();
                    }
                    else
                    {
                        this.modal.showOnDesktop();
                    }

                    this.$modalOverlay.show();
                    this.$modalBox.show();

                    this.modal.setButtonsWidth();

                    this.utils.saveScroll();

                    // resize
                    if (!this.utils.isMobile())
                    {
                        setTimeout($.proxy(this.modal.showOnDesktop, this), 0);
                        $(window).on('resize.redactor-modal', $.proxy(this.modal.resize, this));
                    }

                    // modal shown callback
                    this.core.setCallback('modalOpened', this.modal.templateName, this.$modal);

                    // fix bootstrap modal focus
                    $(document).off('focusin.modal');

                    // enter
                    this.$modal.find('input[type=text],input[type=url],input[type=email]').on('keydown.redactor-modal', $.proxy(this.modal.setEnter, this));
                },
                showOnDesktop: function()
                {
                    var height = this.$modal.outerHeight();
                    var windowHeight = $(window).height();
                    var windowWidth = $(window).width();

                    if (this.modal.width > windowWidth)
                    {
                        this.$modal.css({
                            width: '96%',
                            marginTop: (windowHeight/2 - height/2) + 'px'
                        });
                        return;
                    }

                    if (height > windowHeight)
                    {
                        this.$modal.css({
                            width: this.modal.width + 'px',
                            marginTop: '20px'
                        });
                    }
                    else
                    {
                        this.$modal.css({
                            width: this.modal.width + 'px',
                            marginTop: (windowHeight/2 - height/2) + 'px'
                        });
                    }
                },
                showOnMobile: function()
                {
                    this.$modal.css({
                        width: '96%',
                        marginTop: '2%'
                    });

                },
                resize: function()
                {
                    if (this.utils.isMobile())
                    {
                        this.modal.showOnMobile();
                    }
                    else
                    {
                        this.modal.showOnDesktop();
                    }
                },
                setTitle: function(title)
                {
                    this.$modalHeader.html(title);
                },
                setContent: function()
                {
                    this.$modalBody.html(this.modal.getTemplate(this.modal.templateName));
                },
                setDraggable: function()
                {
                    if (typeof $.fn.draggable === 'undefined') return;

                    this.$modal.draggable({ handle: this.$modalHeader });
                    this.$modalHeader.css('cursor', 'move');
                },
                setEnter: function(e)
                {
                    if (e.which != 13) return;

                    e.preventDefault();
                    this.$modal.find('button.redactor-modal-action-btn').click();
                },
                createCancelButton: function()
                {
                    var button = $('<button>').addClass('redactor-modal-btn redactor-modal-close-btn').html(this.lang.get('cancel'));
                    button.on('click', $.proxy(this.modal.close, this));

                    this.$modalFooter.append(button);
                },
                createDeleteButton: function(label)
                {
                    return this.modal.createButton(label, 'delete');
                },
                createActionButton: function(label)
                {
                    return this.modal.createButton(label, 'action');
                },
                createButton: function(label, className)
                {
                    var button = $('<button>').addClass('redactor-modal-btn').addClass('redactor-modal-' + className + '-btn').html(label);
                    this.$modalFooter.append(button);

                    return button;
                },
                setButtonsWidth: function()
                {
                    var buttons = this.$modalFooter.find('button');
                    var buttonsSize = buttons.length;
                    if (buttonsSize === 0) return;

                    buttons.css('width', (100/buttonsSize) + '%');
                },
                build: function()
                {
                    this.modal.buildOverlay();

                    this.$modalBox = $('<div id="redactor-modal-box" />').hide();
                    this.$modal = $('<div id="redactor-modal" />');
                    this.$modalHeader = $('<header />');
                    this.$modalClose = $('<span id="redactor-modal-close" />').html('&times;');
                    this.$modalBody = $('<div id="redactor-modal-body" />');
                    this.$modalFooter = $('<footer />');

                    this.$modal.append(this.$modalHeader);
                    this.$modal.append(this.$modalClose);
                    this.$modal.append(this.$modalBody);
                    this.$modal.append(this.$modalFooter);
                    this.$modalBox.append(this.$modal);
                    this.$modalBox.appendTo(document.body);
                },
                buildOverlay: function()
                {
                    this.$modalOverlay = $('<div id="redactor-modal-overlay">').hide();
                    $('body').prepend(this.$modalOverlay);
                },
                enableEvents: function()
                {
                    this.$modalClose.on('click.redactor-modal', $.proxy(this.modal.close, this));
                    $(document).on('keyup.redactor-modal', $.proxy(this.modal.closeHandler, this));
                    this.$editor.on('keyup.redactor-modal', $.proxy(this.modal.closeHandler, this));
                    this.$modalBox.on('click.redactor-modal', $.proxy(this.modal.close, this));
                },
                disableEvents: function()
                {
                    this.$modalClose.off('click.redactor-modal');
                    $(document).off('keyup.redactor-modal');
                    this.$editor.off('keyup.redactor-modal');
                    this.$modalBox.off('click.redactor-modal');
                    $(window).off('resize.redactor-modal');
                },
                closeHandler: function(e)
                {
                    if (e.which != this.keyCode.ESC) return;

                    this.modal.close(false);
                },
                close: function(e)
                {
                    if (e)
                    {
                        if (!$(e.target).hasClass('redactor-modal-close-btn') && e.target != this.$modalClose[0] && e.target != this.$modalBox[0])
                        {
                            return;
                        }

                        e.preventDefault();
                    }

                    if (!this.$modalBox) return;

                    this.modal.disableEvents();

                    this.$modalOverlay.remove();

                    this.$modalBox.fadeOut('fast', $.proxy(function()
                    {
                        this.$modalBox.remove();

                        setTimeout($.proxy(this.utils.restoreScroll, this), 0);

                        if (e !== undefined) this.selection.restore();

                        $(document.body).css('overflow', this.modal.bodyOveflow);
                        this.core.setCallback('modalClosed', this.modal.templateName);

                    }, this));

                }
            };
        },
        observe: function()
        {
            return {
                load: function()
                {
                    this.observe.images();
                    this.observe.links();
                },
                buttons: function(e, btnName)
                {
                    var current = this.selection.getCurrent();
                    var parent = this.selection.getParent();

                    if (e !== false)
                    {
                        this.button.setInactiveAll();
                    }
                    else
                    {
                        this.button.setInactiveAll(btnName);
                    }

                    if (e === false && btnName !== 'html')
                    {
                        if ($.inArray(btnName, this.opts.activeButtons) != -1) this.button.toggleActive(btnName);
                        return;
                    }

                    //var linkButtonName = (this.utils.isCurrentOrParent('A')) ? this.lang.get('link_edit') : this.lang.get('link_insert');
                    //$('body').find('a.redactor-dropdown-link').text(linkButtonName);

                    $.each(this.opts.activeButtonsStates, $.proxy(function(key, value)
                    {
                        var parentEl = $(parent).closest(key);
                        var currentEl = $(current).closest(key);

                        if (parentEl.length !== 0 && !this.utils.isRedactorParent(parentEl)) return;
                        if (!this.utils.isRedactorParent(currentEl)) return;
                        if (parentEl.length !== 0 || currentEl.closest(key).length !== 0)
                        {
                            this.button.setActive(value);
                        }

                    }, this));

                    var $parent = $(parent).closest(this.opts.alignmentTags.toString().toLowerCase());
                    if (this.utils.isRedactorParent(parent) && $parent.length)
                    {
                        var align = ($parent.css('text-align') === '') ? 'left' : $parent.css('text-align');
                        this.button.setActive('align' + align);
                    }
                },
                addButton: function(tag, btnName)
                {
                    this.opts.activeButtons.push(btnName);
                    this.opts.activeButtonsStates[tag] = btnName;
                },
                images: function()
                {
                    this.$editor.find('img').each($.proxy(function(i, img)
                    {
                        var $img = $(img);

                        // IE fix (when we clicked on an image and then press backspace IE does goes to image's url)
                        $img.closest('a').on('click', function(e) { e.preventDefault(); });

                        if (this.utils.browser('msie')) $img.attr('unselectable', 'on');

                        this.image.setEditable($img);

                    }, this));

                    $(document).on('click.redactor-image-delete.' + this.uuid, $.proxy(function(e)
                    {
                        this.observe.image = false;
                        if (e.target.tagName == 'IMG' && this.utils.isRedactorParent(e.target))
                        {
                            this.observe.image = (this.observe.image && this.observe.image == e.target) ? false : e.target;
                        }

                    }, this));

                },
                links: function()
                {
                    if (!this.opts.linkTooltip) return;

                    this.$editor.find('a').on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.showTooltip, this));
                    this.$editor.on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.closeTooltip, this));
                    $(document).on('touchstart.redactor.' + this.uuid + ' click.redactor.' + this.uuid, $.proxy(this.observe.closeTooltip, this));
                },
                getTooltipPosition: function($link)
                {
                    return $link.offset();
                },
                showTooltip: function(e)
                {
                    var $link = $(e.target);
                    var $parent = $link.closest('a');
                    var tag = ($link.length !== 0) ? $link[0].tagName : false;

                    if ($parent[0].tagName === 'A')
                    {
                        if (tag === 'IMG') return;
                        else if (tag !== 'A') $link = $parent;
                    }

                    if (tag !== 'A')
                    {
                        return;
                    }

                    var pos = this.observe.getTooltipPosition($link);
                    var tooltip = $('<span class="redactor-link-tooltip"></span>');

                    var href = $link.attr('href');
                    if (href === undefined)
                    {
                        href = '';
                    }

                    if (href.length > 24) href = href.substring(0, 24) + '...';

                    var aLink = $('<a href="' + $link.attr('href') + '" target="_blank" />').html(href).addClass('redactor-link-tooltip-action');
                    var aEdit = $('<a href="#" />').html(this.lang.get('edit')).on('click', $.proxy(this.link.show, this)).addClass('redactor-link-tooltip-action');
                    var aUnlink = $('<a href="#" />').html(this.lang.get('unlink')).on('click', $.proxy(this.link.unlink, this)).addClass('redactor-link-tooltip-action');

                    tooltip.append(aLink).append(' | ').append(aEdit).append(' | ').append(aUnlink);
                    tooltip.css({
                        top: (pos.top + parseInt($link.css('line-height'), 10)) + 'px',
                        left: pos.left + 'px'
                    });

                    $('.redactor-link-tooltip').remove();
                    $('body').append(tooltip);
                },
                closeTooltip: function(e)
                {
                    e = e.originalEvent || e;

                    var target = e.target;
                    var $parent = $(target).closest('a');
                    if ($parent.length !== 0 && $parent[0].tagName === 'A' && target.tagName !== 'A')
                    {
                        return;
                    }
                    else if ((target.tagName === 'A' && this.utils.isRedactorParent(target)) || $(target).hasClass('redactor-link-tooltip-action'))
                    {
                        return;
                    }

                    $('.redactor-link-tooltip').remove();
                }

            };
        },
        paragraphize: function()
        {
            return {
                load: function(html)
                {
                    if (this.opts.linebreaks) return html;
                    if (html === '' || html === '<p></p>') return this.opts.emptyHtml;

                    this.paragraphize.blocks = ['table', 'div', 'pre', 'form', 'ul', 'ol', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'blockquote', 'figcaption',
                    'address', 'section', 'header', 'footer', 'aside', 'article', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea',
                    'button', 'option', 'map', 'area', 'math', 'hr', 'fieldset', 'legend', 'hgroup', 'nav', 'figure', 'details', 'menu', 'summary', 'p'];

                    html = html + "\n";

                    this.paragraphize.safes = [];
                    this.paragraphize.z = 0;

                    html = html.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, '</blockquote>');

                    html = this.paragraphize.getSafes(html);
                    html = this.paragraphize.getSafesComments(html);
                    html = this.paragraphize.replaceBreaksToNewLines(html);
                    html = this.paragraphize.replaceBreaksToParagraphs(html);
                    html = this.paragraphize.clear(html);
                    html = this.paragraphize.restoreSafes(html);

                    html = html.replace(new RegExp('<br\\s?/?>\n?<(' + this.paragraphize.blocks.join('|') + ')(.*?[^>])>', 'gi'), '<p><br /></p>\n<$1$2>');

                    return $.trim(html);
                },
                getSafes: function(html)
                {
                    var $div = $('<div />').append(html);

                    // remove paragraphs in blockquotes
                    $div.find('blockquote p').replaceWith(function()
                    {
                        return $(this).append('<br />').contents();
                    });

                    html = $div.html();

                    $div.find(this.paragraphize.blocks.join(', ')).each($.proxy(function(i,s)
                    {
                        this.paragraphize.z++;
                        this.paragraphize.safes[this.paragraphize.z] = s.outerHTML;
                        html = html.replace(s.outerHTML, '\n{replace' + this.paragraphize.z + '}');

                    }, this));

                    return html;
                },
                getSafesComments: function(html)
                {
                    var commentsMatches = html.match(/<!--([\w\W]*?)-->/gi);

                    if (!commentsMatches) return html;

                    $.each(commentsMatches, $.proxy(function(i,s)
                    {
                        this.paragraphize.z++;
                        this.paragraphize.safes[this.paragraphize.z] = s;
                        html = html.replace(s, '\n{replace' + this.paragraphize.z + '}');
                    }, this));

                    return html;
                },
                restoreSafes: function(html)
                {
                    $.each(this.paragraphize.safes, function(i,s)
                    {
                        s = (typeof s !== 'undefined') ? s.replace(/\$/g, '&#36;') : s;
                        html = html.replace('{replace' + i + '}', s);

                    });

                    return html;
                },
                replaceBreaksToParagraphs: function(html)
                {
                    var htmls = html.split(new RegExp('\n', 'g'), -1);

                    html = '';
                    if (htmls)
                    {
                        var len = htmls.length;
                        for (var i = 0; i < len; i++)
                        {
                            if (!htmls.hasOwnProperty(i)) return;

                            if (htmls[i].search('{replace') == -1)
                            {
                                htmls[i] = htmls[i].replace(/<p>\n\t?<\/p>/gi, '');
                                htmls[i] = htmls[i].replace(/<p><\/p>/gi, '');

                                if (htmls[i] !== '')
                                {
                                    html += '<p>' +  htmls[i].replace(/^\n+|\n+$/g, "") + "</p>";
                                }
                            }
                            else html += htmls[i];
                        }
                    }

                    return html;
                },
                replaceBreaksToNewLines: function(html)
                {
                    html = html.replace(/<br \/>\s*<br \/>/gi, "\n\n");
                    html = html.replace(/<br\s?\/?>\n?<br\s?\/?>/gi, "\n<br /><br />");

                    html = html.replace(new RegExp("\r\n", 'g'), "\n");
                    html = html.replace(new RegExp("\r", 'g'), "\n");
                    html = html.replace(new RegExp("/\n\n+/"), 'g', "\n\n");

                    return html;
                },
                clear: function(html)
                {
                    html = html.replace(new RegExp('</blockquote></p>', 'gi'), '</blockquote>');
                    html = html.replace(new RegExp('<p></blockquote>', 'gi'), '</blockquote>');
                    html = html.replace(new RegExp('<p><blockquote>', 'gi'), '<blockquote>');
                    html = html.replace(new RegExp('<blockquote></p>', 'gi'), '<blockquote>');

                    html = html.replace(new RegExp('<p><p ', 'gi'), '<p ');
                    html = html.replace(new RegExp('<p><p>', 'gi'), '<p>');
                    html = html.replace(new RegExp('</p></p>', 'gi'), '</p>');
                    html = html.replace(new RegExp('<p>\\s?</p>', 'gi'), '');
                    html = html.replace(new RegExp("\n</p>", 'gi'), '</p>');
                    html = html.replace(new RegExp('<p>\t?\t?\n?<p>', 'gi'), '<p>');
                    html = html.replace(new RegExp('<p>\t*</p>', 'gi'), '');

                    return html;
                }
            };
        },
        paste: function()
        {
            return {
                init: function(e)
                {
                    if (!this.opts.cleanOnPaste)
                    {
                        setTimeout($.proxy(this.code.sync, this), 1);
                        return;
                    }

                    this.rtePaste = true;

                    this.buffer.set();
                    this.selection.save();
                    this.utils.saveScroll();

                    this.paste.createPasteBox();

                    $(window).on('scroll.redactor-freeze', $.proxy(function()
                    {
                        $(window).scrollTop(this.saveBodyScroll);

                    }, this));

                    setTimeout($.proxy(function()
                    {
                        var html = this.$pasteBox.html();

                        this.$pasteBox.remove();

                        this.selection.restore();
                        this.utils.restoreScroll();

                        this.paste.insert(html);

                        $(window).off('scroll.redactor-freeze');

                    }, this), 1);

                },
                createPasteBox: function()
                {
                    this.$pasteBox = $('<div>').html('').attr('contenteditable', 'true').css({ position: 'fixed', width: 0, top: 0, left: '-9999px' });

                    if (this.utils.browser('msie'))
                    {
                        this.$box.append(this.$pasteBox);
                    }
                    else
                    {
                        $('body').append(this.$pasteBox);
                    }

                    this.$pasteBox.focus();
                },
                insert: function(html)
                {
                    html = this.core.setCallback('pasteBefore', html);

                    // clean
                    html = (this.utils.isSelectAll()) ? this.clean.onPaste(html, false) : this.clean.onPaste(html);

                    html = this.core.setCallback('paste', html);

                    if (this.utils.isSelectAll())
                    {
                        this.insert.set(html, false);
                    }
                    else
                    {
                        this.insert.html(html, false);
                    }

                    this.utils.disableSelectAll();
                    this.rtePaste = false;

                    setTimeout($.proxy(this.clean.clearUnverified, this), 10);

                    // clean empty spans
                    setTimeout($.proxy(function()
                    {
                        var spans = this.$editor.find('span');
                        $.each(spans, function(i,s)
                        {
                            var html = s.innerHTML.replace(/[\u200B-\u200D\uFEFF]/, '');
                            if (html === '' && s.attributes.length === 0) $(s).remove();

                        });

                    }, this), 10);
                }
            };
        },
        placeholder: function()
        {
            return {
                enable: function()
                {
                    if (!this.placeholder.is()) return;

                    this.$editor.attr('placeholder', this.$element.attr('placeholder'));

                    this.placeholder.toggle();
                    this.$editor.on('keyup.redactor-placeholder', $.proxy(this.placeholder.toggle, this));

                },
                toggle: function()
                {
                    var func = 'removeClass';
                    if (this.utils.isEmpty(this.$editor.html(), false)) func = 'addClass';
                    this.$editor[func]('redactor-placeholder');
                },
                remove: function()
                {
                    this.$editor.removeClass('redactor-placeholder');
                },
                is: function()
                {
                    if (this.opts.placeholder)
                    {
                        return this.$element.attr('placeholder', this.opts.placeholder);
                    }
                    else
                    {
                        return !(typeof this.$element.attr('placeholder') == 'undefined' || this.$element.attr('placeholder') === '');
                    }
                }
            };
        },
        progress: function()
        {
            return {
                show: function()
                {
                    $(document.body).append($('<div id="redactor-progress"><span></span></div>'));
                    $('#redactor-progress').fadeIn();
                },
                hide: function()
                {
                    $('#redactor-progress').fadeOut(1500, function()
                    {
                        $(this).remove();
                    });
                }

            };
        },
        selection: function()
        {
            return {
                get: function()
                {
                    this.sel = document.getSelection();

                    if (document.getSelection && this.sel.getRangeAt && this.sel.rangeCount)
                    {
                        this.range = this.sel.getRangeAt(0);
                    }
                    else
                    {
                        this.range = document.createRange();
                    }
                },
                addRange: function()
                {
                    try {
                        this.sel.removeAllRanges();
                    } catch (e) {}

                    this.sel.addRange(this.range);
                },
                getCurrent: function()
                {
                    var el = false;
                    this.selection.get();

                    if (this.sel && this.sel.rangeCount > 0)
                    {
                        el = this.sel.getRangeAt(0).startContainer;
                    }

                    return this.utils.isRedactorParent(el);
                },
                getParent: function(elem)
                {
                    elem = elem || this.selection.getCurrent();
                    if (elem)
                    {
                        return this.utils.isRedactorParent($(elem).parent()[0]);
                    }

                    return false;
                },
                getBlock: function(node)
                {
                    node = node || this.selection.getCurrent();

                    while (node)
                    {
                        if (this.utils.isBlockTag(node.tagName))
                        {
                            return ($(node).hasClass('redactor-editor')) ? false : node;
                        }

                        node = node.parentNode;
                    }

                    return false;
                },
                getInlines: function(nodes, tags)
                {
                    this.selection.get();

                    if (this.range && this.range.collapsed)
                    {
                        return false;
                    }

                    var inlines = [];
                    nodes = (typeof nodes == 'undefined' || nodes === false) ? this.selection.getNodes() : nodes;
                    var inlineTags = this.opts.inlineTags;
                    inlineTags.push('span');

                    if (typeof tags !== 'undefined')
                    {
                        for (var i = 0; i < tags.length; i++)
                        {
                            inlineTags.push(tags[i]);
                        }
                    }

                    $.each(nodes, $.proxy(function(i,node)
                    {
                        if ($.inArray(node.tagName.toLowerCase(), inlineTags) != -1)
                        {
                            inlines.push(node);
                        }

                    }, this));

                    return (inlines.length === 0) ? false : inlines;
                },
                getInlinesTags: function(tags)
                {
                    this.selection.get();

                    if (this.range && this.range.collapsed)
                    {
                        return false;
                    }

                    var inlines = [];
                    var nodes =  this.selection.getNodes();
                    $.each(nodes, $.proxy(function(i,node)
                    {
                        if ($.inArray(node.tagName.toLowerCase(), tags) != -1)
                        {
                            inlines.push(node);
                        }

                    }, this));

                    return (inlines.length === 0) ? false : inlines;
                },
                getBlocks: function(nodes)
                {
                    this.selection.get();

                    if (this.range && this.range.collapsed)
                    {
                        return [this.selection.getBlock()];
                    }

                    var blocks = [];
                    nodes = (typeof nodes == 'undefined') ? this.selection.getNodes() : nodes;
                    $.each(nodes, $.proxy(function(i,node)
                    {
                        if (this.utils.isBlock(node))
                        {
                            this.selection.lastBlock = node;
                            blocks.push(node);
                        }

                    }, this));

                    return (blocks.length === 0) ? [this.selection.getBlock()] : blocks;
                },
                getLastBlock: function()
                {
                    return this.selection.lastBlock;
                },
                getNodes: function()
                {
                    this.selection.get();

                    var startNode = this.selection.getNodesMarker(1);
                    var endNode = this.selection.getNodesMarker(2);
                    var range = this.range.cloneRange();

                    if (this.range.collapsed === false)
                    {
                        var startContainer = range.startContainer;
                        var startOffset = range.startOffset;

                        // end marker
                        this.selection.setNodesMarker(range, endNode, false);

                        // start marker
                        range.setStart(startContainer, startOffset);
                        this.selection.setNodesMarker(range, startNode, true);
                    }
                    else
                    {
                        this.selection.setNodesMarker(range, startNode, true);
                        endNode = startNode;
                    }

                    var nodes = [];
                    var counter = 0;

                    var self = this;
                    this.$editor.find('*').each(function()
                    {
                        if (this == startNode)
                        {
                            var parent = $(this).parent();
                            if (parent.length !== 0 && parent[0].tagName != 'BODY' && self.utils.isRedactorParent(parent[0]))
                            {
                                nodes.push(parent[0]);
                            }

                            nodes.push(this);
                            counter = 1;
                        }
                        else
                        {
                            if (counter > 0)
                            {
                                nodes.push(this);
                                counter = counter + 1;
                            }
                        }

                        if (this == endNode)
                        {
                            return false;
                        }

                    });

                    var finalNodes = [];
                    var len = nodes.length;
                    for (var i = 0; i < len; i++)
                    {
                        if (nodes[i].id != 'nodes-marker-1' && nodes[i].id != 'nodes-marker-2')
                        {
                            finalNodes.push(nodes[i]);
                        }
                    }

                    this.selection.removeNodesMarkers();

                    return finalNodes;

                },
                getNodesMarker: function(num)
                {
                    return $('<span id="nodes-marker-' + num + '" class="redactor-nodes-marker" data-verified="redactor">' + this.opts.invisibleSpace + '</span>')[0];
                },
                setNodesMarker: function(range, node, type)
                {
                    try {
                        range.collapse(type);
                        range.insertNode(node);
                    }
                    catch (e) {}
                },
                removeNodesMarkers: function()
                {
                    $(document).find('span.redactor-nodes-marker').remove();
                    this.$editor.find('span.redactor-nodes-marker').remove();
                },
                fromPoint: function(start, end)
                {
                    this.caret.setOffset(start, end);
                },
                wrap: function(tag)
                {
                    this.selection.get();

                    if (this.range.collapsed) return false;

                    var wrapper = document.createElement(tag);
                    wrapper.appendChild(this.range.extractContents());
                    this.range.insertNode(wrapper);

                    return wrapper;
                },
                selectElement: function(node)
                {
                    this.caret.set(node, 0, node, 1);
                },
                selectAll: function()
                {
                    this.selection.get();
                    this.range.selectNodeContents(this.$editor[0]);
                    this.selection.addRange();
                },
                remove: function()
                {
                    this.selection.get();
                    this.sel.removeAllRanges();
                },
                save: function()
                {
                    this.selection.createMarkers();
                },
                createMarkers: function()
                {
                    this.selection.get();

                    var node1 = this.selection.getMarker(1);

                    this.selection.setMarker(this.range, node1, true);

                    if (this.range.collapsed === false)
                    {
                        var node2 = this.selection.getMarker(2);
                        this.selection.setMarker(this.range, node2, false);
                    }

                    this.savedSel = this.$editor.html();
                },
                getMarker: function(num)
                {
                    if (typeof num == 'undefined') num = 1;

                    return $('<span id="selection-marker-' + num + '" class="redactor-selection-marker"  data-verified="redactor">' + this.opts.invisibleSpace + '</span>')[0];
                },
                getMarkerAsHtml: function(num)
                {
                    return this.utils.getOuterHtml(this.selection.getMarker(num));
                },
                setMarker: function(range, node, type)
                {
                    range = range.cloneRange();

                    try {
                        range.collapse(type);
                        range.insertNode(node);
                    }
                    catch (e)
                    {
                        this.focus.setStart();
                    }
                },
                restore: function()
                {
                    var node1 = this.$editor.find('span#selection-marker-1');
                    var node2 = this.$editor.find('span#selection-marker-2');

                    if (node1.length !== 0 && node2.length !== 0)
                    {
                        this.caret.set(node1, 0, node2, 0);
                    }
                    else if (node1.length !== 0)
                    {
                        this.caret.set(node1, 0, node1, 0);
                    }
                    else
                    {
                        this.$editor.focus();
                    }

                    this.selection.removeMarkers();
                    this.savedSel = false;

                },
                removeMarkers: function()
                {
                    this.$editor.find('span.redactor-selection-marker').each(function(i,s)
                    {
                        var text = $(s).text().replace(/[\u200B-\u200D\uFEFF]/g, '');
                        if (text === '') $(s).remove();
                        else $(s).replaceWith(function() { return $(this).contents(); });
                    });
                },
                getText: function()
                {
                    this.selection.get();

                    return this.sel.toString();
                },
                getHtml: function()
                {
                    var html = '';

                    this.selection.get();
                    if (this.sel.rangeCount)
                    {
                        var container = document.createElement('div');
                        var len = this.sel.rangeCount;
                        for (var i = 0; i < len; ++i)
                        {
                            container.appendChild(this.sel.getRangeAt(i).cloneContents());
                        }

                        html = container.innerHTML;
                    }

                    return this.clean.onSync(html);
                },
                replaceWithHtml: function(html)
                {
                    html = this.selection.getMarkerAsHtml(1) + html + this.selection.getMarkerAsHtml(2);

                    this.selection.get();

                    if (window.getSelection && window.getSelection().getRangeAt)
                    {
                        this.range.deleteContents();
                        var div = document.createElement("div");
                        div.innerHTML = html;

                        var frag = document.createDocumentFragment(), child;
                        while ((child = div.firstChild))
                        {
                            frag.appendChild(child);
                        }

                        this.range.insertNode(frag);
                    }
                    else if (document.selection && document.selection.createRange)
                    {
                        this.range.pasteHTML(html);
                    }

                    this.selection.restore();
                    this.code.sync();
                }
            };
        },
        shortcuts: function()
        {
            return {
                init: function(e, key)
                {
                    // disable browser's hot keys for bold and italic
                    if (!this.opts.shortcuts)
                    {
                        if ((e.ctrlKey || e.metaKey) && (key === 66 || key === 73)) e.preventDefault();
                        return false;
                    }

                    $.each(this.opts.shortcuts, $.proxy(function(str, command)
                    {
                        var keys = str.split(',');
                        var len = keys.length;
                        for (var i = 0; i < len; i++)
                        {
                            if (typeof keys[i] === 'string')
                            {
                                this.shortcuts.handler(e, $.trim(keys[i]), $.proxy(function()
                                {
                                    var func;
                                    if (command.func.search(/\./) != '-1')
                                    {
                                        func = command.func.split('.');
                                        if (typeof this[func[0]] != 'undefined')
                                        {
                                            this[func[0]][func[1]].apply(this, command.params);
                                        }
                                    }
                                    else
                                    {
                                        this[command.func].apply(this, command.params);
                                    }

                                }, this));
                            }

                        }

                    }, this));
                },
                handler: function(e, keys, origHandler)
                {
                    // based on https://github.com/jeresig/jquery.hotkeys
                    var hotkeysSpecialKeys =
                    {
                        8: "backspace", 9: "tab", 10: "return", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause",
                        20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home",
                        37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del", 59: ";", 61: "=",
                        96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7",
                        104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111 : "/",
                        112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8",
                        120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 173: "-", 186: ";", 187: "=",
                        188: ",", 189: "-", 190: ".", 191: "/", 192: "`", 219: "[", 220: "\\", 221: "]", 222: "'"
                    };


                    var hotkeysShiftNums =
                    {
                        "`": "~", "1": "!", "2": "@", "3": "#", "4": "$", "5": "%", "6": "^", "7": "&",
                        "8": "*", "9": "(", "0": ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<",
                        ".": ">",  "/": "?",  "\\": "|"
                    };

                    keys = keys.toLowerCase().split(" ");
                    var special = hotkeysSpecialKeys[e.keyCode],
                        character = String.fromCharCode( e.which ).toLowerCase(),
                        modif = "", possible = {};

                    $.each([ "alt", "ctrl", "meta", "shift"], function(index, specialKey)
                    {
                        if (e[specialKey + 'Key'] && special !== specialKey)
                        {
                            modif += specialKey + '+';
                        }
                    });


                    if (special) possible[modif + special] = true;
                    if (character)
                    {
                        possible[modif + character] = true;
                        possible[modif + hotkeysShiftNums[character]] = true;

                        // "$" can be triggered as "Shift+4" or "Shift+$" or just "$"
                        if (modif === "shift+")
                        {
                            possible[hotkeysShiftNums[character]] = true;
                        }
                    }

                    for (var i = 0, len = keys.length; i < len; i++)
                    {
                        if (possible[keys[i]])
                        {
                            e.preventDefault();
                            return origHandler.apply(this, arguments);
                        }
                    }
                }
            };
        },
        tabifier: function()
        {
            return {
                get: function(code)
                {
                    if (!this.opts.tabifier) return code;

                    // clean setup
                    var ownLine = ['area', 'body', 'head', 'hr', 'i?frame', 'link', 'meta', 'noscript', 'style', 'script', 'table', 'tbody', 'thead', 'tfoot'];
                    var contOwnLine = ['li', 'dt', 'dt', 'h[1-6]', 'option', 'script'];
                    var newLevel = ['p', 'blockquote', 'div', 'dl', 'fieldset', 'form', 'frameset', 'map', 'ol', 'pre', 'select', 'td', 'th', 'tr', 'ul'];

                    this.tabifier.lineBefore = new RegExp('^<(/?' + ownLine.join('|/?' ) + '|' + contOwnLine.join('|') + ')[ >]');
                    this.tabifier.lineAfter = new RegExp('^<(br|/?' + ownLine.join('|/?' ) + '|/' + contOwnLine.join('|/') + ')[ >]');
                    this.tabifier.newLevel = new RegExp('^</?(' + newLevel.join('|' ) + ')[ >]');

                    var i = 0,
                    codeLength = code.length,
                    point = 0,
                    start = null,
                    end = null,
                    tag = '',
                    out = '',
                    cont = '';

                    this.tabifier.cleanlevel = 0;

                    for (; i < codeLength; i++)
                    {
                        point = i;

                        // if no more tags, copy and exit
                        if (-1 == code.substr(i).indexOf( '<' ))
                        {
                            out += code.substr(i);

                            return this.tabifier.finish(out);
                        }

                        // copy verbatim until a tag
                        while (point < codeLength && code.charAt(point) != '<')
                        {
                            point++;
                        }

                        if (i != point)
                        {
                            cont = code.substr(i, point - i);
                            if (!cont.match(/^\s{2,}$/g))
                            {
                                if ('\n' == out.charAt(out.length - 1)) out += this.tabifier.getTabs();
                                else if ('\n' == cont.charAt(0))
                                {
                                    out += '\n' + this.tabifier.getTabs();
                                    cont = cont.replace(/^\s+/, '');
                                }

                                out += cont;
                            }

                            if (cont.match(/\n/)) out += '\n' + this.tabifier.getTabs();
                        }

                        start = point;

                        // find the end of the tag
                        while (point < codeLength && '>' != code.charAt(point))
                        {
                            point++;
                        }

                        tag = code.substr(start, point - start);
                        i = point;

                        var t;

                        if ('!--' == tag.substr(1, 3))
                        {
                            if (!tag.match(/--$/))
                            {
                                while ('-->' != code.substr(point, 3))
                                {
                                    point++;
                                }
                                point += 2;
                                tag = code.substr(start, point - start);
                                i = point;
                            }

                            if ('\n' != out.charAt(out.length - 1)) out += '\n';

                            out += this.tabifier.getTabs();
                            out += tag + '>\n';
                        }
                        else if ('!' == tag[1])
                        {
                            out = this.tabifier.placeTag(tag + '>', out);
                        }
                        else if ('?' == tag[1])
                        {
                            out += tag + '>\n';
                        }
                        else if (t = tag.match(/^<(script|style|pre)/i))
                        {
                            t[1] = t[1].toLowerCase();
                            tag = this.tabifier.cleanTag(tag);
                            out = this.tabifier.placeTag(tag, out);
                            end = String(code.substr(i + 1)).toLowerCase().indexOf('</' + t[1]);

                            if (end)
                            {
                                cont = code.substr(i + 1, end);
                                i += end;
                                out += cont;
                            }
                        }
                        else
                        {
                            tag = this.tabifier.cleanTag(tag);
                            out = this.tabifier.placeTag(tag, out);
                        }
                    }

                    return this.tabifier.finish(out);
                },
                getTabs: function()
                {
                    var s = '';
                    for ( var j = 0; j < this.tabifier.cleanlevel; j++ )
                    {
                        s += '\t';
                    }

                    return s;
                },
                finish: function(code)
                {
                    code = code.replace(/\n\s*\n/g, '\n');
                    code = code.replace(/^[\s\n]*/, '');
                    code = code.replace(/[\s\n]*$/, '');
                    code = code.replace(/<script(.*?)>\n<\/script>/gi, '<script$1></script>');

                    this.tabifier.cleanlevel = 0;

                    return code;
                },
                cleanTag: function (tag)
                {
                    var tagout = '';
                    tag = tag.replace(/\n/g, ' ');
                    tag = tag.replace(/\s{2,}/g, ' ');
                    tag = tag.replace(/^\s+|\s+$/g, ' ');

                    var suffix = '';
                    if (tag.match(/\/$/))
                    {
                        suffix = '/';
                        tag = tag.replace(/\/+$/, '');
                    }

                    var m;
                    while (m = /\s*([^= ]+)(?:=((['"']).*?\3|[^ ]+))?/.exec(tag))
                    {
                        if (m[2]) tagout += m[1].toLowerCase() + '=' + m[2];
                        else if (m[1]) tagout += m[1].toLowerCase();

                        tagout += ' ';
                        tag = tag.substr(m[0].length);
                    }

                    return tagout.replace(/\s*$/, '') + suffix + '>';
                },
                placeTag: function (tag, out)
                {
                    var nl = tag.match(this.tabifier.newLevel);

                    if (tag.match(this.tabifier.lineBefore) || nl)
                    {
                        out = out.replace(/\s*$/, '');
                        out += '\n';
                    }

                    if (nl && '/' == tag.charAt(1)) this.tabifier.cleanlevel--;
                    if ('\n' == out.charAt(out.length - 1)) out += this.tabifier.getTabs();
                    if (nl && '/' != tag.charAt(1)) this.tabifier.cleanlevel++;

                    out += tag;

                    if (tag.match(this.tabifier.lineAfter) || tag.match(this.tabifier.newLevel))
                    {
                        out = out.replace(/ *$/, '');
                        //out += '\n';
                    }

                    return out;
                }
            };
        },
        tidy: function()
        {
            return {
                setupAllowed: function()
                {
                    if (this.opts.allowedTags) this.opts.deniedTags = false;
                    if (this.opts.allowedAttr) this.opts.removeAttr = false;

                    if (this.opts.linebreaks) return;

                    var tags = ['p', 'section'];
                    if (this.opts.allowedTags) this.tidy.addToAllowed(tags);
                    if (this.opts.deniedTags) this.tidy.removeFromDenied(tags);

                },
                addToAllowed: function(tags)
                {
                    var len = tags.length;
                    for (var i = 0; i < len; i++)
                    {
                        if ($.inArray(tags[i], this.opts.allowedTags) == -1)
                        {
                            this.opts.allowedTags.push(tags[i]);
                        }
                    }
                },
                removeFromDenied: function(tags)
                {
                    var len = tags.length;
                    for (var i = 0; i < len; i++)
                    {
                        var pos = $.inArray(tags[i], this.opts.deniedTags);
                        if (pos != -1)
                        {
                            this.opts.deniedTags.splice(pos, 1);
                        }
                    }
                },
                load: function(html, options)
                {
                    this.tidy.settings = {
                        deniedTags: this.opts.deniedTags,
                        allowedTags: this.opts.allowedTags,
                        removeComments: this.opts.removeComments,
                        replaceTags: this.opts.replaceTags,
                        replaceStyles: this.opts.replaceStyles,
                        removeDataAttr: this.opts.removeDataAttr,
                        removeAttr: this.opts.removeAttr,
                        allowedAttr: this.opts.allowedAttr,
                        removeWithoutAttr: this.opts.removeWithoutAttr,
                        removeEmpty: this.opts.removeEmpty
                    };

                    $.extend(this.tidy.settings, options);

                    html = this.tidy.removeComments(html);

                    // create container
                    this.tidy.$div = $('<div />').append(html);

                    // clean
                    this.tidy.replaceTags();
                    this.tidy.replaceStyles();
                    this.tidy.removeTags();

                    this.tidy.removeAttr();
                    this.tidy.removeEmpty();
                    this.tidy.removeParagraphsInLists();
                    this.tidy.removeDataAttr();
                    this.tidy.removeWithoutAttr();

                    html = this.tidy.$div.html();
                    this.tidy.$div.remove();

                    return html;
                },
                removeComments: function(html)
                {
                    if (!this.tidy.settings.removeComments) return html;

                    return html.replace(/<!--[\s\S]*?-->/gi, '');
                },
                replaceTags: function(html)
                {
                    if (!this.tidy.settings.replaceTags) return html;

                    var len = this.tidy.settings.replaceTags.length;
                    var replacement = [], rTags = [];
                    for (var i = 0; i < len; i++)
                    {
                        rTags.push(this.tidy.settings.replaceTags[i][1]);
                        replacement.push(this.tidy.settings.replaceTags[i][0]);
                    }

                    this.tidy.$div.find(replacement.join(',')).each($.proxy(function(n,s)
                    {
                        var tag = rTags[n];
                        $(s).replaceWith(function()
                        {
                            var replaced = $('<' + tag + ' />').append($(this).contents());

                            for (var i = 0; i < this.attributes.length; i++)
                            {
                                replaced.attr(this.attributes[i].name, this.attributes[i].value);
                            }

                            return replaced;
                        });

                    }, this));

                    return html;
                },
                replaceStyles: function()
                {
                    if (!this.tidy.settings.replaceStyles) return;

                    var len = this.tidy.settings.replaceStyles.length;
                    this.tidy.$div.find('span').each($.proxy(function(n,s)
                    {
                        var $el = $(s);
                        var style = $el.attr('style');
                        for (var i = 0; i < len; i++)
                        {
                            if (style && style.match(new RegExp('^' + this.tidy.settings.replaceStyles[i][0], 'i')))
                            {
                                var tagName = this.tidy.settings.replaceStyles[i][1];
                                $el.replaceWith(function()
                                {
                                    var tag = document.createElement(tagName);
                                    return $(tag).append($(this).contents());
                                });
                            }
                        }

                    }, this));

                },
                removeTags: function()
                {
                    if (!this.tidy.settings.deniedTags && this.tidy.settings.allowedTags)
                    {
                        this.tidy.$div.find('*').not(this.tidy.settings.allowedTags.join(',')).each(function(i, s)
                        {
                            if (s.innerHTML === '') $(s).remove();
                            else $(s).contents().unwrap();
                        });
                    }

                    if (this.tidy.settings.deniedTags)
                    {
                        this.tidy.$div.find(this.tidy.settings.deniedTags.join(',')).each(function(i, s)
                        {
                            if (s.innerHTML === '') $(s).remove();
                            else $(s).contents().unwrap();
                        });
                    }
                },
                removeAttr: function()
                {
                    var len;
                    if (!this.tidy.settings.removeAttr && this.tidy.settings.allowedAttr)
                    {

                        var allowedAttrTags = [], allowedAttrData = [];
                        len = this.tidy.settings.allowedAttr.length;
                        for (var i = 0; i < len; i++)
                        {
                            allowedAttrTags.push(this.tidy.settings.allowedAttr[i][0]);
                            allowedAttrData.push(this.tidy.settings.allowedAttr[i][1]);
                        }


                        this.tidy.$div.find('*').each($.proxy(function(n,s)
                        {
                            var $el = $(s);
                            var pos = $.inArray($el[0].tagName.toLowerCase(), allowedAttrTags);
                            var attributesRemove = this.tidy.removeAttrGetRemoves(pos, allowedAttrData, $el);

                            if (attributesRemove)
                            {
                                $.each(attributesRemove, function(z,f) {
                                    $el.removeAttr(f);
                                });
                            }
                        }, this));
                    }

                    if (this.tidy.settings.removeAttr)
                    {
                        len = this.tidy.settings.removeAttr.length;
                        for (var i = 0; i < len; i++)
                        {
                            var attrs = this.tidy.settings.removeAttr[i][1];
                            if ($.isArray(attrs)) attrs = attrs.join(' ');

                            this.tidy.$div.find(this.tidy.settings.removeAttr[i][0]).removeAttr(attrs);
                        }
                    }

                },
                removeAttrGetRemoves: function(pos, allowed, $el)
                {
                    var attributesRemove = [];

                    // remove all attrs
                    if (pos == -1)
                    {
                        $.each($el[0].attributes, function(i, item)
                        {
                            attributesRemove.push(item.name);
                        });

                    }
                    // allow all attrs
                    else if (allowed[pos] == '*')
                    {
                        attributesRemove = [];
                    }
                    // allow specific attrs
                    else
                    {
                        $.each($el[0].attributes, function(i, item)
                        {
                            if ($.isArray(allowed[pos]))
                            {
                                if ($.inArray(item.name, allowed[pos]) == -1)
                                {
                                    attributesRemove.push(item.name);
                                }
                            }
                            else if (allowed[pos] != item.name)
                            {
                                attributesRemove.push(item.name);
                            }

                        });
                    }

                    return attributesRemove;
                },
                removeAttrs: function (el, regex)
                {
                    regex = new RegExp(regex, "g");
                    return el.each(function()
                    {
                        var self = $(this);
                        var len = this.attributes.length - 1;
                        for (var i = len; i >= 0; i--)
                        {
                            var item = this.attributes[i];
                            if (item && item.specified && item.name.search(regex)>=0)
                            {
                                self.removeAttr(item.name);
                            }
                        }
                    });
                },
                removeEmpty: function()
                {
                    if (!this.tidy.settings.removeEmpty) return;

                    this.tidy.$div.find(this.tidy.settings.removeEmpty.join(',')).each(function()
                    {
                        var $el = $(this);
                        var text = $el.text();
                        text = text.replace(/[\u200B-\u200D\uFEFF]/g, '');
                        text = text.replace(/&nbsp;/gi, '');
                        text = text.replace(/\s/g, '');

                        if (text === '' && $el.children().length === 0)
                        {
                            $el.remove();
                        }
                    });
                },
                removeParagraphsInLists: function()
                {
                    this.tidy.$div.find('li p').contents().unwrap();
                },
                removeDataAttr: function()
                {
                    if (!this.tidy.settings.removeDataAttr) return;

                    var tags = this.tidy.settings.removeDataAttr;
                    if ($.isArray(this.tidy.settings.removeDataAttr)) tags = this.tidy.settings.removeDataAttr.join(',');

                    this.tidy.removeAttrs(this.tidy.$div.find(tags), '^(data-)');

                },
                removeWithoutAttr: function()
                {
                    if (!this.tidy.settings.removeWithoutAttr) return;

                    this.tidy.$div.find(this.tidy.settings.removeWithoutAttr.join(',')).each(function()
                    {
                        if (this.attributes.length === 0)
                        {
                            $(this).contents().unwrap();
                        }
                    });
                }
            };
        },
        toolbar: function()
        {
            return {
                init: function()
                {
                    return {
                        html:
                        {
                            title: this.lang.get('html'),
                            func: 'code.toggle'
                        },
                        formatting:
                        {
                            title: this.lang.get('formatting'),
                            dropdown:
                            {
                                p:
                                {
                                    title: this.lang.get('paragraph'),
                                    func: 'block.format'
                                },
                                blockquote:
                                {
                                    title: this.lang.get('quote'),
                                    func: 'block.format'
                                },
                                pre:
                                {
                                    title: this.lang.get('code'),
                                    func: 'block.format'
                                },
                                h1:
                                {
                                    title: this.lang.get('header1'),
                                    func: 'block.format'
                                },
                                h2:
                                {
                                    title: this.lang.get('header2'),
                                    func: 'block.format'
                                },
                                h3:
                                {
                                    title: this.lang.get('header3'),
                                    func: 'block.format'
                                },
                                h4:
                                {
                                    title: this.lang.get('header4'),
                                    func: 'block.format'
                                },
                                h5:
                                {
                                    title: this.lang.get('header5'),
                                    func: 'block.format'
                                }
                            }
                        },
                        bold:
                        {
                            title: this.lang.get('bold'),
                            func: 'inline.format'
                        },
                        italic:
                        {
                            title: this.lang.get('italic'),
                            func: 'inline.format'
                        },
                        deleted:
                        {
                            title: this.lang.get('deleted'),
                            func: 'inline.format'
                        },
                        underline:
                        {
                            title: this.lang.get('underline'),
                            func: 'inline.format'
                        },
                        unorderedlist:
                        {
                            title: '&bull; ' + this.lang.get('unorderedlist'),
                            func: 'list.toggle'
                        },
                        orderedlist:
                        {
                            title: '1. ' + this.lang.get('orderedlist'),
                            func: 'list.toggle'
                        },
                        outdent:
                        {
                            title: '< ' + this.lang.get('outdent'),
                            func: 'indent.decrease'
                        },
                        indent:
                        {
                            title: '> ' + this.lang.get('indent'),
                            func: 'indent.increase'
                        },
                        image:
                        {
                            title: this.lang.get('image'),
                            func: 'image.show'
                        },
                        file:
                        {
                            title: this.lang.get('file'),
                            func: 'file.show'
                        },
                        link:
                        {
                            title: this.lang.get('link'),
                            dropdown:
                            {
                                link:
                                {
                                    title: this.lang.get('link_insert'),
                                    func: 'link.show'
                                },
                                unlink:
                                {
                                    title: this.lang.get('unlink'),
                                    func: 'link.unlink'
                                }
                            }
                        },
                        alignment:
                        {
                            title: this.lang.get('alignment'),
                            dropdown:
                            {
                                left:
                                {
                                    title: this.lang.get('align_left'),
                                    func: 'alignment.left'
                                },
                                center:
                                {
                                    title: this.lang.get('align_center'),
                                    func: 'alignment.center'
                                },
                                right:
                                {
                                    title: this.lang.get('align_right'),
                                    func: 'alignment.right'
                                },
                                justify:
                                {
                                    title: this.lang.get('align_justify'),
                                    func: 'alignment.justify'
                                }
                            }
                        },
                        horizontalrule:
                        {
                            title: this.lang.get('horizontalrule'),
                            func: 'line.insert'
                        }
                    };
                },
                build: function()
                {
                    this.toolbar.hideButtons();
                    this.toolbar.hideButtonsOnMobile();
                    this.toolbar.isButtonSourceNeeded();

                    if (this.opts.buttons.length === 0) return;

                    this.$toolbar = this.toolbar.createContainer();

                    this.toolbar.setOverflow();
                    this.toolbar.append();
                    this.toolbar.setFormattingTags();
                    this.toolbar.loadButtons();
                    this.toolbar.setFixed();

                    // buttons response
                    if (this.opts.activeButtons)
                    {
                        this.$editor.on('mouseup.redactor keyup.redactor focus.redactor', $.proxy(this.observe.buttons, this));
                    }

                },
                createContainer: function()
                {
                    return $('<ul>').addClass('redactor-toolbar').attr('id', 'redactor-toolbar-' + this.uuid);
                },
                setFormattingTags: function()
                {
                    $.each(this.opts.toolbar.formatting.dropdown, $.proxy(function (i, s)
                    {
                        if ($.inArray(i, this.opts.formatting) == -1) delete this.opts.toolbar.formatting.dropdown[i];
                    }, this));

                },
                loadButtons: function()
                {
                    $.each(this.opts.buttons, $.proxy(function(i, btnName)
                    {
                        if (!this.opts.toolbar[btnName]) return;

                        if (btnName === 'file')
                        {
                             if (this.opts.fileUpload === false) return;
                             else if (!this.opts.fileUpload && this.opts.s3 === false) return;
                        }

                        if (btnName === 'image')
                        {
                             if (this.opts.imageUpload === false) return;
                             else if (!this.opts.imageUpload && this.opts.s3 === false) return;
                        }

                        var btnObject = this.opts.toolbar[btnName];
                        this.$toolbar.append($('<li>').append(this.button.build(btnName, btnObject)));

                    }, this));
                },
                append: function()
                {
                    if (this.opts.toolbarExternal)
                    {
                        this.$toolbar.addClass('redactor-toolbar-external');
                        $(this.opts.toolbarExternal).html(this.$toolbar);
                    }
                    else
                    {
                        this.$box.prepend(this.$toolbar);
                    }
                },
                setFixed: function()
                {
                    if (!this.utils.isDesktop()) return;
                    if (this.opts.toolbarExternal) return;
                    if (!this.opts.toolbarFixed) return;

                    this.toolbar.observeScroll();
                    $(this.opts.toolbarFixedTarget).on('scroll.redactor.' + this.uuid, $.proxy(this.toolbar.observeScroll, this));

                },
                setOverflow: function()
                {
                    if (this.utils.isMobile() && this.opts.toolbarOverflow)
                    {
                        this.$toolbar.addClass('redactor-toolbar-overflow');
                    }
                },
                isButtonSourceNeeded: function()
                {
                    if (this.opts.source) return;

                    var index = this.opts.buttons.indexOf('html');
                    if (index !== -1)
                    {
                        this.opts.buttons.splice(index, 1);
                    }
                },
                hideButtons: function()
                {
                    if (this.opts.buttonsHide.length === 0) return;

                    $.each(this.opts.buttonsHide, $.proxy(function(i, s)
                    {
                        var index = this.opts.buttons.indexOf(s);
                        this.opts.buttons.splice(index, 1);

                    }, this));
                },
                hideButtonsOnMobile: function()
                {
                    if (!this.utils.isMobile() || this.opts.buttonsHideOnMobile.length === 0) return;

                    $.each(this.opts.buttonsHideOnMobile, $.proxy(function(i, s)
                    {
                        var index = this.opts.buttons.indexOf(s);
                        this.opts.buttons.splice(index, 1);

                    }, this));
                },
                observeScroll: function()
                {
                    var scrollTop = $(this.opts.toolbarFixedTarget).scrollTop();
                    var boxTop = 1;

                    if (this.opts.toolbarFixedTarget === document)
                    {
                        boxTop = this.$box.offset().top;
                    }

                    if (scrollTop > boxTop)
                    {
                        this.toolbar.observeScrollEnable(scrollTop, boxTop);
                    }
                    else
                    {
                        this.toolbar.observeScrollDisable();
                    }
                },
                observeScrollEnable: function(scrollTop, boxTop)
                {
                    var top = this.opts.toolbarFixedTopOffset + scrollTop - boxTop;
                    var left = 0;
                    var end = boxTop + this.$box.height() - 32;
                    var width = this.$box.innerWidth();

                    this.$toolbar.addClass('toolbar-fixed-box');
                    this.$toolbar.css({
                        position: 'absolute',
                        width: width,
                        top: top + 'px',
                        left: left
                    });

                    this.toolbar.setDropdownsFixed();
                    this.$toolbar.css('visibility', (scrollTop < end) ? 'visible' : 'hidden');
                },
                observeScrollDisable: function()
                {
                    this.$toolbar.css({
                        position: 'relative',
                        width: 'auto',
                        top: 0,
                        left: 0,
                        visibility: 'visible'
                    });

                    this.toolbar.unsetDropdownsFixed();
                    this.$toolbar.removeClass('toolbar-fixed-box');


                },
                setDropdownsFixed: function()
                {
                    var top = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset;
                    var position = 'fixed';
                    if (this.opts.toolbarFixedTarget !== document)
                    {
                        top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top) + this.opts.toolbarFixedTopOffset;
                        position = 'absolute';
                    }

                    $('.redactor-dropdown-' + this.uuid).each(function()
                    {
                        $(this).css({ position: position, top: top + 'px' });
                    });
                },
                unsetDropdownsFixed: function()
                {
                    var top = (this.$toolbar.innerHeight() + this.$toolbar.offset().top);
                    $('.redactor-dropdown-' + this.uuid).each(function()
                    {
                        $(this).css({ position: 'absolute', top: top + 'px' });
                    });
                }
            };
        },
        upload: function()
        {
            return {
                init: function(id, url, callback)
                {
                    this.upload.direct = false;
                    this.upload.callback = callback;
                    this.upload.url = url;
                    this.upload.$el = $(id);
                    this.upload.$droparea = $('<div id="redactor-droparea" />');

                    this.upload.$placeholdler = $('<div id="redactor-droparea-placeholder" />').text(this.lang.get('upload_label'));
                    this.upload.$input = $('<input type="file" name="file" />');

                    this.upload.$placeholdler.append(this.upload.$input);
                    this.upload.$droparea.append(this.upload.$placeholdler);
                    this.upload.$el.append(this.upload.$droparea);

                    this.upload.$droparea.off('redactor.upload');
                    this.upload.$input.off('redactor.upload');

                    this.upload.$droparea.on('dragover.redactor.upload', $.proxy(this.upload.onDrag, this));
                    this.upload.$droparea.on('dragleave.redactor.upload', $.proxy(this.upload.onDragLeave, this));

                    // change
                    this.upload.$input.on('change.redactor.upload', $.proxy(function(e)
                    {
                        e = e.originalEvent || e;
                        this.upload.traverseFile(this.upload.$input[0].files[0], e);
                    }, this));

                    // drop
                    this.upload.$droparea.on('drop.redactor.upload', $.proxy(function(e)
                    {
                        e.preventDefault();

                        this.upload.$droparea.removeClass('drag-hover').addClass('drag-drop');
                        this.upload.onDrop(e);

                    }, this));
                },
                directUpload: function(file, e)
                {
                    this.upload.direct = true;
                    this.upload.traverseFile(file, e);
                },
                onDrop: function(e)
                {
                    e = e.originalEvent || e;
                    var files = e.dataTransfer.files;

                    this.upload.traverseFile(files[0], e);
                },
                traverseFile: function(file, e)
                {
                    if (this.opts.s3)
                    {
                        this.upload.setConfig(file);
                        this.upload.s3uploadFile(file);
                        return;
                    }

                    var formData = !!window.FormData ? new FormData() : null;
                    if (window.FormData)
                    {
                        this.upload.setConfig(file);

                        var name = (this.upload.type == 'image') ? this.opts.imageUploadParam : this.opts.fileUploadParam;
                        formData.append(name, file);
                    }

                    this.progress.show();
                    this.core.setCallback('uploadStart', e, formData);
                    this.upload.sendData(formData, e);
                },
                setConfig: function(file)
                {
                    this.upload.getType(file);

                    if (this.upload.direct)
                    {
                        this.upload.url = (this.upload.type == 'image') ? this.opts.imageUpload : this.opts.fileUpload;
                        this.upload.callback = (this.upload.type == 'image') ? this.image.insert : this.file.insert;
                    }
                },
                getType: function(file)
                {
                    this.upload.type = 'image';
                    if (this.opts.imageTypes.indexOf(file.type) == -1)
                    {
                        this.upload.type = 'file';
                    }
                },
                getHiddenFields: function(obj, fd)
                {
                    if (obj === false || typeof obj !== 'object') return fd;

                    $.each(obj, $.proxy(function(k, v)
                    {
                        if (v !== null && v.toString().indexOf('#') === 0) v = $(v).val();
                        fd.append(k, v);

                    }, this));

                    return fd;

                },
                sendData: function(formData, e)
                {
                    // append hidden fields
                    if (this.upload.type == 'image')
                    {
                        formData = this.upload.getHiddenFields(this.opts.uploadImageFields, formData);
                        formData = this.upload.getHiddenFields(this.upload.imageFields, formData);
                    }
                    else
                    {
                        formData = this.upload.getHiddenFields(this.opts.uploadFileFields, formData);
                        formData = this.upload.getHiddenFields(this.upload.fileFields, formData);
                    }

                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', this.upload.url);

                    // complete
                    xhr.onreadystatechange = $.proxy(function()
                    {
                        if (xhr.readyState == 4)
                        {
                            var data = xhr.responseText;

                            data = data.replace(/^\[/, '');
                            data = data.replace(/\]$/, '');

                            var json;
                            try
                            {
                                json = (typeof data === 'string' ? $.parseJSON(data) : data);
                            }
                            catch(err)
                            {
                                json = {
                                    error: true
                                };
                            }


                            this.progress.hide();

                            if (!this.upload.direct)
                            {
                                this.upload.$droparea.removeClass('drag-drop');
                            }

                            this.upload.callback(json, this.upload.direct, e);
                        }
                    }, this);


                    /*
                    xhr.upload.onprogress = $.proxy(function(e)
                    {
                        if (e.lengthComputable)
                        {
                            var complete = (e.loaded / e.total * 100 | 0);
                            //progress.value = progress.innerHTML = complete;
                        }

                    }, this);
                    */


                    xhr.send(formData);
                },
                onDrag: function(e)
                {
                    e.preventDefault();
                    this.upload.$droparea.addClass('drag-hover');
                },
                onDragLeave: function(e)
                {
                    e.preventDefault();
                    this.upload.$droparea.removeClass('drag-hover');
                },
                clearImageFields: function()
                {
                    this.upload.imageFields = {};
                },
                addImageFields: function(name, value)
                {
                    this.upload.imageFields[name] = value;
                },
                removeImageFields: function(name)
                {
                    delete this.upload.imageFields[name];
                },
                clearFileFields: function()
                {
                    this.upload.fileFields = {};
                },
                addFileFields: function(name, value)
                {
                    this.upload.fileFields[name] = value;
                },
                removeFileFields: function(name)
                {
                    delete this.upload.fileFields[name];
                },


                // S3
                s3uploadFile: function(file)
                {
                    this.upload.s3executeOnSignedUrl(file, $.proxy(function(signedURL)
                    {
                        this.upload.s3uploadToS3(file, signedURL);
                    }, this));
                },
                s3executeOnSignedUrl: function(file, callback)
                {
                    var xhr = new XMLHttpRequest();

                    var mark = '?';
                    if (this.opts.s3.search(/\?/) != '-1') mark = '&';

                    xhr.open('GET', this.opts.s3 + mark + 'name=' + file.name + '&type=' + file.type, true);

                    // Hack to pass bytes through unprocessed.
                    if (xhr.overrideMimeType) xhr.overrideMimeType('text/plain; charset=x-user-defined');

                    var that = this;
                    xhr.onreadystatechange = function(e)
                    {
                        if (this.readyState == 4 && this.status == 200)
                        {
                            that.progress.show();
                            callback(decodeURIComponent(this.responseText));
                        }
                        else if (this.readyState == 4 && this.status != 200)
                        {
                            //setProgress(0, 'Could not contact signing script. Status = ' + this.status);
                        }
                    };

                    xhr.send();
                },
                s3createCORSRequest: function(method, url)
                {
                    var xhr = new XMLHttpRequest();
                    if ("withCredentials" in xhr)
                    {
                        xhr.open(method, url, true);
                    }
                    else if (typeof XDomainRequest != "undefined")
                    {
                        xhr = new XDomainRequest();
                        xhr.open(method, url);
                    }
                    else
                    {
                        xhr = null;
                    }

                    return xhr;
                },
                s3uploadToS3: function(file, url)
                {
                    var xhr = this.upload.s3createCORSRequest('PUT', url);
                    if (!xhr)
                    {
                        //setProgress(0, 'CORS not supported');
                    }
                    else
                    {
                        xhr.onload = $.proxy(function()
                        {
                            if (xhr.status == 200)
                            {
                                //setProgress(100, 'Upload completed.');

                                this.progress.hide();

                                var s3file = url.split('?');

                                if (!s3file[0])
                                {
                                     // url parsing is fail
                                     return false;
                                }


                                if (!this.upload.direct)
                                {
                                    this.upload.$droparea.removeClass('drag-drop');
                                }

                                var json = { filelink: s3file[0] };
                                if (this.upload.type == 'file')
                                {
                                    var arr = s3file[0].split('/');
                                    json.filename = arr[arr.length-1];
                                }

                                this.upload.callback(json, this.upload.direct, false);


                            }
                            else
                            {
                                //setProgress(0, 'Upload error: ' + xhr.status);
                            }
                        }, this);

                        xhr.onerror = function()
                        {
                            //setProgress(0, 'XHR error.');
                        };

                        xhr.upload.onprogress = function(e)
                        {
                            /*
                            if (e.lengthComputable)
                            {
                                var percentLoaded = Math.round((e.loaded / e.total) * 100);
                                setProgress(percentLoaded, percentLoaded == 100 ? 'Finalizing.' : 'Uploading.');
                            }
                            */
                        };

                        xhr.setRequestHeader('Content-Type', file.type);
                        xhr.setRequestHeader('x-amz-acl', 'public-read');

                        xhr.send(file);
                    }
                }
            };
        },
        utils: function()
        {
            return {
                isMobile: function()
                {
                    return /(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent);
                },
                isDesktop: function()
                {
                    return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent);
                },
                isString: function(obj)
                {
                    return Object.prototype.toString.call(obj) == '[object String]';
                },
                isEmpty: function(html, removeEmptyTags)
                {
                    html = html.replace(/[\u200B-\u200D\uFEFF]/g, '');
                    html = html.replace(/&nbsp;/gi, '');
                    html = html.replace(/<\/?br\s?\/?>/g, '');
                    html = html.replace(/\s/g, '');
                    html = html.replace(/^<p>[^\W\w\D\d]*?<\/p>$/i, '');
                    html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');
                    html = html.replace(/<source(.*?[^>])>$/i, 'source');

                    // remove empty tags
                    if (removeEmptyTags !== false)
                    {
                        html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, '');
                        html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, '');
                    }

                    html = $.trim(html);

                    return html === '';
                },
                normalize: function(str)
                {
                    if (typeof(str) === 'undefined') return 0;
                    return parseInt(str.replace('px',''), 10);
                },
                hexToRgb: function(hex)
                {
                    if (typeof hex == 'undefined') return;
                    if (hex.search(/^#/) == -1) return hex;

                    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                    hex = hex.replace(shorthandRegex, function(m, r, g, b)
                    {
                        return r + r + g + g + b + b;
                    });

                    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                    return 'rgb(' + parseInt(result[1], 16) + ', ' + parseInt(result[2], 16) + ', ' + parseInt(result[3], 16) + ')';
                },
                getOuterHtml: function(el)
                {
                    return $('<div>').append($(el).eq(0).clone()).html();
                },
                getAlignmentElement: function(el)
                {
                    if ($.inArray(el.tagName, this.opts.alignmentTags) !== -1)
                    {
                        return $(el);
                    }
                    else
                    {
                        return $(el).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]);
                    }
                },
                removeEmptyAttr: function(el, attr)
                {
                    var $el = $(el);
                    if (typeof $el.attr(attr) == 'undefined')
                    {
                        return true;
                    }

                    if ($el.attr(attr) === '')
                    {
                        $el.removeAttr(attr);
                        return true;
                    }

                    return false;
                },
                removeEmpty: function(i, s)
                {
                    var $s = $(s);

                    $s.find('.redactor-invisible-space').removeAttr('style').removeAttr('class');

                    if ($s.find('hr, br, img, iframe, source').length !== 0) return;
                    var text = $.trim($s.text());
                    if (this.utils.isEmpty(text, false))
                    {
                        $s.remove();
                    }
                },

                // save and restore scroll
                saveScroll: function()
                {
                    this.saveEditorScroll = this.$editor.scrollTop();
                    this.saveBodyScroll = $(window).scrollTop();

                    if (this.opts.scrollTarget) this.saveTargetScroll = $(this.opts.scrollTarget).scrollTop();
                },
                restoreScroll: function()
                {
                    if (typeof this.saveScroll === 'undefined' && typeof this.saveBodyScroll === 'undefined') return;

                    $(window).scrollTop(this.saveBodyScroll);
                    this.$editor.scrollTop(this.saveEditorScroll);

                    if (this.opts.scrollTarget) $(this.opts.scrollTarget).scrollTop(this.saveTargetScroll);
                },

                // get invisible space element
                createSpaceElement: function()
                {
                    var space = document.createElement('span');
                    space.className = 'redactor-invisible-space';
                    space.innerHTML = this.opts.invisibleSpace;

                    return space;
                },

                // replace
                removeInlineTags: function(node)
                {
                    var tags = this.opts.inlineTags;
                    tags.push('span');

                    if (node.tagName == 'PRE') tags.push('a');

                    $(node).find(tags.join(',')).not('span.redactor-selection-marker').contents().unwrap();
                },
                replaceWithContents: function(node, removeInlineTags)
                {
                    var self = this;
                    $(node).replaceWith(function()
                    {
                        if (removeInlineTags === true) self.utils.removeInlineTags(this);

                        return $(this).contents();
                    });

                    return $(node);
                },
                replaceToTag: function(node, tag, removeInlineTags)
                {
                    var replacement;
                    var self = this;
                    $(node).replaceWith(function()
                    {
                        replacement = $('<' + tag + ' />').append($(this).contents());

                        for (var i = 0; i < this.attributes.length; i++)
                        {
                            replacement.attr(this.attributes[i].name, this.attributes[i].value);
                        }

                        if (removeInlineTags === true) self.utils.removeInlineTags(replacement);

                        return replacement;
                    });

                    return replacement;
                },

                // start and end of element
                isStartOfElement: function()
                {
                    var block = this.selection.getBlock();
                    if (!block) return false;

                    var offset = this.caret.getOffsetOfElement(block);

                    return (offset === 0) ? true : false;
                },
                isEndOfElement: function(element)
                {
                    if (typeof element == 'undefined')
                    {
                        var element = this.selection.getBlock();
                        if (!element) return false;
                    }

                    var offset = this.caret.getOffsetOfElement(element);
                    var text = $.trim($(element).text()).replace(/\n\r\n/g, '');

                    return (offset == text.length) ? true : false;
                },
                isEndOfEditor: function()
                {
                    var block = this.$editor[0];

                    var offset = this.caret.getOffsetOfElement(block);
                    var text = $.trim($(block).html().replace(/(<([^>]+)>)/gi,''));

                    return (offset == text.length) ? true : false;
                },

                // test blocks
                isBlock: function(block)
                {
                    block = block[0] || block;

                    return block && this.utils.isBlockTag(block.tagName);
                },
                isBlockTag: function(tag)
                {
                    if (typeof tag == 'undefined') return false;

                    return this.reIsBlock.test(tag);
                },

                // tag detection
                isTag: function(current, tag)
                {
                    var element = $(current).closest(tag);
                    if (element.length == 1)
                    {
                        return element[0];
                    }

                    return false;
                },

                // select all
                isSelectAll: function()
                {
                    return this.selectAll;
                },
                enableSelectAll: function()
                {
                    this.selectAll = true;
                },
                disableSelectAll: function()
                {
                    this.selectAll = false;
                },

                // parents detection
                isRedactorParent: function(el)
                {
                    if (!el)
                    {
                        return false;
                    }

                    if ($(el).parents('.redactor-editor').length === 0 || $(el).hasClass('redactor-editor'))
                    {
                        return false;
                    }

                    return el;
                },
                isCurrentOrParentHeader: function()
                {
                    return this.utils.isCurrentOrParent(['H1', 'H2', 'H3', 'H4', 'H5', 'H6']);
                },
                isCurrentOrParent: function(tagName)
                {
                    var parent = this.selection.getParent();
                    var current = this.selection.getCurrent();

                    if ($.isArray(tagName))
                    {
                        var matched = 0;
                        $.each(tagName, $.proxy(function(i, s)
                        {
                            if (this.utils.isCurrentOrParentOne(current, parent, s))
                            {
                                matched++;
                            }
                        }, this));

                        return (matched === 0) ? false : true;
                    }
                    else
                    {
                        return this.utils.isCurrentOrParentOne(current, parent, tagName);
                    }
                },
                isCurrentOrParentOne: function(current, parent, tagName)
                {
                    tagName = tagName.toUpperCase();

                    return parent && parent.tagName === tagName ? parent : current && current.tagName === tagName ? current : false;
                },


                // browsers detection
                isOldIe: function()
                {
                    return (this.utils.browser('msie') && parseInt(this.utils.browser('version'), 10) < 9) ? true : false;
                },
                isLessIe10: function()
                {
                    return (this.utils.browser('msie') && parseInt(this.utils.browser('version'), 10) < 10) ? true : false;
                },
                isIe11: function()
                {
                    return !!navigator.userAgent.match(/Trident\/7\./);
                },
                browser: function(browser)
                {
                    var ua = navigator.userAgent.toLowerCase();
                    var match = /(opr)[\/]([\w.]+)/.exec( ua ) ||
                    /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
                    /(webkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(ua) ||
                    /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
                    /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
                    /(msie) ([\w.]+)/.exec( ua ) ||
                    ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec( ua ) ||
                    ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
                    [];

                    if (browser == 'safari') return (typeof match[3] != 'undefined') ? match[3] == 'safari' : false;
                    if (browser == 'version') return match[2];
                    if (browser == 'webkit') return (match[1] == 'chrome' || match[1] == 'opr' || match[1] == 'webkit');
                    if (match[1] == 'rv') return browser == 'msie';
                    if (match[1] == 'opr') return browser == 'webkit';

                    return browser == match[1];
                }
            };
        }
    };

    $(window).on('load.tools.redactor', function()
    {
        $('[data-tools="redactor"]').redactor();
    });

    // constructor
    Redactor.prototype.init.prototype = Redactor.prototype;

    // LINKIFY
    $.Redactor.fn.formatLinkify = function(protocol, convertLinks, convertUrlLinks, convertImageLinks, convertVideoLinks, linkSize)
    {
        var urlCheck = '((?:http[s]?:\\/\\/(?:www\\.)?|www\\.){1}(?:[0-9A-Za-z\\-%_]+\\.)+[a-zA-Z]{2,}(?::[0-9]+)?(?:(?:/[0-9A-Za-z\\-#\\.%\+_]*)+)?(?:\\?(?:[0-9A-Za-z\\-\\.%_]+(?:=[0-9A-Za-z\\-\\.%_\\+]*)?)?(?:&(?:[0-9A-Za-z\\-\\.%_]+(?:=[0-9A-Za-z\\-\\.%_\\+]*)?)?)*)?(?:#[0-9A-Za-z\\-\\.%_\\+=\\?&;]*)?)';
        var regex = new RegExp(urlCheck, 'gi');
        var rProtocol = /(https?|ftp):\/\//i;
        var urlImage = new RegExp('(?:([^:/?#]+):)?(?:\/\/([^/?#]*))?([^?#]*\\.(?:jpg|gif|png))(?:\\?([^#]*))?(?:#(.*))?', 'gi');

        var childNodes = (this.$editor ? this.$editor[0] : this).childNodes, i = childNodes.length;
        while (i--)
        {
            var n = childNodes[i];

            if (n.nodeType === 3 && n.parentNode !== 'PRE')
            {
                var html = n.nodeValue;

                // youtube & vimeo
                if (convertVideoLinks && html)
                {
                    var iframeStart = '<iframe width="500" height="281" src="',
                        iframeEnd = '" frameborder="0" allowfullscreen></iframe>';

                    if (html.match(reUrlYoutube))
                    {
                        html = html.replace(reUrlYoutube, iframeStart + '//www.youtube.com/embed/$1' + iframeEnd);
                        $(n).after(html).remove();
                    }
                    else if (html.match(reUrlVimeo))
                    {
                        html = html.replace(reUrlVimeo, iframeStart + '//player.vimeo.com/video/$2' + iframeEnd);
                        $(n).after(html).remove();
                    }
                }

                // image
                if (convertImageLinks && html && html.match(urlImage))
                {
                    var matches = html.match(urlImage);
                    html = html.replace(urlImage, '<img src="' + matches + '" />');

                    $(n).after(html).remove();
                    return;
                }

                // link
                if (html.search(/\$/g) != -1) html = html.replace(/\$/g, '&#36;');

                var matches = html.match(regex);
                if (convertUrlLinks && html && matches)
                {
                    var len = matches.length;
                    for (var z = 0; z < len; z++)
                    {
                        // remove dot in the end
                        if (matches[z].match(/\.$/) !== null) matches[z] = matches[z].replace(/\.$/, '');

                        var href = matches[z];
                        var text = href;

                        var space = '';
                        if (href.match(/\s$/) !== null) space = ' ';

                        var addProtocol = protocol + '://';
                        if (href.match(rProtocol) !== null) addProtocol = '';

                        if (text.length > linkSize) text = text.substring(0, linkSize) + '...';
                        text = text.replace(/&#36;/g, '$').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');

                        // buffer
                        var buffer = [];
                        var links = html.match('<a(.*?)</a>');
                        if (links !== null)
                        {
                            var len = links.length;
                            for (i = 0; i < len; i++)
                            {
                                buffer[i] = links[i];
                                html = html.replace(links[i], '{abuffer' + i + '}');
                            }
                        }

                        html = html.replace(href, '<a href=\"' + addProtocol + $.trim(href) + '\">' + $.trim(text) + '</a>' + space);

                        // rebuffer
                        $.each(buffer, function(i,s)
                        {
                            html = html.replace('{abuffer' + i + '}', s);
                        });
                    }

                    $(n).after(html).remove();
                }
            }
            else if (n.nodeType === 1 && !/^(pre|a|button|textarea)$/i.test(n.tagName))
            {
                $.Redactor.fn.formatLinkify.call(n, protocol, convertLinks, convertUrlLinks, convertImageLinks, convertVideoLinks, linkSize);
            }
        }
    };

})(jQuery);
define("redactor", function(){});


define('text!scripts/redactor/ueditor-templates.html',[],function () { return '<div>\n<!--\n\tWrap everything in a div to convert this file\'s content in a jquery element\n\tso it is